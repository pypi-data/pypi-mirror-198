Metadata-Version: 2.1
Name: declback
Version: 1.1.0
Summary: Declarative backend framework
Author-email: Kamaletdinov Karim <450906k@gmail.com>
License: Copyright (c) 2023 Karim Kamaletdinov
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
Project-URL: Homepage, https://github.com/declback/declback-py
Keywords: feed,reader,tutorial
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Requires-Python: >=3.10
Description-Content-Type: text/markdown
Provides-Extra: dev
License-File: LICENSE

# Declback
## A declarative python backend framework

## Quickstart with pure Declback
1. Install the library via pip
```bash
pip install declback
```
2. Import it
```python
from declback import Trigger, chain
```
3. Create a functions to run inside chain
```python
def function_one():
    return "hello"
def function_two(message):
    return message + " world"
def function_three(full_message):
    print(full_message)
```
4. Create a Trigger instance
```python
trigger = Trigger()
```
5. Build a chain from your functions
```python
chain(trigger, function_one, function_two, function_three)
```
5. Run your trigger
```python
# run your trigger when you want to run your chain
trigger.run()
```
