# generated by datamodel-codegen:
#   filename:  oscal_profile_schema.json
#   timestamp: 2023-03-16T10:34:01+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Annotated, Any, Dict, List, Optional

from pydantic import AnyUrl, EmailStr, Extra, Field
from pydantic import BaseModel as PydanticBaseModel


class BaseModel(PydanticBaseModel):
    class Config:
        allow_population_by_field_name = True


class CombinationMethod(Enum):
    use_first = "use-first"
    merge = "merge"
    keep = "keep"


class CombinationRule(BaseModel):
    class Config:
        extra = Extra.forbid

    method: Annotated[
        Optional[CombinationMethod],
        Field(
            description="How clashing controls should be handled",
            title="Combination method",
        ),
    ] = None


class Order(Enum):
    keep = "keep"
    ascending = "ascending"
    descending = "descending"


class IncludeContainedControlsWithControl(Enum):
    yes = "yes"
    no = "no"


class MatchControlsByIdentifier(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description="",
            regex="^(\\w|_)(\\w|\\d|[.\\--_])*$",
            title="Match Controls by Identifier",
        ),
    ]


class MatchControlsByPattern(BaseModel):
    class Config:
        extra = Extra.forbid

    pattern: Annotated[
        Optional[str],
        Field(
            description="A glob expression matching the IDs of one or more controls to be selected.",
            regex="^\\S(.*\\S)?$",
            title="Pattern",
        ),
    ] = None


class Call(BaseModel):
    class Config:
        extra = Extra.forbid

    with_child_controls: Annotated[
        Optional[IncludeContainedControlsWithControl],
        Field(
            alias="with-child-controls",
            description="When a control is included, whether its child (dependent) controls are also included.",
            title="Include contained controls with control",
        ),
    ] = None
    with_ids: Annotated[
        Optional[List[MatchControlsByIdentifier]], Field(alias="with-ids", min_items=1)
    ] = None
    matching: Annotated[Optional[List[MatchControlsByPattern]], Field(min_items=1)] = None


class Removal(BaseModel):
    class Config:
        extra = Extra.forbid

    by_name: Annotated[
        Optional[str],
        Field(
            alias="by-name",
            description="Identify items to remove by matching their assigned name",
            regex="^(\\w|_)(\\w|\\d|[.\\--_])*$",
            title="Reference by (assigned) name",
        ),
    ] = None
    by_class: Annotated[
        Optional[str],
        Field(
            alias="by-class",
            description="Identify items to remove by matching their class.",
            regex="^(\\w|_)(\\w|\\d|[.\\--_])*$",
            title="Reference by class",
        ),
    ] = None
    by_id: Annotated[
        Optional[str],
        Field(
            alias="by-id",
            description="Identify items to remove indicated by their id.",
            regex="^(\\w|_)(\\w|\\d|[.\\--_])*$",
            title="Reference by ID",
        ),
    ] = None
    by_item_name: Annotated[
        Optional[str],
        Field(
            alias="by-item-name",
            description="Identify items to remove by the name of the item's information element name, e.g. title or prop",
            regex="^(\\w|_)(\\w|\\d|[.\\--_])*$",
            title="Item Name Reference",
        ),
    ] = None
    by_ns: Annotated[
        Optional[str],
        Field(
            alias="by-ns",
            description="Identify items to remove by the item's ns, which is the namespace associated with a part, or prop.",
            regex="^(\\w|_)(\\w|\\d|[.\\--_])*$",
            title="Item Namespace Reference",
        ),
    ] = None


class Position(Enum):
    before = "before"
    after = "after"
    starting = "starting"
    ending = "ending"


class LocationURL(BaseModel):
    __root__: Annotated[
        AnyUrl,
        Field(
            description="The uniform resource locator (URL) for a web site or Internet presence associated with the location.",
            # regex="^[a-zA-Z][a-zA-Z0-9+\\-.]+:.+$",
            title="Location URL",
        ),
    ]


class LocationReference(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description="A machine-oriented identifier reference to a location defined in the metadata section of this or another OSCAL instance. The UUID of the location in the source OSCAL instance is sufficient to reference the data item locally or globally (e.g., in an imported OSCAL instance).",
            regex="^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-[45][0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$",
            title="Location Reference",
        ),
    ]


class PartyType(Enum):
    person = "person"
    organization = "organization"


class PartyExternalIdentifier(BaseModel):
    class Config:
        extra = Extra.forbid

    scheme: Annotated[
        AnyUrl,
        Field(
            description="Indicates the type of external identifier.",
            # regex="^[a-zA-Z][a-zA-Z0-9+\\-.]+:.+$",
            title="External Identifier Schema",
        ),
    ]
    id: str


class OrganizationalAffiliation(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description="A machine-oriented identifier reference to another party (person or organization) that this subject is associated with. The UUID of the party in the source OSCAL instance is sufficient to reference the data item locally or globally (e.g., in an imported OSCAL instance).",
            regex="^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-[45][0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$",
            title="Organizational Affiliation",
        ),
    ]


class PartyReference(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description="A machine-oriented identifier reference to another party defined in metadata. The UUID of the party in the source OSCAL instance is sufficient to reference the data item locally or globally (e.g., in an imported OSCAL instance).",
            regex="^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-[45][0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$",
            title="Party Reference",
        ),
    ]


class RoleIdentifierReference(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description="A human-oriented identifier reference to roles served by the user.",
            regex="^(\\w|_)(\\w|\\d|[.\\--_])*$",
            title="Role Identifier Reference",
        ),
    ]


class Base64(BaseModel):
    class Config:
        extra = Extra.forbid

    filename: Annotated[
        Optional[str],
        Field(
            description="Name of the file before it was encoded as Base64 to be embedded in a resource. This is the name that will be assigned to the file when the file is decoded.",
            title="File Name",
        ),
    ] = None
    media_type: Annotated[
        Optional[str],
        Field(
            alias="media-type",
            description="Specifies a media type as defined by the Internet Assigned Numbers Authority (IANA) Media Types Registry.",
            regex="^\\S(.*\\S)?$",
            title="Media Type",
        ),
    ] = None
    value: str


class Link(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Annotated[
        str,
        Field(
            description="A resolvable URL reference to a resource.",
            title="Hypertext Reference",
        ),
    ]
    rel: Annotated[
        Optional[str],
        Field(
            description="Describes the type of relationship provided by the link. This can be an indicator of the link's purpose.",
            regex="^(\\w|_)(\\w|\\d|[.\\--_])*$",
            title="Relation",
        ),
    ] = None
    media_type: Annotated[
        Optional[str],
        Field(
            alias="media-type",
            description="Specifies a media type as defined by the Internet Assigned Numbers Authority (IANA) Media Types Registry.",
            regex="^\\S(.*\\S)?$",
            title="Media Type",
        ),
    ] = None
    text: Annotated[
        Optional[str],
        Field(
            description="A textual label to associate with the link, which may be used for presentation in a tool.",
            title="Link Text",
        ),
    ] = None


class Hash(BaseModel):
    class Config:
        extra = Extra.forbid

    algorithm: Annotated[
        str,
        Field(
            description="Method by which a hash is derived",
            regex="^\\S(.*\\S)?$",
            title="Hash algorithm",
        ),
    ]
    value: str


class Remarks(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description="Additional commentary on the containing object.",
            title="Remarks",
        ),
    ]


class PublicationTimestamp(BaseModel):
    __root__: Annotated[
        datetime,
        Field(
            description="The date and time the document was published. The date-time value must be formatted according to RFC 3339 with full time and time zone included.",
            # regex="^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})$",
            title="Publication Timestamp",
        ),
    ]


class LastModifiedTimestamp(BaseModel):
    __root__: Annotated[
        datetime,
        Field(
            description="The date and time the document was last modified. The date-time value must be formatted according to RFC 3339 with full time and time zone included.",
            # regex="^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})$",
            title="Last Modified Timestamp",
        ),
    ]


class DocumentVersion(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description="A string used to distinguish the current version of the document from other previous (and future) versions.",
            regex="^\\S(.*\\S)?$",
            title="Document Version",
        ),
    ]


class OSCALVersion(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description="The OSCAL model version the document was authored against.",
            regex="^\\S(.*\\S)?$",
            title="OSCAL version",
        ),
    ]


class EmailAddress(BaseModel):
    __root__: Annotated[
        EmailStr,
        Field(
            description="An email address as defined by RFC 5322 Section 3.4.1.",
            # regex="^.+@.+$",
            title="Email Address",
        ),
    ]


class TelephoneNumber(BaseModel):
    class Config:
        extra = Extra.forbid

    type: Annotated[
        Optional[str],
        Field(
            description="Indicates the type of phone number.",
            regex="^\\S(.*\\S)?$",
            title="type flag",
        ),
    ] = None
    number: str


class AddressLine(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description="A single line of an address.",
            regex="^\\S(.*\\S)?$",
            title="Address line",
        ),
    ]


class DocumentIdentifier(BaseModel):
    class Config:
        extra = Extra.forbid

    scheme: Annotated[
        Optional[AnyUrl],
        Field(
            description="Qualifies the kind of document identifier using a URI. If the scheme is not provided the value of the element will be interpreted as a string of characters.",
            # regex="^[a-zA-Z][a-zA-Z0-9+\\-.]+:.+$",
            title="Document Identification Scheme",
        ),
    ] = None
    identifier: str


class ConstraintTest(BaseModel):
    class Config:
        extra = Extra.forbid

    expression: Annotated[
        str,
        Field(
            description="A formal (executable) expression of a constraint",
            regex="^\\S(.*\\S)?$",
            title="Constraint test",
        ),
    ]
    remarks: Optional[Remarks] = None


class Constraint(BaseModel):
    class Config:
        extra = Extra.forbid

    description: Annotated[
        Optional[str],
        Field(
            description="A textual summary of the constraint to be applied.",
            title="Constraint Description",
        ),
    ] = None
    tests: Annotated[Optional[List[ConstraintTest]], Field(min_items=1)] = None


class Guideline(BaseModel):
    class Config:
        extra = Extra.forbid

    prose: Annotated[
        str,
        Field(
            description="Prose permits multiple paragraphs, lists, tables etc.",
            title="Guideline Text",
        ),
    ]


class ParameterValue(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description="A parameter value or set of values.",
            regex="^\\S(.*\\S)?$",
            title="Parameter Value",
        ),
    ]


class ParameterCardinality(Enum):
    one = "one"
    one_or_more = "one-or-more"


class Selection(BaseModel):
    class Config:
        extra = Extra.forbid

    how_many: Annotated[
        Optional[ParameterCardinality],
        Field(
            alias="how-many",
            description="Describes the number of selections that must occur. Without this setting, only one value should be assumed to be permitted.",
            title="Parameter Cardinality",
        ),
    ] = None
    choice: Annotated[Optional[List[str]], Field(min_items=1)] = None


class IncludeAll(BaseModel):
    pass

    class Config:
        extra = Extra.forbid


class ImportResource(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Annotated[
        str,
        Field(
            description="A resolvable URL reference to the base catalog or profile that this profile is tailoring.",
            title="Catalog or Profile Reference",
        ),
    ]
    include_all: Annotated[Optional[IncludeAll], Field(alias="include-all")] = None
    include_controls: Annotated[
        Optional[List[Call]], Field(alias="include-controls", min_items=1)
    ] = None
    exclude_controls: Annotated[
        Optional[List[Call]], Field(alias="exclude-controls", min_items=1)
    ] = None


class SelectControls(BaseModel):
    class Config:
        extra = Extra.forbid

    order: Annotated[
        Optional[Order],
        Field(
            description="A designation of how a selection of controls in a profile is to be ordered.",
            title="Order",
        ),
    ] = None
    include_all: Annotated[Optional[IncludeAll], Field(alias="include-all")] = None
    include_controls: Annotated[
        Optional[List[Call]], Field(alias="include-controls", min_items=1)
    ] = None
    exclude_controls: Annotated[
        Optional[List[Call]], Field(alias="exclude-controls", min_items=1)
    ] = None


class ResourceLink(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Annotated[
        str,
        Field(
            description="A resolvable URI reference to a resource.",
            title="Hypertext Reference",
        ),
    ]
    media_type: Annotated[
        Optional[str],
        Field(
            alias="media-type",
            description="Specifies a media type as defined by the Internet Assigned Numbers Authority (IANA) Media Types Registry.",
            regex="^\\S(.*\\S)?$",
            title="Media Type",
        ),
    ] = None
    hashes: Annotated[Optional[List[Hash]], Field(min_items=1)] = None


class Property(BaseModel):
    class Config:
        extra = Extra.forbid

    name: Annotated[
        str,
        Field(
            description="A textual label that uniquely identifies a specific attribute, characteristic, or quality of the property's containing object.",
            regex="^(\\w|_)(\\w|\\d|[.\\--_])*$",
            title="Property Name",
        ),
    ]
    uuid: Annotated[
        Optional[str],
        Field(
            description="A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this defined property elsewhere in this or other OSCAL instances. This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.",
            regex="^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-[45][0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$",
            title="Property Universally Unique Identifier",
        ),
    ] = None
    ns: Annotated[
        Optional[AnyUrl],
        Field(
            description="A namespace qualifying the property's name. This allows different organizations to associate distinct semantics with the same name.",
            # regex="^[a-zA-Z][a-zA-Z0-9+\\-.]+:.+$",
            title="Property Namespace",
        ),
    ] = None
    value: Annotated[
        str,
        Field(
            description="Indicates the value of the attribute, characteristic, or quality.",
            regex="^\\S(.*\\S)?$",
            title="Property Value",
        ),
    ]
    class_: Annotated[
        Optional[str],
        Field(
            alias="class",
            description="A textual label that provides a sub-type or characterization of the property's name. This can be used to further distinguish or discriminate between the semantics of multiple properties of the same object with the same name and ns.",
            regex="^(\\w|_)(\\w|\\d|[.\\--_])*$",
            title="Property Class",
        ),
    ] = None
    remarks: Optional[Remarks] = None


class ResponsibleParty(BaseModel):
    class Config:
        extra = Extra.forbid

    role_id: Annotated[
        str,
        Field(
            alias="role-id",
            description="A human-oriented identifier reference to roles served by the user.",
            regex="^(\\w|_)(\\w|\\d|[.\\--_])*$",
            title="Responsible Role",
        ),
    ]
    party_uuids: Annotated[List[PartyReference], Field(alias="party-uuids", min_items=1)]
    props: Annotated[Optional[List[Property]], Field(min_items=1)] = None
    links: Annotated[Optional[List[Link]], Field(min_items=1)] = None
    remarks: Optional[Remarks] = None


class ResponsibleRole(BaseModel):
    class Config:
        extra = Extra.forbid

    role_id: Annotated[
        str,
        Field(
            alias="role-id",
            description="A human-oriented identifier reference to roles responsible for the business function.",
            regex="^(\\w|_)(\\w|\\d|[.\\--_])*$",
            title="Responsible Role ID",
        ),
    ]
    props: Annotated[Optional[List[Property]], Field(min_items=1)] = None
    links: Annotated[Optional[List[Link]], Field(min_items=1)] = None
    party_uuids: Annotated[
        Optional[List[PartyReference]], Field(alias="party-uuids", min_items=1)
    ] = None
    remarks: Optional[Remarks] = None


class Address(BaseModel):
    class Config:
        extra = Extra.forbid

    type: Annotated[
        Optional[str],
        Field(
            description="Indicates the type of address.",
            regex="^(\\w|_)(\\w|\\d|[.\\--_])*$",
            title="Address Type",
        ),
    ] = None
    addr_lines: Annotated[
        Optional[List[AddressLine]], Field(alias="addr-lines", min_items=1)
    ] = None
    city: Annotated[
        Optional[str],
        Field(
            description="City, town or geographical region for the mailing address.",
            regex="^\\S(.*\\S)?$",
            title="City",
        ),
    ] = None
    state: Annotated[
        Optional[str],
        Field(
            description="State, province or analogous geographical region for mailing address",
            regex="^\\S(.*\\S)?$",
            title="State",
        ),
    ] = None
    postal_code: Annotated[
        Optional[str],
        Field(
            alias="postal-code",
            description="Postal or ZIP code for mailing address",
            regex="^\\S(.*\\S)?$",
            title="Postal Code",
        ),
    ] = None
    country: Annotated[
        Optional[str],
        Field(
            description="The ISO 3166-1 alpha-2 country code for the mailing address.",
            regex="^\\S(.*\\S)?$",
            title="Country Code",
        ),
    ] = None


class Part(BaseModel):
    class Config:
        extra = Extra.forbid

    id: Annotated[
        Optional[str],
        Field(
            description="A human-oriented, locally unique identifier with cross-instance scope that can be used to reference this defined part elsewhere in this or other OSCAL instances. When referenced from another OSCAL instance, this identifier must be referenced in the context of the containing resource (e.g., import-profile). This id should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.",
            regex="^(\\w|_)(\\w|\\d|[.\\--_])*$",
            title="Part Identifier",
        ),
    ] = None
    name: Annotated[
        str,
        Field(
            description="A textual label that uniquely identifies the part's semantic type.",
            regex="^(\\w|_)(\\w|\\d|[.\\--_])*$",
            title="Part Name",
        ),
    ]
    ns: Annotated[
        Optional[AnyUrl],
        Field(
            description="A namespace qualifying the part's name. This allows different organizations to associate distinct semantics with the same name.",
            # regex="^[a-zA-Z][a-zA-Z0-9+\\-.]+:.+$",
            title="Part Namespace",
        ),
    ] = None
    class_: Annotated[
        Optional[str],
        Field(
            alias="class",
            description="A textual label that provides a sub-type or characterization of the part's name. This can be used to further distinguish or discriminate between the semantics of multiple parts of the same control with the same name and ns.",
            regex="^(\\w|_)(\\w|\\d|[.\\--_])*$",
            title="Part Class",
        ),
    ] = None
    title: Annotated[
        Optional[str],
        Field(
            description="A name given to the part, which may be used by a tool for display and navigation.",
            title="Part Title",
        ),
    ] = None
    props: Annotated[Optional[List[Property]], Field(min_items=1)] = None
    prose: Annotated[
        Optional[str],
        Field(
            description="Permits multiple paragraphs, lists, tables etc.",
            title="Part Text",
        ),
    ] = None
    parts: Optional[List[Part]] = None
    links: Annotated[Optional[List[Link]], Field(min_items=1)] = None


class Parameter(BaseModel):
    class Config:
        extra = Extra.forbid

    id: Annotated[
        str,
        Field(
            description="A human-oriented, locally unique identifier with cross-instance scope that can be used to reference this defined parameter elsewhere in this or other OSCAL instances. When referenced from another OSCAL instance, this identifier must be referenced in the context of the containing resource (e.g., import-profile). This id should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.",
            regex="^(\\w|_)(\\w|\\d|[.\\--_])*$",
            title="Parameter Identifier",
        ),
    ]
    class_: Annotated[
        Optional[str],
        Field(
            alias="class",
            description="A textual label that provides a characterization of the parameter.",
            regex="^(\\w|_)(\\w|\\d|[.\\--_])*$",
            title="Parameter Class",
        ),
    ] = None
    depends_on: Annotated[
        Optional[str],
        Field(
            alias="depends-on",
            description="**(deprecated)** Another parameter invoking this one. This construct has been deprecated and should not be used.",
            regex="^(\\w|_)(\\w|\\d|[.\\--_])*$",
            title="Depends on",
        ),
    ] = None
    props: Annotated[Optional[List[Property]], Field(min_items=1)] = None
    links: Annotated[Optional[List[Link]], Field(min_items=1)] = None
    label: Annotated[
        Optional[str],
        Field(
            description="A short, placeholder name for the parameter, which can be used as a substitute for a value if no value is assigned.",
            title="Parameter Label",
        ),
    ] = None
    usage: Annotated[
        Optional[str],
        Field(
            description="Describes the purpose and use of a parameter",
            title="Parameter Usage Description",
        ),
    ] = None
    constraints: Annotated[Optional[List[Constraint]], Field(min_items=1)] = None
    guidelines: Annotated[Optional[List[Guideline]], Field(min_items=1)] = None
    values: Annotated[Optional[List[ParameterValue]], Field(min_items=1)] = None
    select: Optional[Selection] = None
    remarks: Optional[Remarks] = None


class ControlGroup(BaseModel):
    class Config:
        extra = Extra.forbid

    id: Annotated[
        Optional[str],
        Field(
            description="A human-oriented, locally unique identifier with cross-instance scope that can be used to reference this defined group elsewhere in this or other OSCAL instances. When referenced from another OSCAL instance, this identifier must be referenced in the context of the containing resource (e.g., import-profile). This id should be assigned per-subject, which means it should be consistently used to identify the same group across revisions of the document.",
            regex="^(\\w|_)(\\w|\\d|[.\\--_])*$",
            title="Group Identifier",
        ),
    ] = None
    class_: Annotated[
        Optional[str],
        Field(
            alias="class",
            description="A textual label that provides a sub-type or characterization of the group.",
            regex="^(\\w|_)(\\w|\\d|[.\\--_])*$",
            title="Group Class",
        ),
    ] = None
    title: Annotated[
        str,
        Field(
            description="A name given to the group, which may be used by a tool for display and navigation.",
            title="Group Title",
        ),
    ]
    params: Annotated[Optional[List[Parameter]], Field(min_items=1)] = None
    props: Annotated[Optional[List[Property]], Field(min_items=1)] = None
    links: Annotated[Optional[List[Link]], Field(min_items=1)] = None
    parts: Annotated[Optional[List[Part]], Field(min_items=1)] = None
    groups: Optional[List[ControlGroup]] = None
    insert_controls: Annotated[
        Optional[List[SelectControls]], Field(alias="insert-controls", min_items=1)
    ] = None


class ParameterSetting(BaseModel):
    class Config:
        extra = Extra.forbid

    param_id: Annotated[
        str,
        Field(
            alias="param-id",
            description="A human-oriented, locally unique identifier with cross-instance scope that can be used to reference this defined parameter elsewhere in this or other OSCAL instances. When referenced from another OSCAL instance, this identifier must be referenced in the context of the containing resource (e.g., import-profile). This id should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.",
            regex="^(\\w|_)(\\w|\\d|[.\\--_])*$",
            title="Parameter ID",
        ),
    ]
    class_: Annotated[
        Optional[str],
        Field(
            alias="class",
            description="A textual label that provides a characterization of the parameter.",
            regex="^(\\w|_)(\\w|\\d|[.\\--_])*$",
            title="Parameter Class",
        ),
    ] = None
    depends_on: Annotated[
        Optional[str],
        Field(
            alias="depends-on",
            description="**(deprecated)** Another parameter invoking this one. This construct has been deprecated and should not be used.",
            regex="^(\\w|_)(\\w|\\d|[.\\--_])*$",
            title="Depends on",
        ),
    ] = None
    props: Annotated[Optional[List[Property]], Field(min_items=1)] = None
    links: Annotated[Optional[List[Link]], Field(min_items=1)] = None
    label: Annotated[
        Optional[str],
        Field(
            description="A short, placeholder name for the parameter, which can be used as a substitute for a value if no value is assigned.",
            title="Parameter Label",
        ),
    ] = None
    usage: Annotated[
        Optional[str],
        Field(
            description="Describes the purpose and use of a parameter",
            title="Parameter Usage Description",
        ),
    ] = None
    constraints: Annotated[Optional[List[Constraint]], Field(min_items=1)] = None
    guidelines: Annotated[Optional[List[Guideline]], Field(min_items=1)] = None
    values: Annotated[Optional[List[ParameterValue]], Field(min_items=1)] = None
    select: Optional[Selection] = None


class Addition(BaseModel):
    class Config:
        extra = Extra.forbid

    position: Annotated[
        Optional[Position],
        Field(
            description="Where to add the new content with respect to the targeted element (beside it or inside it)",
            title="Position",
        ),
    ] = None
    by_id: Annotated[
        Optional[str],
        Field(
            alias="by-id",
            description="Target location of the addition.",
            regex="^(\\w|_)(\\w|\\d|[.\\--_])*$",
            title="Reference by ID",
        ),
    ] = None
    title: Annotated[
        Optional[str],
        Field(
            description="A name given to the control, which may be used by a tool for display and navigation.",
            title="Title Change",
        ),
    ] = None
    params: Annotated[Optional[List[Parameter]], Field(min_items=1)] = None
    props: Annotated[Optional[List[Property]], Field(min_items=1)] = None
    links: Annotated[Optional[List[Link]], Field(min_items=1)] = None
    parts: Annotated[Optional[List[Part]], Field(min_items=1)] = None


class RevisionHistoryEntry(BaseModel):
    class Config:
        extra = Extra.forbid

    title: Annotated[
        Optional[str],
        Field(
            description="A name given to the document revision, which may be used by a tool for display and navigation.",
            title="Document Title",
        ),
    ] = None
    published: Optional[PublicationTimestamp] = None
    last_modified: Annotated[Optional[LastModifiedTimestamp], Field(alias="last-modified")] = None
    version: DocumentVersion
    oscal_version: Annotated[Optional[OSCALVersion], Field(alias="oscal-version")] = None
    props: Annotated[Optional[List[Property]], Field(min_items=1)] = None
    links: Annotated[Optional[List[Link]], Field(min_items=1)] = None
    remarks: Optional[Remarks] = None


class Location(BaseModel):
    class Config:
        extra = Extra.forbid

    uuid: Annotated[
        str,
        Field(
            description="A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this defined location elsewhere in this or other OSCAL instances. The locally defined UUID of the location can be used to reference the data item locally or globally (e.g., from an importing OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.",
            regex="^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-[45][0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$",
            title="Location Universally Unique Identifier",
        ),
    ]
    title: Annotated[
        Optional[str],
        Field(
            description="A name given to the location, which may be used by a tool for display and navigation.",
            title="Location Title",
        ),
    ] = None
    address: Address
    email_addresses: Annotated[
        Optional[List[EmailAddress]], Field(alias="email-addresses", min_items=1)
    ] = None
    telephone_numbers: Annotated[
        Optional[List[TelephoneNumber]], Field(alias="telephone-numbers", min_items=1)
    ] = None
    urls: Annotated[Optional[List[LocationURL]], Field(min_items=1)] = None
    props: Annotated[Optional[List[Property]], Field(min_items=1)] = None
    links: Annotated[Optional[List[Link]], Field(min_items=1)] = None
    remarks: Optional[Remarks] = None


class PartyOrganizationOrPerson(BaseModel):
    class Config:
        extra = Extra.forbid

    uuid: Annotated[
        str,
        Field(
            description="A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this defined party elsewhere in this or other OSCAL instances. The locally defined UUID of the party can be used to reference the data item locally or globally (e.g., from an importing OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.",
            regex="^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-[45][0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$",
            title="Party Universally Unique Identifier",
        ),
    ]
    type: Annotated[
        PartyType,
        Field(
            description="A category describing the kind of party the object describes.",
            title="Party Type",
        ),
    ]
    name: Annotated[
        Optional[str],
        Field(
            description="The full name of the party. This is typically the legal name associated with the party.",
            regex="^\\S(.*\\S)?$",
            title="Party Name",
        ),
    ] = None
    short_name: Annotated[
        Optional[str],
        Field(
            alias="short-name",
            description="A short common name, abbreviation, or acronym for the party.",
            regex="^\\S(.*\\S)?$",
            title="Party Short Name",
        ),
    ] = None
    external_ids: Annotated[
        Optional[List[PartyExternalIdentifier]],
        Field(alias="external-ids", min_items=1),
    ] = None
    props: Annotated[Optional[List[Property]], Field(min_items=1)] = None
    links: Annotated[Optional[List[Link]], Field(min_items=1)] = None
    email_addresses: Annotated[
        Optional[List[EmailAddress]], Field(alias="email-addresses", min_items=1)
    ] = None
    telephone_numbers: Annotated[
        Optional[List[TelephoneNumber]], Field(alias="telephone-numbers", min_items=1)
    ] = None
    addresses: Annotated[Optional[List[Address]], Field(min_items=1)] = None
    location_uuids: Annotated[
        Optional[List[LocationReference]], Field(alias="location-uuids", min_items=1)
    ] = None
    member_of_organizations: Annotated[
        Optional[List[OrganizationalAffiliation]],
        Field(alias="member-of-organizations", min_items=1),
    ] = None
    remarks: Optional[Remarks] = None


class Role(BaseModel):
    class Config:
        extra = Extra.forbid

    id: Annotated[
        str,
        Field(
            description="A human-oriented, locally unique identifier with cross-instance scope that can be used to reference this defined role elsewhere in this or other OSCAL instances. When referenced from another OSCAL instance, the locally defined ID of the Role from the imported OSCAL instance must be referenced in the context of the containing resource (e.g., import, import-component-definition, import-profile, import-ssp or import-ap). This ID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.",
            regex="^(\\w|_)(\\w|\\d|[.\\--_])*$",
            title="Role Identifier",
        ),
    ]
    title: Annotated[
        str,
        Field(
            description="A name given to the role, which may be used by a tool for display and navigation.",
            title="Role Title",
        ),
    ]
    short_name: Annotated[
        Optional[str],
        Field(
            alias="short-name",
            description="A short common name, abbreviation, or acronym for the role.",
            regex="^\\S(.*\\S)?$",
            title="Role Short Name",
        ),
    ] = None
    description: Annotated[
        Optional[str],
        Field(
            description="A summary of the role's purpose and associated responsibilities.",
            title="Role Description",
        ),
    ] = None
    props: Annotated[Optional[List[Property]], Field(min_items=1)] = None
    links: Annotated[Optional[List[Link]], Field(min_items=1)] = None
    remarks: Optional[Remarks] = None


class Citation(BaseModel):
    class Config:
        extra = Extra.forbid

    text: Annotated[str, Field(description="A line of citation text.", title="Citation Text")]
    props: Annotated[Optional[List[Property]], Field(min_items=1)] = None
    links: Annotated[Optional[List[Link]], Field(min_items=1)] = None


class Resource(BaseModel):
    class Config:
        extra = Extra.forbid

    uuid: Annotated[
        str,
        Field(
            description="A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this defined resource elsewhere in this or other OSCAL instances. This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.",
            regex="^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-[45][0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$",
            title="Resource Universally Unique Identifier",
        ),
    ]
    title: Annotated[
        Optional[str],
        Field(
            description="A name given to the resource, which may be used by a tool for display and navigation.",
            title="Resource Title",
        ),
    ] = None
    description: Annotated[
        Optional[str],
        Field(
            description="A short summary of the resource used to indicate the purpose of the resource.",
            title="Resource Description",
        ),
    ] = None
    props: Annotated[Optional[List[Property]], Field(min_items=1)] = None
    document_ids: Annotated[
        Optional[List[DocumentIdentifier]], Field(alias="document-ids", min_items=1)
    ] = None
    citation: Annotated[
        Optional[Citation],
        Field(
            description="A citation consisting of end note text and optional structured bibliographic data.",
            title="Citation",
        ),
    ] = None
    rlinks: Annotated[Optional[List[ResourceLink]], Field(min_items=1)] = None
    base64: Annotated[
        Optional[Base64],
        Field(
            description="The Base64 alphabet in RFC 2045 - aligned with XSD.",
            title="Base64",
        ),
    ] = None
    remarks: Optional[Remarks] = None


class BackMatter(BaseModel):
    class Config:
        extra = Extra.forbid

    resources: Annotated[Optional[List[Resource]], Field(min_items=1)] = None


class CustomGrouping(BaseModel):
    class Config:
        extra = Extra.forbid

    groups: Annotated[Optional[List[ControlGroup]], Field(min_items=1)] = None
    insert_controls: Annotated[
        Optional[List[SelectControls]], Field(alias="insert-controls", min_items=1)
    ] = None


class MergeControls(BaseModel):
    class Config:
        extra = Extra.forbid

    combine: Annotated[
        Optional[CombinationRule],
        Field(
            description="A Combine element defines how to combine multiple (competing) versions of the same control.",
            title="Combination rule",
        ),
    ] = None
    flat: Annotated[
        Optional[Dict[str, Any]],
        Field(description="Use the flat structuring method.", title="Flat"),
    ] = None
    as_is: Annotated[
        Optional[bool],
        Field(
            alias="as-is",
            description="An As-is element indicates that the controls should be structured in resolution as they are structured in their source catalogs. It does not contain any elements or attributes.",
            title="As-Is Structuring Directive",
        ),
    ] = None
    custom: Annotated[
        Optional[CustomGrouping],
        Field(
            description="A Custom element frames a structure for embedding represented controls in resolution.",
            title="Custom grouping",
        ),
    ] = None


class Alteration(BaseModel):
    class Config:
        extra = Extra.forbid

    control_id: Annotated[
        str,
        Field(
            alias="control-id",
            description="A human-oriented identifier reference to a control with a corresponding id value. When referencing an externally defined control, the Control Identifier Reference must be used in the context of the external / imported OSCAL instance (e.g., uri-reference).",
            regex="^(\\w|_)(\\w|\\d|[.\\--_])*$",
            title="Control Identifier Reference",
        ),
    ]
    removes: Annotated[Optional[List[Removal]], Field(min_items=1)] = None
    adds: Annotated[Optional[List[Addition]], Field(min_items=1)] = None


class PublicationMetadata(BaseModel):
    class Config:
        extra = Extra.forbid

    title: Annotated[
        str,
        Field(
            description="A name given to the document, which may be used by a tool for display and navigation.",
            title="Document Title",
        ),
    ]
    published: Optional[PublicationTimestamp] = None
    last_modified: Annotated[LastModifiedTimestamp, Field(alias="last-modified")]
    version: DocumentVersion
    oscal_version: Annotated[OSCALVersion, Field(alias="oscal-version")]
    revisions: Annotated[Optional[List[RevisionHistoryEntry]], Field(min_items=1)] = None
    document_ids: Annotated[
        Optional[List[DocumentIdentifier]], Field(alias="document-ids", min_items=1)
    ] = None
    props: Annotated[Optional[List[Property]], Field(min_items=1)] = None
    links: Annotated[Optional[List[Link]], Field(min_items=1)] = None
    roles: Annotated[Optional[List[Role]], Field(min_items=1)] = None
    locations: Annotated[Optional[List[Location]], Field(min_items=1)] = None
    parties: Annotated[Optional[List[PartyOrganizationOrPerson]], Field(min_items=1)] = None
    responsible_parties: Annotated[
        Optional[List[ResponsibleParty]],
        Field(alias="responsible-parties", min_items=1),
    ] = None
    remarks: Optional[Remarks] = None


class ModifyControls(BaseModel):
    class Config:
        extra = Extra.forbid

    set_parameters: Annotated[
        Optional[List[ParameterSetting]], Field(alias="set-parameters", min_items=1)
    ] = None
    alters: Annotated[Optional[List[Alteration]], Field(min_items=1)] = None


class Profile(BaseModel):
    class Config:
        extra = Extra.forbid

    uuid: Annotated[
        str,
        Field(
            description="A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this profile elsewhere in this or other OSCAL instances. The locally defined UUID of the profile can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance).This identifier should be assigned per-subject, which means it should be consistently used to identify the same profile across revisions of the document.",
            regex="^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-[45][0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$",
            title="Profile Universally Unique Identifier",
        ),
    ]
    metadata: PublicationMetadata
    imports: Annotated[List[ImportResource], Field(min_items=1)]
    merge: Optional[MergeControls] = None
    modify: Optional[ModifyControls] = None
    back_matter: Annotated[Optional[BackMatter], Field(alias="back-matter")] = None


class Model(BaseModel):
    class Config:
        extra = Extra.forbid

    profile: Profile


Part.update_forward_refs()
ControlGroup.update_forward_refs()
