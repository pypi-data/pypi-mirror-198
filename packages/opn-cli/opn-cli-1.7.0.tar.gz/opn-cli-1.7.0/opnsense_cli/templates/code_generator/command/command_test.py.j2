from unittest.mock import patch, Mock
from opnsense_cli.commands.{{ vars.module_type }}.{{ vars.click_group }}.{{ vars.click_command }} import {{ vars.click_command }}
from opnsense_cli.tests.commands.base import CommandTestCase


class Test{{ vars.click_group.capitalize() }}{{ vars.click_command.capitalize() }}Commands(CommandTestCase):
    def setUp(self):
        self._api_data_fixtures_reconfigure_OK = {
            "status": "ok"
        }
        self._api_data_fixtures_reconfigure_FAILED = {
            "status": "failed"
        }
        self._api_data_fixtures_create_OK = {
            "result": "saved",
            "uuid": "85282721-934c-42be-ba4d-a93cbfda26af"
        }
        self._api_data_fixtures_create_ERROR = {
            "result": "failed",
            "validations": {'<TODO>': ['<TODO>']}
        }
        self._api_data_fixtures_update_OK = {
            "result": "saved"
        }
        self._api_data_fixtures_update_NOT_EXISTS = {
            "result": "failed"
        }
        self._api_data_fixtures_delete_NOT_FOUND = {
            "result": "not found"
        }
        self._api_data_fixtures_delete_OK = {
            "result": "deleted"
        }
        self._api_data_fixtures_list_EMPTY = {
            "{{ vars.click_group }}": {
                "{{ vars.model_xml_tag }}": {
                    "{{ vars.click_command }}": []
                }
            }
        }
        self._api_data_fixtures_list = self._read_json_fixture('{{ vars.module_type }}/{{ vars.click_group }}/model_data.json')
        self._api_client_args_fixtures = [
            'api_key',
            'api_secret',
            'https://127.0.0.1/api',
            True,
            '~/.opn-cli/ca.pem',
            60
        ]

    @patch('opnsense_cli.commands.{{ vars.module_type }}.{{ vars.click_group }}.{{ vars.click_command }}.ApiClient.execute')
    def test_list(self, api_response_mock: Mock):
        result = self._opn_cli_command_result(
            api_response_mock,
            [
                self._api_data_fixtures_list,
            ],
            {{ vars.click_command }},
            [
                'list', '-o', 'plain', '-c',
                'uuid,TODO_specifiy_columns'
            ]
        )

        self.assertIn(
            (
                "<TODO match to command output>\n"
            ),
            result.output
        )

    @patch('opnsense_cli.commands.{{ vars.module_type }}.{{ vars.click_group }}.{{ vars.click_command }}.ApiClient.execute')
    def test_list_EMPTY(self, api_response_mock: Mock):
        result = self._opn_cli_command_result(
            api_response_mock,
            [
                self._api_data_fixtures_list_EMPTY,
            ],
            {{ vars.click_command }},
            ['list', '-o', 'plain']
        )

        self.assertIn("", result.output)

    @patch('opnsense_cli.commands.{{ vars.module_type }}.{{ vars.click_group }}.{{ vars.click_command }}.ApiClient.execute')
    def test_show_NOT_FOUND(self, api_response_mock: Mock):
        result = self._opn_cli_command_result(
            api_response_mock,
            [
                self._api_data_fixtures_list,
            ],
            {{ vars.click_command }},
            ['show', 'b468c719-89db-45a8-bd02-b081246dc002']
        )
        self.assertIn("", result.output)

    @patch('opnsense_cli.commands.{{ vars.module_type }}.{{ vars.click_group }}.{{ vars.click_command }}.ApiClient.execute')
    def test_show_EMPTY_STRING(self, api_response_mock: Mock):
        result = self._opn_cli_command_result(
            api_response_mock,
            [
                self._api_data_fixtures_list,
            ],
            {{ vars.click_command }},
            ['show', '']
        )
        self.assertIn("", result.output)

    @patch('opnsense_cli.commands.{{ vars.module_type }}.{{ vars.click_group }}.{{ vars.click_command }}.ApiClient.execute')
    def test_show(self, api_response_mock: Mock):
        result = self._opn_cli_command_result(
            api_response_mock,
            [
                self._api_data_fixtures_list,
            ],
            {{ vars.click_command }},
            [
                'show', '2c57ff97-10df-41a1-8a02-ab2fd1a4a651', '-o', 'plain', '-c',
                'uuid,name,Servers,Resolver,Healthcheck,Mailer,Users,Groups,Actions,Errorfiles'
            ]
        )

        self.assertIn(
            (
                "2c57ff97-10df-41a1-8a02-ab2fd1a4a651 pool2 server2,server4  http_head     \n"
            ),
            result.output
        )

    @patch('opnsense_cli.commands.{{ vars.module_type }}.{{ vars.click_group }}.{{ vars.click_command }}.ApiClient.execute')
    def test_create_OK(self, api_response_mock: Mock):
        result = self._opn_cli_command_result(
            api_response_mock,
            [
                self._api_data_fixtures_create_OK,
                self._api_data_fixtures_reconfigure_OK,
            ],
            {{ vars.click_command }},
            [
                "create", "my_test_{{ vars.click_command }}",
                "--TODO", "<customize with create options>"
            ]
        )

        self.assertIn(
            (
                "saved \n"
            ),
            result.output
        )

    @patch('opnsense_cli.commands.{{ vars.module_type }}.{{ vars.click_group }}.{{ vars.click_command }}.ApiClient.execute')
    def test_create_ERROR(self, api_response_mock: Mock):
        result = self._opn_cli_command_result(
            api_response_mock,
            [
                self._api_data_fixtures_create_ERROR,
                self._api_data_fixtures_reconfigure_OK,
            ],
            {{ vars.click_command }},
            [
                "create", "my_test_{{ vars.click_command }}",
                 "--TODO", "<customize and trigger a validation error>"
            ]
        )

        self.assertIn(
            (
                "Error: {'result': 'failed', 'validations': "
                "{'todo.click_option': ['Please specify a value between 1 and 100.']}}\n"
            ),
            result.output
        )
        self.assertEqual(1, result.exit_code)

    @patch('opnsense_cli.commands.{{ vars.module_type }}.{{ vars.click_group }}.{{ vars.click_command }}.ApiClient.execute')
    def test_create_APPLY_FAILED(self, api_response_mock: Mock):
        result = self._opn_cli_command_result(
            api_response_mock,
            [
              self._api_data_fixtures_create_OK,
              self._api_data_fixtures_reconfigure_FAILED,
            ],
            {{ vars.click_command }},
            [
              "create", "my_test_{{ vars.click_command }}",
              "--TODO", "<customize and trigger an apply error>"
            ]
        )

        self.assertIn(
          (
            "Error: Apply failed: {'status': 'failed'}\n"
          ),
          result.output
        )
        self.assertEqual(1, result.exit_code)

    @patch('opnsense_cli.commands.{{ vars.module_type }}.{{ vars.click_group }}.{{ vars.click_command }}.ApiClient.execute')
    def test_update_OK(self, api_response_mock: Mock):
        result = self._opn_cli_command_result(
            api_response_mock,
            [
                self._api_data_fixtures_update_OK,
                self._api_data_fixtures_reconfigure_OK,
            ],
            {{ vars.click_command }},
            [
                "update", "<TODO customize uuid>",
                "--TODO", "<customize with create options>"
            ]
        )

        self.assertIn(
            (
                "saved \n"
            ),
            result.output
        )

    @patch('opnsense_cli.commands.{{ vars.module_type }}.{{ vars.click_group }}.{{ vars.click_command }}.ApiClient.execute')
    def test_update_NOT_EXISTS(self, api_response_mock: Mock):
        result = self._opn_cli_command_result(
            api_response_mock,
            [
                self._api_data_fixtures_update_NOT_EXISTS,
                self._api_data_fixtures_reconfigure_OK,
            ],
            {{ vars.click_command }},
            [
                "update", "99282721-934c-42be-ba4d-a93cbfda2644",
                "--no-enabled",
            ]
        )

        self.assertIn(
            (
                "Error: {'result': 'failed'}\n"
            ),
            result.output
        )
        self.assertEqual(1, result.exit_code)

    @patch('opnsense_cli.commands.{{ vars.module_type }}.{{ vars.click_group }}.{{ vars.click_command }}.ApiClient.execute')
    def test_delete_OK(self, api_response_mock: Mock):
        result = self._opn_cli_command_result(
            api_response_mock,
            [
                self._api_data_fixtures_delete_OK,
                self._api_data_fixtures_reconfigure_OK,
            ],
            {{ vars.click_command }},
            [
                "delete", "85282721-934c-42be-ba4d-a93cbfda26af",
            ]
        )

        self.assertIn(
            (
                "deleted \n"
            ),
            result.output
        )

    @patch('opnsense_cli.commands.{{ vars.module_type }}.{{ vars.click_group }}.{{ vars.click_command }}.ApiClient.execute')
    def test_delete_NOT_FOUND(self, api_response_mock: Mock):
        result = self._opn_cli_command_result(
            api_response_mock,
            [
                self._api_data_fixtures_delete_NOT_FOUND,
                self._api_data_fixtures_reconfigure_OK,
            ],
            {{ vars.click_command }},
            [
                "delete", "99282721-934c-42be-ba4d-a93cbfda2644",
            ]
        )

        self.assertIn("Error: {'result': 'not found'}\n", result.output)
        self.assertEqual(1, result.exit_code)
