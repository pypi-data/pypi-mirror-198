{% set facade = "{g}{c}Facade".format(g=vars.click_group.capitalize(), c=vars.click_command.capitalize()) -%}
{% set service = "{g}_{c}_svc".format(g=vars.click_group, c=vars.click_command) -%}

import click
from opnsense_cli.formatters.cli_output import CliOutputFormatter
from opnsense_cli.callbacks.click import \
    formatter_from_formatter_name, bool_as_string, available_formats, int_as_string, tuple_to_csv, \
    resolve_linked_names_to_uuids
from opnsense_cli.types.click_param_type.int_or_empty import INT_OR_EMPTY
from opnsense_cli.types.click_param_type.csv import CSV
from opnsense_cli.commands.{{ vars.module_type }}.{{ vars.click_group }} import {{ vars.click_group }}
from opnsense_cli.api.client import ApiClient
from opnsense_cli.api.{{ vars.module_type }}.{{ vars.click_group }} import Settings, Service
from opnsense_cli.facades.commands.{{ vars.module_type }}.{{ vars.click_group }}.{{ vars.click_command }} import {{ facade }}

pass_api_client = click.make_pass_decorator(ApiClient)
pass_{{ vars.click_group }}_{{ vars.click_command }}_svc = click.make_pass_decorator({{ facade }})


@{{ vars.click_group }}.group()
@pass_api_client
@click.pass_context
def {{ vars.click_command }}(ctx, api_client: ApiClient, **kwargs):
    """
    Manage {{ vars.click_group }} {{ vars.click_command }}
    """
    settings_api = Settings(api_client)
    service_api = Service(api_client)
    ctx.obj = {{ facade }}(settings_api, service_api)


@{{ vars.click_command }}.command()
@click.option(
    '--output', '-o',
    help='Specifies the Output format.',
    default="table",
    type=click.Choice(available_formats()),
    callback=formatter_from_formatter_name,
    show_default=True,
)
@click.option(
    '--cols', '-c',
    help='Which columns should be printed? Pass empty string (-c '') to show all columns',
    default=(
        "uuid,{{ ",".join(vars.column_names) }}"
    ),
    show_default=True,
)
@pass_{{ service }}
def list({{ service }}: {{ facade }}, **kwargs):
    """
    Show all {{ vars.click_command }}
    """
    result = {{ service }}.list_{{ vars.click_command }}s()

    CliOutputFormatter(result, kwargs['output'], kwargs['cols'].split(",")).echo()


@{{ vars.click_command }}.command()
@click.argument('uuid')
@click.option(
    '--output', '-o',
    help='Specifies the Output format.',
    default="table",
    type=click.Choice(available_formats()),
    callback=formatter_from_formatter_name,
    show_default=True,
)
@click.option(
    '--cols', '-c',
    help='Which columns should be printed? Pass empty string (-c '') to show all columns',
    default=(
        "{{ ",".join(vars.column_names) }}"
    ),
    show_default=True,
)
@pass_{{ service }}
def show({{ service }}: {{ facade }}, **kwargs):
    """
    Show details for {{ vars.click_command }}
    """
    result = {{ service }}.show_{{ vars.click_command }}(kwargs['uuid'])

    CliOutputFormatter(result, kwargs['output'], kwargs['cols'].split(",")).echo()


@{{ vars.click_command }}.command()
{% for option in vars.click_options_create -%}
    {{ option }}
{% endfor %}
@click.option(
    '--output', '-o',
    help='Specifies the Output format.',
    default="plain",
    type=click.Choice(available_formats()),
    callback=formatter_from_formatter_name,
    show_default=True,
)
@click.option(
    '--cols', '-c',
    help='Which columns should be printed? Pass empty string (-c '') to show all columns',
    default="result,validations",
    show_default=True,
)
@pass_{{ service }}
def create({{ service }}: {{ facade }}, **kwargs):
    """
    Create a new {{ vars.click_command }}
    """
    json_payload = {
        '{{ vars.click_command }}': {
            {% for column in vars.column_names -%}
                "{{ column }}": kwargs['{{ column.lower() }}'],
            {% endfor %}
        }
    }

    result = {{ service }}.create_{{ vars.click_command }}(json_payload)

    CliOutputFormatter(result, kwargs['output'], kwargs['cols'].split(",")).echo()


@{{ vars.click_command }}.command()
@click.argument('uuid')
{% for option in vars.click_options_update -%}
    {{ option }}
{% endfor %}
@click.option(
    '--output', '-o',
    help='Specifies the Output format.',
    default="plain",
    type=click.Choice(available_formats()),
    callback=formatter_from_formatter_name,
    show_default=True,
)
@click.option(
    '--cols', '-c',
    help='Which columns should be printed? Pass empty string (-c '') to show all columns',
    default="result,validations",
    show_default=True,
)
@pass_{{ service }}
def update({{ service }}: {{ facade }}, **kwargs):
    """
    Update a {{ vars.click_command }}.
    """
    json_payload = {
        '{{ vars.click_command }}': {}
    }
    options = {{ vars.column_list }}
    for option in options:
        if kwargs[option.lower()] is not None:
            json_payload['{{ vars.click_command }}'][option] = kwargs[option.lower()]

    result = {{ service }}.update_{{ vars.click_command }}(kwargs['uuid'], json_payload)

    CliOutputFormatter(result, kwargs['output'], kwargs['cols'].split(",")).echo()


@{{ vars.click_command }}.command()
@click.argument('uuid')
@click.option(
    '--output', '-o',
    help='Specifies the Output format.',
    default="plain",
    type=click.Choice(available_formats()),
    callback=formatter_from_formatter_name,
    show_default=True,
)
@click.option(
    '--cols', '-c',
    help='Which columns should be printed? Pass empty string (-c '') to show all columns',
    default="result,validations",
    show_default=True,
)
@pass_{{ service }}
def delete({{ service }}: {{ facade }}, **kwargs):
    """
    Delete {{ vars.click_command }}
    """
    result = {{ service }}.delete_{{ vars.click_command }}(kwargs['uuid'])

    CliOutputFormatter(result, kwargs['output'], kwargs['cols'].split(",")).echo()
