stages:
- test
- build
- release


## https://cylab.be/blog/18/gitlab-automatically-testing-your-python-project
test:pylint:
  stage: test
  image: python:3.10
  script:
  - python -m pip install pylint --quiet
  - pylint --fail-under=8  --ignored-classes=_socketobject src/simpletcpclient/*.py

## https://cylab.be/blog/44/easy-testing-with-python-doctest-and-gitlab
#test:doctest:
#  stage: test
#  image: python:3.10
#  script:
#  - python -m pip install -r requirements.txt 
#  - python -m doctest -v src/simpletcpclient/__main__.py

build:
  stage: build
  image: python:3.10
  rules:
    - if: $CI_COMMIT_TAG
  artifacts:
    paths:
      - pyproject.toml
      - dist
  before_script:
    # install envsubst
    # python:3.10 is based on debian bullseye
    - apt-get update
    - apt-get install -y gettext-base
    - apt-get install -y python3-venv 
    - python3 -m pip install --upgrade build
    - python3 -m pip install --upgrade twine
  script:
    # write VERSION file
    - echo $CI_COMMIT_TAG > src/simpletcpclient/VERSION
    # create the new pyproject.toml
    - envsubst < pyproject.tmpl > pyproject.toml
    - python3 -m build
    # upload to pypi
    - python3 -m twine upload dist/*

release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - echo "running release_job"
  # https://docs.gitlab.com/ee/ci/yaml/#release
  release:
    tag_name: '$CI_COMMIT_TAG'
    description: '$CI_COMMIT_TAG'




