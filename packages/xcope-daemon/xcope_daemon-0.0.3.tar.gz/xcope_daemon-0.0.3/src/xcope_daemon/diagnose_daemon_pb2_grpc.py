# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from xcope_daemon import diagnose_daemon_pb2 as xcope__daemon_dot_diagnose__daemon__pb2


class DiagnoseDaemonStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetFeedStream = channel.unary_stream(
            '/xcope_daemon.DiagnoseDaemon/GetFeedStream',
            request_serializer=xcope__daemon_dot_diagnose__daemon__pb2.GetFeedRequest.SerializeToString,
            response_deserializer=xcope__daemon_dot_diagnose__daemon__pb2.FeedData.FromString,
        )
        self.PostFeedResult = channel.unary_unary(
            '/xcope_daemon.DiagnoseDaemon/PostFeedResult',
            request_serializer=xcope__daemon_dot_diagnose__daemon__pb2.PostFeedRequest.SerializeToString,
            response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
        )
        self.PostDiagnoseResult = channel.unary_unary(
            '/xcope_daemon.DiagnoseDaemon/PostDiagnoseResult',
            request_serializer=xcope__daemon_dot_diagnose__daemon__pb2.PostResultRequest.SerializeToString,
            response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
        )


class DiagnoseDaemonServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetFeedStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PostFeedResult(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PostDiagnoseResult(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DiagnoseDaemonServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'GetFeedStream': grpc.unary_stream_rpc_method_handler(
            servicer.GetFeedStream,
            request_deserializer=xcope__daemon_dot_diagnose__daemon__pb2.GetFeedRequest.FromString,
            response_serializer=xcope__daemon_dot_diagnose__daemon__pb2.FeedData.SerializeToString,
        ),
        'PostFeedResult': grpc.unary_unary_rpc_method_handler(
            servicer.PostFeedResult,
            request_deserializer=xcope__daemon_dot_diagnose__daemon__pb2.PostFeedRequest.FromString,
            response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
        ),
        'PostDiagnoseResult': grpc.unary_unary_rpc_method_handler(
            servicer.PostDiagnoseResult,
            request_deserializer=xcope__daemon_dot_diagnose__daemon__pb2.PostResultRequest.FromString,
            response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'xcope_daemon.DiagnoseDaemon', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))

 # This class is part of an EXPERIMENTAL API.


class DiagnoseDaemon(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetFeedStream(request,
                      target,
                      options=(),
                      channel_credentials=None,
                      call_credentials=None,
                      insecure=False,
                      compression=None,
                      wait_for_ready=None,
                      timeout=None,
                      metadata=None):
        return grpc.experimental.unary_stream(request, target, '/xcope_daemon.DiagnoseDaemon/GetFeedStream',
                                              xcope__daemon_dot_diagnose__daemon__pb2.GetFeedRequest.SerializeToString,
                                              xcope__daemon_dot_diagnose__daemon__pb2.FeedData.FromString,
                                              options, channel_credentials,
                                              insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PostFeedResult(request,
                       target,
                       options=(),
                       channel_credentials=None,
                       call_credentials=None,
                       insecure=False,
                       compression=None,
                       wait_for_ready=None,
                       timeout=None,
                       metadata=None):
        return grpc.experimental.unary_unary(request, target, '/xcope_daemon.DiagnoseDaemon/PostFeedResult',
                                             xcope__daemon_dot_diagnose__daemon__pb2.PostFeedRequest.SerializeToString,
                                             google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PostDiagnoseResult(request,
                           target,
                           options=(),
                           channel_credentials=None,
                           call_credentials=None,
                           insecure=False,
                           compression=None,
                           wait_for_ready=None,
                           timeout=None,
                           metadata=None):
        return grpc.experimental.unary_unary(request, target, '/xcope_daemon.DiagnoseDaemon/PostDiagnoseResult',
                                             xcope__daemon_dot_diagnose__daemon__pb2.PostResultRequest.SerializeToString,
                                             google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
