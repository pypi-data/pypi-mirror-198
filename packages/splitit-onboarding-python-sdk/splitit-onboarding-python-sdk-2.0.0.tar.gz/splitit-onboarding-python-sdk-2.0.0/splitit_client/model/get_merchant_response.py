# coding: utf-8

"""
    Splitit.OnBoarding.Api.V2

    Splitit's Onboarding API

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from splitit_client import schemas  # noqa: F401


class GetMerchantResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by Konfig.
    Ref: https://konfigthis.com

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "legalName",
            "country",
            "annualSales",
            "phone",
            "name",
            "merchantTempId",
            "status",
        }
        
        class properties:
            name = schemas.StrSchema
            legalName = schemas.StrSchema
            phone = schemas.StrSchema
            country = schemas.StrSchema
            annualSales = schemas.StrSchema
            status = schemas.StrSchema
            merchantTempId = schemas.StrSchema
            __annotations__ = {
                "name": name,
                "legalName": legalName,
                "phone": phone,
                "country": country,
                "annualSales": annualSales,
                "status": status,
                "merchantTempId": merchantTempId,
            }
    
    legalName: MetaOapg.properties.legalName
    country: MetaOapg.properties.country
    annualSales: MetaOapg.properties.annualSales
    phone: MetaOapg.properties.phone
    name: MetaOapg.properties.name
    merchantTempId: MetaOapg.properties.merchantTempId
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["legalName"]) -> MetaOapg.properties.legalName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phone"]) -> MetaOapg.properties.phone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["annualSales"]) -> MetaOapg.properties.annualSales: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["merchantTempId"]) -> MetaOapg.properties.merchantTempId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "legalName", "phone", "country", "annualSales", "status", "merchantTempId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["legalName"]) -> MetaOapg.properties.legalName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phone"]) -> MetaOapg.properties.phone: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["annualSales"]) -> MetaOapg.properties.annualSales: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["merchantTempId"]) -> MetaOapg.properties.merchantTempId: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "legalName", "phone", "country", "annualSales", "status", "merchantTempId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        legalName: typing.Union[MetaOapg.properties.legalName, str, ],
        country: typing.Union[MetaOapg.properties.country, str, ],
        annualSales: typing.Union[MetaOapg.properties.annualSales, str, ],
        phone: typing.Union[MetaOapg.properties.phone, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        merchantTempId: typing.Union[MetaOapg.properties.merchantTempId, str, ],
        status: typing.Union[MetaOapg.properties.status, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GetMerchantResponse':
        return super().__new__(
            cls,
            *args,
            legalName=legalName,
            country=country,
            annualSales=annualSales,
            phone=phone,
            name=name,
            merchantTempId=merchantTempId,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )
