# coding: utf-8

"""
    Splitit.OnBoarding.Api.V2

    Splitit's Onboarding API

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from splitit_client import schemas  # noqa: F401


class CreateMerchantRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by Konfig.
    Ref: https://konfigthis.com

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "legalName",
            "phoneNumber",
            "publicName",
            "vertical",
            "countryIso2",
            "currencyCode",
            "email",
        }
        
        class properties:
            
            
            class publicName(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    min_length = 1
            
            
            class email(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    min_length = 1
            
            
            class phoneNumber(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    min_length = 1
            
            
            class countryIso2(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    min_length = 1
            
            
            class legalName(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    min_length = 1
            
            
            class currencyCode(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    min_length = 1
            
            
            class vertical(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    min_length = 1
            tier = schemas.StrSchema
            businessStreetAddress = schemas.StrSchema
            businessCity = schemas.StrSchema
            businessPostalCode = schemas.StrSchema
            businessCountry = schemas.StrSchema
            businessState = schemas.StrSchema
            subVertical = schemas.StrSchema
            nameOnBankAccount = schemas.StrSchema
            incorporationCountry = schemas.StrSchema
            accountNumber = schemas.StrSchema
            routingNumber = schemas.StrSchema
            taxIdNumber = schemas.StrSchema
            totalAnnualSales = schemas.StrSchema
            platformName = schemas.StrSchema
            __annotations__ = {
                "publicName": publicName,
                "email": email,
                "phoneNumber": phoneNumber,
                "countryIso2": countryIso2,
                "legalName": legalName,
                "currencyCode": currencyCode,
                "vertical": vertical,
                "tier": tier,
                "businessStreetAddress": businessStreetAddress,
                "businessCity": businessCity,
                "businessPostalCode": businessPostalCode,
                "businessCountry": businessCountry,
                "businessState": businessState,
                "subVertical": subVertical,
                "nameOnBankAccount": nameOnBankAccount,
                "incorporationCountry": incorporationCountry,
                "accountNumber": accountNumber,
                "routingNumber": routingNumber,
                "taxIdNumber": taxIdNumber,
                "totalAnnualSales": totalAnnualSales,
                "platformName": platformName,
            }
    
    legalName: MetaOapg.properties.legalName
    phoneNumber: MetaOapg.properties.phoneNumber
    publicName: MetaOapg.properties.publicName
    vertical: MetaOapg.properties.vertical
    countryIso2: MetaOapg.properties.countryIso2
    currencyCode: MetaOapg.properties.currencyCode
    email: MetaOapg.properties.email
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["publicName"]) -> MetaOapg.properties.publicName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phoneNumber"]) -> MetaOapg.properties.phoneNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["countryIso2"]) -> MetaOapg.properties.countryIso2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["legalName"]) -> MetaOapg.properties.legalName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currencyCode"]) -> MetaOapg.properties.currencyCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vertical"]) -> MetaOapg.properties.vertical: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tier"]) -> MetaOapg.properties.tier: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["businessStreetAddress"]) -> MetaOapg.properties.businessStreetAddress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["businessCity"]) -> MetaOapg.properties.businessCity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["businessPostalCode"]) -> MetaOapg.properties.businessPostalCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["businessCountry"]) -> MetaOapg.properties.businessCountry: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["businessState"]) -> MetaOapg.properties.businessState: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subVertical"]) -> MetaOapg.properties.subVertical: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nameOnBankAccount"]) -> MetaOapg.properties.nameOnBankAccount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["incorporationCountry"]) -> MetaOapg.properties.incorporationCountry: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accountNumber"]) -> MetaOapg.properties.accountNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["routingNumber"]) -> MetaOapg.properties.routingNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["taxIdNumber"]) -> MetaOapg.properties.taxIdNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalAnnualSales"]) -> MetaOapg.properties.totalAnnualSales: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["platformName"]) -> MetaOapg.properties.platformName: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["publicName", "email", "phoneNumber", "countryIso2", "legalName", "currencyCode", "vertical", "tier", "businessStreetAddress", "businessCity", "businessPostalCode", "businessCountry", "businessState", "subVertical", "nameOnBankAccount", "incorporationCountry", "accountNumber", "routingNumber", "taxIdNumber", "totalAnnualSales", "platformName", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["publicName"]) -> MetaOapg.properties.publicName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phoneNumber"]) -> MetaOapg.properties.phoneNumber: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["countryIso2"]) -> MetaOapg.properties.countryIso2: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["legalName"]) -> MetaOapg.properties.legalName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currencyCode"]) -> MetaOapg.properties.currencyCode: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vertical"]) -> MetaOapg.properties.vertical: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tier"]) -> typing.Union[MetaOapg.properties.tier, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["businessStreetAddress"]) -> typing.Union[MetaOapg.properties.businessStreetAddress, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["businessCity"]) -> typing.Union[MetaOapg.properties.businessCity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["businessPostalCode"]) -> typing.Union[MetaOapg.properties.businessPostalCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["businessCountry"]) -> typing.Union[MetaOapg.properties.businessCountry, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["businessState"]) -> typing.Union[MetaOapg.properties.businessState, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subVertical"]) -> typing.Union[MetaOapg.properties.subVertical, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nameOnBankAccount"]) -> typing.Union[MetaOapg.properties.nameOnBankAccount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["incorporationCountry"]) -> typing.Union[MetaOapg.properties.incorporationCountry, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accountNumber"]) -> typing.Union[MetaOapg.properties.accountNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["routingNumber"]) -> typing.Union[MetaOapg.properties.routingNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["taxIdNumber"]) -> typing.Union[MetaOapg.properties.taxIdNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalAnnualSales"]) -> typing.Union[MetaOapg.properties.totalAnnualSales, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["platformName"]) -> typing.Union[MetaOapg.properties.platformName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["publicName", "email", "phoneNumber", "countryIso2", "legalName", "currencyCode", "vertical", "tier", "businessStreetAddress", "businessCity", "businessPostalCode", "businessCountry", "businessState", "subVertical", "nameOnBankAccount", "incorporationCountry", "accountNumber", "routingNumber", "taxIdNumber", "totalAnnualSales", "platformName", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        legalName: typing.Union[MetaOapg.properties.legalName, str, ],
        phoneNumber: typing.Union[MetaOapg.properties.phoneNumber, str, ],
        publicName: typing.Union[MetaOapg.properties.publicName, str, ],
        vertical: typing.Union[MetaOapg.properties.vertical, str, ],
        countryIso2: typing.Union[MetaOapg.properties.countryIso2, str, ],
        currencyCode: typing.Union[MetaOapg.properties.currencyCode, str, ],
        email: typing.Union[MetaOapg.properties.email, str, ],
        tier: typing.Union[MetaOapg.properties.tier, str, schemas.Unset] = schemas.unset,
        businessStreetAddress: typing.Union[MetaOapg.properties.businessStreetAddress, str, schemas.Unset] = schemas.unset,
        businessCity: typing.Union[MetaOapg.properties.businessCity, str, schemas.Unset] = schemas.unset,
        businessPostalCode: typing.Union[MetaOapg.properties.businessPostalCode, str, schemas.Unset] = schemas.unset,
        businessCountry: typing.Union[MetaOapg.properties.businessCountry, str, schemas.Unset] = schemas.unset,
        businessState: typing.Union[MetaOapg.properties.businessState, str, schemas.Unset] = schemas.unset,
        subVertical: typing.Union[MetaOapg.properties.subVertical, str, schemas.Unset] = schemas.unset,
        nameOnBankAccount: typing.Union[MetaOapg.properties.nameOnBankAccount, str, schemas.Unset] = schemas.unset,
        incorporationCountry: typing.Union[MetaOapg.properties.incorporationCountry, str, schemas.Unset] = schemas.unset,
        accountNumber: typing.Union[MetaOapg.properties.accountNumber, str, schemas.Unset] = schemas.unset,
        routingNumber: typing.Union[MetaOapg.properties.routingNumber, str, schemas.Unset] = schemas.unset,
        taxIdNumber: typing.Union[MetaOapg.properties.taxIdNumber, str, schemas.Unset] = schemas.unset,
        totalAnnualSales: typing.Union[MetaOapg.properties.totalAnnualSales, str, schemas.Unset] = schemas.unset,
        platformName: typing.Union[MetaOapg.properties.platformName, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CreateMerchantRequest':
        return super().__new__(
            cls,
            *args,
            legalName=legalName,
            phoneNumber=phoneNumber,
            publicName=publicName,
            vertical=vertical,
            countryIso2=countryIso2,
            currencyCode=currencyCode,
            email=email,
            tier=tier,
            businessStreetAddress=businessStreetAddress,
            businessCity=businessCity,
            businessPostalCode=businessPostalCode,
            businessCountry=businessCountry,
            businessState=businessState,
            subVertical=subVertical,
            nameOnBankAccount=nameOnBankAccount,
            incorporationCountry=incorporationCountry,
            accountNumber=accountNumber,
            routingNumber=routingNumber,
            taxIdNumber=taxIdNumber,
            totalAnnualSales=totalAnnualSales,
            platformName=platformName,
            _configuration=_configuration,
            **kwargs,
        )
