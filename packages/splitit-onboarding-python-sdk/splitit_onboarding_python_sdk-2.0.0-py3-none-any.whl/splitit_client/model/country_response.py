# coding: utf-8

"""
    Splitit.OnBoarding.Api.V2

    Splitit's Onboarding API

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from splitit_client import schemas  # noqa: F401


class CountryResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by Konfig.
    Ref: https://konfigthis.com

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "isoNumber",
            "name",
            "isoA3",
            "id",
            "isoA2",
        }
        
        class properties:
            id = schemas.StrSchema
            name = schemas.StrSchema
            isoA2 = schemas.StrSchema
            isoA3 = schemas.StrSchema
            
            
            class isoNumber(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'isoNumber':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "id": id,
                "name": name,
                "isoA2": isoA2,
                "isoA3": isoA3,
                "isoNumber": isoNumber,
            }
    
    isoNumber: MetaOapg.properties.isoNumber
    name: MetaOapg.properties.name
    isoA3: MetaOapg.properties.isoA3
    id: MetaOapg.properties.id
    isoA2: MetaOapg.properties.isoA2
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isoA2"]) -> MetaOapg.properties.isoA2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isoA3"]) -> MetaOapg.properties.isoA3: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isoNumber"]) -> MetaOapg.properties.isoNumber: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "isoA2", "isoA3", "isoNumber", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isoA2"]) -> MetaOapg.properties.isoA2: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isoA3"]) -> MetaOapg.properties.isoA3: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isoNumber"]) -> MetaOapg.properties.isoNumber: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "isoA2", "isoA3", "isoNumber", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        isoNumber: typing.Union[MetaOapg.properties.isoNumber, None, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        isoA3: typing.Union[MetaOapg.properties.isoA3, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        isoA2: typing.Union[MetaOapg.properties.isoA2, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CountryResponse':
        return super().__new__(
            cls,
            *args,
            isoNumber=isoNumber,
            name=name,
            isoA3=isoA3,
            id=id,
            isoA2=isoA2,
            _configuration=_configuration,
            **kwargs,
        )
