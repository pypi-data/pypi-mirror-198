[project]
name = "DukeTypem2D"
authors = [
    {name = "Ingmar Splitt", email = "ingmar.splitt@tu-dresden.de"},
    {name = "Torben Menke"},
]
maintainers = [
    {name = "Ingmar Splitt", email = "ingmar.splitt@tu-dresden.de"},
]
description = "Improve readability, spelling and expression of your text documents"
keywords = ["spelling", "latex", "readability", "typos", "misspelling", "expression", "phrasing", "diction"]

readme = {file = "README.md", content-type = "text/markdown"}
license = {file = "LICENSE"}
dynamic = ["version"]

classifiers = [
    "Intended Audience :: Science/Research",
    "Programming Language :: Python :: 3",
    "Operating System :: OS Independent",
    "Natural Language :: English",
    "Development Status :: 3 - Alpha",
]

requires-python = ">=3.7"
dependencies = [
    "click",
    "pydantic",
    "PyYAML",
    "toml",
]

[project.urls]
homepage = "https://pypi.org/project/duketypem2d/"
documentation = "https://pypi.org/project/duketypem2d/"
repository = "https://github.com/orgua/DukeTypem2D"

[project.scripts]
duketypem = "duke_typem.cli:cli"

[project.optional-dependencies]
web = ["fastapi"]
test = [
    "pytest",
    "pytest-cov",
    "pytest-click",
    "coverage",
]
dev = [
    "build",
    "twine",
    "black",
    "pylint",
    "flake8",
    "pyright",
    "pre-commit",
    "ruff",
    "tomli", # for codespell & py < 3.11
]

[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
platforms = ["unix", "linux", "osx", "cygwin", "win32", "win64"]
zip-safe = true

[tool.setuptools.packages.find]
where = ["src"]
namespaces = false

[tool.setuptools.dynamic]
version = {attr = "duke_typem.__version__"}
#readme = {file = ["README.md"]}

[tool.pytest.ini_options]
addopts = "-vvv" # opts: verbose result for each tests
# TODO: add something like "--cov --cov-report html --cov-report term-missing --cov-fail-under 95"

[tool.coverage.run]
source = ["src"]

[tool.pyright]
root = "./"
include = ['./src/duke_typem', './src/examples', "./tests"]
pythonVersion = "3.8"
pythonPlatform = "All"
reportMissingParameterType = true

[tool.codespell]
builtin = "clear,rare,informal,usage,code,en-GB_to_en-US"

skip = ".github/workflows/sphinx_to_pages.yml" # does not honor that hidden paths are skipped
ignore-words-list = "astroid,jupyter"

# options without argument
check-filenames = ""
# check-hidden = ""

[tool.isort]
profile = "black"
filter_files = true
force_single_line = true

[tool.flake8]
max-line-length = 100
require-plugins = [
    # https://github.com/DmytroLitvinov/awesome-flake8-extensions

    ### Bugs & Code-Smells
    "flake8-bugbear",
    "flake8-secure-coding-standard",
    "flake8-bandit",
    "flake8-builtins",

    ### Clean Code
    "flake8-comprehensions",
    "flake8-simplify",
    "flake8-eradicate",
    "flake8-commas",

    ### Limitations
    "flake8-blind-except",
    "flake8-logging-format",
    "flake8-print",

    ### Documentation
    "flake8-comments",
    # flake8-docstrings
    # flake8-rst-docstrings

    ### Test-Improvements
    "flake8-assertive",
]

extend-ignore = [
    # black-formatter-specific
    "E203",
    # open() vs os.open()
    "SCS109",
    # hideous commas
    "C812",
    "C815",
    "C813",
    # DOCString TODO: reduce here
    "D100",
    "D102",
    "D103",
]

per-file-ignores = """
# asserts (in tests are ok), also allow print() instead of logger
tests/*: SCS108, S101, T201
# allow print()
src/examples/*: T201
"""

count = true
statistics = true

[tool.ruff]  # TODO: once stable it replaces flake8, pyupgrade, isort, ...
line-length = 100
select = [
    "A",
    "ARG",
    "B",
    "C",
    "C4",
    "E",
    "ERA",
    "F",
#    "I",  # incomplete isort
    "N",
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    "RET",
    "S",
    "T10",
    "UP",
    "W",  # TODO: just a proposed starting-config
]
ignore = ["A003"]
target-version = "py38"

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**" = ["ARG", "S"]

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10
