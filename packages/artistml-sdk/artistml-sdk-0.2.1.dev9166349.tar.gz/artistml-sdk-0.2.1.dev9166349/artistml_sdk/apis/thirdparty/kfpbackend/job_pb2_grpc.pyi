"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import google.protobuf.empty_pb2
import grpc
import ...thirdparty.kfpbackend.job_pb2

class JobServiceStub:
    def __init__(self, channel: grpc.Channel) -> None: ...
    CreateJob: grpc.UnaryUnaryMultiCallable[
        thirdparty.kfpbackend.job_pb2.CreateJobRequest,
        thirdparty.kfpbackend.job_pb2.Job]
    """Creates a new job."""

    GetJob: grpc.UnaryUnaryMultiCallable[
        thirdparty.kfpbackend.job_pb2.GetJobRequest,
        thirdparty.kfpbackend.job_pb2.Job]
    """Finds a specific job by ID."""

    ListJobs: grpc.UnaryUnaryMultiCallable[
        thirdparty.kfpbackend.job_pb2.ListJobsRequest,
        thirdparty.kfpbackend.job_pb2.ListJobsResponse]
    """Finds all jobs."""

    EnableJob: grpc.UnaryUnaryMultiCallable[
        thirdparty.kfpbackend.job_pb2.EnableJobRequest,
        google.protobuf.empty_pb2.Empty]
    """Restarts a job that was previously stopped. All runs associated with the job will continue."""

    DisableJob: grpc.UnaryUnaryMultiCallable[
        thirdparty.kfpbackend.job_pb2.DisableJobRequest,
        google.protobuf.empty_pb2.Empty]
    """Stops a job and all its associated runs. The job is not deleted."""

    DeleteJob: grpc.UnaryUnaryMultiCallable[
        thirdparty.kfpbackend.job_pb2.DeleteJobRequest,
        google.protobuf.empty_pb2.Empty]
    """Deletes a job."""


class JobServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def CreateJob(self,
        request: thirdparty.kfpbackend.job_pb2.CreateJobRequest,
        context: grpc.ServicerContext,
    ) -> thirdparty.kfpbackend.job_pb2.Job:
        """Creates a new job."""
        pass

    @abc.abstractmethod
    def GetJob(self,
        request: thirdparty.kfpbackend.job_pb2.GetJobRequest,
        context: grpc.ServicerContext,
    ) -> thirdparty.kfpbackend.job_pb2.Job:
        """Finds a specific job by ID."""
        pass

    @abc.abstractmethod
    def ListJobs(self,
        request: thirdparty.kfpbackend.job_pb2.ListJobsRequest,
        context: grpc.ServicerContext,
    ) -> thirdparty.kfpbackend.job_pb2.ListJobsResponse:
        """Finds all jobs."""
        pass

    @abc.abstractmethod
    def EnableJob(self,
        request: thirdparty.kfpbackend.job_pb2.EnableJobRequest,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """Restarts a job that was previously stopped. All runs associated with the job will continue."""
        pass

    @abc.abstractmethod
    def DisableJob(self,
        request: thirdparty.kfpbackend.job_pb2.DisableJobRequest,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """Stops a job and all its associated runs. The job is not deleted."""
        pass

    @abc.abstractmethod
    def DeleteJob(self,
        request: thirdparty.kfpbackend.job_pb2.DeleteJobRequest,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """Deletes a job."""
        pass


def add_JobServiceServicer_to_server(servicer: JobServiceServicer, server: grpc.Server) -> None: ...
