"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import google.protobuf.empty_pb2
import grpc
import ...thirdparty.kfpbackend.run_pb2

class RunServiceStub:
    def __init__(self, channel: grpc.Channel) -> None: ...
    CreateRun: grpc.UnaryUnaryMultiCallable[
        thirdparty.kfpbackend.run_pb2.CreateRunRequest,
        thirdparty.kfpbackend.run_pb2.RunDetail]
    """Creates a new run."""

    GetRun: grpc.UnaryUnaryMultiCallable[
        thirdparty.kfpbackend.run_pb2.GetRunRequest,
        thirdparty.kfpbackend.run_pb2.RunDetail]
    """Finds a specific run by ID."""

    ListRuns: grpc.UnaryUnaryMultiCallable[
        thirdparty.kfpbackend.run_pb2.ListRunsRequest,
        thirdparty.kfpbackend.run_pb2.ListRunsResponse]
    """Finds all runs."""

    ArchiveRun: grpc.UnaryUnaryMultiCallable[
        thirdparty.kfpbackend.run_pb2.ArchiveRunRequest,
        google.protobuf.empty_pb2.Empty]
    """Archives a run."""

    UnarchiveRun: grpc.UnaryUnaryMultiCallable[
        thirdparty.kfpbackend.run_pb2.UnarchiveRunRequest,
        google.protobuf.empty_pb2.Empty]
    """Restores an archived run."""

    DeleteRun: grpc.UnaryUnaryMultiCallable[
        thirdparty.kfpbackend.run_pb2.DeleteRunRequest,
        google.protobuf.empty_pb2.Empty]
    """Deletes a run."""

    ReportRunMetrics: grpc.UnaryUnaryMultiCallable[
        thirdparty.kfpbackend.run_pb2.ReportRunMetricsRequest,
        thirdparty.kfpbackend.run_pb2.ReportRunMetricsResponse]
    """ReportRunMetrics reports metrics of a run. Each metric is reported in its
    own transaction, so this API accepts partial failures. Metric can be
    uniquely identified by (run_id, node_id, name). Duplicate reporting will be
    ignored by the API. First reporting wins.
    """

    ReadArtifact: grpc.UnaryUnaryMultiCallable[
        thirdparty.kfpbackend.run_pb2.ReadArtifactRequest,
        thirdparty.kfpbackend.run_pb2.ReadArtifactResponse]
    """Finds a run's artifact data."""

    TerminateRun: grpc.UnaryUnaryMultiCallable[
        thirdparty.kfpbackend.run_pb2.TerminateRunRequest,
        google.protobuf.empty_pb2.Empty]
    """Terminates an active run."""

    RetryRun: grpc.UnaryUnaryMultiCallable[
        thirdparty.kfpbackend.run_pb2.RetryRunRequest,
        google.protobuf.empty_pb2.Empty]
    """Re-initiates a failed or terminated run."""


class RunServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def CreateRun(self,
        request: thirdparty.kfpbackend.run_pb2.CreateRunRequest,
        context: grpc.ServicerContext,
    ) -> thirdparty.kfpbackend.run_pb2.RunDetail:
        """Creates a new run."""
        pass

    @abc.abstractmethod
    def GetRun(self,
        request: thirdparty.kfpbackend.run_pb2.GetRunRequest,
        context: grpc.ServicerContext,
    ) -> thirdparty.kfpbackend.run_pb2.RunDetail:
        """Finds a specific run by ID."""
        pass

    @abc.abstractmethod
    def ListRuns(self,
        request: thirdparty.kfpbackend.run_pb2.ListRunsRequest,
        context: grpc.ServicerContext,
    ) -> thirdparty.kfpbackend.run_pb2.ListRunsResponse:
        """Finds all runs."""
        pass

    @abc.abstractmethod
    def ArchiveRun(self,
        request: thirdparty.kfpbackend.run_pb2.ArchiveRunRequest,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """Archives a run."""
        pass

    @abc.abstractmethod
    def UnarchiveRun(self,
        request: thirdparty.kfpbackend.run_pb2.UnarchiveRunRequest,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """Restores an archived run."""
        pass

    @abc.abstractmethod
    def DeleteRun(self,
        request: thirdparty.kfpbackend.run_pb2.DeleteRunRequest,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """Deletes a run."""
        pass

    @abc.abstractmethod
    def ReportRunMetrics(self,
        request: thirdparty.kfpbackend.run_pb2.ReportRunMetricsRequest,
        context: grpc.ServicerContext,
    ) -> thirdparty.kfpbackend.run_pb2.ReportRunMetricsResponse:
        """ReportRunMetrics reports metrics of a run. Each metric is reported in its
        own transaction, so this API accepts partial failures. Metric can be
        uniquely identified by (run_id, node_id, name). Duplicate reporting will be
        ignored by the API. First reporting wins.
        """
        pass

    @abc.abstractmethod
    def ReadArtifact(self,
        request: thirdparty.kfpbackend.run_pb2.ReadArtifactRequest,
        context: grpc.ServicerContext,
    ) -> thirdparty.kfpbackend.run_pb2.ReadArtifactResponse:
        """Finds a run's artifact data."""
        pass

    @abc.abstractmethod
    def TerminateRun(self,
        request: thirdparty.kfpbackend.run_pb2.TerminateRunRequest,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """Terminates an active run."""
        pass

    @abc.abstractmethod
    def RetryRun(self,
        request: thirdparty.kfpbackend.run_pb2.RetryRunRequest,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """Re-initiates a failed or terminated run."""
        pass


def add_RunServiceServicer_to_server(servicer: RunServiceServicer, server: grpc.Server) -> None: ...
