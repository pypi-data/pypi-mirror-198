"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class CreateVisualizationRequest(google.protobuf.message.Message):
    """Create visualization by providing the type of visualization that is desired
    and input data paths. Input dat paths are assumed to be unique and are used
    for determining output path.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    VISUALIZATION_FIELD_NUMBER: builtins.int
    NAMESPACE_FIELD_NUMBER: builtins.int
    @property
    def visualization(self) -> global___Visualization: ...
    namespace: typing.Text
    def __init__(self,
        *,
        visualization: typing.Optional[global___Visualization] = ...,
        namespace: typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["visualization",b"visualization"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["namespace",b"namespace","visualization",b"visualization"]) -> None: ...
global___CreateVisualizationRequest = CreateVisualizationRequest

class Visualization(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    class _Type:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _TypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[Visualization._Type.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        ROC_CURVE: Visualization._Type.ValueType  # 0
        TFDV: Visualization._Type.ValueType  # 1
        TFMA: Visualization._Type.ValueType  # 2
        TABLE: Visualization._Type.ValueType  # 3
        CUSTOM: Visualization._Type.ValueType  # 4
    class Type(_Type, metaclass=_TypeEnumTypeWrapper):
        """Type of visualization to be generated.
        This is required when creating the pipeline through CreateVisualization
        API.
        """
        pass

    ROC_CURVE: Visualization.Type.ValueType  # 0
    TFDV: Visualization.Type.ValueType  # 1
    TFMA: Visualization.Type.ValueType  # 2
    TABLE: Visualization.Type.ValueType  # 3
    CUSTOM: Visualization.Type.ValueType  # 4

    TYPE_FIELD_NUMBER: builtins.int
    SOURCE_FIELD_NUMBER: builtins.int
    ARGUMENTS_FIELD_NUMBER: builtins.int
    HTML_FIELD_NUMBER: builtins.int
    ERROR_FIELD_NUMBER: builtins.int
    type: global___Visualization.Type.ValueType
    source: typing.Text
    """Path pattern of input data to be used during generation of visualizations.
    This is required when creating the pipeline through CreateVisualization
    API.
    """

    arguments: typing.Text
    """Variables to be used during generation of a visualization.
    This should be provided as a JSON string.
    This is required when creating the pipeline through CreateVisualization
    API.
    """

    html: typing.Text
    """Output. Generated visualization html."""

    error: typing.Text
    """In case any error happens when generating visualizations, only
    visualization ID and the error message are returned. Client has the
    flexibility of choosing how to handle the error.
    """

    def __init__(self,
        *,
        type: global___Visualization.Type.ValueType = ...,
        source: typing.Text = ...,
        arguments: typing.Text = ...,
        html: typing.Text = ...,
        error: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["arguments",b"arguments","error",b"error","html",b"html","source",b"source","type",b"type"]) -> None: ...
global___Visualization = Visualization
