[
  "test_compiler.py::test_arbitrary_nesting",
  "test_compiler.py::test_base64",
  "test_compiler.py::test_base64_encoded",
  "test_compiler.py::test_bool",
  "test_compiler.py::test_bytes",
  "test_compiler.py::test_char",
  "test_compiler.py::test_complex",
  "test_compiler.py::test_date",
  "test_compiler.py::test_datetime",
  "test_compiler.py::test_decimal",
  "test_compiler.py::test_decimal_infinity",
  "test_compiler.py::test_decimal_nan",
  "test_compiler.py::test_decimal_neg_infinity",
  "test_compiler.py::test_decimal_neg_zero",
  "test_compiler.py::test_decimal_scientific_notation",
  "test_compiler.py::test_dict",
  "test_compiler.py::test_dict_one_liner",
  "test_compiler.py::test_env",
  "test_compiler.py::test_float",
  "test_compiler.py::test_float_infinity",
  "test_compiler.py::test_float_nan",
  "test_compiler.py::test_float_neg_infinity",
  "test_compiler.py::test_float_scientific_notation",
  "test_compiler.py::test_hex",
  "test_compiler.py::test_homogeneous_list_one_liner",
  "test_compiler.py::test_int",
  "test_compiler.py::test_interval",
  "test_compiler.py::test_invalid_value_non_strict_mode",
  "test_compiler.py::test_ip_address",
  "test_compiler.py::test_ip_address_v6",
  "test_compiler.py::test_ip_network",
  "test_compiler.py::test_keys_in_quotes",
  "test_compiler.py::test_list",
  "test_compiler.py::test_list_at_root",
  "test_compiler.py::test_list_heterogeneous",
  "test_compiler.py::test_list_heterogeneous_one_liner",
  "test_compiler.py::test_list_nesting",
  "test_compiler.py::test_list_of_dicts",
  "test_compiler.py::test_list_of_dicts_at_root",
  "test_compiler.py::test_list_of_dicts_multiline",
  "test_compiler.py::test_list_one_liner",
  "test_compiler.py::test_num_seperators",
  "test_compiler.py::test_number_as_key",
  "test_compiler.py::test_oct",
  "test_compiler.py::test_parser",
  "test_compiler.py::test_path",
  "test_compiler.py::test_range",
  "test_compiler.py::test_range_inclusive",
  "test_compiler.py::test_regex",
  "test_compiler.py::test_set",
  "test_compiler.py::test_set_at_root",
  "test_compiler.py::test_set_heterogeneous",
  "test_compiler.py::test_set_heterogeneous_one_liner",
  "test_compiler.py::test_set_one_liner",
  "test_compiler.py::test_str",
  "test_compiler.py::test_str_as_int",
  "test_compiler.py::test_str_escaping",
  "test_compiler.py::test_str_escaping_single_quotes",
  "test_compiler.py::test_str_multi_line",
  "test_compiler.py::test_str_quotes",
  "test_compiler.py::test_str_single_quotes",
  "test_compiler.py::test_str_templating",
  "test_compiler.py::test_time",
  "test_compiler.py::test_tuple",
  "test_compiler.py::test_tuple_at_root",
  "test_compiler.py::test_tuple_heterogeneous",
  "test_compiler.py::test_tuple_heterogeneous_one_liner",
  "test_compiler.py::test_tuple_of_dicts_at_root",
  "test_compiler.py::test_tuple_one_liner",
  "test_compiler.py::test_types_as_keys",
  "test_compiler.py::test_url",
  "test_compiler.py::test_url_part",
  "test_compiler.py::test_version",
  "test_lexer.py::test_key[\" int \" .int: 1\\n- int ]",
  "test_lexer.py::test_key[\" int \" :int = 1\\n- int ]",
  "test_lexer.py::test_key[\" int \" :int: 1\\n- int ]",
  "test_lexer.py::test_key[\" int \" @int: 1\\n- int ]",
  "test_lexer.py::test_key[\" int\" .int: 1\\n- int]",
  "test_lexer.py::test_key[\" int\" :int = 1\\n- int]",
  "test_lexer.py::test_key[\" int\" :int: 1\\n- int]",
  "test_lexer.py::test_key[\" int\" @int: 1\\n- int]",
  "test_lexer.py::test_key[\" my_value \" .int: 1\\n- my_value ]",
  "test_lexer.py::test_key[\" my_value \" :int = 1\\n- my_value ]",
  "test_lexer.py::test_key[\" my_value \" :int: 1\\n- my_value ]",
  "test_lexer.py::test_key[\" my_value \" @int: 1\\n- my_value ]",
  "test_lexer.py::test_key[\" my_value\" .int: 1\\n- my_value]",
  "test_lexer.py::test_key[\" my_value\" :int = 1\\n- my_value]",
  "test_lexer.py::test_key[\" my_value\" :int: 1\\n- my_value]",
  "test_lexer.py::test_key[\" my_value\" @int: 1\\n- my_value]",
  "test_lexer.py::test_key[\"int \" .int: 1\\n-int ]",
  "test_lexer.py::test_key[\"int \" :int = 1\\n-int ]",
  "test_lexer.py::test_key[\"int \" :int: 1\\n-int ]",
  "test_lexer.py::test_key[\"int \" @int: 1\\n-int ]",
  "test_lexer.py::test_key[\"int\" .int: 1\\n-int]",
  "test_lexer.py::test_key[\"int\" :int = 1\\n-int]",
  "test_lexer.py::test_key[\"int\" :int: 1\\n-int]",
  "test_lexer.py::test_key[\"int\" @int: 1\\n-int]",
  "test_lexer.py::test_key[\"my_value \" .int: 1\\n-my_value ]",
  "test_lexer.py::test_key[\"my_value \" :int = 1\\n-my_value ]",
  "test_lexer.py::test_key[\"my_value \" :int: 1\\n-my_value ]",
  "test_lexer.py::test_key[\"my_value \" @int: 1\\n-my_value ]",
  "test_lexer.py::test_key[\"my_value\" .int: 1\\n-my_value]",
  "test_lexer.py::test_key[\"my_value\" :int = 1\\n-my_value]",
  "test_lexer.py::test_key[\"my_value\" :int: 1\\n-my_value]",
  "test_lexer.py::test_key[\"my_value\" @int: 1\\n-my_value]",
  "test_lexer.py::test_key[' int ' .int: 1\\n- int ]",
  "test_lexer.py::test_key[' int ' :int = 1\\n- int ]",
  "test_lexer.py::test_key[' int ' :int: 1\\n- int ]",
  "test_lexer.py::test_key[' int ' @int: 1\\n- int ]",
  "test_lexer.py::test_key[' int' .int: 1\\n- int]",
  "test_lexer.py::test_key[' int' :int = 1\\n- int]",
  "test_lexer.py::test_key[' int' :int: 1\\n- int]",
  "test_lexer.py::test_key[' int' @int: 1\\n- int]",
  "test_lexer.py::test_key[' my_value ' .int: 1\\n- my_value ]",
  "test_lexer.py::test_key[' my_value ' :int = 1\\n- my_value ]",
  "test_lexer.py::test_key[' my_value ' :int: 1\\n- my_value ]",
  "test_lexer.py::test_key[' my_value ' @int: 1\\n- my_value ]",
  "test_lexer.py::test_key[' my_value' .int: 1\\n- my_value]",
  "test_lexer.py::test_key[' my_value' :int = 1\\n- my_value]",
  "test_lexer.py::test_key[' my_value' :int: 1\\n- my_value]",
  "test_lexer.py::test_key[' my_value' @int: 1\\n- my_value]",
  "test_lexer.py::test_key['int ' .int: 1\\n-int ]",
  "test_lexer.py::test_key['int ' :int = 1\\n-int ]",
  "test_lexer.py::test_key['int ' :int: 1\\n-int ]",
  "test_lexer.py::test_key['int ' @int: 1\\n-int ]",
  "test_lexer.py::test_key['int' .int: 1\\n-int]",
  "test_lexer.py::test_key['int' :int = 1\\n-int]",
  "test_lexer.py::test_key['int' :int: 1\\n-int]",
  "test_lexer.py::test_key['int' @int: 1\\n-int]",
  "test_lexer.py::test_key['my_value ' .int: 1\\n-my_value ]",
  "test_lexer.py::test_key['my_value ' :int = 1\\n-my_value ]",
  "test_lexer.py::test_key['my_value ' :int: 1\\n-my_value ]",
  "test_lexer.py::test_key['my_value ' @int: 1\\n-my_value ]",
  "test_lexer.py::test_key['my_value' .int: 1\\n-my_value]",
  "test_lexer.py::test_key['my_value' :int = 1\\n-my_value]",
  "test_lexer.py::test_key['my_value' :int: 1\\n-my_value]",
  "test_lexer.py::test_key['my_value' @int: 1\\n-my_value]",
  "test_lexer.py::test_key[1 .int: 1\\n-1]",
  "test_lexer.py::test_key[1 :int = 1\\n-1]",
  "test_lexer.py::test_key[1 :int: 1\\n-1]",
  "test_lexer.py::test_key[1 @int: 1\\n-1]",
  "test_lexer.py::test_key[1hi .int: 1\\n-1hi]",
  "test_lexer.py::test_key[1hi :int = 1\\n-1hi]",
  "test_lexer.py::test_key[1hi :int: 1\\n-1hi]",
  "test_lexer.py::test_key[1hi @int: 1\\n-1hi]",
  "test_lexer.py::test_key[int .int: 1\\n-int]",
  "test_lexer.py::test_key[int :int = 1\\n-int]",
  "test_lexer.py::test_key[int :int: 1\\n-int]",
  "test_lexer.py::test_key[int @int: 1\\n-int]",
  "test_lexer.py::test_key[my_value .int: 1\\n-my_value]",
  "test_lexer.py::test_key[my_value :int = 1\\n-my_value]",
  "test_lexer.py::test_key[my_value :int: 1\\n-my_value]",
  "test_lexer.py::test_key[my_value @int: 1\\n-my_value]",
  "test_lexer.py::test_list",
  "test_lexer.py::test_list_heterogeneous",
  "test_lexer.py::test_list_of_dicts",
  "test_lexer.py::test_list_of_dicts_multiline",
  "test_lexer.py::test_multi_heterogeneous_list",
  "test_lexer.py::test_multi_homogeneous_list",
  "test_lexer.py::test_multilist",
  "test_lexer.py::test_nesting",
  "test_lexer.py::test_one_line_dict",
  "test_lexer.py::test_one_line_heterogeneous_list",
  "test_lexer.py::test_one_line_list",
  "test_lexer.py::test_set",
  "test_lexer.py::test_tokenization",
  "test_lexer.py::test_tuple",
  "test_lexer.py::test_type[\" int \" .int: 1\\n]",
  "test_lexer.py::test_type[\" int \" :int = 1\\n]",
  "test_lexer.py::test_type[\" int \" :int: 1\\n]",
  "test_lexer.py::test_type[\" int \" @int: 1\\n]",
  "test_lexer.py::test_type[\" int\" .int: 1\\n]",
  "test_lexer.py::test_type[\" int\" :int = 1\\n]",
  "test_lexer.py::test_type[\" int\" :int: 1\\n]",
  "test_lexer.py::test_type[\" int\" @int: 1\\n]",
  "test_lexer.py::test_type[\" my_value \" .int: 1\\n]",
  "test_lexer.py::test_type[\" my_value \" :int = 1\\n]",
  "test_lexer.py::test_type[\" my_value \" :int: 1\\n]",
  "test_lexer.py::test_type[\" my_value \" @int: 1\\n]",
  "test_lexer.py::test_type[\" my_value\" .int: 1\\n]",
  "test_lexer.py::test_type[\" my_value\" :int = 1\\n]",
  "test_lexer.py::test_type[\" my_value\" :int: 1\\n]",
  "test_lexer.py::test_type[\" my_value\" @int: 1\\n]",
  "test_lexer.py::test_type[\"int \" .int: 1\\n]",
  "test_lexer.py::test_type[\"int \" :int = 1\\n]",
  "test_lexer.py::test_type[\"int \" :int: 1\\n]",
  "test_lexer.py::test_type[\"int \" @int: 1\\n]",
  "test_lexer.py::test_type[\"int\" .int: 1\\n]",
  "test_lexer.py::test_type[\"int\" :int = 1\\n]",
  "test_lexer.py::test_type[\"int\" :int: 1\\n]",
  "test_lexer.py::test_type[\"int\" @int: 1\\n]",
  "test_lexer.py::test_type[\"my_value \" .int: 1\\n]",
  "test_lexer.py::test_type[\"my_value \" :int = 1\\n]",
  "test_lexer.py::test_type[\"my_value \" :int: 1\\n]",
  "test_lexer.py::test_type[\"my_value \" @int: 1\\n]",
  "test_lexer.py::test_type[\"my_value\" .int: 1\\n]",
  "test_lexer.py::test_type[\"my_value\" :int = 1\\n]",
  "test_lexer.py::test_type[\"my_value\" :int: 1\\n]",
  "test_lexer.py::test_type[\"my_value\" @int: 1\\n]",
  "test_lexer.py::test_type[' int ' .int: 1\\n]",
  "test_lexer.py::test_type[' int ' :int = 1\\n]",
  "test_lexer.py::test_type[' int ' :int: 1\\n]",
  "test_lexer.py::test_type[' int ' @int: 1\\n]",
  "test_lexer.py::test_type[' int' .int: 1\\n]",
  "test_lexer.py::test_type[' int' :int = 1\\n]",
  "test_lexer.py::test_type[' int' :int: 1\\n]",
  "test_lexer.py::test_type[' int' @int: 1\\n]",
  "test_lexer.py::test_type[' my_value ' .int: 1\\n]",
  "test_lexer.py::test_type[' my_value ' :int = 1\\n]",
  "test_lexer.py::test_type[' my_value ' :int: 1\\n]",
  "test_lexer.py::test_type[' my_value ' @int: 1\\n]",
  "test_lexer.py::test_type[' my_value' .int: 1\\n]",
  "test_lexer.py::test_type[' my_value' :int = 1\\n]",
  "test_lexer.py::test_type[' my_value' :int: 1\\n]",
  "test_lexer.py::test_type[' my_value' @int: 1\\n]",
  "test_lexer.py::test_type['int ' .int: 1\\n]",
  "test_lexer.py::test_type['int ' :int = 1\\n]",
  "test_lexer.py::test_type['int ' :int: 1\\n]",
  "test_lexer.py::test_type['int ' @int: 1\\n]",
  "test_lexer.py::test_type['int' .int: 1\\n]",
  "test_lexer.py::test_type['int' :int = 1\\n]",
  "test_lexer.py::test_type['int' :int: 1\\n]",
  "test_lexer.py::test_type['int' @int: 1\\n]",
  "test_lexer.py::test_type['my_value ' .int: 1\\n]",
  "test_lexer.py::test_type['my_value ' :int = 1\\n]",
  "test_lexer.py::test_type['my_value ' :int: 1\\n]",
  "test_lexer.py::test_type['my_value ' @int: 1\\n]",
  "test_lexer.py::test_type['my_value' .int: 1\\n]",
  "test_lexer.py::test_type['my_value' :int = 1\\n]",
  "test_lexer.py::test_type['my_value' :int: 1\\n]",
  "test_lexer.py::test_type['my_value' @int: 1\\n]",
  "test_lexer.py::test_type[int .int: 1\\n]",
  "test_lexer.py::test_type[int :int = 1\\n]",
  "test_lexer.py::test_type[int :int: 1\\n]",
  "test_lexer.py::test_type[int @int: 1\\n]",
  "test_lexer.py::test_type[my_value   .int    1\\n]",
  "test_lexer.py::test_type[my_value   .int  :   1\\n]",
  "test_lexer.py::test_type[my_value   .int:   1\\n]",
  "test_lexer.py::test_type[my_value   .int: 1\\n]",
  "test_lexer.py::test_type[my_value   :int    1\\n]",
  "test_lexer.py::test_type[my_value   :int   =   1\\n]",
  "test_lexer.py::test_type[my_value   :int  :   1\\n]",
  "test_lexer.py::test_type[my_value   :int =   1\\n]",
  "test_lexer.py::test_type[my_value   :int = 1\\n]",
  "test_lexer.py::test_type[my_value   :int:   1\\n]",
  "test_lexer.py::test_type[my_value   :int: 1\\n]",
  "test_lexer.py::test_type[my_value   @int    1\\n]",
  "test_lexer.py::test_type[my_value   @int  :   1\\n]",
  "test_lexer.py::test_type[my_value   @int:   1\\n]",
  "test_lexer.py::test_type[my_value   @int: 1\\n]",
  "test_lexer.py::test_type[my_value .int    1\\n]",
  "test_lexer.py::test_type[my_value .int  1\\n]",
  "test_lexer.py::test_type[my_value .int : 1\\n]",
  "test_lexer.py::test_type[my_value .int: 1\\n]",
  "test_lexer.py::test_type[my_value :int    1\\n]",
  "test_lexer.py::test_type[my_value :int  1\\n]",
  "test_lexer.py::test_type[my_value :int  =1\\n]",
  "test_lexer.py::test_type[my_value :int : 1\\n]",
  "test_lexer.py::test_type[my_value :int = 1\\n]",
  "test_lexer.py::test_type[my_value :int: 1\\n]",
  "test_lexer.py::test_type[my_value :int=1\\n]",
  "test_lexer.py::test_type[my_value @int    1\\n]",
  "test_lexer.py::test_type[my_value @int  1\\n]",
  "test_lexer.py::test_type[my_value @int : 1\\n]",
  "test_lexer.py::test_type[my_value @int: 1\\n]",
  "test_lexer.py::test_type[my_value: int = 1\\n]",
  "test_lexer.py::test_type[my_value: int=1\\n]",
  "test_lexer.py::test_value[my_value .base64: VGhlIFNwYW5pc2ggSW5xdWlzaXRpb24h\\n-VGhlIFNwYW5pc2ggSW5xdWlzaXRpb24h-2]",
  "test_lexer.py::test_value[my_value .base64e: Encode this string to base64\\n-Encode this string to base64-2]",
  "test_lexer.py::test_value[my_value .bool: false\\n-false-2]",
  "test_lexer.py::test_value[my_value .bool: true\\n-true-2]",
  "test_lexer.py::test_value[my_value .bytes    1110101\\n-1110101-2]",
  "test_lexer.py::test_value[my_value .bytes  1110101\\n-1110101-2]",
  "test_lexer.py::test_value[my_value .bytes: 1110101 # comment\\n-1110101-2]",
  "test_lexer.py::test_value[my_value .bytes: 1110101\\n-1110101-2]",
  "test_lexer.py::test_value[my_value .char: a\\n-a-2]",
  "test_lexer.py::test_value[my_value .complex: 3-2i\\n-3-2i-2]",
  "test_lexer.py::test_value[my_value .date: 1986-02-10\\n-1986-02-10-2]",
  "test_lexer.py::test_value[my_value .datetime: 2020-01-01 12:00:00 -6\\n-2020-01-01 12:00:00 -6-2]",
  "test_lexer.py::test_value[my_value .dec: -1.0\\n--1.0-2]",
  "test_lexer.py::test_value[my_value .dec: -inf\\n--inf-2]",
  "test_lexer.py::test_value[my_value .dec: 1.000_000_000\\n-1.000000000-2]",
  "test_lexer.py::test_value[my_value .dec: 1.0\\n-1.0-2]",
  "test_lexer.py::test_value[my_value .dec: 1.3e-4\\n-1.3e-4-2]",
  "test_lexer.py::test_value[my_value .dec: 4\\n-4-2]",
  "test_lexer.py::test_value[my_value .dec: inf\\n-inf-2]",
  "test_lexer.py::test_value[my_value .dec: nan\\n-nan-2]",
  "test_lexer.py::test_value[my_value .env: PATH\\n-PATH-2]",
  "test_lexer.py::test_value[my_value .float: -1.0\\n--1.0-2]",
  "test_lexer.py::test_value[my_value .float: -inf\\n--inf-2]",
  "test_lexer.py::test_value[my_value .float: 1.000_000_000\\n-1.000000000-2]",
  "test_lexer.py::test_value[my_value .float: 1.0\\n-1.0-2]",
  "test_lexer.py::test_value[my_value .float: 1.3e-4\\n-1.3e-4-2]",
  "test_lexer.py::test_value[my_value .float: 1\\n-1-2]",
  "test_lexer.py::test_value[my_value .float: inf\\n-inf-2]",
  "test_lexer.py::test_value[my_value .float: nan\\n-nan-2]",
  "test_lexer.py::test_value[my_value .hex: deadbeef\\n-deadbeef-2]",
  "test_lexer.py::test_value[my_value .int: \"1\"\\n-1-2]",
  "test_lexer.py::test_value[my_value .int: '1'\\n-1-2]",
  "test_lexer.py::test_value[my_value .int: -1\\n--1-2]",
  "test_lexer.py::test_value[my_value .int: 100_000_000\\n-100000000-2]",
  "test_lexer.py::test_value[my_value .int: 1\\n-1-2]",
  "test_lexer.py::test_value[my_value .interval: 1 hour\\n-1 hour-2]",
  "test_lexer.py::test_value[my_value .ip: 192.168.1.1\\n-192.168.1.1-2]",
  "test_lexer.py::test_value[my_value .oct: 7\\n-7-2]",
  "test_lexer.py::test_value[my_value .str: \" Hello my name is Frank Drebin \"\\n- Hello my name is Frank Drebin -2]",
  "test_lexer.py::test_value[my_value .str: \" Hello my name is Frank Drebin\"\\n- Hello my name is Frank Drebin-2]",
  "test_lexer.py::test_value[my_value .str: \"Hello my name is Frank Drebin \"\\n-Hello my name is Frank Drebin -2]",
  "test_lexer.py::test_value[my_value .str: \"Hello my name is Frank Drebin\"\\n-Hello my name is Frank Drebin-2]",
  "test_lexer.py::test_value[my_value .str: \"This\\nstring is\\n    on multiple\\n         lines.\\n\"\\n-This\\nstring is\\n    on multiple\\n         lines.\\n-2]",
  "test_lexer.py::test_value[my_value .str: 'Hello my name is Frank Drebin'\\n-Hello my name is Frank Drebin-2]",
  "test_lexer.py::test_value[my_value .str: Hello my name is Frank Drebin\\n-Hello my name is Frank Drebin-2]",
  "test_lexer.py::test_value[my_value .url: http://www.example.com/index.html\\n-http://www.example.com/index.html-2]",
  "test_lexer.py::test_value[my_value :base64 = VGhlIFNwYW5pc2ggSW5xdWlzaXRpb24h\\n-VGhlIFNwYW5pc2ggSW5xdWlzaXRpb24h-2]",
  "test_lexer.py::test_value[my_value :base64: VGhlIFNwYW5pc2ggSW5xdWlzaXRpb24h\\n-VGhlIFNwYW5pc2ggSW5xdWlzaXRpb24h-2]",
  "test_lexer.py::test_value[my_value :base64e = Encode this string to base64\\n-Encode this string to base64-2]",
  "test_lexer.py::test_value[my_value :base64e: Encode this string to base64\\n-Encode this string to base64-2]",
  "test_lexer.py::test_value[my_value :bool = false\\n-false-2]",
  "test_lexer.py::test_value[my_value :bool = true\\n-true-2]",
  "test_lexer.py::test_value[my_value :bool: false\\n-false-2]",
  "test_lexer.py::test_value[my_value :bool: true\\n-true-2]",
  "test_lexer.py::test_value[my_value :bytes    1110101\\n-1110101-2]",
  "test_lexer.py::test_value[my_value :bytes  1110101\\n-1110101-2]",
  "test_lexer.py::test_value[my_value :bytes = 1110101 # comment\\n-1110101-2]",
  "test_lexer.py::test_value[my_value :bytes = 1110101\\n-1110101-2]",
  "test_lexer.py::test_value[my_value :bytes: 1110101 # comment\\n-1110101-2]",
  "test_lexer.py::test_value[my_value :bytes: 1110101\\n-1110101-2]",
  "test_lexer.py::test_value[my_value :bytes=1110101\\n-1110101-2]",
  "test_lexer.py::test_value[my_value :char = a\\n-a-2]",
  "test_lexer.py::test_value[my_value :char: a\\n-a-2]",
  "test_lexer.py::test_value[my_value :complex = 3-2i\\n-3-2i-2]",
  "test_lexer.py::test_value[my_value :complex: 3-2i\\n-3-2i-2]",
  "test_lexer.py::test_value[my_value :date = 1986-02-10\\n-1986-02-10-2]",
  "test_lexer.py::test_value[my_value :date: 1986-02-10\\n-1986-02-10-2]",
  "test_lexer.py::test_value[my_value :datetime = 2020-01-01 12:00:00 -6\\n-2020-01-01 12:00:00 -6-2]",
  "test_lexer.py::test_value[my_value :datetime: 2020-01-01 12:00:00 -6\\n-2020-01-01 12:00:00 -6-2]",
  "test_lexer.py::test_value[my_value :dec = -1.0\\n--1.0-2]",
  "test_lexer.py::test_value[my_value :dec = -1.0\\n-1.0-3]",
  "test_lexer.py::test_value[my_value :dec = -inf\\n--inf-2]",
  "test_lexer.py::test_value[my_value :dec = -inf\\n-inf-3]",
  "test_lexer.py::test_value[my_value :dec = 1.000_000_000\\n-1.000000000-2]",
  "test_lexer.py::test_value[my_value :dec = 1.0\\n-1.0-2]",
  "test_lexer.py::test_value[my_value :dec = 1.3e-4\\n-1.3e-4-2]",
  "test_lexer.py::test_value[my_value :dec = 4\\n-4-2]",
  "test_lexer.py::test_value[my_value :dec = inf\\n-inf-2]",
  "test_lexer.py::test_value[my_value :dec = nan\\n-nan-2]",
  "test_lexer.py::test_value[my_value :dec: -1.0\\n--1.0-2]",
  "test_lexer.py::test_value[my_value :dec: -inf\\n--inf-2]",
  "test_lexer.py::test_value[my_value :dec: 1.000_000_000\\n-1.000000000-2]",
  "test_lexer.py::test_value[my_value :dec: 1.0\\n-1.0-2]",
  "test_lexer.py::test_value[my_value :dec: 1.3e-4\\n-1.3e-4-2]",
  "test_lexer.py::test_value[my_value :dec: 4\\n-4-2]",
  "test_lexer.py::test_value[my_value :dec: inf\\n-inf-2]",
  "test_lexer.py::test_value[my_value :dec: nan\\n-nan-2]",
  "test_lexer.py::test_value[my_value :env = PATH\\n-PATH-2]",
  "test_lexer.py::test_value[my_value :env: PATH\\n-PATH-2]",
  "test_lexer.py::test_value[my_value :float = -1.0\\n--1.0-2]",
  "test_lexer.py::test_value[my_value :float = -1.0\\n-1.0-3]",
  "test_lexer.py::test_value[my_value :float = -inf\\n--inf-2]",
  "test_lexer.py::test_value[my_value :float = -inf\\n-inf-3]",
  "test_lexer.py::test_value[my_value :float = 1.000_000_000\\n-1.000000000-2]",
  "test_lexer.py::test_value[my_value :float = 1.0\\n-1.0-2]",
  "test_lexer.py::test_value[my_value :float = 1.3e-4\\n-1.3e-4-2]",
  "test_lexer.py::test_value[my_value :float = 1\\n-1-2]",
  "test_lexer.py::test_value[my_value :float = inf\\n-inf-2]",
  "test_lexer.py::test_value[my_value :float = nan\\n-nan-2]",
  "test_lexer.py::test_value[my_value :float: -1.0\\n--1.0-2]",
  "test_lexer.py::test_value[my_value :float: -inf\\n--inf-2]",
  "test_lexer.py::test_value[my_value :float: 1.000_000_000\\n-1.000000000-2]",
  "test_lexer.py::test_value[my_value :float: 1.0\\n-1.0-2]",
  "test_lexer.py::test_value[my_value :float: 1.3e-4\\n-1.3e-4-2]",
  "test_lexer.py::test_value[my_value :float: 1\\n-1-2]",
  "test_lexer.py::test_value[my_value :float: inf\\n-inf-2]",
  "test_lexer.py::test_value[my_value :float: nan\\n-nan-2]",
  "test_lexer.py::test_value[my_value :hex = deadbeef\\n-deadbeef-2]",
  "test_lexer.py::test_value[my_value :hex: deadbeef\\n-deadbeef-2]",
  "test_lexer.py::test_value[my_value :int = \"1\"\\n-1-2]",
  "test_lexer.py::test_value[my_value :int = '1'\\n-1-2]",
  "test_lexer.py::test_value[my_value :int = -1\\n--1-2]",
  "test_lexer.py::test_value[my_value :int = -1\\n-1-3]",
  "test_lexer.py::test_value[my_value :int = 100_000_000\\n-100000000-2]",
  "test_lexer.py::test_value[my_value :int = 1\\n-1-2]",
  "test_lexer.py::test_value[my_value :int: \"1\"\\n-1-2]",
  "test_lexer.py::test_value[my_value :int: '1'\\n-1-2]",
  "test_lexer.py::test_value[my_value :int: -1\\n--1-2]",
  "test_lexer.py::test_value[my_value :int: 100_000_000\\n-100000000-2]",
  "test_lexer.py::test_value[my_value :int: 1\\n-1-2]",
  "test_lexer.py::test_value[my_value :interval = 1 hour\\n-1 hour-2]",
  "test_lexer.py::test_value[my_value :interval: 1 hour\\n-1 hour-2]",
  "test_lexer.py::test_value[my_value :ip = 192.168.1.1\\n-192.168.1.1-2]",
  "test_lexer.py::test_value[my_value :ip: 192.168.1.1\\n-192.168.1.1-2]",
  "test_lexer.py::test_value[my_value :oct = 7\\n-7-2]",
  "test_lexer.py::test_value[my_value :oct: 7\\n-7-2]",
  "test_lexer.py::test_value[my_value :str = \" Hello my name is Frank Drebin \"\\n- Hello my name is Frank Drebin -2]",
  "test_lexer.py::test_value[my_value :str = \" Hello my name is Frank Drebin\"\\n- Hello my name is Frank Drebin-2]",
  "test_lexer.py::test_value[my_value :str = \"Hello my name is Frank Drebin \"\\n-Hello my name is Frank Drebin -2]",
  "test_lexer.py::test_value[my_value :str = \"Hello my name is Frank Drebin\"\\n-Hello my name is Frank Drebin-2]",
  "test_lexer.py::test_value[my_value :str = \"This\\nstring is\\n    on multiple\\n         lines.\\n\"\\n-This\\nstring is\\n    on multiple\\n         lines.\\n-2]",
  "test_lexer.py::test_value[my_value :str = 'Hello my name is Frank Drebin'\\n-Hello my name is Frank Drebin-2]",
  "test_lexer.py::test_value[my_value :str = Hello my name is Frank Drebin\\n-Hello my name is Frank Drebin-2]",
  "test_lexer.py::test_value[my_value :str: \" Hello my name is Frank Drebin \"\\n- Hello my name is Frank Drebin -2]",
  "test_lexer.py::test_value[my_value :str: \" Hello my name is Frank Drebin\"\\n- Hello my name is Frank Drebin-2]",
  "test_lexer.py::test_value[my_value :str: \"Hello my name is Frank Drebin \"\\n-Hello my name is Frank Drebin -2]",
  "test_lexer.py::test_value[my_value :str: \"Hello my name is Frank Drebin\"\\n-Hello my name is Frank Drebin-2]",
  "test_lexer.py::test_value[my_value :str: \"This\\nstring is\\n    on multiple\\n         lines.\\n\"\\n-This\\nstring is\\n    on multiple\\n         lines.\\n-2]",
  "test_lexer.py::test_value[my_value :str: 'Hello my name is Frank Drebin'\\n-Hello my name is Frank Drebin-2]",
  "test_lexer.py::test_value[my_value :str: Hello my name is Frank Drebin\\n-Hello my name is Frank Drebin-2]",
  "test_lexer.py::test_value[my_value :url = http://www.example.com/index.html\\n-http://www.example.com/index.html-2]",
  "test_lexer.py::test_value[my_value :url: http://www.example.com/index.html\\n-http://www.example.com/index.html-2]",
  "test_lexer.py::test_value[my_value @base64: VGhlIFNwYW5pc2ggSW5xdWlzaXRpb24h\\n-VGhlIFNwYW5pc2ggSW5xdWlzaXRpb24h-2]",
  "test_lexer.py::test_value[my_value @base64e: Encode this string to base64\\n-Encode this string to base64-2]",
  "test_lexer.py::test_value[my_value @bool: false\\n-false-2]",
  "test_lexer.py::test_value[my_value @bool: true\\n-true-2]",
  "test_lexer.py::test_value[my_value @bytes    1110101\\n-1110101-2]",
  "test_lexer.py::test_value[my_value @bytes  1110101\\n-1110101-2]",
  "test_lexer.py::test_value[my_value @bytes: 1110101 # comment\\n-1110101-2]",
  "test_lexer.py::test_value[my_value @bytes: 1110101\\n-1110101-2]",
  "test_lexer.py::test_value[my_value @char: a\\n-a-2]",
  "test_lexer.py::test_value[my_value @complex: 3-2i\\n-3-2i-2]",
  "test_lexer.py::test_value[my_value @date: 1986-02-10\\n-1986-02-10-2]",
  "test_lexer.py::test_value[my_value @datetime: 2020-01-01 12:00:00 -6\\n-2020-01-01 12:00:00 -6-2]",
  "test_lexer.py::test_value[my_value @dec: -1.0\\n--1.0-2]",
  "test_lexer.py::test_value[my_value @dec: -inf\\n--inf-2]",
  "test_lexer.py::test_value[my_value @dec: 1.000_000_000\\n-1.000000000-2]",
  "test_lexer.py::test_value[my_value @dec: 1.0\\n-1.0-2]",
  "test_lexer.py::test_value[my_value @dec: 1.3e-4\\n-1.3e-4-2]",
  "test_lexer.py::test_value[my_value @dec: 4\\n-4-2]",
  "test_lexer.py::test_value[my_value @dec: inf\\n-inf-2]",
  "test_lexer.py::test_value[my_value @dec: nan\\n-nan-2]",
  "test_lexer.py::test_value[my_value @env: PATH\\n-PATH-2]",
  "test_lexer.py::test_value[my_value @float: -1.0\\n--1.0-2]",
  "test_lexer.py::test_value[my_value @float: -inf\\n--inf-2]",
  "test_lexer.py::test_value[my_value @float: 1.000_000_000\\n-1.000000000-2]",
  "test_lexer.py::test_value[my_value @float: 1.0\\n-1.0-2]",
  "test_lexer.py::test_value[my_value @float: 1.3e-4\\n-1.3e-4-2]",
  "test_lexer.py::test_value[my_value @float: 1\\n-1-2]",
  "test_lexer.py::test_value[my_value @float: inf\\n-inf-2]",
  "test_lexer.py::test_value[my_value @float: nan\\n-nan-2]",
  "test_lexer.py::test_value[my_value @hex: deadbeef\\n-deadbeef-2]",
  "test_lexer.py::test_value[my_value @int: \"1\"\\n-1-2]",
  "test_lexer.py::test_value[my_value @int: '1'\\n-1-2]",
  "test_lexer.py::test_value[my_value @int: -1\\n--1-2]",
  "test_lexer.py::test_value[my_value @int: 100_000_000\\n-100000000-2]",
  "test_lexer.py::test_value[my_value @int: 1\\n-1-2]",
  "test_lexer.py::test_value[my_value @interval: 1 hour\\n-1 hour-2]",
  "test_lexer.py::test_value[my_value @ip: 192.168.1.1\\n-192.168.1.1-2]",
  "test_lexer.py::test_value[my_value @oct: 7\\n-7-2]",
  "test_lexer.py::test_value[my_value @str: \" Hello my name is Frank Drebin \"\\n- Hello my name is Frank Drebin -2]",
  "test_lexer.py::test_value[my_value @str: \" Hello my name is Frank Drebin\"\\n- Hello my name is Frank Drebin-2]",
  "test_lexer.py::test_value[my_value @str: \"Hello my name is Frank Drebin \"\\n-Hello my name is Frank Drebin -2]",
  "test_lexer.py::test_value[my_value @str: \"Hello my name is Frank Drebin\"\\n-Hello my name is Frank Drebin-2]",
  "test_lexer.py::test_value[my_value @str: \"This\\nstring is\\n    on multiple\\n         lines.\\n\"\\n-This\\nstring is\\n    on multiple\\n         lines.\\n-2]",
  "test_lexer.py::test_value[my_value @str: 'Hello my name is Frank Drebin'\\n-Hello my name is Frank Drebin-2]",
  "test_lexer.py::test_value[my_value @str: Hello my name is Frank Drebin\\n-Hello my name is Frank Drebin-2]",
  "test_lexer.py::test_value[my_value @url: http://www.example.com/index.html\\n-http://www.example.com/index.html-2]"
]