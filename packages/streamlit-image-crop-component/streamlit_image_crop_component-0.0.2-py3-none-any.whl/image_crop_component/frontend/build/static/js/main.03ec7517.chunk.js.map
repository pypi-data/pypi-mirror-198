{"version":3,"sources":["canvasUtil.js","ImageCropComponent.tsx","index.tsx"],"names":["createImage","url","Promise","resolve","reject","image","Image","addEventListener","error","setAttribute","src","getRadianAngle","degreeValue","Math","PI","rotateSize","width","height","rotation","rotRad","abs","cos","sin","getCroppedImg","_x","_x2","_getCroppedImg","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","imageSrc","pixelCrop","flip","canvas","ctx","_rotateSize","bBoxWidth","bBoxHeight","data","resizedCanvas","resizedCtx","_args","wrap","_context","prev","next","length","undefined","horizontal","vertical","sent","document","createElement","getContext","abrupt","translate","rotate","scale","drawImage","getImageData","x","y","putImageData","toBlob","file","URL","createObjectURL","stop","ImageCropComponent","_StreamlitComponentBa","_inherits","_super","_createSuper","_this","_classCallCheck","_len","args","Array","_key","call","concat","state","crop","zoom","aspect","croppedAreaPixels","croppedImage","onCropChange","setState","onCropComplete","croppedArea","console","log","setCroppedAreaPixels","onZoomChange","isArray","setImageSrc","newImageSrc","img","onload","frameSize","fillStyle","fillRect","newDataUrl","toDataURL","setCroppedImage","newCroppedImage","newCroppedAreaPixels","setRotation","newRotation","onFileChange","_ref","e","imageDataUrl","target","files","readFile","showCroppedImage","_callee2","_context2","t0","onClose","handleDownload","_callee3","imgUrl","imgResponse","imgBlob","downloadLink","_context3","fetch","blob","href","download","body","appendChild","click","removeChild","_createClass","key","value","_this2","_jsx","className","children","this","_jsxs","React","Fragment","Cropper","Slider","min","max","step","onChange","Button","onClick","variant","color","_Fragment","alt","type","accept","StreamlitComponentBase","reader","FileReader","result","readAsDataURL","withStreamlitConnection","ReactDOM","render","StrictMode","MyComponent","getElementById"],"mappings":"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","file":"static/js/main.03ec7517.chunk.js","sourcesContent":["export const createImage = (url) =>\r\n  new Promise((resolve, reject) => {\r\n    const image = new Image()\r\n    image.addEventListener('load', () => resolve(image))\r\n    image.addEventListener('error', (error) => reject(error))\r\n    image.setAttribute('crossOrigin', 'anonymous') // needed to avoid cross-origin issues on CodeSandbox\r\n    image.src = url\r\n  })\r\n\r\nexport function getRadianAngle(degreeValue) {\r\n  return (degreeValue * Math.PI) / 180\r\n}\r\n\r\n/**\r\n * Returns the new bounding area of a rotated rectangle.\r\n */\r\nexport function rotateSize(width, height, rotation) {\r\n  const rotRad = getRadianAngle(rotation)\r\n\r\n  return {\r\n    width:\r\n      Math.abs(Math.cos(rotRad) * width) + Math.abs(Math.sin(rotRad) * height),\r\n    height:\r\n      Math.abs(Math.sin(rotRad) * width) + Math.abs(Math.cos(rotRad) * height),\r\n  }\r\n}\r\n\r\n/**\r\n * This function was adapted from the one in the ReadMe of https://github.com/DominicTobias/react-image-crop\r\n */\r\n/*\r\nexport async function getCroppedImg(\r\n  imageSrc,\r\n  pixelCrop,\r\n  rotation = 0,\r\n  flip = { horizontal: false, vertical: false }\r\n) {\r\n  const image = await createImage(imageSrc)\r\n  const canvas = document.createElement('canvas')\r\n  const ctx = canvas.getContext('2d')\r\n\r\n  if (!ctx) {\r\n    return null\r\n  }\r\n\r\n  const rotRad = getRadianAngle(rotation)\r\n\r\n  // calculate bounding box of the rotated image\r\n  const { width: bBoxWidth, height: bBoxHeight } = rotateSize(\r\n    image.width,\r\n    image.height,\r\n    rotation\r\n  )\r\n\r\n  // set canvas size to match the bounding box\r\n  canvas.width = bBoxWidth\r\n  canvas.height = bBoxHeight\r\n\r\n  // translate canvas context to a central location to allow rotating and flipping around the center\r\n  ctx.translate(bBoxWidth / 2, bBoxHeight / 2)\r\n  ctx.rotate(rotRad)\r\n  ctx.scale(flip.horizontal ? -1 : 1, flip.vertical ? -1 : 1)\r\n  ctx.translate(-image.width / 2, -image.height / 2)\r\n\r\n  // draw rotated image\r\n  ctx.drawImage(image, 0, 0)\r\n\r\n  // croppedAreaPixels values are bounding box relative\r\n  // extract the cropped image using these values\r\n  const data = ctx.getImageData(\r\n    pixelCrop.x,\r\n    pixelCrop.y,\r\n    pixelCrop.width,\r\n    pixelCrop.height\r\n  )\r\n\r\n  // set canvas width to final desired crop size - this will clear existing context\r\n  canvas.width = pixelCrop.width\r\n  canvas.height = pixelCrop.height\r\n\r\n  // paste generated rotate image at the top left corner\r\n  ctx.putImageData(data, 0, 0)\r\n\r\n  // As Base64 string\r\n  // return canvas.toDataURL('image/jpeg');\r\n\r\n  // As a blob\r\n  return new Promise((resolve, reject) => {\r\n    canvas.toBlob((file) => {\r\n      resolve(URL.createObjectURL(file))\r\n    }, 'image/jpeg')\r\n  })\r\n}\r\n*/\r\n\r\n\r\nexport async function getCroppedImg(\r\n  imageSrc,\r\n  pixelCrop,\r\n  rotation = 0,\r\n  flip = { horizontal: false, vertical: false }\r\n) {\r\n  const image = await createImage(imageSrc)\r\n  const canvas = document.createElement('canvas')\r\n  const ctx = canvas.getContext('2d')\r\n\r\n  if (!ctx) {\r\n    return null\r\n  }\r\n\r\n  const rotRad = getRadianAngle(rotation)\r\n\r\n  // calculate bounding box of the rotated image\r\n  const { width: bBoxWidth, height: bBoxHeight } = rotateSize(\r\n    image.width,\r\n    image.height,\r\n    rotation\r\n  )\r\n\r\n  // set canvas size to match the bounding box\r\n  canvas.width = bBoxWidth\r\n  canvas.height = bBoxHeight\r\n\r\n  // translate canvas context to a central location to allow rotating and flipping around the center\r\n  ctx.translate(bBoxWidth / 2, bBoxHeight / 2)\r\n  ctx.rotate(rotRad)\r\n  ctx.scale(flip.horizontal ? -1 : 1, flip.vertical ? -1 : 1)\r\n  ctx.translate(-image.width / 2, -image.height / 2)\r\n\r\n  // draw rotated image\r\n  ctx.drawImage(image, 0, 0)\r\n\r\n  // croppedAreaPixels values are bounding box relative\r\n  // extract the cropped image using these values\r\n  const data = ctx.getImageData(\r\n    pixelCrop.x,\r\n    pixelCrop.y,\r\n    pixelCrop.width,\r\n    pixelCrop.height\r\n  )\r\n\r\n  // set canvas width to final desired crop size - this will clear existing context\r\n  canvas.width = pixelCrop.width\r\n  canvas.height = pixelCrop.height\r\n\r\n  // paste generated rotate image at the top left corner\r\n  ctx.putImageData(data, 0, 0)\r\n\r\n  // resize cropped image to 900px x 900px\r\n  const resizedCanvas = document.createElement('canvas')\r\n  const resizedCtx = resizedCanvas.getContext('2d')\r\n  resizedCanvas.width = 900\r\n  resizedCanvas.height = 900\r\n  resizedCtx.drawImage(canvas, 0, 0, 900, 900)\r\n\r\n  // As Base64 string\r\n  // return resizedCanvas.toDataURL('image/jpeg');\r\n\r\n  // As a blob\r\n  return new Promise((resolve, reject) => {\r\n    resizedCanvas.toBlob((file) => {\r\n      resolve(URL.createObjectURL(file))\r\n    }, 'image/jpeg')\r\n  })\r\n}\r\n\r\nexport async function getRotatedImage(imageSrc, rotation = 0) {\r\n  const image = await createImage(imageSrc)\r\n  const canvas = document.createElement('canvas')\r\n  const ctx = canvas.getContext('2d')\r\n\r\n  const orientationChanged =\r\n    rotation === 90 || rotation === -90 || rotation === 270 || rotation === -270\r\n  if (orientationChanged) {\r\n    canvas.width = image.height\r\n    canvas.height = image.width\r\n  } else {\r\n    canvas.width = image.width\r\n    canvas.height = image.height\r\n  }\r\n\r\n  ctx.translate(canvas.width / 2, canvas.height / 2)\r\n  ctx.rotate((rotation * Math.PI) / 180)\r\n  ctx.drawImage(image, -image.width / 2, -image.height / 2)\r\n\r\n  return new Promise((resolve) => {\r\n    canvas.toBlob((file) => {\r\n      resolve(URL.createObjectURL(file))\r\n    }, 'image/png')\r\n  })\r\n}\r\n","import {\r\n  Streamlit,\r\n  StreamlitComponentBase,\r\n  withStreamlitConnection,\r\n  ComponentProps,\r\n} from \"streamlit-component-lib\"\r\nimport React, { useCallback } from \"react\"\r\nimport Slider from \"@material-ui/core/Slider\"\r\nimport Cropper from \"react-easy-crop\"\r\nimport \"./styles.css\"\r\nimport Button from \"@material-ui/core/Button\"\r\nimport { getCroppedImg, getRotatedImage } from \"./canvasUtil.js\"\r\n\r\ninterface State {\r\n  imageSrc: string | null\r\n  crop: { x: number; y: number }\r\n  rotation: number\r\n  zoom: number\r\n  croppedAreaPixels: { width: number; height: number; x: number; y: number } | null\r\n  croppedImage: string | null\r\n}\r\n\r\nclass ImageCropComponent extends StreamlitComponentBase<State> {\r\n  state = {\r\n    imageSrc: null,\r\n    crop: { x: 0, y: 0 },\r\n    zoom: 1,\r\n    aspect: 1 / 1,\r\n    croppedAreaPixels: null,\r\n    rotation: 0,\r\n    croppedImage: null,\r\n  }\r\n\r\n  //\r\n  onCropChange = (crop: any) => {\r\n    this.setState({ crop })\r\n  }\r\n\r\n  onCropComplete = (croppedArea: any, croppedAreaPixels: any) => {\r\n    console.log(croppedArea, croppedAreaPixels)\r\n    this.setCroppedAreaPixels(croppedAreaPixels)\r\n  }\r\n\r\n  onZoomChange = (zoom: any ) => {\r\n    // this.setState({ zoom })\r\n    if (Array.isArray(zoom)) {\r\n      this.setState({ zoom: zoom[0] });\r\n    } else {\r\n      this.setState({ zoom });\r\n    }\r\n  }\r\n\r\n  setImageSrc = (newImageSrc: any) => {\r\n    const frameSize = 75; // the size of the frame you want to add\r\n    const img = new Image();\r\n    img.onload = () => {\r\n      const canvas = document.createElement('canvas');\r\n      canvas.width = img.width + frameSize * 2;\r\n      canvas.height = img.height + frameSize * 2;\r\n      const ctx = canvas.getContext('2d')!;\r\n      ctx.fillStyle = 'black';\r\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n      ctx.drawImage(img, frameSize, frameSize);\r\n      const newDataUrl = canvas.toDataURL();\r\n      this.setState({ imageSrc: newDataUrl });\r\n    };\r\n    img.src = newImageSrc;\r\n    this.setState({ imageSrc: newImageSrc })\r\n  }\r\n\r\n  setCroppedImage = (newCroppedImage: any) => {\r\n    this.setState({ croppedImage: newCroppedImage })\r\n  }\r\n  setCroppedAreaPixels = (newCroppedAreaPixels: any) => {\r\n    this.setState({ croppedAreaPixels: newCroppedAreaPixels })\r\n  }\r\n\r\n  setRotation = (newRotation: any) => {\r\n    this.setState({ rotation: newRotation })\r\n  }\r\n\r\n  onFileChange = async (e: any) => {\r\n    if (e.target.files && e.target.files.length > 0) {\r\n      const file = e.target.files[0]\r\n      let imageDataUrl = await readFile(file)\r\n\r\n\r\n      this.setImageSrc(imageDataUrl)\r\n    }\r\n  }\r\n\r\n  showCroppedImage = async () => {\r\n    try {\r\n      const croppedImage = await getCroppedImg(\r\n        this.state.imageSrc,\r\n        this.state.croppedAreaPixels,\r\n        this.state.rotation,\r\n      )\r\n      console.log(\"donee\", { croppedImage })\r\n      this.setCroppedImage(croppedImage)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }\r\n\r\n\r\n  onClose = () => {\r\n    this.setCroppedImage(null)\r\n  }\r\n\r\n\r\n  handleDownload = async () => {\r\n    const imgUrl = this.state.croppedImage; // replace with your image URL\r\n\r\n    if (imgUrl != null) {\r\n      const imgResponse = await fetch(imgUrl);\r\n      const imgBlob = await imgResponse.blob();\r\n      const downloadLink = document.createElement('a');\r\n      downloadLink.href = URL.createObjectURL(imgBlob);\r\n      downloadLink.download = 'image.jpg';\r\n      document.body.appendChild(downloadLink);\r\n      downloadLink.click();\r\n      document.body.removeChild(downloadLink);\r\n    }\r\n\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n\r\n      <div className=\"App\">\r\n\r\n        {this.state.imageSrc ? (\r\n          <React.Fragment>\r\n            <div className=\"crop-container\">\r\n              <Cropper\r\n                image={this.state.imageSrc}\r\n                crop={this.state.crop}\r\n                zoom={this.state.zoom}\r\n                aspect={this.state.aspect}\r\n                onCropChange={this.onCropChange}\r\n                onCropComplete={this.onCropComplete}\r\n                onZoomChange={this.onZoomChange}\r\n              />\r\n            </div>\r\n            <div className=\"controls\">\r\n              <Slider\r\n                value={this.state.zoom}\r\n                min={1}\r\n                max={3}\r\n                step={0.1}\r\n                aria-labelledby=\"Zoom\"\r\n                onChange={(e, zoom) => this.onZoomChange(zoom)}\r\n                className = \"slider\"\r\n              />\r\n            </div>\r\n            <Button\r\n              onClick={this.showCroppedImage}\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className=\"cropButton\"\r\n            >\r\n              Show Result\r\n            </Button>\r\n\r\n            {this.state.croppedImage ? (\r\n              <>\r\n                <h1> Preview </h1>\r\n                <div className=\"container\">\r\n                  <div className=\"row\">\r\n                    <img src={this.state.croppedImage} alt=\"Cropped\" height=\"300px\"/>\r\n                  </div>\r\n                  <div className=\"row\">\r\n                    <div className=\"col-4\">\r\n\r\n                    </div>\r\n\r\n                    <div className=\"col-4\">\r\n                      <Button\r\n                        onClick={this.onClose}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className=\"cropButton\"\r\n                      >\r\n                        Close\r\n                      </Button>\r\n                    </div>\r\n\r\n                    <div className=\"col-4\">\r\n\r\n                      <Button\r\n                        onClick={this.handleDownload}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className=\"cropButton\"\r\n                      >\r\n                        Download\r\n                      </Button>\r\n                    </div>\r\n\r\n\r\n                  </div>\r\n\r\n                </div>\r\n\r\n\r\n              </>\r\n            ) : (\r\n              <p>Cropped image will appear here</p>\r\n            )}\r\n\r\n          </React.Fragment>\r\n        ) : (\r\n          <input type=\"file\" onChange={this.onFileChange} accept=\"image/*\" />\r\n        )}\r\n      </div>\r\n\r\n    )\r\n\r\n  }\r\n}\r\n\r\nfunction readFile(file: any) {\r\n  return new Promise((resolve) => {\r\n    const reader = new FileReader()\r\n    reader.addEventListener(\"load\", () => resolve(reader.result), false)\r\n    reader.readAsDataURL(file)\r\n  })\r\n}\r\n\r\nexport default withStreamlitConnection(ImageCropComponent)\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport MyComponent from \"./ImageCropComponent\"\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <MyComponent />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)"],"sourceRoot":""}