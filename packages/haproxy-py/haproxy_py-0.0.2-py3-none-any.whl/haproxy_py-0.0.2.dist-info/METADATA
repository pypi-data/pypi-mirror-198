Metadata-Version: 2.1
Name: haproxy-py
Version: 0.0.2
Summary: HAProxy Data Plane API
Home-page: 
Author-email: support@haproxy.com
License: UNKNOWN
Keywords: Swagger,HAProxy Data Plane API
Platform: UNKNOWN
Description-Content-Type: text/x-rst
License-File: LICENSE
Requires-Dist: urllib3 (>=1.15)
Requires-Dist: six (>=1.10)
Requires-Dist: certifi
Requires-Dist: python-dateutil

haproxy-py
==========

|Pypi| |MIT licensed| |GitHub Release Date|

API for editing and managing haproxy instances. Provides process
information, configuration management, haproxy stats and logs.

This Python package is automatically generated by the `Swagger
Codegen <https://github.com/swagger-api/swagger-codegen>`__ project:

Requirements.
-------------

Python 2.7 and 3.4+

Installation & Usage
--------------------

pip install
~~~~~~~~~~~

You can install the package via PyPi

.. code:: sh

   pip install haproxy-py

.. or you can install directly from Github

.. code:: sh

   pip install git+https://github.com/Scraps23/haproxy-py.git

(you may need to run ``pip`` with root permission:
``sudo pip install git+https://github.com/Scraps23/haproxy-py.git``)

Then import the package:

.. code:: python

   import dataplaneapi 

Setuptools
~~~~~~~~~~

Install via `Setuptools <http://pypi.python.org/pypi/setuptools>`__.

.. code:: sh

   python setup.py install --user

(or ``sudo python setup.py install haproxy-py`` to install the package
for all users)

Then import the package:

.. code:: python

   import dataplaneapi

Getting Started
---------------

Please follow the `installation procedure <#installation--usage>`__ and
then run the following:

.. code:: python

   from __future__ import print_function
   import time
   import dataplaneapi
   from dataplaneapi.rest import ApiException
   from pprint import pprint
   # Configure HTTP basic authorization: basic_auth
   configuration = dataplaneapi.Configuration()
   configuration.username = 'YOUR_USERNAME'
   configuration.password = 'YOUR_PASSWORD'

   # create an instance of the API class
   api_instance = dataplaneapi.ACLApi(dataplaneapi.ApiClient(configuration))
   body = dataplaneapi.Acl() # Acl | 
   parent_name = 'parent_name_example' # str | Parent name
   parent_type = 'parent_type_example' # str | Parent type
   transaction_id = 'transaction_id_example' # str | ID of the transaction where we want to add the operation. Cannot be used when version is specified. (optional)
   version = 56 # int | Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version. (optional)
   force_reload = False # bool | If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration. (optional) (default to False)

   try:
       # Add a new ACL line
       api_response = api_instance.create_acl(body, parent_name, parent_type, transaction_id=transaction_id, version=version, force_reload=force_reload)
       pprint(api_response)
   except ApiException as e:
       print("Exception when calling ACLApi->create_acl: %s\n" % e)
   # Configure HTTP basic authorization: basic_auth
   configuration = dataplaneapi.Configuration()
   configuration.username = 'YOUR_USERNAME'
   configuration.password = 'YOUR_PASSWORD'

   # create an instance of the API class
   api_instance = dataplaneapi.ACLApi(dataplaneapi.ApiClient(configuration))
   index = 56 # int | ACL line Index
   parent_name = 'parent_name_example' # str | Parent name
   parent_type = 'parent_type_example' # str | Parent type
   transaction_id = 'transaction_id_example' # str | ID of the transaction where we want to add the operation. Cannot be used when version is specified. (optional)
   version = 56 # int | Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version. (optional)
   force_reload = False # bool | If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration. (optional) (default to False)

   try:
       # Delete a ACL line
       api_instance.delete_acl(index, parent_name, parent_type, transaction_id=transaction_id, version=version, force_reload=force_reload)
   except ApiException as e:
       print("Exception when calling ACLApi->delete_acl: %s\n" % e)
   # Configure HTTP basic authorization: basic_auth
   configuration = dataplaneapi.Configuration()
   configuration.username = 'YOUR_USERNAME'
   configuration.password = 'YOUR_PASSWORD'

   # create an instance of the API class
   api_instance = dataplaneapi.ACLApi(dataplaneapi.ApiClient(configuration))
   index = 56 # int | ACL line Index
   parent_name = 'parent_name_example' # str | Parent name
   parent_type = 'parent_type_example' # str | Parent type
   transaction_id = 'transaction_id_example' # str | ID of the transaction where we want to add the operation. Cannot be used when version is specified. (optional)

   try:
       # Return one ACL line
       api_response = api_instance.get_acl(index, parent_name, parent_type, transaction_id=transaction_id)
       pprint(api_response)
   except ApiException as e:
       print("Exception when calling ACLApi->get_acl: %s\n" % e)
   # Configure HTTP basic authorization: basic_auth
   configuration = dataplaneapi.Configuration()
   configuration.username = 'YOUR_USERNAME'
   configuration.password = 'YOUR_PASSWORD'

   # create an instance of the API class
   api_instance = dataplaneapi.ACLApi(dataplaneapi.ApiClient(configuration))
   parent_name = 'parent_name_example' # str | Parent name
   parent_type = 'parent_type_example' # str | Parent type
   acl_name = 'acl_name_example' # str | ACL name (optional)
   transaction_id = 'transaction_id_example' # str | ID of the transaction where we want to add the operation. Cannot be used when version is specified. (optional)

   try:
       # Return an array of all ACL lines
       api_response = api_instance.get_acls(parent_name, parent_type, acl_name=acl_name, transaction_id=transaction_id)
       pprint(api_response)
   except ApiException as e:
       print("Exception when calling ACLApi->get_acls: %s\n" % e)
   # Configure HTTP basic authorization: basic_auth
   configuration = dataplaneapi.Configuration()
   configuration.username = 'YOUR_USERNAME'
   configuration.password = 'YOUR_PASSWORD'

   # create an instance of the API class
   api_instance = dataplaneapi.ACLApi(dataplaneapi.ApiClient(configuration))
   body = dataplaneapi.Acl() # Acl | 
   parent_name = 'parent_name_example' # str | Parent name
   parent_type = 'parent_type_example' # str | Parent type
   index = 56 # int | ACL line Index
   transaction_id = 'transaction_id_example' # str | ID of the transaction where we want to add the operation. Cannot be used when version is specified. (optional)
   version = 56 # int | Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version. (optional)
   force_reload = False # bool | If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration. (optional) (default to False)

   try:
       # Replace a ACL line
       api_response = api_instance.replace_acl(body, parent_name, parent_type, index, transaction_id=transaction_id, version=version, force_reload=force_reload)
       pprint(api_response)
   except ApiException as e:
       print("Exception when calling ACLApi->replace_acl: %s\n" % e)

Documentation for API Endpoints
-------------------------------

See the `API Endpoint documentation <dataplaneapi/README.md>`__ for more
details on usage.

.. |Pypi| image:: https://img.shields.io/pypi/v/haproxy-py
   :target: https://pypi.org/project/haproxy-py
.. |MIT licensed| image:: https://img.shields.io/badge/license-MIT-green.svg
   :target: https://raw.githubusercontent.com/Scraps23/haproxy-py/main/LICENSE
.. |GitHub Release Date| image:: https://img.shields.io/github/release-date/Scraps23/haproxy-py
   :target: https://github.com/Scraps23/haproxy-py


