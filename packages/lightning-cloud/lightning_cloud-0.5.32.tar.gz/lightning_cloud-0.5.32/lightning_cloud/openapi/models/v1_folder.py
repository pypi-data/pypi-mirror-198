# coding: utf-8
"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set

    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_cloud.openapi.models import *


class V1Folder(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'files': 'int',
        'last_modified_at': 'datetime',
        'prefix': 'str',
        'size': 'str'
    }

    attribute_map = {
        'files': 'files',
        'last_modified_at': 'lastModifiedAt',
        'prefix': 'prefix',
        'size': 'size'
    }

    def __init__(self,
                 files: 'int' = None,
                 last_modified_at: 'datetime' = None,
                 prefix: 'str' = None,
                 size: 'str' = None):  # noqa: E501
        """V1Folder - a model defined in Swagger"""  # noqa: E501
        self._files = None
        self._last_modified_at = None
        self._prefix = None
        self._size = None
        self.discriminator = None
        if files is not None:
            self.files = files
        if last_modified_at is not None:
            self.last_modified_at = last_modified_at
        if prefix is not None:
            self.prefix = prefix
        if size is not None:
            self.size = size

    @property
    def files(self) -> 'int':
        """Gets the files of this V1Folder.  # noqa: E501


        :return: The files of this V1Folder.  # noqa: E501
        :rtype: int
        """
        return self._files

    @files.setter
    def files(self, files: 'int'):
        """Sets the files of this V1Folder.


        :param files: The files of this V1Folder.  # noqa: E501
        :type: int
        """

        self._files = files

    @property
    def last_modified_at(self) -> 'datetime':
        """Gets the last_modified_at of this V1Folder.  # noqa: E501


        :return: The last_modified_at of this V1Folder.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_at

    @last_modified_at.setter
    def last_modified_at(self, last_modified_at: 'datetime'):
        """Sets the last_modified_at of this V1Folder.


        :param last_modified_at: The last_modified_at of this V1Folder.  # noqa: E501
        :type: datetime
        """

        self._last_modified_at = last_modified_at

    @property
    def prefix(self) -> 'str':
        """Gets the prefix of this V1Folder.  # noqa: E501


        :return: The prefix of this V1Folder.  # noqa: E501
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix: 'str'):
        """Sets the prefix of this V1Folder.


        :param prefix: The prefix of this V1Folder.  # noqa: E501
        :type: str
        """

        self._prefix = prefix

    @property
    def size(self) -> 'str':
        """Gets the size of this V1Folder.  # noqa: E501


        :return: The size of this V1Folder.  # noqa: E501
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size: 'str'):
        """Sets the size of this V1Folder.


        :param size: The size of this V1Folder.  # noqa: E501
        :type: str
        """

        self._size = size

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value
        if issubclass(V1Folder, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1Folder') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1Folder):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1Folder') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
