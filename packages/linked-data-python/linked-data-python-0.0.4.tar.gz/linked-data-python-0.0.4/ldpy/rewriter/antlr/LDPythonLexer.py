# Generated from grammars/LDPython.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from antlr4.Token import CommonToken
import re
import importlib

# Allow languages to extend the lexer and parser, by loading the parser dynamically
module_path = __name__[:-5]
language_name = __name__.split('.')[-1]
language_name = language_name[:-5]  # Remove Lexer from name
LanguageParser = getattr(importlib.import_module('{}Parser'.format(module_path)), '{}Parser'.format(language_name))


def serializedATN():
    return [
        4,0,110,1088,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,
        5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
        2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,
        7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,
        2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,
        7,32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,
        2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,
        7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,
        2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,
        7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,
        2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,
        7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
        2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
        7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,
        2,91,7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,
        7,97,2,98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,
        7,103,2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,
        2,109,7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,
        7,114,2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,
        2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,
        7,125,2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,
        2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,
        7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,
        2,142,7,142,2,143,7,143,2,144,7,144,1,0,1,0,1,0,1,1,1,1,1,1,1,2,
        1,2,5,2,300,8,2,10,2,12,2,303,9,2,1,2,1,2,1,3,1,3,1,3,1,3,5,3,311,
        8,3,10,3,12,3,314,9,3,1,3,1,3,1,4,1,4,5,4,320,8,4,10,4,12,4,323,
        9,4,1,4,1,4,1,5,1,5,5,5,329,8,5,10,5,12,5,332,9,5,1,5,1,5,1,6,1,
        6,1,6,1,6,1,6,1,6,3,6,342,8,6,1,7,1,7,1,7,3,7,347,8,7,1,8,1,8,1,
        8,1,8,3,8,353,8,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,
        1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,
        1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,15,
        1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,
        1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,19,
        1,19,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,22,
        1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,25,1,25,1,25,
        1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,
        1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,
        1,29,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,33,
        1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,
        1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,
        1,37,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,
        1,40,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,41,1,42,
        1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,44,1,44,
        1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,46,
        1,46,1,46,3,46,562,8,46,1,46,1,46,3,46,566,8,46,1,46,3,46,569,8,
        46,3,46,571,8,46,1,46,1,46,1,47,1,47,5,47,577,8,47,10,47,12,47,580,
        9,47,1,48,1,48,1,48,1,48,1,48,3,48,587,8,48,1,48,1,48,3,48,591,8,
        48,1,49,1,49,1,49,1,49,1,49,3,49,598,8,49,1,49,1,49,3,49,602,8,49,
        1,50,1,50,5,50,606,8,50,10,50,12,50,609,9,50,1,50,4,50,612,8,50,
        11,50,12,50,613,3,50,616,8,50,1,51,1,51,1,51,4,51,621,8,51,11,51,
        12,51,622,1,52,1,52,1,52,4,52,628,8,52,11,52,12,52,629,1,53,1,53,
        1,53,4,53,635,8,53,11,53,12,53,636,1,54,1,54,3,54,641,8,54,1,55,
        1,55,3,55,645,8,55,1,55,1,55,1,56,1,56,1,56,1,56,1,56,3,56,654,8,
        56,1,56,1,56,5,56,658,8,56,10,56,12,56,661,9,56,1,56,3,56,664,8,
        56,1,57,1,57,1,57,1,58,1,58,1,58,1,59,1,59,4,59,674,8,59,11,59,12,
        59,675,1,59,1,59,4,59,680,8,59,11,59,12,59,681,5,59,684,8,59,10,
        59,12,59,687,9,59,1,59,1,59,1,60,1,60,1,61,1,61,1,61,1,61,1,62,1,
        62,1,63,1,63,1,63,1,64,1,64,1,64,1,65,1,65,1,66,1,66,1,67,1,67,1,
        68,1,68,1,68,1,69,1,69,1,70,1,70,1,70,1,71,1,71,1,71,1,72,1,72,1,
        73,1,73,1,74,1,74,1,75,1,75,1,75,1,76,1,76,1,76,1,77,1,77,1,78,1,
        78,1,79,1,79,1,80,1,80,1,81,1,81,1,81,1,82,1,82,1,83,1,83,1,83,1,
        84,1,84,1,84,1,85,1,85,1,85,1,85,1,85,1,86,1,86,1,87,1,87,1,88,1,
        88,1,88,1,89,1,89,1,89,1,90,1,90,1,90,1,91,1,91,1,91,1,92,1,92,1,
        92,1,93,1,93,1,94,1,94,1,94,1,95,1,95,1,95,1,96,1,96,1,96,1,97,1,
        97,1,97,1,98,1,98,1,98,1,99,1,99,1,99,1,100,1,100,1,100,1,101,1,
        101,1,101,1,102,1,102,1,102,1,103,1,103,1,103,1,104,1,104,1,104,
        1,104,1,105,1,105,1,105,1,105,1,106,1,106,1,106,1,106,1,107,1,107,
        1,107,1,107,1,108,1,108,1,108,3,108,828,8,108,1,108,1,108,1,109,
        1,109,1,110,1,110,1,110,5,110,837,8,110,10,110,12,110,840,9,110,
        1,110,1,110,1,110,1,110,5,110,846,8,110,10,110,12,110,849,9,110,
        1,110,3,110,852,8,110,1,111,1,111,1,111,1,111,1,111,5,111,859,8,
        111,10,111,12,111,862,9,111,1,111,1,111,1,111,1,111,1,111,1,111,
        1,111,1,111,5,111,872,8,111,10,111,12,111,875,9,111,1,111,1,111,
        1,111,3,111,880,8,111,1,112,1,112,3,112,884,8,112,1,113,1,113,1,
        114,1,114,1,114,1,114,3,114,892,8,114,1,115,1,115,1,116,1,116,1,
        117,1,117,1,118,1,118,1,119,1,119,1,120,3,120,905,8,120,1,120,1,
        120,1,120,1,120,3,120,911,8,120,1,121,1,121,3,121,915,8,121,1,121,
        1,121,1,122,4,122,920,8,122,11,122,12,122,921,1,123,1,123,4,123,
        926,8,123,11,123,12,123,927,1,124,1,124,3,124,932,8,124,1,124,4,
        124,935,8,124,11,124,12,124,936,1,125,1,125,1,125,5,125,942,8,125,
        10,125,12,125,945,9,125,1,125,1,125,1,125,1,125,5,125,951,8,125,
        10,125,12,125,954,9,125,1,125,3,125,957,8,125,1,126,1,126,1,126,
        1,126,1,126,5,126,964,8,126,10,126,12,126,967,9,126,1,126,1,126,
        1,126,1,126,1,126,1,126,1,126,1,126,5,126,977,8,126,10,126,12,126,
        980,9,126,1,126,1,126,1,126,3,126,985,8,126,1,127,1,127,3,127,989,
        8,127,1,128,3,128,992,8,128,1,129,3,129,995,8,129,1,130,3,130,998,
        8,130,1,131,1,131,1,131,1,132,4,132,1004,8,132,11,132,12,132,1005,
        1,133,1,133,5,133,1010,8,133,10,133,12,133,1013,9,133,1,134,1,134,
        3,134,1017,8,134,1,134,3,134,1020,8,134,1,134,1,134,3,134,1024,8,
        134,1,135,3,135,1027,8,135,1,136,1,136,3,136,1031,8,136,1,137,1,
        137,3,137,1035,8,137,1,138,4,138,1038,8,138,11,138,12,138,1039,1,
        139,1,139,3,139,1044,8,139,1,140,1,140,1,140,5,140,1049,8,140,10,
        140,12,140,1052,9,140,1,140,3,140,1055,8,140,1,141,1,141,1,141,3,
        141,1060,8,141,1,141,1,141,1,141,1,141,5,141,1066,8,141,10,141,12,
        141,1069,9,141,1,141,1,141,1,141,3,141,1074,8,141,3,141,1076,8,141,
        1,142,1,142,3,142,1080,8,142,1,143,1,143,1,143,1,143,1,144,1,144,
        1,144,4,860,873,965,978,0,145,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,
        17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,
        39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,
        61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,
        83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,
        52,105,53,107,54,109,55,111,56,113,57,115,58,117,59,119,60,121,61,
        123,62,125,63,127,64,129,65,131,66,133,67,135,68,137,69,139,70,141,
        71,143,72,145,73,147,74,149,75,151,76,153,77,155,78,157,79,159,80,
        161,81,163,82,165,83,167,84,169,85,171,86,173,87,175,88,177,89,179,
        90,181,91,183,92,185,93,187,94,189,95,191,96,193,97,195,98,197,99,
        199,100,201,101,203,102,205,103,207,104,209,105,211,106,213,107,
        215,108,217,109,219,110,221,0,223,0,225,0,227,0,229,0,231,0,233,
        0,235,0,237,0,239,0,241,0,243,0,245,0,247,0,249,0,251,0,253,0,255,
        0,257,0,259,0,261,0,263,0,265,0,267,0,269,0,271,0,273,0,275,0,277,
        0,279,0,281,0,283,0,285,0,287,0,289,0,1,0,27,8,0,0,32,34,34,60,60,
        62,62,92,92,94,94,96,96,123,125,6,0,70,70,82,82,85,85,102,102,114,
        114,117,117,2,0,70,70,102,102,2,0,82,82,114,114,2,0,66,66,98,98,
        2,0,79,79,111,111,2,0,88,88,120,120,2,0,74,74,106,106,2,0,65,90,
        97,122,3,0,48,57,65,90,97,122,4,0,10,10,12,13,39,39,92,92,4,0,10,
        10,12,13,34,34,92,92,1,0,92,92,1,0,49,57,1,0,48,57,1,0,48,55,3,0,
        48,57,65,70,97,102,1,0,48,49,2,0,69,69,101,101,2,0,43,43,45,45,5,
        0,0,9,11,12,14,38,40,91,93,127,5,0,0,9,11,12,14,33,35,91,93,127,
        2,0,0,91,93,127,1,0,0,127,2,0,9,9,32,32,2,0,10,10,12,13,7,0,33,33,
        35,47,59,59,61,61,63,64,95,95,126,126,1139,0,1,1,0,0,0,0,3,1,0,0,
        0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,
        0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,
        0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,
        0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,
        0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,
        0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,
        0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,
        0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,
        0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,
        0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,
        0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,
        1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,
        0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,
        0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,0,137,1,0,0,0,0,139,1,0,0,0,0,
        141,1,0,0,0,0,143,1,0,0,0,0,145,1,0,0,0,0,147,1,0,0,0,0,149,1,0,
        0,0,0,151,1,0,0,0,0,153,1,0,0,0,0,155,1,0,0,0,0,157,1,0,0,0,0,159,
        1,0,0,0,0,161,1,0,0,0,0,163,1,0,0,0,0,165,1,0,0,0,0,167,1,0,0,0,
        0,169,1,0,0,0,0,171,1,0,0,0,0,173,1,0,0,0,0,175,1,0,0,0,0,177,1,
        0,0,0,0,179,1,0,0,0,0,181,1,0,0,0,0,183,1,0,0,0,0,185,1,0,0,0,0,
        187,1,0,0,0,0,189,1,0,0,0,0,191,1,0,0,0,0,193,1,0,0,0,0,195,1,0,
        0,0,0,197,1,0,0,0,0,199,1,0,0,0,0,201,1,0,0,0,0,203,1,0,0,0,0,205,
        1,0,0,0,0,207,1,0,0,0,0,209,1,0,0,0,0,211,1,0,0,0,0,213,1,0,0,0,
        0,215,1,0,0,0,0,217,1,0,0,0,0,219,1,0,0,0,1,291,1,0,0,0,3,294,1,
        0,0,0,5,297,1,0,0,0,7,306,1,0,0,0,9,317,1,0,0,0,11,326,1,0,0,0,13,
        341,1,0,0,0,15,346,1,0,0,0,17,352,1,0,0,0,19,354,1,0,0,0,21,358,
        1,0,0,0,23,365,1,0,0,0,25,371,1,0,0,0,27,376,1,0,0,0,29,383,1,0,
        0,0,31,386,1,0,0,0,33,393,1,0,0,0,35,402,1,0,0,0,37,409,1,0,0,0,
        39,412,1,0,0,0,41,417,1,0,0,0,43,422,1,0,0,0,45,428,1,0,0,0,47,432,
        1,0,0,0,49,435,1,0,0,0,51,439,1,0,0,0,53,447,1,0,0,0,55,452,1,0,
        0,0,57,459,1,0,0,0,59,466,1,0,0,0,61,469,1,0,0,0,63,473,1,0,0,0,
        65,477,1,0,0,0,67,480,1,0,0,0,69,485,1,0,0,0,71,490,1,0,0,0,73,496,
        1,0,0,0,75,502,1,0,0,0,77,508,1,0,0,0,79,512,1,0,0,0,81,517,1,0,
        0,0,83,526,1,0,0,0,85,532,1,0,0,0,87,538,1,0,0,0,89,544,1,0,0,0,
        91,550,1,0,0,0,93,570,1,0,0,0,95,574,1,0,0,0,97,586,1,0,0,0,99,597,
        1,0,0,0,101,615,1,0,0,0,103,617,1,0,0,0,105,624,1,0,0,0,107,631,
        1,0,0,0,109,640,1,0,0,0,111,644,1,0,0,0,113,648,1,0,0,0,115,665,
        1,0,0,0,117,668,1,0,0,0,119,671,1,0,0,0,121,690,1,0,0,0,123,692,
        1,0,0,0,125,696,1,0,0,0,127,698,1,0,0,0,129,701,1,0,0,0,131,704,
        1,0,0,0,133,706,1,0,0,0,135,708,1,0,0,0,137,710,1,0,0,0,139,713,
        1,0,0,0,141,715,1,0,0,0,143,718,1,0,0,0,145,721,1,0,0,0,147,723,
        1,0,0,0,149,725,1,0,0,0,151,727,1,0,0,0,153,730,1,0,0,0,155,733,
        1,0,0,0,157,735,1,0,0,0,159,737,1,0,0,0,161,739,1,0,0,0,163,741,
        1,0,0,0,165,744,1,0,0,0,167,746,1,0,0,0,169,749,1,0,0,0,171,752,
        1,0,0,0,173,757,1,0,0,0,175,759,1,0,0,0,177,761,1,0,0,0,179,764,
        1,0,0,0,181,767,1,0,0,0,183,770,1,0,0,0,185,773,1,0,0,0,187,776,
        1,0,0,0,189,778,1,0,0,0,191,781,1,0,0,0,193,784,1,0,0,0,195,787,
        1,0,0,0,197,790,1,0,0,0,199,793,1,0,0,0,201,796,1,0,0,0,203,799,
        1,0,0,0,205,802,1,0,0,0,207,805,1,0,0,0,209,808,1,0,0,0,211,812,
        1,0,0,0,213,816,1,0,0,0,215,820,1,0,0,0,217,827,1,0,0,0,219,831,
        1,0,0,0,221,851,1,0,0,0,223,879,1,0,0,0,225,883,1,0,0,0,227,885,
        1,0,0,0,229,891,1,0,0,0,231,893,1,0,0,0,233,895,1,0,0,0,235,897,
        1,0,0,0,237,899,1,0,0,0,239,901,1,0,0,0,241,910,1,0,0,0,243,914,
        1,0,0,0,245,919,1,0,0,0,247,923,1,0,0,0,249,929,1,0,0,0,251,956,
        1,0,0,0,253,984,1,0,0,0,255,988,1,0,0,0,257,991,1,0,0,0,259,994,
        1,0,0,0,261,997,1,0,0,0,263,999,1,0,0,0,265,1003,1,0,0,0,267,1007,
        1,0,0,0,269,1014,1,0,0,0,271,1026,1,0,0,0,273,1030,1,0,0,0,275,1034,
        1,0,0,0,277,1037,1,0,0,0,279,1043,1,0,0,0,281,1045,1,0,0,0,283,1059,
        1,0,0,0,285,1079,1,0,0,0,287,1081,1,0,0,0,289,1085,1,0,0,0,291,292,
        5,94,0,0,292,293,5,94,0,0,293,2,1,0,0,0,294,295,5,102,0,0,295,296,
        5,123,0,0,296,4,1,0,0,0,297,301,5,60,0,0,298,300,8,0,0,0,299,298,
        1,0,0,0,300,303,1,0,0,0,301,299,1,0,0,0,301,302,1,0,0,0,302,304,
        1,0,0,0,303,301,1,0,0,0,304,305,5,62,0,0,305,6,1,0,0,0,306,307,5,
        102,0,0,307,308,5,60,0,0,308,312,1,0,0,0,309,311,8,0,0,0,310,309,
        1,0,0,0,311,314,1,0,0,0,312,310,1,0,0,0,312,313,1,0,0,0,313,315,
        1,0,0,0,314,312,1,0,0,0,315,316,5,123,0,0,316,8,1,0,0,0,317,321,
        5,125,0,0,318,320,8,0,0,0,319,318,1,0,0,0,320,323,1,0,0,0,321,319,
        1,0,0,0,321,322,1,0,0,0,322,324,1,0,0,0,323,321,1,0,0,0,324,325,
        5,123,0,0,325,10,1,0,0,0,326,330,5,125,0,0,327,329,8,0,0,0,328,327,
        1,0,0,0,329,332,1,0,0,0,330,328,1,0,0,0,330,331,1,0,0,0,331,333,
        1,0,0,0,332,330,1,0,0,0,333,334,5,62,0,0,334,12,1,0,0,0,335,336,
        3,97,48,0,336,337,6,6,0,0,337,342,1,0,0,0,338,339,3,99,49,0,339,
        340,6,6,1,0,340,342,1,0,0,0,341,335,1,0,0,0,341,338,1,0,0,0,342,
        14,1,0,0,0,343,347,3,17,8,0,344,347,3,109,54,0,345,347,3,111,55,
        0,346,343,1,0,0,0,346,344,1,0,0,0,346,345,1,0,0,0,347,16,1,0,0,0,
        348,353,3,101,50,0,349,353,3,103,51,0,350,353,3,105,52,0,351,353,
        3,107,53,0,352,348,1,0,0,0,352,349,1,0,0,0,352,350,1,0,0,0,352,351,
        1,0,0,0,353,18,1,0,0,0,354,355,5,100,0,0,355,356,5,101,0,0,356,357,
        5,102,0,0,357,20,1,0,0,0,358,359,5,114,0,0,359,360,5,101,0,0,360,
        361,5,116,0,0,361,362,5,117,0,0,362,363,5,114,0,0,363,364,5,110,
        0,0,364,22,1,0,0,0,365,366,5,114,0,0,366,367,5,97,0,0,367,368,5,
        105,0,0,368,369,5,115,0,0,369,370,5,101,0,0,370,24,1,0,0,0,371,372,
        5,102,0,0,372,373,5,114,0,0,373,374,5,111,0,0,374,375,5,109,0,0,
        375,26,1,0,0,0,376,377,5,105,0,0,377,378,5,109,0,0,378,379,5,112,
        0,0,379,380,5,111,0,0,380,381,5,114,0,0,381,382,5,116,0,0,382,28,
        1,0,0,0,383,384,5,97,0,0,384,385,5,115,0,0,385,30,1,0,0,0,386,387,
        5,103,0,0,387,388,5,108,0,0,388,389,5,111,0,0,389,390,5,98,0,0,390,
        391,5,97,0,0,391,392,5,108,0,0,392,32,1,0,0,0,393,394,5,110,0,0,
        394,395,5,111,0,0,395,396,5,110,0,0,396,397,5,108,0,0,397,398,5,
        111,0,0,398,399,5,99,0,0,399,400,5,97,0,0,400,401,5,108,0,0,401,
        34,1,0,0,0,402,403,5,97,0,0,403,404,5,115,0,0,404,405,5,115,0,0,
        405,406,5,101,0,0,406,407,5,114,0,0,407,408,5,116,0,0,408,36,1,0,
        0,0,409,410,5,105,0,0,410,411,5,102,0,0,411,38,1,0,0,0,412,413,5,
        101,0,0,413,414,5,108,0,0,414,415,5,105,0,0,415,416,5,102,0,0,416,
        40,1,0,0,0,417,418,5,101,0,0,418,419,5,108,0,0,419,420,5,115,0,0,
        420,421,5,101,0,0,421,42,1,0,0,0,422,423,5,119,0,0,423,424,5,104,
        0,0,424,425,5,105,0,0,425,426,5,108,0,0,426,427,5,101,0,0,427,44,
        1,0,0,0,428,429,5,102,0,0,429,430,5,111,0,0,430,431,5,114,0,0,431,
        46,1,0,0,0,432,433,5,105,0,0,433,434,5,110,0,0,434,48,1,0,0,0,435,
        436,5,116,0,0,436,437,5,114,0,0,437,438,5,121,0,0,438,50,1,0,0,0,
        439,440,5,102,0,0,440,441,5,105,0,0,441,442,5,110,0,0,442,443,5,
        97,0,0,443,444,5,108,0,0,444,445,5,108,0,0,445,446,5,121,0,0,446,
        52,1,0,0,0,447,448,5,119,0,0,448,449,5,105,0,0,449,450,5,116,0,0,
        450,451,5,104,0,0,451,54,1,0,0,0,452,453,5,101,0,0,453,454,5,120,
        0,0,454,455,5,99,0,0,455,456,5,101,0,0,456,457,5,112,0,0,457,458,
        5,116,0,0,458,56,1,0,0,0,459,460,5,108,0,0,460,461,5,97,0,0,461,
        462,5,109,0,0,462,463,5,98,0,0,463,464,5,100,0,0,464,465,5,97,0,
        0,465,58,1,0,0,0,466,467,5,111,0,0,467,468,5,114,0,0,468,60,1,0,
        0,0,469,470,5,97,0,0,470,471,5,110,0,0,471,472,5,100,0,0,472,62,
        1,0,0,0,473,474,5,110,0,0,474,475,5,111,0,0,475,476,5,116,0,0,476,
        64,1,0,0,0,477,478,5,105,0,0,478,479,5,115,0,0,479,66,1,0,0,0,480,
        481,5,78,0,0,481,482,5,111,0,0,482,483,5,110,0,0,483,484,5,101,0,
        0,484,68,1,0,0,0,485,486,5,84,0,0,486,487,5,114,0,0,487,488,5,117,
        0,0,488,489,5,101,0,0,489,70,1,0,0,0,490,491,5,70,0,0,491,492,5,
        97,0,0,492,493,5,108,0,0,493,494,5,115,0,0,494,495,5,101,0,0,495,
        72,1,0,0,0,496,497,5,99,0,0,497,498,5,108,0,0,498,499,5,97,0,0,499,
        500,5,115,0,0,500,501,5,115,0,0,501,74,1,0,0,0,502,503,5,121,0,0,
        503,504,5,105,0,0,504,505,5,101,0,0,505,506,5,108,0,0,506,507,5,
        100,0,0,507,76,1,0,0,0,508,509,5,100,0,0,509,510,5,101,0,0,510,511,
        5,108,0,0,511,78,1,0,0,0,512,513,5,112,0,0,513,514,5,97,0,0,514,
        515,5,115,0,0,515,516,5,115,0,0,516,80,1,0,0,0,517,518,5,99,0,0,
        518,519,5,111,0,0,519,520,5,110,0,0,520,521,5,116,0,0,521,522,5,
        105,0,0,522,523,5,110,0,0,523,524,5,117,0,0,524,525,5,101,0,0,525,
        82,1,0,0,0,526,527,5,98,0,0,527,528,5,114,0,0,528,529,5,101,0,0,
        529,530,5,97,0,0,530,531,5,107,0,0,531,84,1,0,0,0,532,533,5,97,0,
        0,533,534,5,115,0,0,534,535,5,121,0,0,535,536,5,110,0,0,536,537,
        5,99,0,0,537,86,1,0,0,0,538,539,5,97,0,0,539,540,5,119,0,0,540,541,
        5,97,0,0,541,542,5,105,0,0,542,543,5,116,0,0,543,88,1,0,0,0,544,
        545,5,64,0,0,545,546,5,98,0,0,546,547,5,97,0,0,547,548,5,115,0,0,
        548,549,5,101,0,0,549,90,1,0,0,0,550,551,5,64,0,0,551,552,5,112,
        0,0,552,553,5,114,0,0,553,554,5,101,0,0,554,555,5,102,0,0,555,556,
        5,105,0,0,556,557,5,120,0,0,557,92,1,0,0,0,558,559,4,46,0,0,559,
        571,3,265,132,0,560,562,5,13,0,0,561,560,1,0,0,0,561,562,1,0,0,0,
        562,563,1,0,0,0,563,566,5,10,0,0,564,566,2,12,13,0,565,561,1,0,0,
        0,565,564,1,0,0,0,566,568,1,0,0,0,567,569,3,265,132,0,568,567,1,
        0,0,0,568,569,1,0,0,0,569,571,1,0,0,0,570,558,1,0,0,0,570,565,1,
        0,0,0,571,572,1,0,0,0,572,573,6,46,2,0,573,94,1,0,0,0,574,578,3,
        273,136,0,575,577,3,275,137,0,576,575,1,0,0,0,577,580,1,0,0,0,578,
        576,1,0,0,0,578,579,1,0,0,0,579,96,1,0,0,0,580,578,1,0,0,0,581,587,
        7,1,0,0,582,583,7,2,0,0,583,587,7,3,0,0,584,585,7,3,0,0,585,587,
        7,2,0,0,586,581,1,0,0,0,586,582,1,0,0,0,586,584,1,0,0,0,586,587,
        1,0,0,0,587,590,1,0,0,0,588,591,3,221,110,0,589,591,3,223,111,0,
        590,588,1,0,0,0,590,589,1,0,0,0,591,98,1,0,0,0,592,598,7,4,0,0,593,
        594,7,4,0,0,594,598,7,3,0,0,595,596,7,3,0,0,596,598,7,4,0,0,597,
        592,1,0,0,0,597,593,1,0,0,0,597,595,1,0,0,0,598,601,1,0,0,0,599,
        602,3,251,125,0,600,602,3,253,126,0,601,599,1,0,0,0,601,600,1,0,
        0,0,602,100,1,0,0,0,603,607,3,231,115,0,604,606,3,233,116,0,605,
        604,1,0,0,0,606,609,1,0,0,0,607,605,1,0,0,0,607,608,1,0,0,0,608,
        616,1,0,0,0,609,607,1,0,0,0,610,612,5,48,0,0,611,610,1,0,0,0,612,
        613,1,0,0,0,613,611,1,0,0,0,613,614,1,0,0,0,614,616,1,0,0,0,615,
        603,1,0,0,0,615,611,1,0,0,0,616,102,1,0,0,0,617,618,5,48,0,0,618,
        620,7,5,0,0,619,621,3,235,117,0,620,619,1,0,0,0,621,622,1,0,0,0,
        622,620,1,0,0,0,622,623,1,0,0,0,623,104,1,0,0,0,624,625,5,48,0,0,
        625,627,7,6,0,0,626,628,3,237,118,0,627,626,1,0,0,0,628,629,1,0,
        0,0,629,627,1,0,0,0,629,630,1,0,0,0,630,106,1,0,0,0,631,632,5,48,
        0,0,632,634,7,4,0,0,633,635,3,239,119,0,634,633,1,0,0,0,635,636,
        1,0,0,0,636,634,1,0,0,0,636,637,1,0,0,0,637,108,1,0,0,0,638,641,
        3,241,120,0,639,641,3,243,121,0,640,638,1,0,0,0,640,639,1,0,0,0,
        641,110,1,0,0,0,642,645,3,109,54,0,643,645,3,245,122,0,644,642,1,
        0,0,0,644,643,1,0,0,0,645,646,1,0,0,0,646,647,7,7,0,0,647,112,1,
        0,0,0,648,649,5,95,0,0,649,650,5,58,0,0,650,653,1,0,0,0,651,654,
        3,273,136,0,652,654,3,233,116,0,653,651,1,0,0,0,653,652,1,0,0,0,
        654,663,1,0,0,0,655,658,3,279,139,0,656,658,3,121,60,0,657,655,1,
        0,0,0,657,656,1,0,0,0,658,661,1,0,0,0,659,657,1,0,0,0,659,660,1,
        0,0,0,660,662,1,0,0,0,661,659,1,0,0,0,662,664,3,279,139,0,663,659,
        1,0,0,0,663,664,1,0,0,0,664,114,1,0,0,0,665,666,5,63,0,0,666,667,
        3,277,138,0,667,116,1,0,0,0,668,669,5,36,0,0,669,670,3,277,138,0,
        670,118,1,0,0,0,671,673,5,64,0,0,672,674,7,8,0,0,673,672,1,0,0,0,
        674,675,1,0,0,0,675,673,1,0,0,0,675,676,1,0,0,0,676,685,1,0,0,0,
        677,679,5,45,0,0,678,680,7,9,0,0,679,678,1,0,0,0,680,681,1,0,0,0,
        681,679,1,0,0,0,681,682,1,0,0,0,682,684,1,0,0,0,683,677,1,0,0,0,
        684,687,1,0,0,0,685,683,1,0,0,0,685,686,1,0,0,0,686,688,1,0,0,0,
        687,685,1,0,0,0,688,689,4,59,1,0,689,120,1,0,0,0,690,691,5,46,0,
        0,691,122,1,0,0,0,692,693,5,46,0,0,693,694,5,46,0,0,694,695,5,46,
        0,0,695,124,1,0,0,0,696,697,5,42,0,0,697,126,1,0,0,0,698,699,5,40,
        0,0,699,700,6,63,3,0,700,128,1,0,0,0,701,702,5,41,0,0,702,703,6,
        64,4,0,703,130,1,0,0,0,704,705,5,44,0,0,705,132,1,0,0,0,706,707,
        5,58,0,0,707,134,1,0,0,0,708,709,5,59,0,0,709,136,1,0,0,0,710,711,
        5,42,0,0,711,712,5,42,0,0,712,138,1,0,0,0,713,714,5,61,0,0,714,140,
        1,0,0,0,715,716,5,91,0,0,716,717,6,70,5,0,717,142,1,0,0,0,718,719,
        5,93,0,0,719,720,6,71,6,0,720,144,1,0,0,0,721,722,5,124,0,0,722,
        146,1,0,0,0,723,724,5,94,0,0,724,148,1,0,0,0,725,726,5,38,0,0,726,
        150,1,0,0,0,727,728,5,60,0,0,728,729,5,60,0,0,729,152,1,0,0,0,730,
        731,5,62,0,0,731,732,5,62,0,0,732,154,1,0,0,0,733,734,5,43,0,0,734,
        156,1,0,0,0,735,736,5,45,0,0,736,158,1,0,0,0,737,738,5,47,0,0,738,
        160,1,0,0,0,739,740,5,37,0,0,740,162,1,0,0,0,741,742,5,47,0,0,742,
        743,5,47,0,0,743,164,1,0,0,0,744,745,5,126,0,0,745,166,1,0,0,0,746,
        747,5,123,0,0,747,748,6,83,7,0,748,168,1,0,0,0,749,750,5,125,0,0,
        750,751,6,84,8,0,751,170,1,0,0,0,752,753,5,103,0,0,753,754,5,123,
        0,0,754,755,1,0,0,0,755,756,6,85,9,0,756,172,1,0,0,0,757,758,5,60,
        0,0,758,174,1,0,0,0,759,760,5,62,0,0,760,176,1,0,0,0,761,762,5,61,
        0,0,762,763,5,61,0,0,763,178,1,0,0,0,764,765,5,62,0,0,765,766,5,
        61,0,0,766,180,1,0,0,0,767,768,5,60,0,0,768,769,5,61,0,0,769,182,
        1,0,0,0,770,771,5,60,0,0,771,772,5,62,0,0,772,184,1,0,0,0,773,774,
        5,33,0,0,774,775,5,61,0,0,775,186,1,0,0,0,776,777,5,64,0,0,777,188,
        1,0,0,0,778,779,5,45,0,0,779,780,5,62,0,0,780,190,1,0,0,0,781,782,
        5,43,0,0,782,783,5,61,0,0,783,192,1,0,0,0,784,785,5,45,0,0,785,786,
        5,61,0,0,786,194,1,0,0,0,787,788,5,42,0,0,788,789,5,61,0,0,789,196,
        1,0,0,0,790,791,5,64,0,0,791,792,5,61,0,0,792,198,1,0,0,0,793,794,
        5,47,0,0,794,795,5,61,0,0,795,200,1,0,0,0,796,797,5,37,0,0,797,798,
        5,61,0,0,798,202,1,0,0,0,799,800,5,38,0,0,800,801,5,61,0,0,801,204,
        1,0,0,0,802,803,5,124,0,0,803,804,5,61,0,0,804,206,1,0,0,0,805,806,
        5,94,0,0,806,807,5,61,0,0,807,208,1,0,0,0,808,809,5,60,0,0,809,810,
        5,60,0,0,810,811,5,61,0,0,811,210,1,0,0,0,812,813,5,62,0,0,813,814,
        5,62,0,0,814,815,5,61,0,0,815,212,1,0,0,0,816,817,5,42,0,0,817,818,
        5,42,0,0,818,819,5,61,0,0,819,214,1,0,0,0,820,821,5,47,0,0,821,822,
        5,47,0,0,822,823,5,61,0,0,823,216,1,0,0,0,824,828,3,265,132,0,825,
        828,3,267,133,0,826,828,3,269,134,0,827,824,1,0,0,0,827,825,1,0,
        0,0,827,826,1,0,0,0,828,829,1,0,0,0,829,830,6,108,10,0,830,218,1,
        0,0,0,831,832,9,0,0,0,832,220,1,0,0,0,833,838,5,39,0,0,834,837,3,
        229,114,0,835,837,8,10,0,0,836,834,1,0,0,0,836,835,1,0,0,0,837,840,
        1,0,0,0,838,836,1,0,0,0,838,839,1,0,0,0,839,841,1,0,0,0,840,838,
        1,0,0,0,841,852,5,39,0,0,842,847,5,34,0,0,843,846,3,229,114,0,844,
        846,8,11,0,0,845,843,1,0,0,0,845,844,1,0,0,0,846,849,1,0,0,0,847,
        845,1,0,0,0,847,848,1,0,0,0,848,850,1,0,0,0,849,847,1,0,0,0,850,
        852,5,34,0,0,851,833,1,0,0,0,851,842,1,0,0,0,852,222,1,0,0,0,853,
        854,5,39,0,0,854,855,5,39,0,0,855,856,5,39,0,0,856,860,1,0,0,0,857,
        859,3,225,112,0,858,857,1,0,0,0,859,862,1,0,0,0,860,861,1,0,0,0,
        860,858,1,0,0,0,861,863,1,0,0,0,862,860,1,0,0,0,863,864,5,39,0,0,
        864,865,5,39,0,0,865,880,5,39,0,0,866,867,5,34,0,0,867,868,5,34,
        0,0,868,869,5,34,0,0,869,873,1,0,0,0,870,872,3,225,112,0,871,870,
        1,0,0,0,872,875,1,0,0,0,873,874,1,0,0,0,873,871,1,0,0,0,874,876,
        1,0,0,0,875,873,1,0,0,0,876,877,5,34,0,0,877,878,5,34,0,0,878,880,
        5,34,0,0,879,853,1,0,0,0,879,866,1,0,0,0,880,224,1,0,0,0,881,884,
        3,227,113,0,882,884,3,229,114,0,883,881,1,0,0,0,883,882,1,0,0,0,
        884,226,1,0,0,0,885,886,8,12,0,0,886,228,1,0,0,0,887,888,5,92,0,
        0,888,892,9,0,0,0,889,890,5,92,0,0,890,892,3,93,46,0,891,887,1,0,
        0,0,891,889,1,0,0,0,892,230,1,0,0,0,893,894,7,13,0,0,894,232,1,0,
        0,0,895,896,7,14,0,0,896,234,1,0,0,0,897,898,7,15,0,0,898,236,1,
        0,0,0,899,900,7,16,0,0,900,238,1,0,0,0,901,902,7,17,0,0,902,240,
        1,0,0,0,903,905,3,245,122,0,904,903,1,0,0,0,904,905,1,0,0,0,905,
        906,1,0,0,0,906,911,3,247,123,0,907,908,3,245,122,0,908,909,5,46,
        0,0,909,911,1,0,0,0,910,904,1,0,0,0,910,907,1,0,0,0,911,242,1,0,
        0,0,912,915,3,245,122,0,913,915,3,241,120,0,914,912,1,0,0,0,914,
        913,1,0,0,0,915,916,1,0,0,0,916,917,3,249,124,0,917,244,1,0,0,0,
        918,920,3,233,116,0,919,918,1,0,0,0,920,921,1,0,0,0,921,919,1,0,
        0,0,921,922,1,0,0,0,922,246,1,0,0,0,923,925,5,46,0,0,924,926,3,233,
        116,0,925,924,1,0,0,0,926,927,1,0,0,0,927,925,1,0,0,0,927,928,1,
        0,0,0,928,248,1,0,0,0,929,931,7,18,0,0,930,932,7,19,0,0,931,930,
        1,0,0,0,931,932,1,0,0,0,932,934,1,0,0,0,933,935,3,233,116,0,934,
        933,1,0,0,0,935,936,1,0,0,0,936,934,1,0,0,0,936,937,1,0,0,0,937,
        250,1,0,0,0,938,943,5,39,0,0,939,942,3,257,128,0,940,942,3,263,131,
        0,941,939,1,0,0,0,941,940,1,0,0,0,942,945,1,0,0,0,943,941,1,0,0,
        0,943,944,1,0,0,0,944,946,1,0,0,0,945,943,1,0,0,0,946,957,5,39,0,
        0,947,952,5,34,0,0,948,951,3,259,129,0,949,951,3,263,131,0,950,948,
        1,0,0,0,950,949,1,0,0,0,951,954,1,0,0,0,952,950,1,0,0,0,952,953,
        1,0,0,0,953,955,1,0,0,0,954,952,1,0,0,0,955,957,5,34,0,0,956,938,
        1,0,0,0,956,947,1,0,0,0,957,252,1,0,0,0,958,959,5,39,0,0,959,960,
        5,39,0,0,960,961,5,39,0,0,961,965,1,0,0,0,962,964,3,255,127,0,963,
        962,1,0,0,0,964,967,1,0,0,0,965,966,1,0,0,0,965,963,1,0,0,0,966,
        968,1,0,0,0,967,965,1,0,0,0,968,969,5,39,0,0,969,970,5,39,0,0,970,
        985,5,39,0,0,971,972,5,34,0,0,972,973,5,34,0,0,973,974,5,34,0,0,
        974,978,1,0,0,0,975,977,3,255,127,0,976,975,1,0,0,0,977,980,1,0,
        0,0,978,979,1,0,0,0,978,976,1,0,0,0,979,981,1,0,0,0,980,978,1,0,
        0,0,981,982,5,34,0,0,982,983,5,34,0,0,983,985,5,34,0,0,984,958,1,
        0,0,0,984,971,1,0,0,0,985,254,1,0,0,0,986,989,3,261,130,0,987,989,
        3,263,131,0,988,986,1,0,0,0,988,987,1,0,0,0,989,256,1,0,0,0,990,
        992,7,20,0,0,991,990,1,0,0,0,992,258,1,0,0,0,993,995,7,21,0,0,994,
        993,1,0,0,0,995,260,1,0,0,0,996,998,7,22,0,0,997,996,1,0,0,0,998,
        262,1,0,0,0,999,1000,5,92,0,0,1000,1001,7,23,0,0,1001,264,1,0,0,
        0,1002,1004,7,24,0,0,1003,1002,1,0,0,0,1004,1005,1,0,0,0,1005,1003,
        1,0,0,0,1005,1006,1,0,0,0,1006,266,1,0,0,0,1007,1011,5,35,0,0,1008,
        1010,8,25,0,0,1009,1008,1,0,0,0,1010,1013,1,0,0,0,1011,1009,1,0,
        0,0,1011,1012,1,0,0,0,1012,268,1,0,0,0,1013,1011,1,0,0,0,1014,1016,
        5,92,0,0,1015,1017,3,265,132,0,1016,1015,1,0,0,0,1016,1017,1,0,0,
        0,1017,1023,1,0,0,0,1018,1020,5,13,0,0,1019,1018,1,0,0,0,1019,1020,
        1,0,0,0,1020,1021,1,0,0,0,1021,1024,5,10,0,0,1022,1024,2,12,13,0,
        1023,1019,1,0,0,0,1023,1022,1,0,0,0,1024,270,1,0,0,0,1025,1027,7,
        8,0,0,1026,1025,1,0,0,0,1027,272,1,0,0,0,1028,1031,3,271,135,0,1029,
        1031,5,95,0,0,1030,1028,1,0,0,0,1030,1029,1,0,0,0,1031,274,1,0,0,
        0,1032,1035,3,273,136,0,1033,1035,7,14,0,0,1034,1032,1,0,0,0,1034,
        1033,1,0,0,0,1035,276,1,0,0,0,1036,1038,3,273,136,0,1037,1036,1,
        0,0,0,1038,1039,1,0,0,0,1039,1037,1,0,0,0,1039,1040,1,0,0,0,1040,
        278,1,0,0,0,1041,1044,3,275,137,0,1042,1044,5,45,0,0,1043,1041,1,
        0,0,0,1043,1042,1,0,0,0,1044,280,1,0,0,0,1045,1054,3,271,135,0,1046,
        1049,3,279,139,0,1047,1049,5,46,0,0,1048,1046,1,0,0,0,1048,1047,
        1,0,0,0,1049,1052,1,0,0,0,1050,1048,1,0,0,0,1050,1051,1,0,0,0,1051,
        1053,1,0,0,0,1052,1050,1,0,0,0,1053,1055,3,279,139,0,1054,1050,1,
        0,0,0,1054,1055,1,0,0,0,1055,282,1,0,0,0,1056,1060,3,275,137,0,1057,
        1060,5,58,0,0,1058,1060,3,285,142,0,1059,1056,1,0,0,0,1059,1057,
        1,0,0,0,1059,1058,1,0,0,0,1060,1075,1,0,0,0,1061,1066,3,275,137,
        0,1062,1066,5,58,0,0,1063,1066,3,285,142,0,1064,1066,5,46,0,0,1065,
        1061,1,0,0,0,1065,1062,1,0,0,0,1065,1063,1,0,0,0,1065,1064,1,0,0,
        0,1066,1069,1,0,0,0,1067,1065,1,0,0,0,1067,1068,1,0,0,0,1068,1073,
        1,0,0,0,1069,1067,1,0,0,0,1070,1074,3,275,137,0,1071,1074,5,58,0,
        0,1072,1074,3,285,142,0,1073,1070,1,0,0,0,1073,1071,1,0,0,0,1073,
        1072,1,0,0,0,1074,1076,1,0,0,0,1075,1067,1,0,0,0,1075,1076,1,0,0,
        0,1076,284,1,0,0,0,1077,1080,3,287,143,0,1078,1080,3,289,144,0,1079,
        1077,1,0,0,0,1079,1078,1,0,0,0,1080,286,1,0,0,0,1081,1082,5,37,0,
        0,1082,1083,3,237,118,0,1083,1084,3,237,118,0,1084,288,1,0,0,0,1085,
        1086,5,92,0,0,1086,1087,7,26,0,0,1087,290,1,0,0,0,81,0,301,312,321,
        330,341,346,352,561,565,568,570,578,586,590,597,601,607,613,615,
        622,629,636,640,644,653,657,659,663,675,681,685,827,836,838,845,
        847,851,860,873,879,883,891,904,910,914,921,927,931,936,941,943,
        950,952,956,965,978,984,988,991,994,997,1005,1011,1016,1019,1023,
        1026,1030,1034,1039,1043,1048,1050,1054,1059,1065,1067,1073,1075,
        1079,11,1,6,0,1,6,1,1,46,2,1,63,3,1,64,4,1,70,5,1,71,6,1,83,7,1,
        84,8,1,85,9,0,1,0
    ]

class LDPythonLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    IRIREF = 3
    FIRIREF_START = 4
    FIRIREF_SUB = 5
    FIRIREF_END = 6
    STRING = 7
    NUMBER = 8
    INTEGER = 9
    DEF = 10
    RETURN = 11
    RAISE = 12
    FROM = 13
    IMPORT = 14
    AS = 15
    GLOBAL = 16
    NONLOCAL = 17
    ASSERT = 18
    IF = 19
    ELIF = 20
    ELSE = 21
    WHILE = 22
    FOR = 23
    IN = 24
    TRY = 25
    FINALLY = 26
    WITH = 27
    EXCEPT = 28
    LAMBDA = 29
    OR = 30
    AND = 31
    NOT = 32
    IS = 33
    NONE = 34
    TRUE = 35
    FALSE = 36
    CLASS = 37
    YIELD = 38
    DEL = 39
    PASS = 40
    CONTINUE = 41
    BREAK = 42
    ASYNC = 43
    AWAIT = 44
    BASE = 45
    PREFIX = 46
    NEWLINE = 47
    NAME = 48
    STRING_LITERAL = 49
    BYTES_LITERAL = 50
    DECIMAL_INTEGER = 51
    OCT_INTEGER = 52
    HEX_INTEGER = 53
    BIN_INTEGER = 54
    FLOAT_NUMBER = 55
    IMAG_NUMBER = 56
    BLANK_NODE_LABEL = 57
    VAR1 = 58
    VAR2 = 59
    LANGTAG = 60
    DOT = 61
    ELLIPSIS = 62
    STAR = 63
    OPEN_PAREN = 64
    CLOSE_PAREN = 65
    COMMA = 66
    COLON = 67
    SEMI_COLON = 68
    POWER = 69
    ASSIGN = 70
    OPEN_BRACK = 71
    CLOSE_BRACK = 72
    OR_OP = 73
    XOR = 74
    AND_OP = 75
    LEFT_SHIFT = 76
    RIGHT_SHIFT = 77
    ADD = 78
    MINUS = 79
    DIV = 80
    MOD = 81
    IDIV = 82
    NOT_OP = 83
    OPEN_BRACE = 84
    CLOSE_BRACE = 85
    OPEN_GRAPH = 86
    LESS_THAN = 87
    GREATER_THAN = 88
    EQUALS = 89
    GT_EQ = 90
    LT_EQ = 91
    NOT_EQ_1 = 92
    NOT_EQ_2 = 93
    AT = 94
    ARROW = 95
    ADD_ASSIGN = 96
    SUB_ASSIGN = 97
    MULT_ASSIGN = 98
    AT_ASSIGN = 99
    DIV_ASSIGN = 100
    MOD_ASSIGN = 101
    AND_ASSIGN = 102
    OR_ASSIGN = 103
    XOR_ASSIGN = 104
    LEFT_SHIFT_ASSIGN = 105
    RIGHT_SHIFT_ASSIGN = 106
    POWER_ASSIGN = 107
    IDIV_ASSIGN = 108
    SKIP_ = 109
    UNKNOWN_CHAR = 110

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'^^'", "'f{'", "'def'", "'return'", "'raise'", "'from'", "'import'", 
            "'as'", "'global'", "'nonlocal'", "'assert'", "'if'", "'elif'", 
            "'else'", "'while'", "'for'", "'in'", "'try'", "'finally'", 
            "'with'", "'except'", "'lambda'", "'or'", "'and'", "'not'", 
            "'is'", "'None'", "'True'", "'False'", "'class'", "'yield'", 
            "'del'", "'pass'", "'continue'", "'break'", "'async'", "'await'", 
            "'@base'", "'@prefix'", "'.'", "'...'", "'*'", "'('", "')'", 
            "','", "':'", "';'", "'**'", "'='", "'['", "']'", "'|'", "'^'", 
            "'&'", "'<<'", "'>>'", "'+'", "'-'", "'/'", "'%'", "'//'", "'~'", 
            "'{'", "'}'", "'g{'", "'<'", "'>'", "'=='", "'>='", "'<='", 
            "'<>'", "'!='", "'@'", "'->'", "'+='", "'-='", "'*='", "'@='", 
            "'/='", "'%='", "'&='", "'|='", "'^='", "'<<='", "'>>='", "'**='", 
            "'//='" ]

    symbolicNames = [ "<INVALID>",
            "IRIREF", "FIRIREF_START", "FIRIREF_SUB", "FIRIREF_END", "STRING", 
            "NUMBER", "INTEGER", "DEF", "RETURN", "RAISE", "FROM", "IMPORT", 
            "AS", "GLOBAL", "NONLOCAL", "ASSERT", "IF", "ELIF", "ELSE", 
            "WHILE", "FOR", "IN", "TRY", "FINALLY", "WITH", "EXCEPT", "LAMBDA", 
            "OR", "AND", "NOT", "IS", "NONE", "TRUE", "FALSE", "CLASS", 
            "YIELD", "DEL", "PASS", "CONTINUE", "BREAK", "ASYNC", "AWAIT", 
            "BASE", "PREFIX", "NEWLINE", "NAME", "STRING_LITERAL", "BYTES_LITERAL", 
            "DECIMAL_INTEGER", "OCT_INTEGER", "HEX_INTEGER", "BIN_INTEGER", 
            "FLOAT_NUMBER", "IMAG_NUMBER", "BLANK_NODE_LABEL", "VAR1", "VAR2", 
            "LANGTAG", "DOT", "ELLIPSIS", "STAR", "OPEN_PAREN", "CLOSE_PAREN", 
            "COMMA", "COLON", "SEMI_COLON", "POWER", "ASSIGN", "OPEN_BRACK", 
            "CLOSE_BRACK", "OR_OP", "XOR", "AND_OP", "LEFT_SHIFT", "RIGHT_SHIFT", 
            "ADD", "MINUS", "DIV", "MOD", "IDIV", "NOT_OP", "OPEN_BRACE", 
            "CLOSE_BRACE", "OPEN_GRAPH", "LESS_THAN", "GREATER_THAN", "EQUALS", 
            "GT_EQ", "LT_EQ", "NOT_EQ_1", "NOT_EQ_2", "AT", "ARROW", "ADD_ASSIGN", 
            "SUB_ASSIGN", "MULT_ASSIGN", "AT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", 
            "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", "LEFT_SHIFT_ASSIGN", 
            "RIGHT_SHIFT_ASSIGN", "POWER_ASSIGN", "IDIV_ASSIGN", "SKIP_", 
            "UNKNOWN_CHAR" ]

    ruleNames = [ "T__0", "T__1", "IRIREF", "FIRIREF_START", "FIRIREF_SUB", 
                  "FIRIREF_END", "STRING", "NUMBER", "INTEGER", "DEF", "RETURN", 
                  "RAISE", "FROM", "IMPORT", "AS", "GLOBAL", "NONLOCAL", 
                  "ASSERT", "IF", "ELIF", "ELSE", "WHILE", "FOR", "IN", 
                  "TRY", "FINALLY", "WITH", "EXCEPT", "LAMBDA", "OR", "AND", 
                  "NOT", "IS", "NONE", "TRUE", "FALSE", "CLASS", "YIELD", 
                  "DEL", "PASS", "CONTINUE", "BREAK", "ASYNC", "AWAIT", 
                  "BASE", "PREFIX", "NEWLINE", "NAME", "STRING_LITERAL", 
                  "BYTES_LITERAL", "DECIMAL_INTEGER", "OCT_INTEGER", "HEX_INTEGER", 
                  "BIN_INTEGER", "FLOAT_NUMBER", "IMAG_NUMBER", "BLANK_NODE_LABEL", 
                  "VAR1", "VAR2", "LANGTAG", "DOT", "ELLIPSIS", "STAR", 
                  "OPEN_PAREN", "CLOSE_PAREN", "COMMA", "COLON", "SEMI_COLON", 
                  "POWER", "ASSIGN", "OPEN_BRACK", "CLOSE_BRACK", "OR_OP", 
                  "XOR", "AND_OP", "LEFT_SHIFT", "RIGHT_SHIFT", "ADD", "MINUS", 
                  "DIV", "MOD", "IDIV", "NOT_OP", "OPEN_BRACE", "CLOSE_BRACE", 
                  "OPEN_GRAPH", "LESS_THAN", "GREATER_THAN", "EQUALS", "GT_EQ", 
                  "LT_EQ", "NOT_EQ_1", "NOT_EQ_2", "AT", "ARROW", "ADD_ASSIGN", 
                  "SUB_ASSIGN", "MULT_ASSIGN", "AT_ASSIGN", "DIV_ASSIGN", 
                  "MOD_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", 
                  "LEFT_SHIFT_ASSIGN", "RIGHT_SHIFT_ASSIGN", "POWER_ASSIGN", 
                  "IDIV_ASSIGN", "SKIP_", "UNKNOWN_CHAR", "SHORT_STRING", 
                  "LONG_STRING", "LONG_STRING_ITEM", "LONG_STRING_CHAR", 
                  "STRING_ESCAPE_SEQ", "NON_ZERO_DIGIT", "DIGIT", "OCT_DIGIT", 
                  "HEX_DIGIT", "BIN_DIGIT", "POINT_FLOAT", "EXPONENT_FLOAT", 
                  "INT_PART", "FRACTION", "EXPONENT", "SHORT_BYTES", "LONG_BYTES", 
                  "LONG_BYTES_ITEM", "SHORT_BYTES_CHAR_NO_SINGLE_QUOTE", 
                  "SHORT_BYTES_CHAR_NO_DOUBLE_QUOTE", "LONG_BYTES_CHAR", 
                  "BYTES_ESCAPE_SEQ", "SPACES", "COMMENT", "LINE_JOINING", 
                  "PN_CHARS_BASE", "PN_CHARS_U", "PN_CHARS_UN", "VARNAME", 
                  "PN_CHARS", "PN_PREFIX", "PN_LOCAL", "PLX", "PERCENT", 
                  "PN_LOCAL_ESC" ]

    grammarFileName = "LDPython.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    is_literal = False
    allow_langtag = False

    @property
    def tokens(self):
        try:
            return self._tokens
        except AttributeError:
            self._tokens = []
            return self._tokens

    @property
    def indents(self):
        try:
            return self._indents
        except AttributeError:
            self._indents = []
            return self._indents

    @property
    def opened(self):
        try:
            return self._opened
        except AttributeError:
            self._opened = 0
            return self._opened

    @opened.setter
    def opened(self, value):
        self._opened = value

    @property
    def lastToken(self):
        try:
            return self._lastToken
        except AttributeError:
            self._lastToken = None
            return self._lastToken

    @lastToken.setter
    def lastToken(self, value):
        self._lastToken = value

    def reset(self):
        super().reset()
        self.tokens = []
        self.indents = []
        self.opened = 0
        self.lastToken = None

    def emitToken(self, t):
        super().emitToken(t)
        self.tokens.append(t)

    def nextToken(self):
        if self._input.LA(1) == Token.EOF and self.indents:
            for i in range(len(self.tokens)-1,-1,-1):
                if self.tokens[i].type == Token.EOF:
                    self.tokens.pop(i)

            self.emitToken(self.commonToken(LanguageParser.NEWLINE, '\n'))
            while self.indents:
                self.emitToken(self.createDedent())
                self.indents.pop()

            self.emitToken(self.commonToken(LanguageParser.EOF, "<EOF>"))
        next = super().nextToken()
        if next.channel == Token.DEFAULT_CHANNEL:
            self.lastToken = next
        if self.allow_langtag:
            self.is_literal = False
            self.allow_langtag = False
        if self.is_literal:
            self.is_literal = False
            self.allow_langtag = True
        return next if not self.tokens else self.tokens.pop(0)

    def createDedent(self):
        dedent = self.commonToken(LanguageParser.DEDENT, "")
        dedent.line = self.lastToken.line
        return dedent

    def commonToken(self, type, text, indent=0):
        stop = self.getCharIndex()-1-indent
        start = (stop - len(text) + 1) if text else stop
        return CommonToken(self._tokenFactorySourcePair, type, super().DEFAULT_TOKEN_CHANNEL, start, stop)

    @staticmethod
    def getIndentationCount(spaces):
        count = 0
        for ch in spaces:
            if ch == '\t':
                count += 8 - (count % 8)
            else:
                count += 1
        return count

    def atStartOfInput(self):
        return Lexer.column.fget(self) == 0 and Lexer.line.fget(self) == 1


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[6] = self.STRING_action 
            actions[46] = self.NEWLINE_action 
            actions[63] = self.OPEN_PAREN_action 
            actions[64] = self.CLOSE_PAREN_action 
            actions[70] = self.OPEN_BRACK_action 
            actions[71] = self.CLOSE_BRACK_action 
            actions[83] = self.OPEN_BRACE_action 
            actions[84] = self.CLOSE_BRACE_action 
            actions[85] = self.OPEN_GRAPH_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            self.is_literal = True;
     

        if actionIndex == 1:
            self.is_literal = True;
     

    def NEWLINE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:

            tempt = Lexer.text.fget(self)
            newLine = re.sub("[^\r\n\f]+", "", tempt)
            spaces = re.sub("[\r\n\f]+", "", tempt)
            la_char = ""
            try:
                la = self._input.LA(1)
                la_char = chr(la)       # Python does not compare char to ints directly
            except ValueError:          # End of file
                pass

            # Strip newlines inside open clauses except if we are near EOF. We keep NEWLINEs near EOF to
            # satisfy the final newline needed by the single_put rule used by the REPL.
            try:
                nextnext_la = self._input.LA(2)
                nextnext_la_char = chr(nextnext_la)
            except ValueError:
                nextnext_eof = True
            else:
                nextnext_eof = False

            if self.opened > 0 or nextnext_eof is False and (la_char == '\r' or la_char == '\n' or la_char == '\f' or la_char == '#'):
                self.skip()
            else:
                indent = self.getIndentationCount(spaces)
                previous = self.indents[-1] if self.indents else 0
                self.emitToken(self.commonToken(self.NEWLINE, newLine, indent=indent))      # NEWLINE is actually the '\n' char
                if indent == previous:
                    self.skip()
                elif indent > previous:
                    self.indents.append(indent)
                    self.emitToken(self.commonToken(LanguageParser.INDENT, spaces))
                else:
                    while self.indents and self.indents[-1] > indent:
                        self.emitToken(self.createDedent())
                        self.indents.pop()
                
     

    def OPEN_PAREN_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:
            self.opened += 1
     

    def CLOSE_PAREN_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 4:
            self.opened -= 1
     

    def OPEN_BRACK_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 5:
            self.opened += 1
     

    def CLOSE_BRACK_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 6:
            self.opened -= 1
     

    def OPEN_BRACE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 7:
            self.opened += 1
     

    def CLOSE_BRACE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 8:
            self.opened -= 1
     

    def OPEN_GRAPH_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 9:
            self.opened += 1
     

    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates is None:
            preds = dict()
            preds[46] = self.NEWLINE_sempred
            preds[59] = self.LANGTAG_sempred
            self._predicates = preds
        pred = self._predicates.get(ruleIndex, None)
        if pred is not None:
            return pred(localctx, predIndex)
        else:
            raise Exception("No registered predicate for:" + str(ruleIndex))

    def NEWLINE_sempred(self, localctx:RuleContext, predIndex:int):
            if predIndex == 0:
                return self.atStartOfInput()
         

    def LANGTAG_sempred(self, localctx:RuleContext, predIndex:int):
            if predIndex == 1:
                return self.allow_langtag
         


