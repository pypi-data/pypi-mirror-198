# makemake - a simple Makefile generator
# (c) 2023 by Andreas Schwenk <contact@compiler-construction.com>
# License: GPLv3


"""
The core implementation.
"""

import os
import glob


def makemake(input_path: str, output_path: str) -> None:
    """
    Generates a Makefile from meta data and source code.

    :param input_path: path to the input metadata file
    :param output_path: path where the output makefile is written to

    :return: none
    """

    # check, if the input file exists
    if os.path.exists(input_path) == False:
        print('ERROR: input file "' + input_path + '" does not exist')
        exit(-1)
    # read the input file
    f_input = open(input_path, "r")
    input_data = f_input.readlines()
    # parse the input file
    prog = 'prog'  # the program name
    dir = 'src/'  # the source code directory
    std = 'c99'  # the C standard
    build = 'build/'  # the output directory
    for i, line in enumerate(input_data):
        line = line.strip()
        if len(line) == 0:
            continue
        tokens = line.split('=')
        if len(tokens) != 2:
            print('ERROR: line '+str(i+1)+' is not well-formed')
            exit(-1)
        if tokens[0] == 'PROG':
            prog = tokens[1]
        elif tokens[0] == 'DIR':
            dir = tokens[1]
        elif tokens[0] == 'STD':
            std = tokens[1]
        elif tokens[0] == 'BUILD':
            build = tokens[1]
        else:
            print('ERROR: unknown meta data "' + tokens[0] + '"')

    # gather the header files
    headers = 'HEADERS='
    col = len(headers)
    if dir.endswith('/') == False:
        dir += '/'
    for file in sorted(glob.glob(dir + '*.h')):
        if col + len(file)+2 >= 80:
            headers += '\\\n\t'
            col = 4
        col += len(file)+2
        headers += file + ' '

    # gather code files and create object files
    c_files = []
    objs = 'OBJS='
    col = len(objs)
    if dir.endswith('/') == False:
        dir += '/'
    for file in sorted(glob.glob(dir + '*.c')):
        if '_old.c' in file:
            continue
        c_files.append(file)
        file = '$(BUILD_DIR)' + os.path.basename(file)
        if col + len(file)+2 >= 80:
            objs += '\\\n\t'
            col = 4
        col += len(file)+2
        objs += file[:-2] + '.o '

    # generate the output data
    output_data = '# Makefile generated by makemake (by Andreas Schwenk)\n'
    output_data += 'PROG=' + prog + '\n'
    output_data += 'CC=gcc -std=' + std + '\n'
    output_data += 'BUILD_DIR=' + build + '\n'
    output_data += 'INC=\n'
    output_data += 'LIB=\n'
    output_data += 'CFLAGS=$(FLAGS)\n'
    output_data += headers + '\n'
    output_data += objs + '\n'
    output_data += '\n'
    output_data += '$(shell mkdir -p $(BUILD_DIR))\n'
    output_data += '\n'
    output_data += 'all: $(PROG)\n'
    output_data += 'clean:\n'
    output_data += '\trm -rf $(BUILD_DIR)\n'
    output_data += '\n'
    output_data += '$(PROG): $(OBJS)\n'
    output_data += '\t$(CC) $(OBJS) $(INC) $(CFLAGS) $(LIB) -o $(BUILD_DIR)$(PROG)\n'

    # for each source file, create a build rule
    for c_file in c_files:
        obj_file = os.path.basename(c_file)[:-2] + '.o'
        output_data += '$(BUILD_DIR)'+obj_file+': '+c_file+' $(HEADERS)\n'
        output_data += '\t$(CC) ' + c_file + \
            ' $(INC) $(CFLAGS) -c -o $(BUILD_DIR)' + obj_file + '\n'

    # write the output file
    f_output = open(output_path, "w")
    f_output.write(output_data)
