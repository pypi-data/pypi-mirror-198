{"version":3,"file":"chunks/app_views_replays_list_container_tsx-images_spot_replays-empty-state_svg.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/onboardingPanel.tsx","webpack:///./app/components/replays/replaysFeatureBadge.tsx","webpack:///./app/utils/replays/hooks/useReplayOnboarding.tsx","webpack:///./app/utils/replays/hooks/useReplayPageview.tsx","webpack:///./app/utils/useTags.tsx","webpack:///./app/views/replays/replaySearchBar.tsx","webpack:///./app/views/replays/filters.tsx","webpack:///./app/views/replays/list/replayOnboardingPanel.tsx","webpack:///./app/views/replays/list/replaysList.tsx","webpack:///./app/views/replays/list/container.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nimport {Panel} from 'sentry/components/panels';\nimport {space} from 'sentry/styles/space';\n\ninterface Props extends React.ComponentProps<typeof Panel> {\n  children: React.ReactNode;\n  image?: React.ReactNode;\n}\n\nfunction OnboardingPanel({image, children, ...props}: Props) {\n  return (\n    <Panel {...props}>\n      <Container>\n        {image ? <IlloBox>{image}</IlloBox> : null}\n        <StyledBox centered={!image}>{children}</StyledBox>\n      </Container>\n    </Panel>\n  );\n}\n\nconst Container = styled('div')`\n  padding: ${space(3)};\n  position: relative;\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    display: flex;\n    align-items: center;\n    flex-direction: row;\n    justify-content: center;\n    flex-wrap: wrap;\n    min-height: 300px;\n    max-width: 1000px;\n    margin: 0 auto;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.medium}) {\n    min-height: 350px;\n  }\n`;\n\nconst StyledBox = styled('div')<{centered?: boolean}>`\n  z-index: 1;\n\n  ${p => (p.centered ? 'text-align: center;' : '')}\n  ${p => (p.centered ? 'max-width: 600px;' : '')}\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    flex: 2;\n  }\n`;\n\nconst IlloBox = styled(StyledBox)`\n  position: relative;\n  min-height: 100px;\n  max-width: 300px;\n  margin: ${space(2)} auto;\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    flex: 1;\n    margin: ${space(3)};\n    max-width: auto;\n  }\n`;\n\nexport default OnboardingPanel;\n","import FeatureBadge from 'sentry/components/featureBadge';\n\nfunction ReplaysFeatureBadge(\n  props: Omit<React.ComponentProps<typeof FeatureBadge>, 'type'>\n) {\n  return <FeatureBadge {...props} type=\"new\" />;\n}\n\nexport default ReplaysFeatureBadge;\n","import {useCallback, useEffect, useMemo} from 'react';\n\nimport {SidebarPanelKey} from 'sentry/components/sidebar/types';\nimport {ALL_ACCESS_PROJECTS} from 'sentry/constants/pageFilters';\nimport SidebarPanelStore from 'sentry/stores/sidebarPanelStore';\nimport {Project} from 'sentry/types';\nimport {PageFilters} from 'sentry/types/core';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport usePageFilters from 'sentry/utils/usePageFilters';\nimport useProjects from 'sentry/utils/useProjects';\nimport {useRouteContext} from 'sentry/utils/useRouteContext';\n\nfunction getSelectedProjectList(\n  selectedProjects: PageFilters['projects'],\n  projects: Project[]\n) {\n  if (selectedProjects[0] === ALL_ACCESS_PROJECTS || selectedProjects.length === 0) {\n    return projects;\n  }\n\n  const projectsByProjectId = projects.reduce<Record<string, Project>>((acc, project) => {\n    acc[project.id] = project;\n    return acc;\n  }, {});\n  return selectedProjects.map(id => projectsByProjectId[id]).filter(Boolean);\n}\n\nexport function useHaveSelectedProjectsSentAnyReplayEvents() {\n  const {projects, fetching} = useProjects();\n  const {selection} = usePageFilters();\n\n  const orgSentOneOrMoreReplayEvent = useMemo(() => {\n    const selectedProjects = getSelectedProjectList(selection.projects, projects);\n    const hasSentOneReplay = selectedProjects.some(project => project.hasReplays);\n    return hasSentOneReplay;\n  }, [selection.projects, projects]);\n\n  return {\n    hasSentOneReplay: orgSentOneOrMoreReplayEvent,\n    fetching,\n  };\n}\n\nexport function useReplayOnboardingSidebarPanel() {\n  const {location} = useRouteContext();\n  const organization = useOrganization();\n\n  useEffect(() => {\n    if (location.hash === '#replay-sidequest') {\n      SidebarPanelStore.activatePanel(SidebarPanelKey.ReplaysOnboarding);\n      trackAdvancedAnalyticsEvent('replay.list-view-setup-sidebar', {\n        organization,\n      });\n    }\n  }, [location.hash, organization]);\n\n  const activateSidebar = useCallback((event: {preventDefault: () => void}) => {\n    event.preventDefault();\n    window.location.hash = 'replay-sidequest';\n    SidebarPanelStore.activatePanel(SidebarPanelKey.ReplaysOnboarding);\n  }, []);\n\n  return {activateSidebar};\n}\n","import {useEffect, useRef} from 'react';\n\nimport ConfigStore from 'sentry/stores/configStore';\nimport {useLegacyStore} from 'sentry/stores/useLegacyStore';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useOrganization from 'sentry/utils/useOrganization';\n\nfunction useReplayPageview(type: 'replay.details-time-spent' | 'replay.list-time-spent') {\n  const config = useLegacyStore(ConfigStore);\n  const location = useLocation();\n  const organization = useOrganization();\n  const startTimeRef = useRef(Date.now());\n\n  useEffect(() => {\n    const startTime = startTimeRef.current;\n\n    trackAdvancedAnalyticsEvent('replay.details-viewed', {\n      organization,\n      referrer: decodeScalar(location.query.referrer),\n      user_email: config.user.email,\n    });\n\n    return () => {\n      const endTime = Date.now();\n      trackAdvancedAnalyticsEvent(type, {\n        organization,\n        seconds: (endTime - startTime) / 1000,\n        user_email: config.user.email,\n      });\n    };\n  }, [organization, type, location.query.referrer, config.user.email]);\n}\n\nexport default useReplayPageview;\n","import TagStore from 'sentry/stores/tagStore';\nimport {useLegacyStore} from 'sentry/stores/useLegacyStore';\nimport {TagCollection} from 'sentry/types';\n\nfunction useTags(): TagCollection {\n  return useLegacyStore(TagStore);\n}\n\nexport default useTags;\n","import {useCallback, useEffect} from 'react';\n\nimport {fetchTagValues, loadOrganizationTags} from 'sentry/actionCreators/tags';\nimport SmartSearchBar from 'sentry/components/smartSearchBar';\nimport {MAX_QUERY_LENGTH, NEGATION_OPERATOR, SEARCH_WILDCARD} from 'sentry/constants';\nimport {t} from 'sentry/locale';\nimport {\n  Organization,\n  PageFilters,\n  SavedSearchType,\n  Tag,\n  TagCollection,\n  TagValue,\n} from 'sentry/types';\nimport {isAggregateField} from 'sentry/utils/discover/fields';\nimport {FieldKind, getFieldDefinition, REPLAY_FIELDS} from 'sentry/utils/fields';\nimport useApi from 'sentry/utils/useApi';\nimport useTags from 'sentry/utils/useTags';\n\nconst SEARCH_SPECIAL_CHARS_REGEXP = new RegExp(\n  `^${NEGATION_OPERATOR}|\\\\${SEARCH_WILDCARD}`,\n  'g'\n);\n\n/**\n * Prepare query string (e.g. strip special characters like negation operator)\n */\nfunction prepareQuery(searchQuery: string) {\n  return searchQuery.replace(SEARCH_SPECIAL_CHARS_REGEXP, '');\n}\nconst getReplayFieldDefinition = (key: string) => getFieldDefinition(key, 'replay');\n\nfunction fieldDefinitionsToTagCollection(fieldKeys: string[]): TagCollection {\n  return Object.fromEntries(\n    fieldKeys.map(key => [\n      key,\n      {\n        key,\n        name: key,\n        kind: getReplayFieldDefinition(key)?.kind,\n      },\n    ])\n  );\n}\n\nconst REPLAY_FIELDS_AS_TAGS = fieldDefinitionsToTagCollection(REPLAY_FIELDS);\n\nfunction getSupportedTags(supportedTags: TagCollection) {\n  return {\n    ...Object.fromEntries(\n      Object.keys(supportedTags).map(key => [\n        key,\n        {\n          ...supportedTags[key],\n          kind: getReplayFieldDefinition(key)?.kind ?? FieldKind.TAG,\n        },\n      ])\n    ),\n    ...REPLAY_FIELDS_AS_TAGS,\n  };\n}\n\ntype Props = React.ComponentProps<typeof SmartSearchBar> & {\n  organization: Organization;\n  pageFilters: PageFilters;\n};\n\nfunction ReplaySearchBar(props: Props) {\n  const {organization, pageFilters} = props;\n  const api = useApi();\n  const projectIdStrings = pageFilters.projects?.map(String);\n  const tags = useTags();\n  useEffect(() => {\n    loadOrganizationTags(api, organization.slug, pageFilters);\n  }, [api, organization.slug, pageFilters]);\n\n  const getTagValues = useCallback(\n    (tag: Tag, searchQuery: string, _params: object): Promise<string[]> => {\n      if (isAggregateField(tag.key)) {\n        // We can't really auto suggest values for aggregate fields\n        // or measurements, so we simply don't\n        return Promise.resolve([]);\n      }\n\n      return fetchTagValues({\n        api,\n        orgSlug: organization.slug,\n        tagKey: tag.key,\n        search: searchQuery,\n        projectIds: projectIdStrings,\n        includeReplays: true,\n      }).then(\n        tagValues => (tagValues as TagValue[]).map(({value}) => value),\n        () => {\n          throw new Error('Unable to fetch event field values');\n        }\n      );\n    },\n    [api, organization.slug, projectIdStrings]\n  );\n\n  return (\n    <SmartSearchBar\n      {...props}\n      onGetTagValues={getTagValues}\n      supportedTags={getSupportedTags(tags)}\n      placeholder={t('Search for users, duration, count_errors, and more')}\n      prepareQuery={prepareQuery}\n      maxQueryLength={MAX_QUERY_LENGTH}\n      searchSource=\"replay_index\"\n      savedSearchType={SavedSearchType.REPLAY}\n      maxMenuHeight={500}\n      hasRecentSearches\n      fieldDefinitionGetter={getReplayFieldDefinition}\n    />\n  );\n}\n\nexport default ReplaySearchBar;\n","import {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport DatePageFilter from 'sentry/components/datePageFilter';\nimport EnvironmentPageFilter from 'sentry/components/environmentPageFilter';\nimport PageFilterBar from 'sentry/components/organizations/pageFilterBar';\nimport ProjectPageFilter from 'sentry/components/projectPageFilter';\nimport {space} from 'sentry/styles/space';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport usePageFilters from 'sentry/utils/usePageFilters';\nimport ReplaySearchBar from 'sentry/views/replays/replaySearchBar';\n\nfunction ReplaysFilters() {\n  const {selection} = usePageFilters();\n  const {pathname, query} = useLocation();\n  const organization = useOrganization();\n\n  return (\n    <FilterContainer>\n      <PageFilterBar condensed>\n        <ProjectPageFilter resetParamsOnChange={['cursor']} />\n        <EnvironmentPageFilter resetParamsOnChange={['cursor']} />\n        <DatePageFilter alignDropdown=\"left\" resetParamsOnChange={['cursor']} />\n      </PageFilterBar>\n      <ReplaySearchBar\n        organization={organization}\n        pageFilters={selection}\n        defaultQuery=\"\"\n        query={decodeScalar(query.query, '')}\n        onSearch={searchQuery => {\n          browserHistory.push({\n            pathname,\n            query: {\n              ...query,\n              cursor: undefined,\n              query: searchQuery.trim(),\n            },\n          });\n        }}\n      />\n    </FilterContainer>\n  );\n}\n\nconst FilterContainer = styled('div')`\n  display: inline-grid;\n  grid-template-columns: minmax(0, max-content) minmax(20rem, 1fr);\n  gap: ${space(2)};\n  width: 100%;\n  margin-bottom: ${space(2)};\n\n  @media (max-width: ${p => p.theme.breakpoints.small}) {\n    grid-template-columns: minmax(0, 1fr);\n  }\n`;\n\nexport default ReplaysFilters;\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport emptyStateImg from 'sentry-images/spot/replays-empty-state.svg';\n\nimport Feature from 'sentry/components/acl/feature';\nimport {Button} from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport HookOrDefault from 'sentry/components/hookOrDefault';\nimport OnboardingPanel from 'sentry/components/onboardingPanel';\nimport {t} from 'sentry/locale';\nimport PreferencesStore from 'sentry/stores/preferencesStore';\nimport {useLegacyStore} from 'sentry/stores/useLegacyStore';\nimport {useReplayOnboardingSidebarPanel} from 'sentry/utils/replays/hooks/useReplayOnboarding';\nimport useOrganization from 'sentry/utils/useOrganization';\n\ntype Breakpoints = {\n  large: string;\n  medium: string;\n  small: string;\n  xlarge: string;\n};\n\nconst OnboardingCTAHook = HookOrDefault({\n  hookName: 'component:replay-onboarding-cta',\n  defaultComponent: ({children}) => <Fragment>{children}</Fragment>,\n});\n\nexport default function ReplayOnboardingPanel() {\n  const preferences = useLegacyStore(PreferencesStore);\n\n  const breakpoints = preferences.collapsed\n    ? {\n        small: '800px',\n        medium: '992px',\n        large: '1210px',\n        xlarge: '1450px',\n      }\n    : {\n        small: '800px',\n        medium: '1175px',\n        large: '1375px',\n        xlarge: '1450px',\n      };\n\n  const organization = useOrganization();\n\n  return (\n    <OnboardingPanel image={<HeroImage src={emptyStateImg} breakpoints={breakpoints} />}>\n      <Feature\n        features={['session-replay-ga']}\n        organization={organization}\n        renderDisabled={() => <SetupReplaysCTA />}\n      >\n        <OnboardingCTAHook organization={organization}>\n          <SetupReplaysCTA />\n        </OnboardingCTAHook>\n      </Feature>\n    </OnboardingPanel>\n  );\n}\n\nfunction SetupReplaysCTA() {\n  const {activateSidebar} = useReplayOnboardingSidebarPanel();\n\n  return (\n    <Fragment>\n      <h3>{t('Get to the root cause faster')}</h3>\n      <p>\n        {t(\n          'See a video-like reproduction of your user sessions so you can see what happened before, during, and after an error or latency issue occurred.'\n        )}\n      </p>\n      <ButtonList gap={1}>\n        <Button onClick={activateSidebar} priority=\"primary\">\n          {t('Set Up Replays')}\n        </Button>\n        <Button\n          href=\"https://docs.sentry.io/platforms/javascript/session-replay/\"\n          external\n        >\n          {t('Read Docs')}\n        </Button>\n      </ButtonList>\n    </Fragment>\n  );\n}\n\nconst HeroImage = styled('img')<{breakpoints: Breakpoints}>`\n  @media (min-width: ${p => p.breakpoints.small}) {\n    user-select: none;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    width: 220px;\n    margin-top: auto;\n    margin-bottom: auto;\n    transform: translateX(-50%);\n    left: 50%;\n  }\n\n  @media (min-width: ${p => p.breakpoints.medium}) {\n    transform: translateX(-55%);\n    width: 300px;\n    min-width: 300px;\n  }\n\n  @media (min-width: ${p => p.breakpoints.large}) {\n    transform: translateX(-60%);\n    width: 380px;\n    min-width: 380px;\n  }\n\n  @media (min-width: ${p => p.breakpoints.xlarge}) {\n    transform: translateX(-65%);\n    width: 420px;\n    min-width: 420px;\n  }\n`;\n\nconst ButtonList = styled(ButtonBar)`\n  grid-template-columns: repeat(auto-fit, minmax(130px, max-content));\n`;\n","import {Fragment, useMemo} from 'react';\nimport {browserHistory} from 'react-router';\nimport {Location} from 'history';\n\nimport Pagination from 'sentry/components/pagination';\nimport type {Organization} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {DEFAULT_SORT} from 'sentry/utils/replays/fetchReplayList';\nimport useReplayList from 'sentry/utils/replays/hooks/useReplayList';\nimport {useHaveSelectedProjectsSentAnyReplayEvents} from 'sentry/utils/replays/hooks/useReplayOnboarding';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport ReplayOnboardingPanel from 'sentry/views/replays/list/replayOnboardingPanel';\nimport ReplayTable from 'sentry/views/replays/replayTable';\nimport {ReplayColumns} from 'sentry/views/replays/replayTable/types';\nimport type {ReplayListLocationQuery} from 'sentry/views/replays/types';\nimport {REPLAY_LIST_FIELDS} from 'sentry/views/replays/types';\n\nfunction ReplaysList() {\n  const location = useLocation<ReplayListLocationQuery>();\n  const organization = useOrganization();\n\n  const eventView = useMemo(() => {\n    const query = decodeScalar(location.query.query, '');\n    const conditions = new MutableSearch(query);\n\n    return EventView.fromNewQueryWithLocation(\n      {\n        id: '',\n        name: '',\n        version: 2,\n        fields: REPLAY_LIST_FIELDS,\n        projects: [],\n        query: conditions.formatString(),\n        orderby: decodeScalar(location.query.sort, DEFAULT_SORT),\n      },\n      location\n    );\n  }, [location]);\n\n  const hasSessionReplay = organization.features.includes('session-replay');\n  const {hasSentOneReplay, fetching} = useHaveSelectedProjectsSentAnyReplayEvents();\n\n  return hasSessionReplay && !fetching && hasSentOneReplay ? (\n    <ReplaysListTable\n      eventView={eventView}\n      location={location}\n      organization={organization}\n    />\n  ) : (\n    <ReplayOnboardingPanel />\n  );\n}\n\nfunction ReplaysListTable({\n  eventView,\n  location,\n  organization,\n}: {\n  eventView: EventView;\n  location: Location;\n  organization: Organization;\n}) {\n  const {replays, pageLinks, isFetching, fetchError} = useReplayList({\n    eventView,\n    location,\n    organization,\n  });\n\n  return (\n    <Fragment>\n      <ReplayTable\n        fetchError={fetchError}\n        isFetching={isFetching}\n        replays={replays}\n        sort={eventView.sorts[0]}\n        visibleColumns={[\n          ReplayColumns.replay,\n          ReplayColumns.os,\n          ReplayColumns.browser,\n          ReplayColumns.duration,\n          ReplayColumns.countErrors,\n          ReplayColumns.activity,\n        ]}\n      />\n      <Pagination\n        pageLinks={pageLinks}\n        onCursor={(cursor, path, searchQuery) => {\n          trackAdvancedAnalyticsEvent('replay.list-paginated', {\n            organization,\n            direction: cursor?.endsWith(':1') ? 'prev' : 'next',\n          });\n          browserHistory.push({\n            pathname: path,\n            query: {...searchQuery, cursor},\n          });\n        }}\n      />\n    </Fragment>\n  );\n}\n\nexport default ReplaysList;\n","import * as Layout from 'sentry/components/layouts/thirds';\nimport PageFiltersContainer from 'sentry/components/organizations/pageFilters/container';\nimport {PageHeadingQuestionTooltip} from 'sentry/components/pageHeadingQuestionTooltip';\nimport ReplaysFeatureBadge from 'sentry/components/replays/replaysFeatureBadge';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t} from 'sentry/locale';\nimport useReplayPageview from 'sentry/utils/replays/hooks/useReplayPageview';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport ReplaysFilters from 'sentry/views/replays/filters';\nimport ReplaysList from 'sentry/views/replays/list/replaysList';\n\nfunction ReplaysListContainer() {\n  useReplayPageview('replay.list-time-spent');\n  const {slug: orgSlug} = useOrganization();\n\n  return (\n    <SentryDocumentTitle title={`Session Replay - ${orgSlug}`}>\n      <Layout.Header>\n        <Layout.HeaderContent>\n          <Layout.Title>\n            {t('Session Replay')}\n            <PageHeadingQuestionTooltip\n              title={t(\n                'A view of available video-like reproductions of user sessions so you can visualize repro steps to debug issues faster.'\n              )}\n              docsUrl=\"https://docs.sentry.io/product/session-replay/\"\n            />\n            <ReplaysFeatureBadge />\n          </Layout.Title>\n        </Layout.HeaderContent>\n      </Layout.Header>\n      <PageFiltersContainer>\n        <Layout.Body>\n          <Layout.Main fullWidth>\n            <ReplaysFilters />\n            <ReplaysList />\n          </Layout.Main>\n        </Layout.Body>\n      </PageFiltersContainer>\n    </SentryDocumentTitle>\n  );\n}\n\nexport default ReplaysListContainer;\n"],"names":["OnboardingPanel","_ref","image","children","props","_jsx","Panel","_jsxs","Container","IlloBox","StyledBox","centered","displayName","_styled","target","space","p","theme","breakpoints","small","medium","ReplaysFeatureBadge","FeatureBadge","type","useHaveSelectedProjectsSentAnyReplayEvents","projects","fetching","useProjects","selection","usePageFilters","orgSentOneOrMoreReplayEvent","useMemo","selectedProjects","ALL_ACCESS_PROJECTS","length","projectsByProjectId","reduce","acc","project","id","map","filter","Boolean","getSelectedProjectList","some","hasReplays","hasSentOneReplay","useReplayOnboardingSidebarPanel","location","useRouteContext","organization","useOrganization","useEffect","hash","SidebarPanelStore","SidebarPanelKey","trackAdvancedAnalyticsEvent","activateSidebar","useCallback","event","preventDefault","window","config","useLegacyStore","ConfigStore","useLocation","startTimeRef","useRef","Date","now","startTime","current","referrer","decodeScalar","query","user_email","user","email","endTime","seconds","TagStore","SEARCH_SPECIAL_CHARS_REGEXP","RegExp","NEGATION_OPERATOR","SEARCH_WILDCARD","prepareQuery","searchQuery","replace","getReplayFieldDefinition","key","getFieldDefinition","REPLAY_FIELDS_AS_TAGS","fieldKeys","REPLAY_FIELDS","Object","fromEntries","name","kind","ReplaySearchBar","pageFilters","api","useApi","projectIdStrings","String","tags","useTags","loadOrganizationTags","slug","getTagValues","tag","_params","isAggregateField","Promise","resolve","fetchTagValues","orgSlug","tagKey","search","projectIds","includeReplays","then","tagValues","value","Error","SmartSearchBar","onGetTagValues","supportedTags","keys","FieldKind","placeholder","t","maxQueryLength","MAX_QUERY_LENGTH","searchSource","savedSearchType","SavedSearchType","maxMenuHeight","hasRecentSearches","fieldDefinitionGetter","ReplaysFilters","pathname","FilterContainer","PageFilterBar","condensed","ProjectPageFilter","resetParamsOnChange","EnvironmentPageFilter","DatePageFilter","alignDropdown","defaultQuery","onSearch","browserHistory","cursor","undefined","trim","OnboardingCTAHook","HookOrDefault","hookName","defaultComponent","Fragment","ReplayOnboardingPanel","PreferencesStore","collapsed","large","xlarge","HeroImage","src","emptyStateImg","Feature","features","renderDisabled","SetupReplaysCTA","ButtonList","gap","Button","onClick","priority","href","external","ButtonBar","styles","ReplaysListTable","eventView","replays","pageLinks","isFetching","fetchError","useReplayList","ReplayTable","sort","sorts","visibleColumns","ReplayColumns","Pagination","onCursor","path","direction","endsWith","conditions","MutableSearch","EventView","version","fields","REPLAY_LIST_FIELDS","formatString","orderby","DEFAULT_SORT","hasSessionReplay","includes","ReplaysListContainer","useReplayPageview","SentryDocumentTitle","title","Layout","PageHeadingQuestionTooltip","docsUrl","PageFiltersContainer","fullWidth","ReplaysList"],"sourceRoot":""}