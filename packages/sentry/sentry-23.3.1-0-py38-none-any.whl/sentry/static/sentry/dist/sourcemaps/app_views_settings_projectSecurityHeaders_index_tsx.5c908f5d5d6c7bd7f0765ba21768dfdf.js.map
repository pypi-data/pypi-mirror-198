{"version":3,"file":"chunks/app_views_settings_projectSecurityHeaders_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/keyValueTable.tsx","webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/projectSecurityHeaders/index.tsx","webpack:///./app/views/settings/projectSecurityHeaders/reportUri.tsx"],"sourcesContent":["import {Fragment} from 'react';\nimport {Theme} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport {space} from 'sentry/styles/space';\n\ntype Props = {\n  keyName: React.ReactNode;\n  value: React.ReactNode;\n};\n\nexport const KeyValueTable = styled('dl')<{noMargin?: boolean}>`\n  display: grid;\n  grid-template-columns: 50% 50%;\n  ${p => (p.noMargin ? 'margin-bottom: 0;' : null)}\n`;\n\nexport const KeyValueTableRow = ({keyName, value}: Props) => {\n  return (\n    <Fragment>\n      <Key>{keyName}</Key>\n      <Value>{value}</Value>\n    </Fragment>\n  );\n};\n\nconst commonStyles = ({theme}: {theme: Theme}) => `\nfont-size: ${theme.fontSizeMedium};\npadding: ${space(0.5)} ${space(1)};\nfont-weight: normal;\nline-height: inherit;\n${p => p.theme.overflowEllipsis};\n&:nth-of-type(2n-1) {\n  background-color: ${theme.backgroundSecondary};\n}\n`;\n\nconst Key = styled('dt')`\n  ${commonStyles};\n  color: ${p => p.theme.textColor};\n`;\n\nconst Value = styled('dd')`\n  ${commonStyles};\n  color: ${p => p.theme.subText};\n  text-align: right;\n`;\n","function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {Button} from 'sentry/components/button';\nimport {KeyValueTable, KeyValueTableRow} from 'sentry/components/keyValueTable';\nimport {Panel, PanelBody, PanelHeader, PanelItem} from 'sentry/components/panels';\nimport {t, tct} from 'sentry/locale';\nimport {Organization, ProjectKey} from 'sentry/types';\nimport recreateRoute from 'sentry/utils/recreateRoute';\nimport routeTitleGen from 'sentry/utils/routeTitle';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport AsyncView from 'sentry/views/asyncView';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\nimport ReportUri from 'sentry/views/settings/projectSecurityHeaders/reportUri';\n\ntype Props = {\n  organization: Organization;\n} & RouteComponentProps<{projectId: string}, {}>;\n\ntype State = {\n  keyList: null | ProjectKey[];\n} & AsyncView['state'];\n\nclass ProjectSecurityHeaders extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {organization} = this.props;\n    const {projectId} = this.props.params;\n\n    return [['keyList', `/projects/${organization.slug}/${projectId}/keys/`]];\n  }\n\n  getTitle() {\n    const {projectId} = this.props.params;\n    return routeTitleGen(t('Security Headers'), projectId, false);\n  }\n\n  getReports() {\n    return [\n      {\n        name: 'Content Security Policy (CSP)',\n        url: recreateRoute('csp/', this.props),\n      },\n      {\n        name: 'Certificate Transparency (Expect-CT)',\n        url: recreateRoute('expect-ct/', this.props),\n      },\n      {\n        name: 'HTTP Public Key Pinning (HPKP)',\n        url: recreateRoute('hpkp/', this.props),\n      },\n    ];\n  }\n\n  renderBody() {\n    const {organization, params} = this.props;\n    const {keyList} = this.state;\n    if (keyList === null) {\n      return null;\n    }\n\n    return (\n      <div>\n        <SettingsPageHeader title={t('Security Header Reports')} />\n\n        <ReportUri\n          keyList={keyList}\n          projectId={params.projectId}\n          orgId={organization.slug}\n        />\n\n        <Panel>\n          <PanelHeader>{t('Additional Configuration')}</PanelHeader>\n          <PanelBody withPadding>\n            <TextBlock style={{marginBottom: 20}}>\n              {tct(\n                'In addition to the [key_param] parameter, you may also pass the following within the querystring for the report URI:',\n                {\n                  key_param: <code>sentry_key</code>,\n                }\n              )}\n            </TextBlock>\n            <KeyValueTable>\n              <KeyValueTableRow\n                keyName=\"sentry_environment\"\n                value={t('The environment name (e.g. production).')}\n              />\n              <KeyValueTableRow\n                keyName=\"sentry_release\"\n                value={t('The version of the application.')}\n              />\n            </KeyValueTable>\n          </PanelBody>\n        </Panel>\n\n        <Panel>\n          <PanelHeader>{t('Supported Formats')}</PanelHeader>\n          <PanelBody>\n            {this.getReports().map(({name, url}) => (\n              <ReportItem key={url}>\n                <HeaderName>{name}</HeaderName>\n                <Button to={url} priority=\"primary\">\n                  {t('Instructions')}\n                </Button>\n              </ReportItem>\n            ))}\n          </PanelBody>\n        </Panel>\n      </div>\n    );\n  }\n}\n\nexport default withOrganization(ProjectSecurityHeaders);\n\nconst ReportItem = styled(PanelItem)`\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst HeaderName = styled('span')`\n  font-size: 1.2em;\n`;\n","import FieldGroup from 'sentry/components/forms/fieldGroup';\nimport Link from 'sentry/components/links/link';\nimport {Panel, PanelAlert, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport TextCopyInput from 'sentry/components/textCopyInput';\nimport {t, tct} from 'sentry/locale';\nimport {ProjectKey} from 'sentry/types';\nimport getDynamicText from 'sentry/utils/getDynamicText';\n\nconst DEFAULT_ENDPOINT = 'https://sentry.example.com/api/security-report/';\n\nexport function getSecurityDsn(keyList: ProjectKey[]) {\n  const endpoint = keyList.length ? keyList[0].dsn.security : DEFAULT_ENDPOINT;\n  return getDynamicText({\n    value: endpoint,\n    fixed: DEFAULT_ENDPOINT,\n  });\n}\n\ntype Props = {\n  keyList: ProjectKey[];\n  orgId: string;\n  projectId: string;\n};\n\nexport default function ReportUri({keyList, orgId, projectId}: Props) {\n  return (\n    <Panel>\n      <PanelHeader>{t('Report URI')}</PanelHeader>\n      <PanelBody>\n        <PanelAlert type=\"info\">\n          {tct(\n            \"We've automatically pulled these credentials from your available [link:Client Keys]\",\n            {\n              link: <Link to={`/settings/${orgId}/projects/${projectId}/keys/`} />,\n            }\n          )}\n        </PanelAlert>\n        <FieldGroup inline={false} flexibleControlStateSize>\n          <TextCopyInput>{getSecurityDsn(keyList)}</TextCopyInput>\n        </FieldGroup>\n      </PanelBody>\n    </Panel>\n  );\n}\n"],"names":["KeyValueTable","_styled","target","p","noMargin","KeyValueTableRow","_ref","keyName","value","_jsxs","Fragment","children","_jsx","Key","Value","displayName","commonStyles","_ref2","theme","fontSizeMedium","space","overflowEllipsis","backgroundSecondary","textColor","subText","routeName","orgSlug","withSentry","arguments","length","undefined","projectSlug","tmplBase","tmpl","AsyncView","AsyncComponent","getTitle","render","SentryDocumentTitle","title","this","renderComponent","ProjectSecurityHeaders","getEndpoints","organization","props","projectId","params","slug","routeTitleGen","t","getReports","name","url","recreateRoute","renderBody","keyList","state","SettingsPageHeader","ReportUri","orgId","Panel","PanelHeader","PanelBody","withPadding","TextBlock","style","marginBottom","tct","key_param","map","ReportItem","HeaderName","Button","to","priority","withOrganization","PanelItem","styles","DEFAULT_ENDPOINT","getSecurityDsn","endpoint","dsn","security","getDynamicText","fixed","PanelAlert","type","link","Link","FieldGroup","inline","flexibleControlStateSize","TextCopyInput"],"sourceRoot":""}