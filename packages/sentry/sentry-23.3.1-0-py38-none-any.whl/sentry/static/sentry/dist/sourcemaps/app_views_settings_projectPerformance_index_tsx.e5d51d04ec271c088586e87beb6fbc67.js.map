{"version":3,"file":"chunks/app_views_settings_projectPerformance_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/project/permissionAlert.tsx","webpack:///./app/views/settings/projectPerformance/projectPerformance.tsx","webpack:///./app/views/settings/projectPerformance/index.tsx"],"sourcesContent":["function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import Access from 'sentry/components/acl/access';\nimport {Alert} from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\n\ntype Props = React.ComponentPropsWithoutRef<typeof Alert> &\n  Pick<React.ComponentProps<typeof Access>, 'access'>;\n\nconst PermissionAlert = ({access = ['project:write'], ...props}: Props) => (\n  <Access access={access}>\n    {({hasAccess}) =>\n      !hasAccess && (\n        <Alert data-test-id=\"project-permission-alert\" type=\"warning\" {...props}>\n          {t(\n            'These settings can only be edited by users with the organization owner, manager, or admin role.'\n          )}\n        </Alert>\n      )\n    }\n  </Access>\n);\n\nexport default PermissionAlert;\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport Access from 'sentry/components/acl/access';\nimport Feature from 'sentry/components/acl/feature';\nimport {Button} from 'sentry/components/button';\nimport Form from 'sentry/components/forms/form';\nimport JsonForm from 'sentry/components/forms/jsonForm';\nimport {Field} from 'sentry/components/forms/types';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {PanelItem} from 'sentry/components/panels';\nimport {t, tct} from 'sentry/locale';\nimport {Organization, Project, Scope} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport routeTitleGen from 'sentry/utils/routeTitle';\nimport AsyncView from 'sentry/views/asyncView';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport PermissionAlert from 'sentry/views/settings/project/permissionAlert';\n\ntype RouteParams = {orgId: string; projectId: string};\n\ntype Props = RouteComponentProps<{projectId: string}, {}> & {\n  organization: Organization;\n  project: Project;\n};\n\ntype ProjectThreshold = {\n  metric: string;\n  threshold: string;\n  editedBy?: string;\n  id?: string;\n};\n\ntype State = AsyncView['state'] & {\n  threshold: ProjectThreshold;\n};\n\nclass ProjectPerformance extends AsyncView<Props, State> {\n  getTitle() {\n    const {projectId} = this.props.params;\n\n    return routeTitleGen(t('Performance'), projectId, false);\n  }\n\n  getProjectEndpoint({orgId, projectId}: RouteParams) {\n    return `/projects/${orgId}/${projectId}/`;\n  }\n\n  getPerformanceIssuesEndpoint({orgId, projectId}: RouteParams) {\n    return `/projects/${orgId}/${projectId}/performance-issues/configure/`;\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {params, organization} = this.props;\n    const {projectId} = params;\n\n    const endpoints: ReturnType<AsyncView['getEndpoints']> = [\n      [\n        'threshold',\n        `/projects/${organization.slug}/${projectId}/transaction-threshold/configure/`,\n      ],\n      ['project', `/projects/${organization.slug}/${projectId}/`],\n    ];\n\n    if (organization.features.includes('performance-issues-dev')) {\n      const performanceIssuesEndpoint = [\n        'performance_issue_settings',\n        `/projects/${organization.slug}/${projectId}/performance-issues/configure/`,\n      ] as [string, string];\n\n      endpoints.push(performanceIssuesEndpoint);\n    }\n\n    return endpoints;\n  }\n\n  handleDelete = () => {\n    const {projectId} = this.props.params;\n    const {organization} = this.props;\n\n    this.setState({\n      loading: true,\n    });\n\n    this.api.request(\n      `/projects/${organization.slug}/${projectId}/transaction-threshold/configure/`,\n      {\n        method: 'DELETE',\n        success: () => {\n          trackAdvancedAnalyticsEvent(\n            'performance_views.project_transaction_threshold.clear',\n            {organization}\n          );\n        },\n        complete: () => this.fetchData(),\n      }\n    );\n  };\n\n  getEmptyMessage() {\n    return t('There is no threshold set for this project.');\n  }\n\n  renderLoading() {\n    return (\n      <LoadingIndicatorContainer>\n        <LoadingIndicator />\n      </LoadingIndicatorContainer>\n    );\n  }\n\n  get formFields(): Field[] {\n    const fields: Field[] = [\n      {\n        name: 'metric',\n        type: 'select',\n        label: t('Calculation Method'),\n        options: [\n          {value: 'duration', label: t('Transaction Duration')},\n          {value: 'lcp', label: t('Largest Contentful Paint')},\n        ],\n        help: tct(\n          'This determines which duration is used to set your thresholds. By default, we use transaction duration which measures the entire length of the transaction. You can also set this to use a [link:Web Vital].',\n          {\n            link: (\n              <ExternalLink href=\"https://docs.sentry.io/product/performance/web-vitals/\" />\n            ),\n          }\n        ),\n      },\n      {\n        name: 'threshold',\n        type: 'string',\n        label: t('Response Time Threshold (ms)'),\n        placeholder: t('300'),\n        help: tct(\n          'Define what a satisfactory response time is based on the calculation method above. This will affect how your [link1:Apdex] and [link2:User Misery] thresholds are calculated. For example, misery will be 4x your satisfactory response time.',\n          {\n            link1: (\n              <ExternalLink href=\"https://docs.sentry.io/performance-monitoring/performance/metrics/#apdex\" />\n            ),\n            link2: (\n              <ExternalLink href=\"https://docs.sentry.io/product/performance/metrics/#user-misery\" />\n            ),\n          }\n        ),\n      },\n    ];\n    return fields;\n  }\n\n  get performanceIssueFormFields(): Field[] {\n    return [\n      {\n        name: 'performanceIssueCreationRate',\n        type: 'range',\n        label: t('Performance Issue Creation Rate'),\n        min: 0.0,\n        max: 1.0,\n        step: 0.01,\n        defaultValue: 0,\n        help: t(\n          'This determines the rate at which performance issues are created. A rate of 0.0 will disable performance issue creation.'\n        ),\n      },\n      {\n        name: 'performanceIssueCreationThroughPlatform',\n        type: 'boolean',\n        label: t('Send Occurrences To Platform'),\n        defaultValue: false,\n        help: t(\n          'This determines whether performance issue occurrences are sent to the issues platform.'\n        ),\n      },\n    ];\n  }\n\n  get performanceIssueDetectorsFormFields(): Field[] {\n    return [\n      {\n        name: 'n_plus_one_db_detection_rate',\n        type: 'range',\n        label: t('N+1 (DB) Detection Rate'),\n        min: 0.0,\n        max: 1.0,\n        step: 0.01,\n        defaultValue: 0,\n      },\n      {\n        name: 'n_plus_one_db_count',\n        type: 'number',\n        label: t('N+1 (DB) Minimum Count'),\n        min: 0,\n        max: 1000,\n        defaultValue: 5,\n      },\n      {\n        name: 'n_plus_one_db_duration_threshold',\n        type: 'number',\n        label: t('N+1 (DB) Duration Threshold'),\n        min: 0,\n        max: 1000000.0,\n        defaultValue: 500,\n      },\n      {\n        name: 'n_plus_one_api_calls_detection_rate',\n        type: 'range',\n        label: t('N+1 API Calls Detection Rate'),\n        min: 0.0,\n        max: 1.0,\n        step: 0.01,\n        defaultValue: 0,\n      },\n      {\n        name: 'consecutive_db_queries_detection_rate',\n        type: 'range',\n        label: t('Consecutive DB Detection rate'),\n        min: 0.0,\n        max: 1.0,\n        step: 0.01,\n        defaultValue: 0,\n      },\n    ];\n  }\n\n  get initialData() {\n    const {threshold} = this.state;\n\n    return {\n      threshold: threshold.threshold,\n      metric: threshold.metric,\n    };\n  }\n\n  renderBody() {\n    const {organization, project} = this.props;\n    const endpoint = `/projects/${organization.slug}/${project.slug}/transaction-threshold/configure/`;\n    const requiredScopes: Scope[] = ['project:write'];\n\n    const params = {orgId: organization.slug, projectId: project.slug};\n    const projectEndpoint = this.getProjectEndpoint(params);\n    const performanceIssuesEndpoint = this.getPerformanceIssuesEndpoint(params);\n\n    return (\n      <Fragment>\n        <SettingsPageHeader title={t('Performance')} />\n        <PermissionAlert access={requiredScopes} />\n        <Form\n          saveOnBlur\n          allowUndo\n          initialData={this.initialData}\n          apiMethod=\"POST\"\n          apiEndpoint={endpoint}\n          onSubmitSuccess={resp => {\n            const initial = this.initialData;\n            const changedThreshold = initial.metric === resp.metric;\n            trackAdvancedAnalyticsEvent(\n              'performance_views.project_transaction_threshold.change',\n              {\n                organization,\n                from: changedThreshold ? initial.threshold : initial.metric,\n                to: changedThreshold ? resp.threshold : resp.metric,\n                key: changedThreshold ? 'threshold' : 'metric',\n              }\n            );\n            this.setState({threshold: resp});\n          }}\n        >\n          <Access access={requiredScopes}>\n            {({hasAccess}) => (\n              <JsonForm\n                title={t('General')}\n                fields={this.formFields}\n                disabled={!hasAccess}\n                renderFooter={() => (\n                  <Actions>\n                    <Button onClick={() => this.handleDelete()}>{t('Reset All')}</Button>\n                  </Actions>\n                )}\n              />\n            )}\n          </Access>\n        </Form>\n        <Feature features={['organizations:performance-issues-dev']}>\n          <Fragment>\n            <Form\n              saveOnBlur\n              allowUndo\n              initialData={{\n                performanceIssueCreationRate:\n                  this.state.project.performanceIssueCreationRate,\n              }}\n              apiMethod=\"PUT\"\n              apiEndpoint={projectEndpoint}\n            >\n              <Access access={requiredScopes}>\n                {({hasAccess}) => (\n                  <JsonForm\n                    title={t('Performance Issues - All')}\n                    fields={this.performanceIssueFormFields}\n                    disabled={!hasAccess}\n                  />\n                )}\n              </Access>\n            </Form>\n            <Form\n              saveOnBlur\n              allowUndo\n              initialData={this.state.performance_issue_settings}\n              apiMethod=\"PUT\"\n              apiEndpoint={performanceIssuesEndpoint}\n            >\n              <Access access={requiredScopes}>\n                {({hasAccess}) => (\n                  <JsonForm\n                    title={t('Performance Issues - Detector Settings')}\n                    fields={this.performanceIssueDetectorsFormFields}\n                    disabled={!hasAccess}\n                  />\n                )}\n              </Access>\n            </Form>\n          </Fragment>\n        </Feature>\n      </Fragment>\n    );\n  }\n}\n\nconst Actions = styled(PanelItem)`\n  justify-content: flex-end;\n`;\n\nconst LoadingIndicatorContainer = styled('div')`\n  margin: 18px 18px 0;\n`;\n\nexport default ProjectPerformance;\n","import {RouteComponentProps} from 'react-router';\n\nimport Feature from 'sentry/components/acl/feature';\nimport {Organization, Project} from 'sentry/types';\n\nimport ProjectPerformance from './projectPerformance';\n\ntype Props = RouteComponentProps<{projectId: string}, {}> & {\n  organization: Organization;\n  project: Project;\n};\n\nfunction ProjectPerformanceContainer(props: Props) {\n  return (\n    <Feature features={['performance-view']}>\n      <ProjectPerformance {...props} />\n    </Feature>\n  );\n}\n\nexport default ProjectPerformanceContainer;\n"],"names":["routeName","orgSlug","withSentry","arguments","length","undefined","projectSlug","tmplBase","tmpl","AsyncView","AsyncComponent","getTitle","render","_jsx","SentryDocumentTitle","title","this","children","renderComponent","displayName","PermissionAlert","_ref","access","props","Access","_ref2","hasAccess","Alert","type","t","ProjectPerformance","constructor","_defineProperty","projectId","params","organization","setState","loading","api","request","slug","method","success","trackAdvancedAnalyticsEvent","complete","fetchData","routeTitleGen","getProjectEndpoint","orgId","getPerformanceIssuesEndpoint","getEndpoints","endpoints","features","includes","performanceIssuesEndpoint","push","getEmptyMessage","renderLoading","LoadingIndicatorContainer","LoadingIndicator","formFields","name","label","options","value","help","tct","link","ExternalLink","href","placeholder","link1","link2","performanceIssueFormFields","min","max","step","defaultValue","performanceIssueDetectorsFormFields","initialData","threshold","state","metric","renderBody","project","endpoint","requiredScopes","projectEndpoint","_jsxs","Fragment","SettingsPageHeader","Form","saveOnBlur","allowUndo","apiMethod","apiEndpoint","onSubmitSuccess","resp","initial","changedThreshold","from","to","key","_ref3","JsonForm","fields","disabled","renderFooter","Actions","Button","onClick","handleDelete","Feature","performanceIssueCreationRate","_ref4","performance_issue_settings","_ref5","_styled","PanelItem","target","styles","ProjectPerformanceContainer"],"sourceRoot":""}