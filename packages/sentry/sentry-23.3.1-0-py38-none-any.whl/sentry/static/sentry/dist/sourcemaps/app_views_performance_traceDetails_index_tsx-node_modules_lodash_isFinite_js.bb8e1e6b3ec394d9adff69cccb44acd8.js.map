{"version":3,"file":"chunks/app_views_performance_traceDetails_index_tsx-node_modules_lodash_isFinite_js.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/fuzzySearch.tsx","webpack:///./app/utils/performance/quickTrace/traceFullQuery.tsx","webpack:///./app/utils/performance/quickTrace/traceMetaQuery.tsx","webpack:///./app/views/performance/traceDetails/content.tsx","webpack:///./app/views/performance/traceDetails/index.tsx","webpack:///../node_modules/lodash/isFinite.js"],"sourcesContent":["import type Fuse from 'fuse.js';\n\n// See http://fusejs.io/ for more information\nconst DEFAULT_FUSE_OPTIONS: Fuse.IFuseOptions<any> = {\n  includeScore: true,\n  includeMatches: true,\n  threshold: 0.4,\n  location: 0,\n  distance: 75,\n  minMatchCharLength: 2,\n};\n\nexport async function createFuzzySearch<\n  T = string,\n  Options extends Fuse.IFuseOptions<T> = Fuse.IFuseOptions<T>\n>(objects: T[], options: Options): Promise<Fuse<T>> {\n  if (!options.keys) {\n    throw new Error('You need to define `options.keys`');\n  }\n\n  const fuseImported = await import('fuse.js');\n  const fuse = {Fuse: fuseImported.default};\n\n  return new fuse.Fuse(objects, {\n    ...DEFAULT_FUSE_OPTIONS,\n    ...options,\n  });\n}\n\n// re-export fuse type to make it easier to use\nexport type {Fuse};\n","import {Fragment} from 'react';\n\nimport GenericDiscoverQuery, {\n  DiscoverQueryProps,\n} from 'sentry/utils/discover/genericDiscoverQuery';\nimport {\n  BaseTraceChildrenProps,\n  FullQuickTrace,\n  TraceFull,\n  TraceFullDetailed,\n  TraceRequestProps,\n} from 'sentry/utils/performance/quickTrace/types';\nimport {\n  getTraceRequestPayload,\n  makeEventView,\n} from 'sentry/utils/performance/quickTrace/utils';\n\ntype AdditionalQueryProps = {\n  detailed?: boolean;\n  eventId?: string;\n};\n\ntype TraceFullQueryChildrenProps<T> = BaseTraceChildrenProps &\n  Omit<FullQuickTrace, 'trace'> & {\n    /**\n     * The `event-trace` endpoint returns a full trace with the parent-child\n     * relationships. It can be flattened into a `QuickTraceEvent` if necessary.\n     */\n    traces: T | null;\n  };\n\ntype QueryProps<T> = Omit<TraceRequestProps, 'eventView'> &\n  AdditionalQueryProps & {\n    children: (props: TraceFullQueryChildrenProps<T>) => React.ReactNode;\n  };\n\nfunction getTraceFullRequestPayload({\n  detailed,\n  eventId,\n  ...props\n}: DiscoverQueryProps & AdditionalQueryProps) {\n  const additionalApiPayload: any = getTraceRequestPayload(props);\n  additionalApiPayload.detailed = detailed ? '1' : '0';\n  if (eventId) {\n    additionalApiPayload.event_id = eventId;\n  }\n  return additionalApiPayload;\n}\n\nfunction EmptyTrace<T>({children}: Pick<QueryProps<T>, 'children'>) {\n  return (\n    <Fragment>\n      {children({\n        isLoading: false,\n        error: null,\n        traces: null,\n        type: 'full',\n      })}\n    </Fragment>\n  );\n}\n\nfunction GenericTraceFullQuery<T>({\n  traceId,\n  start,\n  end,\n  statsPeriod,\n  children,\n  ...props\n}: QueryProps<T>) {\n  if (!traceId) {\n    return <EmptyTrace<T>>{children}</EmptyTrace>;\n  }\n\n  const eventView = makeEventView({start, end, statsPeriod});\n\n  return (\n    <GenericDiscoverQuery<T, AdditionalQueryProps>\n      route={`events-trace/${traceId}`}\n      getRequestPayload={getTraceFullRequestPayload}\n      eventView={eventView}\n      {...props}\n    >\n      {({tableData, ...rest}) =>\n        children({\n          // This is using '||` instead of '??` here because\n          // the client returns a empty string when the response\n          // is 204. And we want the empty string, undefined and\n          // null to be converted to null.\n          traces: tableData || null,\n          type: 'full',\n          ...rest,\n        })\n      }\n    </GenericDiscoverQuery>\n  );\n}\n\nexport const TraceFullQuery = (props: Omit<QueryProps<TraceFull[]>, 'detailed'>) => (\n  <GenericTraceFullQuery<TraceFull[]> {...props} detailed={false} />\n);\n\nexport const TraceFullDetailedQuery = (\n  props: Omit<QueryProps<TraceFullDetailed[]>, 'detailed'>\n) => <GenericTraceFullQuery<TraceFullDetailed[]> {...props} detailed />;\n","import {Fragment} from 'react';\n\nimport GenericDiscoverQuery from 'sentry/utils/discover/genericDiscoverQuery';\nimport {\n  BaseTraceChildrenProps,\n  TraceMeta,\n  TraceRequestProps,\n} from 'sentry/utils/performance/quickTrace/types';\nimport {\n  getTraceRequestPayload,\n  makeEventView,\n} from 'sentry/utils/performance/quickTrace/utils';\n\nexport type TraceMetaQueryChildrenProps = BaseTraceChildrenProps & {\n  meta: TraceMeta | null;\n};\n\ntype QueryProps = Omit<TraceRequestProps, 'eventView'> & {\n  children: (props: TraceMetaQueryChildrenProps) => React.ReactNode;\n};\n\nfunction TraceMetaQuery({\n  traceId,\n  start,\n  end,\n  statsPeriod,\n  children,\n  ...props\n}: QueryProps) {\n  if (!traceId) {\n    return (\n      <Fragment>\n        {children({\n          isLoading: false,\n          error: null,\n          meta: null,\n        })}\n      </Fragment>\n    );\n  }\n\n  const eventView = makeEventView({start, end, statsPeriod});\n\n  return (\n    <GenericDiscoverQuery<TraceMeta, {}>\n      route={`events-trace-meta/${traceId}`}\n      getRequestPayload={getTraceRequestPayload}\n      eventView={eventView}\n      {...props}\n    >\n      {({tableData, ...rest}) => {\n        return children({\n          meta: tableData,\n          ...rest,\n        });\n      }}\n    </GenericDiscoverQuery>\n  );\n}\n\nexport default TraceMetaQuery;\n","import {Component, createRef, Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {Alert} from 'sentry/components/alert';\nimport GuideAnchor from 'sentry/components/assistant/guideAnchor';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport DiscoverButton from 'sentry/components/discoverButton';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport LoadingError from 'sentry/components/loadingError';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport TimeSince from 'sentry/components/timeSince';\nimport {t, tct, tn} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {QueryError} from 'sentry/utils/discover/genericDiscoverQuery';\nimport {getDuration} from 'sentry/utils/formatters';\nimport {createFuzzySearch, Fuse} from 'sentry/utils/fuzzySearch';\nimport getDynamicText from 'sentry/utils/getDynamicText';\nimport {TraceFullDetailed, TraceMeta} from 'sentry/utils/performance/quickTrace/types';\nimport {filterTrace, reduceTrace} from 'sentry/utils/performance/quickTrace/utils';\nimport {VisuallyCompleteWithData} from 'sentry/utils/performanceForSentry';\nimport Breadcrumb from 'sentry/views/performance/breadcrumb';\nimport {MetaData} from 'sentry/views/performance/transactionDetails/styles';\n\nimport {TraceDetailHeader, TraceSearchBar, TraceSearchContainer} from './styles';\nimport TraceNotFound from './traceNotFound';\nimport TraceView from './traceView';\nimport {TraceInfo} from './types';\nimport {getTraceInfo, isRootTransaction} from './utils';\n\ntype IndexedFusedTransaction = {\n  indexed: string[];\n  transaction: TraceFullDetailed;\n};\n\ntype Props = Pick<RouteComponentProps<{traceSlug: string}, {}>, 'params' | 'location'> & {\n  dateSelected: boolean;\n  error: QueryError | null;\n  isLoading: boolean;\n  meta: TraceMeta | null;\n  organization: Organization;\n  traceEventView: EventView;\n  traceSlug: string;\n  traces: TraceFullDetailed[] | null;\n};\n\ntype State = {\n  filteredTransactionIds: Set<string> | undefined;\n  searchQuery: string | undefined;\n};\n\nclass TraceDetailsContent extends Component<Props, State> {\n  state: State = {\n    searchQuery: undefined,\n    filteredTransactionIds: undefined,\n  };\n\n  componentDidMount() {\n    this.initFuse();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (this.props.traces !== prevProps.traces) {\n      this.initFuse();\n    }\n  }\n\n  fuse: Fuse<IndexedFusedTransaction> | null = null;\n  traceViewRef = createRef<HTMLDivElement>();\n  virtualScrollbarContainerRef = createRef<HTMLDivElement>();\n\n  async initFuse() {\n    if (defined(this.props.traces) && this.props.traces.length > 0) {\n      const transformed: IndexedFusedTransaction[] = this.props.traces.flatMap(trace =>\n        reduceTrace<IndexedFusedTransaction[]>(\n          trace,\n          (acc, transaction) => {\n            const indexed: string[] = [\n              transaction['transaction.op'],\n              transaction.transaction,\n              transaction.project_slug,\n            ];\n\n            acc.push({\n              transaction,\n              indexed,\n            });\n\n            return acc;\n          },\n          []\n        )\n      );\n\n      this.fuse = await createFuzzySearch(transformed, {\n        keys: ['indexed'],\n        includeMatches: true,\n        threshold: 0.6,\n        location: 0,\n        distance: 100,\n        maxPatternLength: 32,\n      });\n    }\n  }\n\n  renderTraceLoading() {\n    return <LoadingIndicator />;\n  }\n\n  renderTraceRequiresDateRangeSelection() {\n    return <LoadingError message={t('Trace view requires a date range selection.')} />;\n  }\n\n  handleTransactionFilter = (searchQuery: string) => {\n    this.setState({searchQuery: searchQuery || undefined}, this.filterTransactions);\n  };\n\n  filterTransactions = () => {\n    const {traces} = this.props;\n    const {filteredTransactionIds, searchQuery} = this.state;\n\n    if (!searchQuery || traces === null || traces.length <= 0 || !defined(this.fuse)) {\n      if (filteredTransactionIds !== undefined) {\n        this.setState({\n          filteredTransactionIds: undefined,\n        });\n      }\n      return;\n    }\n\n    const fuseMatches = this.fuse\n      .search<IndexedFusedTransaction>(searchQuery)\n      /**\n       * Sometimes, there can be matches that don't include any\n       * indices. These matches are often noise, so exclude them.\n       */\n      .filter(({matches}) => matches?.length)\n      .map(({item}) => item.transaction.event_id);\n\n    /**\n     * Fuzzy search on ids result in seemingly random results. So switch to\n     * doing substring matches on ids to provide more meaningful results.\n     */\n    const idMatches = traces\n      .flatMap(trace =>\n        filterTrace(\n          trace,\n          ({event_id, span_id}) =>\n            event_id.includes(searchQuery) || span_id.includes(searchQuery)\n        )\n      )\n      .map(transaction => transaction.event_id);\n\n    this.setState({\n      filteredTransactionIds: new Set([...fuseMatches, ...idMatches]),\n    });\n  };\n\n  renderSearchBar() {\n    return (\n      <TraceSearchContainer>\n        <TraceSearchBar\n          defaultQuery=\"\"\n          query={this.state.searchQuery || ''}\n          placeholder={t('Search for transactions')}\n          onSearch={this.handleTransactionFilter}\n        />\n      </TraceSearchContainer>\n    );\n  }\n\n  renderTraceHeader(traceInfo: TraceInfo) {\n    const {meta} = this.props;\n    return (\n      <TraceDetailHeader>\n        <GuideAnchor target=\"trace_view_guide_breakdown\">\n          <MetaData\n            headingText={t('Event Breakdown')}\n            tooltipText={t(\n              'The number of transactions and errors there are in this trace.'\n            )}\n            bodyText={tct('[transactions]  |  [errors]', {\n              transactions: tn(\n                '%s Transaction',\n                '%s Transactions',\n                meta?.transactions ?? traceInfo.transactions.size\n              ),\n              errors: tn('%s Error', '%s Errors', meta?.errors ?? traceInfo.errors.size),\n            })}\n            subtext={tn(\n              'Across %s project',\n              'Across %s projects',\n              meta?.projects ?? traceInfo.projects.size\n            )}\n          />\n        </GuideAnchor>\n        <MetaData\n          headingText={t('Total Duration')}\n          tooltipText={t('The time elapsed between the start and end of this trace.')}\n          bodyText={getDuration(\n            traceInfo.endTimestamp - traceInfo.startTimestamp,\n            2,\n            true\n          )}\n          subtext={getDynamicText({\n            value: <TimeSince date={(traceInfo.endTimestamp || 0) * 1000} />,\n            fixed: '5 days ago',\n          })}\n        />\n      </TraceDetailHeader>\n    );\n  }\n\n  renderTraceWarnings() {\n    const {traces} = this.props;\n\n    const {roots, orphans} = (traces ?? []).reduce(\n      (counts, trace) => {\n        if (isRootTransaction(trace)) {\n          counts.roots++;\n        } else {\n          counts.orphans++;\n        }\n        return counts;\n      },\n      {roots: 0, orphans: 0}\n    );\n\n    let warning: React.ReactNode = null;\n\n    if (roots === 0 && orphans > 0) {\n      warning = (\n        <Alert type=\"info\" showIcon>\n          <ExternalLink href=\"https://docs.sentry.io/product/performance/trace-view/#orphan-traces-and-broken-subtraces\">\n            {t(\n              'A root transaction is missing. Transactions linked by a dashed line have been orphaned and cannot be directly linked to the root.'\n            )}\n          </ExternalLink>\n        </Alert>\n      );\n    } else if (roots === 1 && orphans > 0) {\n      warning = (\n        <Alert type=\"info\" showIcon>\n          <ExternalLink href=\"https://docs.sentry.io/product/performance/trace-view/#orphan-traces-and-broken-subtraces\">\n            {t(\n              'This trace has broken subtraces. Transactions linked by a dashed line have been orphaned and cannot be directly linked to the root.'\n            )}\n          </ExternalLink>\n        </Alert>\n      );\n    } else if (roots > 1) {\n      warning = (\n        <Alert type=\"info\" showIcon>\n          <ExternalLink href=\"https://docs.sentry.io/product/sentry-basics/tracing/trace-view/#multiple-roots\">\n            {t('Multiple root transactions have been found with this trace ID.')}\n          </ExternalLink>\n        </Alert>\n      );\n    }\n\n    return warning;\n  }\n\n  renderContent() {\n    const {\n      dateSelected,\n      isLoading,\n      error,\n      organization,\n      location,\n      traceEventView,\n      traceSlug,\n      traces,\n      meta,\n    } = this.props;\n\n    if (!dateSelected) {\n      return this.renderTraceRequiresDateRangeSelection();\n    }\n    if (isLoading) {\n      return this.renderTraceLoading();\n    }\n    if (error !== null || traces === null || traces.length <= 0) {\n      return (\n        <TraceNotFound\n          meta={meta}\n          traceEventView={traceEventView}\n          traceSlug={traceSlug}\n          location={location}\n          organization={organization}\n        />\n      );\n    }\n    const traceInfo = getTraceInfo(traces);\n\n    return (\n      <Fragment>\n        {this.renderTraceWarnings()}\n        {this.renderTraceHeader(traceInfo)}\n        {this.renderSearchBar()}\n        <Margin>\n          <VisuallyCompleteWithData\n            id=\"PerformanceDetails-TraceView\"\n            hasData={!!traces.length}\n          >\n            <TraceView\n              filteredTransactionIds={this.state.filteredTransactionIds}\n              traceInfo={traceInfo}\n              location={location}\n              organization={organization}\n              traceEventView={traceEventView}\n              traceSlug={traceSlug}\n              traces={traces}\n              meta={meta}\n            />\n          </VisuallyCompleteWithData>\n        </Margin>\n      </Fragment>\n    );\n  }\n\n  render() {\n    const {organization, location, traceEventView, traceSlug} = this.props;\n\n    return (\n      <Fragment>\n        <Layout.Header>\n          <Layout.HeaderContent>\n            <Breadcrumb\n              organization={organization}\n              location={location}\n              traceSlug={traceSlug}\n            />\n            <Layout.Title data-test-id=\"trace-header\">\n              {t('Trace ID: %s', traceSlug)}\n            </Layout.Title>\n          </Layout.HeaderContent>\n          <Layout.HeaderActions>\n            <ButtonBar gap={1}>\n              <DiscoverButton\n                size=\"sm\"\n                to={traceEventView.getResultsViewUrlTarget(organization.slug)}\n                onClick={() => {\n                  trackAdvancedAnalyticsEvent(\n                    'performance_views.trace_view.open_in_discover',\n                    {\n                      organization,\n                    }\n                  );\n                }}\n              >\n                {t('Open in Discover')}\n              </DiscoverButton>\n            </ButtonBar>\n          </Layout.HeaderActions>\n        </Layout.Header>\n        <Layout.Body>\n          <Layout.Main fullWidth>{this.renderContent()}</Layout.Main>\n        </Layout.Body>\n      </Fragment>\n    );\n  }\n}\n\nconst Margin = styled('div')`\n  margin-top: ${space(2)};\n`;\n\nexport default TraceDetailsContent;\n","import {Component} from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport {Client} from 'sentry/api';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport NoProjectMessage from 'sentry/components/noProjectMessage';\nimport {normalizeDateTimeParams} from 'sentry/components/organizations/pageFilters/parse';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {ALL_ACCESS_PROJECTS} from 'sentry/constants/pageFilters';\nimport {t} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {QueryError} from 'sentry/utils/discover/genericDiscoverQuery';\nimport {TraceFullDetailedQuery} from 'sentry/utils/performance/quickTrace/traceFullQuery';\nimport TraceMetaQuery from 'sentry/utils/performance/quickTrace/traceMetaQuery';\nimport {TraceFullDetailed, TraceMeta} from 'sentry/utils/performance/quickTrace/types';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport withApi from 'sentry/utils/withApi';\nimport withOrganization from 'sentry/utils/withOrganization';\n\nimport TraceDetailsContent from './content';\n\ntype Props = RouteComponentProps<{traceSlug: string}, {}> & {\n  api: Client;\n  organization: Organization;\n};\n\nclass TraceSummary extends Component<Props> {\n  getDocumentTitle(): string {\n    return [t('Trace Details'), t('Performance')].join(' - ');\n  }\n\n  getTraceSlug(): string {\n    const {traceSlug} = this.props.params;\n    return typeof traceSlug === 'string' ? traceSlug.trim() : '';\n  }\n\n  getDateSelection() {\n    const {location} = this.props;\n    const queryParams = normalizeDateTimeParams(location.query, {\n      allowAbsolutePageDatetime: true,\n    });\n    const start = decodeScalar(queryParams.start);\n    const end = decodeScalar(queryParams.end);\n    const statsPeriod = decodeScalar(queryParams.statsPeriod);\n    return {start, end, statsPeriod};\n  }\n\n  getTraceEventView() {\n    const traceSlug = this.getTraceSlug();\n    const {start, end, statsPeriod} = this.getDateSelection();\n\n    return EventView.fromSavedQuery({\n      id: undefined,\n      name: `Events with Trace ID ${traceSlug}`,\n      fields: ['title', 'event.type', 'project', 'timestamp'],\n      orderby: '-timestamp',\n      query: `trace:${traceSlug}`,\n      projects: [ALL_ACCESS_PROJECTS],\n      version: 2,\n      start,\n      end,\n      range: statsPeriod,\n    });\n  }\n\n  renderContent() {\n    const {location, organization, params} = this.props;\n    const traceSlug = this.getTraceSlug();\n    const {start, end, statsPeriod} = this.getDateSelection();\n    const dateSelected = Boolean(statsPeriod || (start && end));\n\n    const content = ({\n      isLoading,\n      error,\n      traces,\n      meta,\n    }: {\n      error: QueryError | null;\n      isLoading: boolean;\n      meta: TraceMeta | null;\n      traces: TraceFullDetailed[] | null;\n    }) => (\n      <TraceDetailsContent\n        location={location}\n        organization={organization}\n        params={params}\n        traceSlug={traceSlug}\n        traceEventView={this.getTraceEventView()}\n        dateSelected={dateSelected}\n        isLoading={isLoading}\n        error={error}\n        traces={traces}\n        meta={meta}\n      />\n    );\n\n    if (!dateSelected) {\n      return content({\n        isLoading: false,\n        error: new QueryError('date selection not specified'),\n        traces: null,\n        meta: null,\n      });\n    }\n\n    return (\n      <TraceFullDetailedQuery\n        location={location}\n        orgSlug={organization.slug}\n        traceId={traceSlug}\n        start={start}\n        end={end}\n        statsPeriod={statsPeriod}\n      >\n        {traceResults => (\n          <TraceMetaQuery\n            location={location}\n            orgSlug={organization.slug}\n            traceId={traceSlug}\n            start={start}\n            end={end}\n            statsPeriod={statsPeriod}\n          >\n            {metaResults =>\n              content({\n                isLoading: traceResults.isLoading || metaResults.isLoading,\n                error: traceResults.error || metaResults.error,\n                traces: traceResults.traces,\n                meta: metaResults.meta,\n              })\n            }\n          </TraceMetaQuery>\n        )}\n      </TraceFullDetailedQuery>\n    );\n  }\n\n  render() {\n    const {organization} = this.props;\n\n    return (\n      <SentryDocumentTitle title={this.getDocumentTitle()} orgSlug={organization.slug}>\n        <Layout.Page>\n          <NoProjectMessage organization={organization}>\n            {this.renderContent()}\n          </NoProjectMessage>\n        </Layout.Page>\n      </SentryDocumentTitle>\n    );\n  }\n}\n\nexport default withOrganization(withApi(TraceSummary));\n","var root = require('./_root');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsFinite = root.isFinite;\n\n/**\n * Checks if `value` is a finite primitive number.\n *\n * **Note:** This method is based on\n * [`Number.isFinite`](https://mdn.io/Number/isFinite).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.\n * @example\n *\n * _.isFinite(3);\n * // => true\n *\n * _.isFinite(Number.MIN_VALUE);\n * // => true\n *\n * _.isFinite(Infinity);\n * // => false\n *\n * _.isFinite('3');\n * // => false\n */\nfunction isFinite(value) {\n  return typeof value == 'number' && nativeIsFinite(value);\n}\n\nmodule.exports = isFinite;\n"],"names":["DEFAULT_FUSE_OPTIONS","includeScore","includeMatches","threshold","location","distance","minMatchCharLength","async","createFuzzySearch","objects","options","keys","Error","default","getTraceFullRequestPayload","_ref","detailed","eventId","props","additionalApiPayload","getTraceRequestPayload","event_id","EmptyTrace","_ref2","children","_jsx","Fragment","isLoading","error","traces","type","GenericTraceFullQuery","_ref3","traceId","start","end","statsPeriod","eventView","makeEventView","GenericDiscoverQuery","route","getRequestPayload","_ref4","tableData","rest","displayName","TraceFullQuery","TraceFullDetailedQuery","TraceMetaQuery","meta","TraceDetailsContent","Component","constructor","arguments","_defineProperty","searchQuery","undefined","filteredTransactionIds","createRef","this","setState","filterTransactions","state","length","defined","fuse","fuseMatches","search","filter","matches","map","item","transaction","idMatches","flatMap","trace","filterTrace","span_id","includes","Set","componentDidMount","initFuse","componentDidUpdate","prevProps","transformed","reduceTrace","acc","indexed","project_slug","push","maxPatternLength","renderTraceLoading","LoadingIndicator","renderTraceRequiresDateRangeSelection","LoadingError","message","t","renderSearchBar","TraceSearchContainer","TraceSearchBar","defaultQuery","query","placeholder","onSearch","handleTransactionFilter","renderTraceHeader","traceInfo","_jsxs","TraceDetailHeader","GuideAnchor","target","MetaData","headingText","tooltipText","bodyText","tct","transactions","tn","size","errors","subtext","projects","getDuration","endTimestamp","startTimestamp","getDynamicText","value","TimeSince","date","fixed","renderTraceWarnings","roots","orphans","reduce","counts","isRootTransaction","warning","Alert","showIcon","ExternalLink","href","renderContent","dateSelected","organization","traceEventView","traceSlug","TraceNotFound","getTraceInfo","Margin","VisuallyCompleteWithData","id","hasData","TraceView","render","Layout","Breadcrumb","ButtonBar","gap","DiscoverButton","to","getResultsViewUrlTarget","slug","onClick","trackAdvancedAnalyticsEvent","fullWidth","_styled","space","TraceSummary","getDocumentTitle","join","getTraceSlug","params","trim","getDateSelection","queryParams","normalizeDateTimeParams","allowAbsolutePageDatetime","decodeScalar","getTraceEventView","EventView","name","fields","orderby","ALL_ACCESS_PROJECTS","version","range","Boolean","content","orgSlug","traceResults","metaResults","QueryError","SentryDocumentTitle","title","NoProjectMessage","withOrganization","withApi","nativeIsFinite","isFinite","module","exports"],"sourceRoot":""}