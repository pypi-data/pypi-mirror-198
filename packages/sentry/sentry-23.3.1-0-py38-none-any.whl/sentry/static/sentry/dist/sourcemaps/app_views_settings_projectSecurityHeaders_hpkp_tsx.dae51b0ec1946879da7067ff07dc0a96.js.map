{"version":3,"file":"chunks/app_views_settings_projectSecurityHeaders_hpkp_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/previewFeature.tsx","webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/projectSecurityHeaders/hpkp.tsx","webpack:///./app/views/settings/projectSecurityHeaders/reportUri.tsx"],"sourcesContent":["import {Alert} from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\n\ntype Props = {\n  type?: React.ComponentProps<typeof Alert>['type'];\n};\n\nconst PreviewFeature = ({type = 'info'}: Props) => (\n  <Alert type={type} showIcon>\n    {t(\n      'This feature is a preview and may change in the future. Thanks for being an early adopter!'\n    )}\n  </Alert>\n);\n\nexport default PreviewFeature;\n","function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {RouteComponentProps} from 'react-router';\n\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport PreviewFeature from 'sentry/components/previewFeature';\nimport {t, tct} from 'sentry/locale';\nimport {Organization, ProjectKey} from 'sentry/types';\nimport routeTitleGen from 'sentry/utils/routeTitle';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport AsyncView from 'sentry/views/asyncView';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport ReportUri, {\n  getSecurityDsn,\n} from 'sentry/views/settings/projectSecurityHeaders/reportUri';\n\ntype Props = RouteComponentProps<{projectId: string}, {}> & {\n  organization: Organization;\n};\n\ntype State = {\n  keyList: null | ProjectKey[];\n} & AsyncView['state'];\n\nclass ProjectHpkpReports extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {organization} = this.props;\n    const {projectId} = this.props.params;\n    return [['keyList', `/projects/${organization.slug}/${projectId}/keys/`]];\n  }\n\n  getTitle() {\n    const {projectId} = this.props.params;\n    return routeTitleGen(t('HTTP Public Key Pinning (HPKP)'), projectId, false);\n  }\n\n  getInstructions(keyList: ProjectKey[]) {\n    return (\n      'def middleware(request, response):\\n' +\n      \"    response['Public-Key-Pins'] = \\\\\\n\" +\n      '        \\'pin-sha256=\"cUPcTAZWKaASuYWhhneDttWpY3oBAkE3h2+soZS7sWs=\"; \\' \\\\\\n' +\n      '        \\'pin-sha256=\"M8HztCzM3elUxkcjR2S5P4hhyBNf6lHkmjAHKhpGPWE=\"; \\' \\\\\\n' +\n      \"        'max-age=5184000; includeSubDomains; ' \\\\\\n\" +\n      `        \\'report-uri=\"${getSecurityDsn(keyList)}\"\\' \\n` +\n      '    return response\\n'\n    );\n  }\n\n  getReportOnlyInstructions(keyList: ProjectKey[]) {\n    return (\n      'def middleware(request, response):\\n' +\n      \"    response['Public-Key-Pins-Report-Only'] = \\\\\\n\" +\n      '        \\'pin-sha256=\"cUPcTAZWKaASuYWhhneDttWpY3oBAkE3h2+soZS7sWs=\"; \\' \\\\\\n' +\n      '        \\'pin-sha256=\"M8HztCzM3elUxkcjR2S5P4hhyBNf6lHkmjAHKhpGPWE=\"; \\' \\\\\\n' +\n      \"        'max-age=5184000; includeSubDomains; ' \\\\\\n\" +\n      `        \\'report-uri=\"${getSecurityDsn(keyList)}\"\\' \\n` +\n      '    return response\\n'\n    );\n  }\n\n  renderBody() {\n    const {organization, params} = this.props;\n    const {keyList} = this.state;\n    if (!keyList) {\n      return null;\n    }\n\n    return (\n      <div>\n        <SettingsPageHeader title={t('HTTP Public Key Pinning')} />\n\n        <PreviewFeature />\n\n        <ReportUri\n          keyList={keyList}\n          orgId={organization.slug}\n          projectId={params.projectId}\n        />\n\n        <Panel>\n          <PanelHeader>{t('About')}</PanelHeader>\n\n          <PanelBody withPadding>\n            <p>\n              {tct(\n                `[link:HTTP Public Key Pinning]\n              (HPKP) is a security feature that tells a web client to associate a specific\n              cryptographic public key with a certain web server to decrease the risk of MITM\n              attacks with forged certificates. It's enforced by browser vendors, and Sentry\n              supports capturing violations using the standard reporting hooks.`,\n                {\n                  link: (\n                    <ExternalLink href=\"https://en.wikipedia.org/wiki/HTTP_Public_Key_Pinning\" />\n                  ),\n                }\n              )}\n            </p>\n\n            <p>\n              {t(\n                `To configure HPKP reports\n              in Sentry, you'll need to send a header from your server describing your\n              policy, as well specifying the authenticated Sentry endpoint.`\n              )}\n            </p>\n\n            <p>\n              {t(\n                'For example, in Python you might achieve this via a simple web middleware'\n              )}\n            </p>\n            <pre>{this.getInstructions(keyList)}</pre>\n\n            <p>\n              {t(`Alternatively you can setup HPKP reports to simply send reports rather than\n              actually enforcing the policy`)}\n            </p>\n            <pre>{this.getReportOnlyInstructions(keyList)}</pre>\n\n            <p>\n              {tct(\n                `We recommend setting this up to only run on a percentage of requests, as\n              otherwise you may find that you've quickly exhausted your quota. For more\n              information, take a look at [link:the documentation on MDN].`,\n                {\n                  link: (\n                    <ExternalLink href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Public_Key_Pinning\" />\n                  ),\n                }\n              )}\n            </p>\n          </PanelBody>\n        </Panel>\n      </div>\n    );\n  }\n}\n\nexport default withOrganization(ProjectHpkpReports);\n","import FieldGroup from 'sentry/components/forms/fieldGroup';\nimport Link from 'sentry/components/links/link';\nimport {Panel, PanelAlert, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport TextCopyInput from 'sentry/components/textCopyInput';\nimport {t, tct} from 'sentry/locale';\nimport {ProjectKey} from 'sentry/types';\nimport getDynamicText from 'sentry/utils/getDynamicText';\n\nconst DEFAULT_ENDPOINT = 'https://sentry.example.com/api/security-report/';\n\nexport function getSecurityDsn(keyList: ProjectKey[]) {\n  const endpoint = keyList.length ? keyList[0].dsn.security : DEFAULT_ENDPOINT;\n  return getDynamicText({\n    value: endpoint,\n    fixed: DEFAULT_ENDPOINT,\n  });\n}\n\ntype Props = {\n  keyList: ProjectKey[];\n  orgId: string;\n  projectId: string;\n};\n\nexport default function ReportUri({keyList, orgId, projectId}: Props) {\n  return (\n    <Panel>\n      <PanelHeader>{t('Report URI')}</PanelHeader>\n      <PanelBody>\n        <PanelAlert type=\"info\">\n          {tct(\n            \"We've automatically pulled these credentials from your available [link:Client Keys]\",\n            {\n              link: <Link to={`/settings/${orgId}/projects/${projectId}/keys/`} />,\n            }\n          )}\n        </PanelAlert>\n        <FieldGroup inline={false} flexibleControlStateSize>\n          <TextCopyInput>{getSecurityDsn(keyList)}</TextCopyInput>\n        </FieldGroup>\n      </PanelBody>\n    </Panel>\n  );\n}\n"],"names":["PreviewFeature","_ref","type","_jsx","Alert","showIcon","children","t","displayName","routeName","orgSlug","withSentry","arguments","length","undefined","projectSlug","tmplBase","tmpl","AsyncView","AsyncComponent","getTitle","render","SentryDocumentTitle","title","this","renderComponent","ProjectHpkpReports","getEndpoints","organization","props","projectId","params","slug","routeTitleGen","getInstructions","keyList","getSecurityDsn","getReportOnlyInstructions","renderBody","state","_jsxs","SettingsPageHeader","ReportUri","orgId","Panel","PanelHeader","PanelBody","withPadding","tct","link","ExternalLink","href","withOrganization","DEFAULT_ENDPOINT","endpoint","dsn","security","getDynamicText","value","fixed","PanelAlert","Link","to","FieldGroup","inline","flexibleControlStateSize","TextCopyInput"],"sourceRoot":""}