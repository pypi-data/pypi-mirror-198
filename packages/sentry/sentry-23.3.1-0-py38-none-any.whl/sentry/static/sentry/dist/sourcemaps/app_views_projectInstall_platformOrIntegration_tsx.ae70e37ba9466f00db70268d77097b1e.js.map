{"version":3,"file":"chunks/app_views_projectInstall_platformOrIntegration_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/projectInstall/platform.tsx","webpack:///./app/views/onboarding/components/firstEventIndicator.tsx","webpack:///./app/views/projectInstall/components/firstEventFooter.tsx","webpack:///./app/views/projectInstall/components/platformHeaderButtonBar.tsx","webpack:///./app/views/projectInstall/platformIntegrationSetup.tsx","webpack:///./app/views/projectInstall/platformOrIntegration.tsx"],"sourcesContent":["import {Fragment, useCallback, useEffect, useState} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {loadDocs} from 'sentry/actionCreators/projects';\nimport Feature from 'sentry/components/acl/feature';\nimport {Alert} from 'sentry/components/alert';\nimport {Button} from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport NotFound from 'sentry/components/errors/notFound';\nimport LoadingError from 'sentry/components/loadingError';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {DocumentationWrapper} from 'sentry/components/onboarding/documentationWrapper';\nimport {Footer} from 'sentry/components/onboarding/footer';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {\n  performance as performancePlatforms,\n  PlatformKey,\n} from 'sentry/data/platformCategories';\nimport platforms from 'sentry/data/platforms';\nimport {IconChevron} from 'sentry/icons';\nimport {t, tct} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport useApi from 'sentry/utils/useApi';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport useProjects from 'sentry/utils/useProjects';\nimport {normalizeUrl} from 'sentry/utils/withDomainRequired';\n\ntype Props = RouteComponentProps<{platform: string; projectId: string}, {}>;\n\nexport function ProjectInstallPlatform({location, params, route, router}: Props) {\n  const api = useApi();\n  const organization = useOrganization();\n\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n  const [html, setHtml] = useState('');\n\n  const {projects, initiallyLoaded} = useProjects({\n    slugs: [params.projectId],\n    orgId: organization.slug,\n  });\n\n  const loadingProjects = !initiallyLoaded;\n  const project = projects.filter(proj => proj.slug === params.projectId)[0];\n\n  const fetchData = useCallback(async () => {\n    setLoading(true);\n\n    try {\n      const {html: reponse} = await loadDocs(\n        api,\n        organization.slug,\n        params.projectId,\n        params.platform as PlatformKey\n      );\n      setHtml(reponse);\n    } catch (err) {\n      setError(err);\n    }\n\n    setLoading(false);\n  }, [api, organization.slug, params]);\n\n  const redirectToNeutralDocs = useCallback(() => {\n    const url = `/organizations/${organization.slug}/projects/${params.projectId}/getting-started/`;\n    router.push(normalizeUrl(url));\n  }, [organization.slug, params.projectId, router]);\n\n  useEffect(() => {\n    fetchData();\n\n    window.scrollTo(0, 0);\n\n    // redirect if platform is not known.\n    if (!params.platform || params.platform === 'other') {\n      redirectToNeutralDocs();\n    }\n  }, [fetchData, redirectToNeutralDocs, params.platform]);\n\n  const platform = platforms.find(p => p.id === params.platform);\n\n  if (!platform) {\n    return <NotFound />;\n  }\n\n  const issueStreamLink = `/organizations/${organization.slug}/issues/`;\n  const performanceOverviewLink = `/organizations/${organization.slug}/performance/`;\n  const gettingStartedLink = `/organizations/${organization.slug}/projects/${params.projectId}/getting-started/`;\n  const platformLink = platform.link ?? undefined;\n  const showPerformancePrompt = performancePlatforms.includes(platform.id as PlatformKey);\n\n  const heartbeatFooter = !!organization?.features.includes(\n    'onboarding-heartbeat-footer'\n  );\n\n  const isGettingStarted = window.location.href.indexOf('getting-started') > 0;\n\n  return (\n    <Fragment>\n      <StyledPageHeader>\n        <h2>{t('Configure %(platform)s', {platform: platform.name})}</h2>\n        <ButtonBar gap={1}>\n          <Button\n            icon={<IconChevron direction=\"left\" size=\"sm\" />}\n            size=\"sm\"\n            to={gettingStartedLink}\n          >\n            {t('Back')}\n          </Button>\n          <Button size=\"sm\" href={platformLink} external>\n            {t('Full Documentation')}\n          </Button>\n        </ButtonBar>\n      </StyledPageHeader>\n\n      <div>\n        <Alert type=\"info\" showIcon>\n          {tct(\n            `\n           This is a quick getting started guide. For in-depth instructions\n           on integrating Sentry with [platform], view\n           [docLink:our complete documentation].`,\n            {\n              platform: platform.name,\n              docLink: <a href={platformLink} />,\n            }\n          )}\n        </Alert>\n\n        {loading ? (\n          <LoadingIndicator />\n        ) : error ? (\n          <LoadingError onRetry={fetchData} />\n        ) : (\n          <Fragment>\n            <SentryDocumentTitle\n              title={`${t('Configure')} ${platform.name}`}\n              projectSlug={params.projectId}\n            />\n            <DocumentationWrapper dangerouslySetInnerHTML={{__html: html}} />\n          </Fragment>\n        )}\n\n        {isGettingStarted && showPerformancePrompt && (\n          <Feature\n            features={['performance-view']}\n            hookName=\"feature-disabled:performance-new-project\"\n          >\n            {({hasFeature}) => {\n              if (hasFeature) {\n                return null;\n              }\n              return (\n                <StyledAlert type=\"info\" showIcon>\n                  {t(\n                    `Your selected platform supports performance, but your organization does not have performance enabled.`\n                  )}\n                </StyledAlert>\n              );\n            }}\n          </Feature>\n        )}\n\n        {isGettingStarted && heartbeatFooter ? (\n          <Footer\n            projectSlug={params.projectId}\n            projectId={project?.id}\n            route={route}\n            router={router}\n            location={location}\n          />\n        ) : (\n          <StyledButtonBar gap={1}>\n            <Button\n              priority=\"primary\"\n              busy={loadingProjects}\n              to={{\n                pathname: issueStreamLink,\n                query: project?.id,\n                hash: '#welcome',\n              }}\n            >\n              {t('Take me to Issues')}\n            </Button>\n            <Button\n              busy={loadingProjects}\n              to={{\n                pathname: performanceOverviewLink,\n                query: project?.id,\n              }}\n            >\n              {t('Take me to Performance')}\n            </Button>\n          </StyledButtonBar>\n        )}\n      </div>\n    </Fragment>\n  );\n}\n\nconst StyledButtonBar = styled(ButtonBar)`\n  margin-top: ${space(3)};\n  width: max-content;\n\n  @media (max-width: ${p => p.theme.breakpoints.small}) {\n    width: auto;\n    grid-row-gap: ${space(1)};\n    grid-auto-flow: row;\n  }\n`;\n\nconst StyledPageHeader = styled('div')`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: ${space(3)};\n\n  h2 {\n    margin: 0;\n  }\n\n  @media (max-width: ${p => p.theme.breakpoints.small}) {\n    flex-direction: column;\n    align-items: flex-start;\n\n    h2 {\n      margin-bottom: ${space(2)};\n    }\n  }\n`;\n\nconst StyledAlert = styled(Alert)`\n  margin-top: ${space(2)};\n`;\n","import styled from '@emotion/styled';\nimport {AnimatePresence, HTMLMotionProps, motion, Variants} from 'framer-motion';\n\nimport {Button} from 'sentry/components/button';\nimport {IconCheckmark} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport pulsingIndicatorStyles from 'sentry/styles/pulsingIndicator';\nimport {space} from 'sentry/styles/space';\nimport {Group} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport EventWaiter, {EventWaiterProps} from 'sentry/utils/eventWaiter';\nimport testableTransition from 'sentry/utils/testableTransition';\n\ntype RenderProps = {\n  firstEventButton: React.ReactNode;\n  indicator: React.ReactNode;\n};\n\ninterface FirstEventIndicatorProps extends Omit<EventWaiterProps, 'children' | 'api'> {\n  children: (props: RenderProps) => React.ReactNode;\n}\n\nconst FirstEventIndicator = ({children, ...props}: FirstEventIndicatorProps) => (\n  <EventWaiter {...props}>\n    {({firstIssue}) =>\n      children({\n        indicator: <Indicator firstIssue={firstIssue} {...props} />,\n        firstEventButton: (\n          <Button\n            title={t(\"You'll need to send your first error to continue\")}\n            tooltipProps={{disabled: !!firstIssue}}\n            disabled={!firstIssue}\n            priority=\"primary\"\n            onClick={() =>\n              trackAdvancedAnalyticsEvent('growth.onboarding_take_to_error', {\n                organization: props.organization,\n              })\n            }\n            to={`/organizations/${props.organization.slug}/issues/${\n              firstIssue && firstIssue !== true && 'id' in firstIssue\n                ? `${firstIssue.id}/`\n                : ''\n            }?referrer=onboarding-first-event-indicator`}\n          >\n            {t('Take me to my error')}\n          </Button>\n        ),\n      })\n    }\n  </EventWaiter>\n);\n\ninterface IndicatorProps extends Omit<EventWaiterProps, 'children' | 'api'> {\n  firstIssue: null | boolean | Group;\n}\n\nconst Indicator = ({firstIssue}: IndicatorProps) => (\n  <Container>\n    <AnimatePresence>\n      {!firstIssue ? <Waiting key=\"waiting\" /> : <Success key=\"received\" />}\n    </AnimatePresence>\n  </Container>\n);\n\nconst Container = styled('div')`\n  display: grid;\n  grid-template-columns: 1fr;\n  justify-content: right;\n`;\n\nconst StatusWrapper = styled(motion.div)`\n  display: grid;\n  grid-template-columns: 1fr max-content;\n  gap: ${space(1)};\n  align-items: center;\n  font-size: ${p => p.theme.fontSizeMedium};\n  /* Keep the wrapper in the parent grids first cell for transitions */\n  grid-column: 1;\n  grid-row: 1;\n`;\n\nStatusWrapper.defaultProps = {\n  initial: 'initial',\n  animate: 'animate',\n  exit: 'exit',\n  variants: {\n    initial: {opacity: 0, y: -10},\n    animate: {\n      opacity: 1,\n      y: 0,\n      transition: testableTransition({when: 'beforeChildren', staggerChildren: 0.35}),\n    },\n    exit: {opacity: 0, y: 10},\n  },\n};\n\nconst Waiting = (props: HTMLMotionProps<'div'>) => (\n  <StatusWrapper {...props}>\n    <AnimatedText>{t('Waiting to receive first event to continue')}</AnimatedText>\n    <WaitingIndicator />\n  </StatusWrapper>\n);\n\nconst Success = (props: HTMLMotionProps<'div'>) => (\n  <StatusWrapper {...props}>\n    <AnimatedText>{t('Event was received!')}</AnimatedText>\n    <ReceivedIndicator />\n  </StatusWrapper>\n);\n\nconst indicatorAnimation: Variants = {\n  initial: {opacity: 0, y: -10},\n  animate: {opacity: 1, y: 0},\n  exit: {opacity: 0, y: 10},\n};\n\nconst AnimatedText = styled(motion.div)``;\n\nAnimatedText.defaultProps = {\n  variants: indicatorAnimation,\n  transition: testableTransition(),\n};\n\nconst WaitingIndicator = styled(motion.div)`\n  margin: 0 6px;\n  ${pulsingIndicatorStyles};\n`;\n\nWaitingIndicator.defaultProps = {\n  variants: indicatorAnimation,\n  transition: testableTransition(),\n};\n\nconst ReceivedIndicator = styled(IconCheckmark)`\n  color: #fff;\n  background: ${p => p.theme.green300};\n  border-radius: 50%;\n  padding: 3px;\n  margin: 0 ${space(0.25)};\n`;\n\nReceivedIndicator.defaultProps = {\n  size: 'sm',\n};\n\nexport {Indicator};\n\nexport default FirstEventIndicator;\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport {Button} from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport {t, tct} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\nimport FirstEventIndicator from 'sentry/views/onboarding/components/firstEventIndicator';\nimport CreateSampleEventButton from 'sentry/views/onboarding/createSampleEventButton';\n\ninterface FirstEventFooterProps {\n  organization: Organization;\n  project: Project;\n  docsLink?: string;\n  docsOnClick?: () => void;\n}\n\nexport default function FirstEventFooter({\n  organization,\n  project,\n  docsLink,\n  docsOnClick,\n}: FirstEventFooterProps) {\n  return (\n    <Fragment>\n      <FirstEventIndicator\n        organization={organization}\n        project={project}\n        eventType=\"error\"\n      >\n        {({indicator, firstEventButton}) => (\n          <CTAFooter>\n            <Actions gap={2}>\n              {firstEventButton}\n              <Button external href={docsLink} onClick={docsOnClick}>\n                {t('View full documentation')}\n              </Button>\n            </Actions>\n            {indicator}\n          </CTAFooter>\n        )}\n      </FirstEventIndicator>\n      <CTASecondary>\n        {tct(\n          'Just want to poke around before getting too cozy with the SDK? [sample:View a sample event for this SDK] or [skip:finish setup later].',\n          {\n            sample: (\n              <CreateSampleEventButton\n                aria-label=\"View a sample event\"\n                project={project}\n                source=\"onboarding\"\n                priority=\"link\"\n              />\n            ),\n            skip: (\n              <Button priority=\"link\" href=\"/\" aria-label={t('Finish setup later')} />\n            ),\n          }\n        )}\n      </CTASecondary>\n    </Fragment>\n  );\n}\n\nconst CTAFooter = styled('div')`\n  display: flex;\n  justify-content: space-between;\n  margin: ${space(2)} 0;\n  margin-top: ${space(4)};\n`;\n\nconst CTASecondary = styled('p')`\n  color: ${p => p.theme.subText};\n  font-size: ${p => p.theme.fontSizeMedium};\n  margin: 0;\n  max-width: 500px;\n`;\n\nconst Actions = styled(ButtonBar)`\n  display: inline-grid;\n  justify-self: start;\n`;\n","import {Button} from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport {IconChevron} from 'sentry/icons';\nimport {t} from 'sentry/locale';\n\ntype Props = {\n  docsLink: string;\n  gettingStartedLink: string;\n};\n\nexport default function PlatformHeaderButtonBar({gettingStartedLink, docsLink}: Props) {\n  return (\n    <ButtonBar gap={1}>\n      <Button\n        size=\"sm\"\n        icon={<IconChevron size=\"xs\" direction=\"left\" />}\n        to={gettingStartedLink}\n      >\n        {t('Back')}\n      </Button>\n      <Button size=\"sm\" href={docsLink} external>\n        {t('Full Documentation')}\n      </Button>\n    </ButtonBar>\n  );\n}\n","import {Fragment} from 'react';\nimport {browserHistory, RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport {Button} from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport platforms from 'sentry/data/platforms';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {IntegrationProvider, Organization, Project} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport {trackIntegrationAnalytics} from 'sentry/utils/integrationUtil';\nimport {normalizeUrl} from 'sentry/utils/withDomainRequired';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport AddInstallationInstructions from 'sentry/views/onboarding/components/integrations/addInstallationInstructions';\nimport PostInstallCodeSnippet from 'sentry/views/onboarding/components/integrations/postInstallCodeSnippet';\nimport {AddIntegrationButton} from 'sentry/views/settings/organizationIntegrations/addIntegrationButton';\n\nimport FirstEventFooter from './components/firstEventFooter';\nimport PlatformHeaderButtonBar from './components/platformHeaderButtonBar';\n\ntype Props = {\n  integrationSlug: string;\n  organization: Organization;\n} & RouteComponentProps<{platform: string; projectId: string}, {}> &\n  AsyncComponent['props'];\n\ntype State = {\n  installed: boolean;\n  integrations: {providers: IntegrationProvider[]};\n  project: Project | null;\n} & AsyncComponent['state'];\n\nclass PlatformIntegrationSetup extends AsyncComponent<Props, State> {\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      installed: false,\n      integrations: {providers: []},\n      project: null,\n    };\n  }\n\n  componentDidMount() {\n    window.scrollTo(0, 0);\n\n    const {platform} = this.props.params;\n\n    // redirect if platform is not known.\n    if (!platform || platform === 'other') {\n      this.redirectToNeutralDocs();\n    }\n  }\n\n  get provider() {\n    const {providers} = this.state.integrations;\n    return providers.length ? providers[0] : null;\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {organization, integrationSlug, params} = this.props;\n\n    if (!integrationSlug) {\n      return [];\n    }\n\n    return [\n      [\n        'integrations',\n        `/organizations/${organization.slug}/config/integrations/?provider_key=${integrationSlug}`,\n      ],\n      ['project', `/projects/${organization.slug}/${params.projectId}/`],\n    ];\n  }\n\n  handleFullDocsClick = () => {\n    const {organization} = this.props;\n    trackAdvancedAnalyticsEvent('growth.onboarding_view_full_docs', {organization});\n  };\n\n  redirectToNeutralDocs() {\n    const {organization} = this.props;\n    const {projectId} = this.props.params;\n\n    const url = `/organizations/${organization.slug}/projects/${projectId}/getting-started/`;\n\n    browserHistory.push(normalizeUrl(url));\n  }\n\n  handleAddIntegration = () => {\n    this.setState({installed: true});\n  };\n\n  trackSwitchToManual = () => {\n    const {organization, integrationSlug} = this.props;\n    trackIntegrationAnalytics('integrations.switch_manual_sdk_setup', {\n      integration_type: 'first_party',\n      integration: integrationSlug,\n      view: 'project_creation',\n      organization,\n    });\n  };\n\n  render() {\n    const {organization, params} = this.props;\n    const {installed, project} = this.state;\n    const {projectId, platform} = params;\n    const provider = this.provider;\n\n    const platformIntegration = platforms.find(p => p.id === platform);\n    if (!provider || !platformIntegration || !project) {\n      return null;\n    }\n    const gettingStartedLink = `/organizations/${organization.slug}/projects/${projectId}/getting-started/`;\n\n    // TODO: make dynamic when adding more integrations\n    const docsLink =\n      'https://docs.sentry.io/product/integrations/cloud-monitoring/aws-lambda/';\n\n    return (\n      <OuterWrapper>\n        <InnerWrapper>\n          <StyledTitle>\n            {t('Automatically instrument %s', platformIntegration.name)}\n          </StyledTitle>\n          <HeaderButtons>\n            <PlatformHeaderButtonBar\n              gettingStartedLink={gettingStartedLink}\n              docsLink={docsLink}\n            />\n          </HeaderButtons>\n          {!installed ? (\n            <Fragment>\n              <AddInstallationInstructions />\n              <StyledButtonBar gap={1}>\n                <AddIntegrationButton\n                  provider={provider}\n                  onAddIntegration={this.handleAddIntegration}\n                  organization={organization}\n                  priority=\"primary\"\n                  size=\"sm\"\n                  analyticsParams={{view: 'project_creation', already_installed: false}}\n                  modalParams={{projectId: project.id}}\n                  aria-label={t('Add integration')}\n                />\n                <Button\n                  size=\"sm\"\n                  to={{\n                    pathname: window.location.pathname,\n                    query: {manual: '1'},\n                  }}\n                  onClick={this.trackSwitchToManual}\n                >\n                  {t('Manual Setup')}\n                </Button>\n              </StyledButtonBar>\n            </Fragment>\n          ) : (\n            <Fragment>\n              <PostInstallCodeSnippet provider={provider} />\n              <FirstEventFooter\n                project={project}\n                organization={organization}\n                docsLink={docsLink}\n                docsOnClick={this.handleFullDocsClick}\n              />\n            </Fragment>\n          )}\n        </InnerWrapper>\n      </OuterWrapper>\n    );\n  }\n}\n\nconst StyledButtonBar = styled(ButtonBar)`\n  margin-top: ${space(3)};\n  width: max-content;\n\n  @media (max-width: ${p => p.theme.breakpoints.small}) {\n    width: auto;\n    grid-row-gap: ${space(1)};\n    grid-auto-flow: row;\n  }\n`;\n\nconst InnerWrapper = styled('div')`\n  max-width: 850px;\n`;\n\nconst OuterWrapper = styled('div')`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-top: 50px;\n`;\n\nconst HeaderButtons = styled('div')`\n  width: min-content;\n  margin-bottom: ${space(3)};\n`;\n\nconst StyledTitle = styled('h2')`\n  margin: 0;\n  margin-bottom: ${space(2)};\n`;\n\nexport default withOrganization(PlatformIntegrationSetup);\n","import * as qs from 'query-string';\n\nimport {OnboardingContextProvider} from 'sentry/components/onboarding/onboardingContext';\nimport {platformToIntegrationMap} from 'sentry/utils/integrationUtil';\n\nimport {ProjectInstallPlatform} from './platform';\nimport PlatformIntegrationSetup from './platformIntegrationSetup';\n\ntype Props = React.ComponentProps<typeof ProjectInstallPlatform> &\n  Omit<React.ComponentProps<typeof PlatformIntegrationSetup>, 'integrationSlug'>;\n\nconst PlatformOrIntegration = (props: Props) => {\n  const parsed = qs.parse(window.location.search);\n  const {platform} = props.params;\n  const integrationSlug = platform && platformToIntegrationMap[platform];\n  // check for manual override query param\n  // TODO(priscila): check this case\n  if (integrationSlug && parsed.manual !== '1') {\n    return <PlatformIntegrationSetup integrationSlug={integrationSlug} {...props} />;\n  }\n  return (\n    <OnboardingContextProvider>\n      <ProjectInstallPlatform {...props} />\n    </OnboardingContextProvider>\n  );\n};\n\nexport default PlatformOrIntegration;\n"],"names":["ProjectInstallPlatform","_ref","location","params","route","router","api","useApi","organization","useOrganization","loading","setLoading","useState","error","setError","html","setHtml","projects","initiallyLoaded","useProjects","slugs","projectId","orgId","slug","loadingProjects","project","filter","proj","fetchData","useCallback","async","reponse","loadDocs","platform","err","redirectToNeutralDocs","url","push","normalizeUrl","useEffect","window","scrollTo","platforms","p","id","_jsx","NotFound","issueStreamLink","performanceOverviewLink","gettingStartedLink","platformLink","link","undefined","showPerformancePrompt","performancePlatforms","heartbeatFooter","features","includes","isGettingStarted","href","indexOf","_jsxs","Fragment","children","StyledPageHeader","t","name","ButtonBar","gap","Button","icon","IconChevron","direction","size","to","external","Alert","type","showIcon","tct","docLink","LoadingIndicator","LoadingError","onRetry","SentryDocumentTitle","title","projectSlug","DocumentationWrapper","dangerouslySetInnerHTML","__html","Feature","hookName","_ref2","hasFeature","StyledAlert","Footer","StyledButtonBar","priority","busy","pathname","query","hash","displayName","_styled","target","space","theme","breakpoints","small","FirstEventIndicator","props","EventWaiter","firstIssue","indicator","Indicator","firstEventButton","tooltipProps","disabled","onClick","trackAdvancedAnalyticsEvent","_ref3","Container","AnimatePresence","Success","Waiting","styles","StatusWrapper","motion","fontSizeMedium","defaultProps","initial","animate","exit","variants","opacity","y","transition","testableTransition","when","staggerChildren","AnimatedText","WaitingIndicator","ReceivedIndicator","indicatorAnimation","pulsingIndicatorStyles","IconCheckmark","green300","FirstEventFooter","docsLink","docsOnClick","eventType","CTAFooter","Actions","CTASecondary","sample","CreateSampleEventButton","source","skip","subText","PlatformHeaderButtonBar","PlatformIntegrationSetup","AsyncComponent","constructor","arguments","_defineProperty","this","setState","installed","integrationSlug","trackIntegrationAnalytics","integration_type","integration","view","getDefaultState","super","integrations","providers","componentDidMount","provider","state","length","getEndpoints","browserHistory","render","platformIntegration","OuterWrapper","InnerWrapper","StyledTitle","HeaderButtons","PostInstallCodeSnippet","handleFullDocsClick","AddInstallationInstructions","AddIntegrationButton","onAddIntegration","handleAddIntegration","analyticsParams","already_installed","modalParams","manual","trackSwitchToManual","withOrganization","PlatformOrIntegration","parsed","qs","search","platformToIntegrationMap","OnboardingContextProvider"],"sourceRoot":""}