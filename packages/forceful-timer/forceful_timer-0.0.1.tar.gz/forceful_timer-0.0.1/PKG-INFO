Metadata-Version: 2.1
Name: forceful_timer
Version: 0.0.1
Summary: Forces shutdown once timer runs out or force quits specified applications if timer is interrupted.
Project-URL: Homepage, https://github.com/PraxTube/forceful-timer
Project-URL: Bug Tracker, https://github.com/PraxTube/forceful-timer/issues
Author-email: Prax Tube <lukinator28@gmail.com>
License-File: LICENSE
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Requires-Python: >=3.8
Description-Content-Type: text/markdown

# Timed Shutdown

Shutdown your system after a given number of minutes, plays sounds for various actions to
notify you.

## Motivation

Every played a video game for way too long in one session? Yeah, me neither *cough*
*cough*. This program allows you to set time till when your system will shutdown. By
default, you will get notified via sound once the time limit is close to hitting zero.
Allowing you to save and quit a singleplayer game before it's too late.

It is not meant to be used on remote servers or to specify a scheduled shutdown. Rather,
it's meant as a timer that will force stop whatever you are doing.

## Prerequisites

### Linux

In order to use all features you need `wmctrl`. On **Debian** like systems run

```
sudo apt install wmctrl
```

## Installtion

To install, follow these steps

### Linux

```
git clone https://github.com/PraxTube/timed-shutdown.git
cd timed-shutdown
python3 -m venv venv
source venv/bin/activate
pip install -r requirements.txt
```

### Windows

```
git clone https://github.com/PraxTube/timed-shutdown.git
cd timed-shutdown
python -m venv venv
venv\Scripts\activate.bat
pip install -r requirements.txt
```

once you installed and set up your virtual environment, you can use the script.

## Usage

To run the script with default settings you can execute

```
python main.py
```

which will shutdown the system after 60 minutes. The output will look something like this

```
Shutting down in:   0%|                        | 2/3600 [00:02<1:00:03,  1.00s/it]
```

You can **cancel** the process with `CTRL + C`. In order to bind applications to the cancellation
process you can add them via `-a <app_name>`. This will **close** the app if you cancel the
shutdown. To list all running apps you can run `-l`.

```
usage: main.py [-h] [-a APP] [-l] [--sound-theme {big-sur,chime,mario,material,pokemon,sonic,zelda}] [minutes]

Shut down the system after the given time period.

positional arguments:
  minutes               time in minutes till shutdown

options:
  -h, --help            show this help message and exit
  -a APP, --app APP     the app that will get closed if the timer is interrupted
  -l, --list-apps       list all running applications and exit.
  --sound-theme {big-sur,chime,mario,material,pokemon,sonic,zelda}
                        the theme to use to play sounds, see chime
```

### Examples

Let's say I want to play minecraft for 45 minutes and I am in a call with a friend.
I could run

```
python main.py 45 -a minecraft -a discord
```

which would bind both minecraft and discord to the cancellation process.
If I cancel the shutdown process, both of them will be **closed**.

## TO DO

- \[x\] Add sound notification when close to shutdown
- \[x\] Clear screen on initiation
- \[ \] Make usage easier (create PyPi entry)
- \[ \] Update README.md
