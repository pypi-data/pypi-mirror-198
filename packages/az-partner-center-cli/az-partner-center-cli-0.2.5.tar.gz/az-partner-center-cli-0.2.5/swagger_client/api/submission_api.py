# coding: utf-8

"""
    https://api.partner.microsoft.com/v1.0/ingestion

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SubmissionApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def products_product_id_submissions_get(self, product_id, authorization, **kwargs):  # noqa: E501
        """Returns a paged collection of Submissions  # noqa: E501

        Sample request:                    GET /products/{productID}/submissions                        =&gt; returns both Inprogress and Published Submissions for Retail                    GET /products/{productID}/submissions?state={state}                        =&gt; returns the Submission (either Inprogress or Published) of requested state for Retail                    GET /products/{productID}/submissions?sandboxID={sandboxID}                        =&gt; returns both Inprogress and Published Submissions for requested Sandbox                    GET /products/{productID}/submissions?sandboxID={sandboxID}&amp;state={state}                        =&gt; returns the Submission (either Inprogress or Published) of requested state for requested Sandbox                    GET /products/{productID}/submissions?flightID={flightID}                        =&gt; returns both Inprogress and Published Submissions for requested Flight                    GET /products/{productID}/submissions?flightID={flightID}&amp;state={state}                        =&gt; returns the Submission (either Inprogress or Published) of requested state for requested Flight  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_product_id_submissions_get(product_id, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_id: ID of product (required)
        :param str authorization: User authorization (required)
        :param str filter: Filter of submissions. Filter by State and/or Targets with operation eq is allowed.
        :param str expand: Use $expand=PublishOption to Include publish option in response
        :param str client_request_id: ID of request provIDed by user
        :return: MicrosoftIngestionApiModelsCommonPagedCollectionMicrosoftIngestionApiModelsSubmissionsSubmission_
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_product_id_submissions_get_with_http_info(product_id, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.products_product_id_submissions_get_with_http_info(product_id, authorization, **kwargs)  # noqa: E501
            return data

    def products_product_id_submissions_get_with_http_info(self, product_id, authorization, **kwargs):  # noqa: E501
        """Returns a paged collection of Submissions  # noqa: E501

        Sample request:                    GET /products/{productID}/submissions                        =&gt; returns both Inprogress and Published Submissions for Retail                    GET /products/{productID}/submissions?state={state}                        =&gt; returns the Submission (either Inprogress or Published) of requested state for Retail                    GET /products/{productID}/submissions?sandboxID={sandboxID}                        =&gt; returns both Inprogress and Published Submissions for requested Sandbox                    GET /products/{productID}/submissions?sandboxID={sandboxID}&amp;state={state}                        =&gt; returns the Submission (either Inprogress or Published) of requested state for requested Sandbox                    GET /products/{productID}/submissions?flightID={flightID}                        =&gt; returns both Inprogress and Published Submissions for requested Flight                    GET /products/{productID}/submissions?flightID={flightID}&amp;state={state}                        =&gt; returns the Submission (either Inprogress or Published) of requested state for requested Flight  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_product_id_submissions_get_with_http_info(product_id, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_id: ID of product (required)
        :param str authorization: User authorization (required)
        :param str filter: Filter of submissions. Filter by State and/or Targets with operation eq is allowed.
        :param str expand: Use $expand=PublishOption to Include publish option in response
        :param str client_request_id: ID of request provIDed by user
        :return: MicrosoftIngestionApiModelsCommonPagedCollectionMicrosoftIngestionApiModelsSubmissionsSubmission_
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_id', 'authorization', 'filter', 'expand', 'client_request_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_product_id_submissions_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params or
                params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `products_product_id_submissions_get`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `products_product_id_submissions_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'product_id' in params:
            path_params['productID'] = params['product_id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('$filter', params['filter']))  # noqa: E501
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'client_request_id' in params:
            header_params['Client-Request-ID'] = params['client_request_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/products/{productID}/submissions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MicrosoftIngestionApiModelsCommonPagedCollectionMicrosoftIngestionApiModelsSubmissionsSubmission_',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_product_id_submissions_post(self, authorization, product_id, **kwargs):  # noqa: E501
        """Creates a new Submission  # noqa: E501

        Sample request:                    POST /products/{productID}/submissions      {          // empty Json body      }          =&gt; create Inprogress Submission for Retail                    POST /products/{productID}/submissions      {          \"sandboxID\":\"{sandboxID}\"      }          =&gt; create Inprogress Submission for a Sandbox                    POST /products/{productID}/submissions      {          \"flightID\":\"{flightID}\"      }          =&gt; create Inprogress Submission for a Flight  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_product_id_submissions_post(authorization, product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: User authorization (required)
        :param str product_id: ID of product (required)
        :param MicrosoftIngestionApiModelsSubmissionsSubmissionCreationRequest body: Request body of a Microsoft.Ingestion.Api.Models.Submissions.SubmissionCreationRequest
        :param str client_request_id: ID of request provIDed by user
        :return: MicrosoftIngestionApiModelsSubmissionsSubmission
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_product_id_submissions_post_with_http_info(authorization, product_id, **kwargs)  # noqa: E501
        else:
            (data) = self.products_product_id_submissions_post_with_http_info(authorization, product_id, **kwargs)  # noqa: E501
            return data

    def products_product_id_submissions_post_with_http_info(self, authorization, product_id, **kwargs):  # noqa: E501
        """Creates a new Submission  # noqa: E501

        Sample request:                    POST /products/{productID}/submissions      {          // empty Json body      }          =&gt; create Inprogress Submission for Retail                    POST /products/{productID}/submissions      {          \"sandboxID\":\"{sandboxID}\"      }          =&gt; create Inprogress Submission for a Sandbox                    POST /products/{productID}/submissions      {          \"flightID\":\"{flightID}\"      }          =&gt; create Inprogress Submission for a Flight  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_product_id_submissions_post_with_http_info(authorization, product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: User authorization (required)
        :param str product_id: ID of product (required)
        :param MicrosoftIngestionApiModelsSubmissionsSubmissionCreationRequest body: Request body of a Microsoft.Ingestion.Api.Models.Submissions.SubmissionCreationRequest
        :param str client_request_id: ID of request provIDed by user
        :return: MicrosoftIngestionApiModelsSubmissionsSubmission
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'product_id', 'body', 'client_request_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_product_id_submissions_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `products_product_id_submissions_post`")  # noqa: E501
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params or
                params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `products_product_id_submissions_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'product_id' in params:
            path_params['productID'] = params['product_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'client_request_id' in params:
            header_params['Client-Request-ID'] = params['client_request_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/products/{productID}/submissions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MicrosoftIngestionApiModelsSubmissionsSubmission',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_product_id_submissions_submission_id_delete(self, product_id, submission_id, authorization, **kwargs):  # noqa: E501
        """Deletes a Submission  # noqa: E501

        Sample request:                    DELETE /products/{productID}/submissions/{submissionID}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_product_id_submissions_submission_id_delete(product_id, submission_id, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_id: ID of product (required)
        :param str submission_id: ID of submission (required)
        :param str authorization: User authorization (required)
        :param str client_request_id: ID of request provIDed by user
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_product_id_submissions_submission_id_delete_with_http_info(product_id, submission_id, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.products_product_id_submissions_submission_id_delete_with_http_info(product_id, submission_id, authorization, **kwargs)  # noqa: E501
            return data

    def products_product_id_submissions_submission_id_delete_with_http_info(self, product_id, submission_id, authorization, **kwargs):  # noqa: E501
        """Deletes a Submission  # noqa: E501

        Sample request:                    DELETE /products/{productID}/submissions/{submissionID}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_product_id_submissions_submission_id_delete_with_http_info(product_id, submission_id, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_id: ID of product (required)
        :param str submission_id: ID of submission (required)
        :param str authorization: User authorization (required)
        :param str client_request_id: ID of request provIDed by user
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_id', 'submission_id', 'authorization', 'client_request_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_product_id_submissions_submission_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params or
                params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `products_product_id_submissions_submission_id_delete`")  # noqa: E501
        # verify the required parameter 'submission_id' is set
        if ('submission_id' not in params or
                params['submission_id'] is None):
            raise ValueError("Missing the required parameter `submission_id` when calling `products_product_id_submissions_submission_id_delete`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `products_product_id_submissions_submission_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'product_id' in params:
            path_params['productID'] = params['product_id']  # noqa: E501
        if 'submission_id' in params:
            path_params['submissionID'] = params['submission_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'client_request_id' in params:
            header_params['Client-Request-ID'] = params['client_request_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/products/{productID}/submissions/{submissionID}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_product_id_submissions_submission_id_get(self, product_id, submission_id, authorization, **kwargs):  # noqa: E501
        """Returns a Submission  # noqa: E501

        Sample request:                    GET /products/{productID}/submissions/{submissionID}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_product_id_submissions_submission_id_get(product_id, submission_id, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_id: ID of product (required)
        :param str submission_id: ID of submission (required)
        :param str authorization: User authorization (required)
        :param str expand: Use $expand=PublishOption to Include publish option in response
        :param str client_request_id: ID of request provIDed by user
        :return: MicrosoftIngestionApiModelsSubmissionsSubmission
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_product_id_submissions_submission_id_get_with_http_info(product_id, submission_id, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.products_product_id_submissions_submission_id_get_with_http_info(product_id, submission_id, authorization, **kwargs)  # noqa: E501
            return data

    def products_product_id_submissions_submission_id_get_with_http_info(self, product_id, submission_id, authorization, **kwargs):  # noqa: E501
        """Returns a Submission  # noqa: E501

        Sample request:                    GET /products/{productID}/submissions/{submissionID}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_product_id_submissions_submission_id_get_with_http_info(product_id, submission_id, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_id: ID of product (required)
        :param str submission_id: ID of submission (required)
        :param str authorization: User authorization (required)
        :param str expand: Use $expand=PublishOption to Include publish option in response
        :param str client_request_id: ID of request provIDed by user
        :return: MicrosoftIngestionApiModelsSubmissionsSubmission
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_id', 'submission_id', 'authorization', 'expand', 'client_request_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_product_id_submissions_submission_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params or
                params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `products_product_id_submissions_submission_id_get`")  # noqa: E501
        # verify the required parameter 'submission_id' is set
        if ('submission_id' not in params or
                params['submission_id'] is None):
            raise ValueError("Missing the required parameter `submission_id` when calling `products_product_id_submissions_submission_id_get`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `products_product_id_submissions_submission_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'product_id' in params:
            path_params['productID'] = params['product_id']  # noqa: E501
        if 'submission_id' in params:
            path_params['submissionID'] = params['submission_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'client_request_id' in params:
            header_params['Client-Request-ID'] = params['client_request_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/products/{productID}/submissions/{submissionID}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MicrosoftIngestionApiModelsSubmissionsSubmission',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_product_id_submissions_submission_id_promote_post(self, product_id, submission_id, authorization, **kwargs):  # noqa: E501
        """Promote a Preview Submission to live  # noqa: E501

        Sample request:                    POST /products/{productID}/submissions/{submissionID}/promote      [empty body]  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_product_id_submissions_submission_id_promote_post(product_id, submission_id, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_id: ID of product (required)
        :param str submission_id: ID of submission (required)
        :param str authorization: User authorization (required)
        :param str client_request_id: ID of request provIDed by user
        :return: MicrosoftIngestionApiModelsSubmissionsWorkflowDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_product_id_submissions_submission_id_promote_post_with_http_info(product_id, submission_id, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.products_product_id_submissions_submission_id_promote_post_with_http_info(product_id, submission_id, authorization, **kwargs)  # noqa: E501
            return data

    def products_product_id_submissions_submission_id_promote_post_with_http_info(self, product_id, submission_id, authorization, **kwargs):  # noqa: E501
        """Promote a Preview Submission to live  # noqa: E501

        Sample request:                    POST /products/{productID}/submissions/{submissionID}/promote      [empty body]  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_product_id_submissions_submission_id_promote_post_with_http_info(product_id, submission_id, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_id: ID of product (required)
        :param str submission_id: ID of submission (required)
        :param str authorization: User authorization (required)
        :param str client_request_id: ID of request provIDed by user
        :return: MicrosoftIngestionApiModelsSubmissionsWorkflowDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_id', 'submission_id', 'authorization', 'client_request_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_product_id_submissions_submission_id_promote_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params or
                params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `products_product_id_submissions_submission_id_promote_post`")  # noqa: E501
        # verify the required parameter 'submission_id' is set
        if ('submission_id' not in params or
                params['submission_id'] is None):
            raise ValueError("Missing the required parameter `submission_id` when calling `products_product_id_submissions_submission_id_promote_post`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `products_product_id_submissions_submission_id_promote_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'product_id' in params:
            path_params['productID'] = params['product_id']  # noqa: E501
        if 'submission_id' in params:
            path_params['submissionID'] = params['submission_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'client_request_id' in params:
            header_params['Client-Request-ID'] = params['client_request_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/products/{productID}/submissions/{submissionID}/promote', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MicrosoftIngestionApiModelsSubmissionsWorkflowDetail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_product_id_submissions_submission_id_reports_get(self, product_id, submission_id, authorization, **kwargs):  # noqa: E501
        """Returns a collection of CertificationReport for a Submission  # noqa: E501

        Sample request:                    GET /products/{productID}/submissions/{submissionID}/reports  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_product_id_submissions_submission_id_reports_get(product_id, submission_id, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_id: ID of product (required)
        :param str submission_id: ID of submission (required)
        :param str authorization: User authorization (required)
        :param str client_request_id: ID of request provIDed by user
        :return: MicrosoftIngestionApiModelsCommonPagedCollectionMicrosoftIngestionApiModelsSubmissionsCertificationReport_
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_product_id_submissions_submission_id_reports_get_with_http_info(product_id, submission_id, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.products_product_id_submissions_submission_id_reports_get_with_http_info(product_id, submission_id, authorization, **kwargs)  # noqa: E501
            return data

    def products_product_id_submissions_submission_id_reports_get_with_http_info(self, product_id, submission_id, authorization, **kwargs):  # noqa: E501
        """Returns a collection of CertificationReport for a Submission  # noqa: E501

        Sample request:                    GET /products/{productID}/submissions/{submissionID}/reports  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_product_id_submissions_submission_id_reports_get_with_http_info(product_id, submission_id, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_id: ID of product (required)
        :param str submission_id: ID of submission (required)
        :param str authorization: User authorization (required)
        :param str client_request_id: ID of request provIDed by user
        :return: MicrosoftIngestionApiModelsCommonPagedCollectionMicrosoftIngestionApiModelsSubmissionsCertificationReport_
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_id', 'submission_id', 'authorization', 'client_request_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_product_id_submissions_submission_id_reports_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params or
                params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `products_product_id_submissions_submission_id_reports_get`")  # noqa: E501
        # verify the required parameter 'submission_id' is set
        if ('submission_id' not in params or
                params['submission_id'] is None):
            raise ValueError("Missing the required parameter `submission_id` when calling `products_product_id_submissions_submission_id_reports_get`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `products_product_id_submissions_submission_id_reports_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'product_id' in params:
            path_params['productID'] = params['product_id']  # noqa: E501
        if 'submission_id' in params:
            path_params['submissionID'] = params['submission_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'client_request_id' in params:
            header_params['Client-Request-ID'] = params['client_request_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/products/{productID}/submissions/{submissionID}/reports', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MicrosoftIngestionApiModelsCommonPagedCollectionMicrosoftIngestionApiModelsSubmissionsCertificationReport_',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_product_id_submissions_submission_id_validations_get(self, product_id, submission_id, authorization, **kwargs):  # noqa: E501
        """Returns Validation for a Submission  # noqa: E501

        Sample request:                   GET /products/{productID}/submissions/{submissionID}/validations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_product_id_submissions_submission_id_validations_get(product_id, submission_id, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_id: ID of product (required)
        :param str submission_id: ID of submission (required)
        :param str authorization: User authorization (required)
        :param str client_request_id: ID of request provIDed by user
        :return: MicrosoftIngestionApiModelsCommonPagedCollectionMicrosoftIngestionApiModelsSubmissionsValidationItem_
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_product_id_submissions_submission_id_validations_get_with_http_info(product_id, submission_id, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.products_product_id_submissions_submission_id_validations_get_with_http_info(product_id, submission_id, authorization, **kwargs)  # noqa: E501
            return data

    def products_product_id_submissions_submission_id_validations_get_with_http_info(self, product_id, submission_id, authorization, **kwargs):  # noqa: E501
        """Returns Validation for a Submission  # noqa: E501

        Sample request:                   GET /products/{productID}/submissions/{submissionID}/validations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_product_id_submissions_submission_id_validations_get_with_http_info(product_id, submission_id, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_id: ID of product (required)
        :param str submission_id: ID of submission (required)
        :param str authorization: User authorization (required)
        :param str client_request_id: ID of request provIDed by user
        :return: MicrosoftIngestionApiModelsCommonPagedCollectionMicrosoftIngestionApiModelsSubmissionsValidationItem_
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_id', 'submission_id', 'authorization', 'client_request_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_product_id_submissions_submission_id_validations_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params or
                params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `products_product_id_submissions_submission_id_validations_get`")  # noqa: E501
        # verify the required parameter 'submission_id' is set
        if ('submission_id' not in params or
                params['submission_id'] is None):
            raise ValueError("Missing the required parameter `submission_id` when calling `products_product_id_submissions_submission_id_validations_get`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `products_product_id_submissions_submission_id_validations_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'product_id' in params:
            path_params['productID'] = params['product_id']  # noqa: E501
        if 'submission_id' in params:
            path_params['submissionID'] = params['submission_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'client_request_id' in params:
            header_params['Client-Request-ID'] = params['client_request_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/products/{productID}/submissions/{submissionID}/validations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MicrosoftIngestionApiModelsCommonPagedCollectionMicrosoftIngestionApiModelsSubmissionsValidationItem_',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_product_id_submissions_submission_id_workflowdetails_get(self, product_id, submission_id, authorization, **kwargs):  # noqa: E501
        """Returns workflow details for a Submission  # noqa: E501

        Sample request:                   GET /products/{productID}/submissions/{submissionID}/workflowdetails  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_product_id_submissions_submission_id_workflowdetails_get(product_id, submission_id, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_id: ID of product (required)
        :param str submission_id: ID of submission (required)
        :param str authorization: User authorization (required)
        :param str client_request_id: ID of request provIDed by user
        :return: MicrosoftIngestionApiModelsCommonPagedCollectionMicrosoftIngestionApiModelsSubmissionsWorkflowDetail_
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_product_id_submissions_submission_id_workflowdetails_get_with_http_info(product_id, submission_id, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.products_product_id_submissions_submission_id_workflowdetails_get_with_http_info(product_id, submission_id, authorization, **kwargs)  # noqa: E501
            return data

    def products_product_id_submissions_submission_id_workflowdetails_get_with_http_info(self, product_id, submission_id, authorization, **kwargs):  # noqa: E501
        """Returns workflow details for a Submission  # noqa: E501

        Sample request:                   GET /products/{productID}/submissions/{submissionID}/workflowdetails  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_product_id_submissions_submission_id_workflowdetails_get_with_http_info(product_id, submission_id, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_id: ID of product (required)
        :param str submission_id: ID of submission (required)
        :param str authorization: User authorization (required)
        :param str client_request_id: ID of request provIDed by user
        :return: MicrosoftIngestionApiModelsCommonPagedCollectionMicrosoftIngestionApiModelsSubmissionsWorkflowDetail_
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_id', 'submission_id', 'authorization', 'client_request_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_product_id_submissions_submission_id_workflowdetails_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params or
                params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `products_product_id_submissions_submission_id_workflowdetails_get`")  # noqa: E501
        # verify the required parameter 'submission_id' is set
        if ('submission_id' not in params or
                params['submission_id'] is None):
            raise ValueError("Missing the required parameter `submission_id` when calling `products_product_id_submissions_submission_id_workflowdetails_get`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `products_product_id_submissions_submission_id_workflowdetails_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'product_id' in params:
            path_params['productID'] = params['product_id']  # noqa: E501
        if 'submission_id' in params:
            path_params['submissionID'] = params['submission_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'client_request_id' in params:
            header_params['Client-Request-ID'] = params['client_request_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/products/{productID}/submissions/{submissionID}/workflowdetails', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MicrosoftIngestionApiModelsCommonPagedCollectionMicrosoftIngestionApiModelsSubmissionsWorkflowDetail_',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
