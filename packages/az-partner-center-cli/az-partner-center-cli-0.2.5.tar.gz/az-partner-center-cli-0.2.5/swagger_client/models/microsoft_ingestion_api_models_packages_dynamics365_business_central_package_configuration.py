# coding: utf-8

"""
    https://api.partner.microsoft.com/v1.0/ingestion

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.microsoft_ingestion_api_models_packages_base_package_configuration import MicrosoftIngestionApiModelsPackagesBasePackageConfiguration  # noqa: F401,E501

class MicrosoftIngestionApiModelsPackagesDynamics365BusinessCentralPackageConfiguration(MicrosoftIngestionApiModelsPackagesBasePackageConfiguration):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'resource_type': 'str',
        'package_type': 'str',
        'application_installation_uri': 'str',
        'package_references': 'list[MicrosoftIngestionApiModelsCommonTypeValuePair]'
    }
    if hasattr(MicrosoftIngestionApiModelsPackagesBasePackageConfiguration, "swagger_types"):
        swagger_types.update(MicrosoftIngestionApiModelsPackagesBasePackageConfiguration.swagger_types)

    attribute_map = {
        'resource_type': 'resourceType',
        'package_type': 'packageType',
        'application_installation_uri': 'applicationInstallationUri',
        'package_references': 'packageReferences'
    }
    if hasattr(MicrosoftIngestionApiModelsPackagesBasePackageConfiguration, "attribute_map"):
        attribute_map.update(MicrosoftIngestionApiModelsPackagesBasePackageConfiguration.attribute_map)

    def __init__(self, resource_type=None, package_type=None, application_installation_uri=None, package_references=None, *args, **kwargs):  # noqa: E501
        """MicrosoftIngestionApiModelsPackagesDynamics365BusinessCentralPackageConfiguration - a model defined in Swagger"""  # noqa: E501
        self._resource_type = None
        self._package_type = None
        self._application_installation_uri = None
        self._package_references = None
        self.discriminator = None
        if resource_type is not None:
            self.resource_type = resource_type
        if package_type is not None:
            self.package_type = package_type
        if application_installation_uri is not None:
            self.application_installation_uri = application_installation_uri
        if package_references is not None:
            self.package_references = package_references
        MicrosoftIngestionApiModelsPackagesBasePackageConfiguration.__init__(self, *args, **kwargs)

    @property
    def resource_type(self):
        """Gets the resource_type of this MicrosoftIngestionApiModelsPackagesDynamics365BusinessCentralPackageConfiguration.  # noqa: E501


        :return: The resource_type of this MicrosoftIngestionApiModelsPackagesDynamics365BusinessCentralPackageConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this MicrosoftIngestionApiModelsPackagesDynamics365BusinessCentralPackageConfiguration.


        :param resource_type: The resource_type of this MicrosoftIngestionApiModelsPackagesDynamics365BusinessCentralPackageConfiguration.  # noqa: E501
        :type: str
        """
        allowed_values = ["Dynamics365BusinessCentralPackageConfiguration"]  # noqa: E501
        if resource_type not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_type` ({0}), must be one of {1}"  # noqa: E501
                .format(resource_type, allowed_values)
            )

        self._resource_type = resource_type

    @property
    def package_type(self):
        """Gets the package_type of this MicrosoftIngestionApiModelsPackagesDynamics365BusinessCentralPackageConfiguration.  # noqa: E501


        :return: The package_type of this MicrosoftIngestionApiModelsPackagesDynamics365BusinessCentralPackageConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._package_type

    @package_type.setter
    def package_type(self, package_type):
        """Sets the package_type of this MicrosoftIngestionApiModelsPackagesDynamics365BusinessCentralPackageConfiguration.


        :param package_type: The package_type of this MicrosoftIngestionApiModelsPackagesDynamics365BusinessCentralPackageConfiguration.  # noqa: E501
        :type: str
        """
        allowed_values = ["AddOn", "Connect"]  # noqa: E501
        if package_type not in allowed_values:
            raise ValueError(
                "Invalid value for `package_type` ({0}), must be one of {1}"  # noqa: E501
                .format(package_type, allowed_values)
            )

        self._package_type = package_type

    @property
    def application_installation_uri(self):
        """Gets the application_installation_uri of this MicrosoftIngestionApiModelsPackagesDynamics365BusinessCentralPackageConfiguration.  # noqa: E501


        :return: The application_installation_uri of this MicrosoftIngestionApiModelsPackagesDynamics365BusinessCentralPackageConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._application_installation_uri

    @application_installation_uri.setter
    def application_installation_uri(self, application_installation_uri):
        """Sets the application_installation_uri of this MicrosoftIngestionApiModelsPackagesDynamics365BusinessCentralPackageConfiguration.


        :param application_installation_uri: The application_installation_uri of this MicrosoftIngestionApiModelsPackagesDynamics365BusinessCentralPackageConfiguration.  # noqa: E501
        :type: str
        """

        self._application_installation_uri = application_installation_uri

    @property
    def package_references(self):
        """Gets the package_references of this MicrosoftIngestionApiModelsPackagesDynamics365BusinessCentralPackageConfiguration.  # noqa: E501


        :return: The package_references of this MicrosoftIngestionApiModelsPackagesDynamics365BusinessCentralPackageConfiguration.  # noqa: E501
        :rtype: list[MicrosoftIngestionApiModelsCommonTypeValuePair]
        """
        return self._package_references

    @package_references.setter
    def package_references(self, package_references):
        """Sets the package_references of this MicrosoftIngestionApiModelsPackagesDynamics365BusinessCentralPackageConfiguration.


        :param package_references: The package_references of this MicrosoftIngestionApiModelsPackagesDynamics365BusinessCentralPackageConfiguration.  # noqa: E501
        :type: list[MicrosoftIngestionApiModelsCommonTypeValuePair]
        """

        self._package_references = package_references

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MicrosoftIngestionApiModelsPackagesDynamics365BusinessCentralPackageConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MicrosoftIngestionApiModelsPackagesDynamics365BusinessCentralPackageConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
