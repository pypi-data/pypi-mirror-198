# coding: utf-8

"""
    https://api.partner.microsoft.com/v1.0/ingestion

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MicrosoftIngestionApiModelsSubmissionsSubmission(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'resource_type': 'str',
        'state': 'str',
        'substate': 'str',
        'targets': 'list[MicrosoftIngestionApiModelsCommonTypeValuePair]',
        'resources': 'list[MicrosoftIngestionApiModelsCommonTypeValuePair]',
        'variant_resources': 'list[MicrosoftIngestionApiModelsSubmissionsVariantResource]',
        'publish_option': 'MicrosoftIngestionApiModelsSubmissionsPublishOption',
        'published_time_in_utc': 'datetime',
        'pending_update_info': 'MicrosoftIngestionApiModelsSubmissionsPendingUpdateInfo',
        'extended_properties': 'list[MicrosoftIngestionApiModelsCommonTypeValuePair]',
        'release_number': 'int',
        'friendly_name': 'str',
        'are_resources_ready': 'bool',
        'id': 'str'
    }

    attribute_map = {
        'resource_type': 'resourceType',
        'state': 'state',
        'substate': 'substate',
        'targets': 'targets',
        'resources': 'resources',
        'variant_resources': 'variantResources',
        'publish_option': 'publishOption',
        'published_time_in_utc': 'publishedTimeInUtc',
        'pending_update_info': 'pendingUpdateInfo',
        'extended_properties': 'extendedProperties',
        'release_number': 'releaseNumber',
        'friendly_name': 'friendlyName',
        'are_resources_ready': 'areResourcesReady',
        'id': 'id'
    }

    def __init__(self, resource_type=None, state=None, substate=None, targets=None, resources=None, variant_resources=None, publish_option=None, published_time_in_utc=None, pending_update_info=None, extended_properties=None, release_number=None, friendly_name=None, are_resources_ready=None, id=None):  # noqa: E501
        """MicrosoftIngestionApiModelsSubmissionsSubmission - a model defined in Swagger"""  # noqa: E501
        self._resource_type = None
        self._state = None
        self._substate = None
        self._targets = None
        self._resources = None
        self._variant_resources = None
        self._publish_option = None
        self._published_time_in_utc = None
        self._pending_update_info = None
        self._extended_properties = None
        self._release_number = None
        self._friendly_name = None
        self._are_resources_ready = None
        self._id = None
        self.discriminator = None
        if resource_type is not None:
            self.resource_type = resource_type
        if state is not None:
            self.state = state
        if substate is not None:
            self.substate = substate
        if targets is not None:
            self.targets = targets
        if resources is not None:
            self.resources = resources
        if variant_resources is not None:
            self.variant_resources = variant_resources
        if publish_option is not None:
            self.publish_option = publish_option
        if published_time_in_utc is not None:
            self.published_time_in_utc = published_time_in_utc
        if pending_update_info is not None:
            self.pending_update_info = pending_update_info
        if extended_properties is not None:
            self.extended_properties = extended_properties
        if release_number is not None:
            self.release_number = release_number
        if friendly_name is not None:
            self.friendly_name = friendly_name
        if are_resources_ready is not None:
            self.are_resources_ready = are_resources_ready
        if id is not None:
            self.id = id

    @property
    def resource_type(self):
        """Gets the resource_type of this MicrosoftIngestionApiModelsSubmissionsSubmission.  # noqa: E501


        :return: The resource_type of this MicrosoftIngestionApiModelsSubmissionsSubmission.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this MicrosoftIngestionApiModelsSubmissionsSubmission.


        :param resource_type: The resource_type of this MicrosoftIngestionApiModelsSubmissionsSubmission.  # noqa: E501
        :type: str
        """
        allowed_values = ["Submission"]  # noqa: E501
        if resource_type not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_type` ({0}), must be one of {1}"  # noqa: E501
                .format(resource_type, allowed_values)
            )

        self._resource_type = resource_type

    @property
    def state(self):
        """Gets the state of this MicrosoftIngestionApiModelsSubmissionsSubmission.  # noqa: E501


        :return: The state of this MicrosoftIngestionApiModelsSubmissionsSubmission.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this MicrosoftIngestionApiModelsSubmissionsSubmission.


        :param state: The state of this MicrosoftIngestionApiModelsSubmissionsSubmission.  # noqa: E501
        :type: str
        """
        allowed_values = ["InProgress", "Published"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def substate(self):
        """Gets the substate of this MicrosoftIngestionApiModelsSubmissionsSubmission.  # noqa: E501


        :return: The substate of this MicrosoftIngestionApiModelsSubmissionsSubmission.  # noqa: E501
        :rtype: str
        """
        return self._substate

    @substate.setter
    def substate(self, substate):
        """Sets the substate of this MicrosoftIngestionApiModelsSubmissionsSubmission.


        :param substate: The substate of this MicrosoftIngestionApiModelsSubmissionsSubmission.  # noqa: E501
        :type: str
        """
        allowed_values = ["InDraft", "Submitted", "Failed", "FailedInCertification", "ReadyToPublish", "Publishing", "Published", "InStore"]  # noqa: E501
        if substate not in allowed_values:
            raise ValueError(
                "Invalid value for `substate` ({0}), must be one of {1}"  # noqa: E501
                .format(substate, allowed_values)
            )

        self._substate = substate

    @property
    def targets(self):
        """Gets the targets of this MicrosoftIngestionApiModelsSubmissionsSubmission.  # noqa: E501


        :return: The targets of this MicrosoftIngestionApiModelsSubmissionsSubmission.  # noqa: E501
        :rtype: list[MicrosoftIngestionApiModelsCommonTypeValuePair]
        """
        return self._targets

    @targets.setter
    def targets(self, targets):
        """Sets the targets of this MicrosoftIngestionApiModelsSubmissionsSubmission.


        :param targets: The targets of this MicrosoftIngestionApiModelsSubmissionsSubmission.  # noqa: E501
        :type: list[MicrosoftIngestionApiModelsCommonTypeValuePair]
        """

        self._targets = targets

    @property
    def resources(self):
        """Gets the resources of this MicrosoftIngestionApiModelsSubmissionsSubmission.  # noqa: E501


        :return: The resources of this MicrosoftIngestionApiModelsSubmissionsSubmission.  # noqa: E501
        :rtype: list[MicrosoftIngestionApiModelsCommonTypeValuePair]
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this MicrosoftIngestionApiModelsSubmissionsSubmission.


        :param resources: The resources of this MicrosoftIngestionApiModelsSubmissionsSubmission.  # noqa: E501
        :type: list[MicrosoftIngestionApiModelsCommonTypeValuePair]
        """

        self._resources = resources

    @property
    def variant_resources(self):
        """Gets the variant_resources of this MicrosoftIngestionApiModelsSubmissionsSubmission.  # noqa: E501


        :return: The variant_resources of this MicrosoftIngestionApiModelsSubmissionsSubmission.  # noqa: E501
        :rtype: list[MicrosoftIngestionApiModelsSubmissionsVariantResource]
        """
        return self._variant_resources

    @variant_resources.setter
    def variant_resources(self, variant_resources):
        """Sets the variant_resources of this MicrosoftIngestionApiModelsSubmissionsSubmission.


        :param variant_resources: The variant_resources of this MicrosoftIngestionApiModelsSubmissionsSubmission.  # noqa: E501
        :type: list[MicrosoftIngestionApiModelsSubmissionsVariantResource]
        """

        self._variant_resources = variant_resources

    @property
    def publish_option(self):
        """Gets the publish_option of this MicrosoftIngestionApiModelsSubmissionsSubmission.  # noqa: E501


        :return: The publish_option of this MicrosoftIngestionApiModelsSubmissionsSubmission.  # noqa: E501
        :rtype: MicrosoftIngestionApiModelsSubmissionsPublishOption
        """
        return self._publish_option

    @publish_option.setter
    def publish_option(self, publish_option):
        """Sets the publish_option of this MicrosoftIngestionApiModelsSubmissionsSubmission.


        :param publish_option: The publish_option of this MicrosoftIngestionApiModelsSubmissionsSubmission.  # noqa: E501
        :type: MicrosoftIngestionApiModelsSubmissionsPublishOption
        """

        self._publish_option = publish_option

    @property
    def published_time_in_utc(self):
        """Gets the published_time_in_utc of this MicrosoftIngestionApiModelsSubmissionsSubmission.  # noqa: E501


        :return: The published_time_in_utc of this MicrosoftIngestionApiModelsSubmissionsSubmission.  # noqa: E501
        :rtype: datetime
        """
        return self._published_time_in_utc

    @published_time_in_utc.setter
    def published_time_in_utc(self, published_time_in_utc):
        """Sets the published_time_in_utc of this MicrosoftIngestionApiModelsSubmissionsSubmission.


        :param published_time_in_utc: The published_time_in_utc of this MicrosoftIngestionApiModelsSubmissionsSubmission.  # noqa: E501
        :type: datetime
        """

        self._published_time_in_utc = published_time_in_utc

    @property
    def pending_update_info(self):
        """Gets the pending_update_info of this MicrosoftIngestionApiModelsSubmissionsSubmission.  # noqa: E501


        :return: The pending_update_info of this MicrosoftIngestionApiModelsSubmissionsSubmission.  # noqa: E501
        :rtype: MicrosoftIngestionApiModelsSubmissionsPendingUpdateInfo
        """
        return self._pending_update_info

    @pending_update_info.setter
    def pending_update_info(self, pending_update_info):
        """Sets the pending_update_info of this MicrosoftIngestionApiModelsSubmissionsSubmission.


        :param pending_update_info: The pending_update_info of this MicrosoftIngestionApiModelsSubmissionsSubmission.  # noqa: E501
        :type: MicrosoftIngestionApiModelsSubmissionsPendingUpdateInfo
        """

        self._pending_update_info = pending_update_info

    @property
    def extended_properties(self):
        """Gets the extended_properties of this MicrosoftIngestionApiModelsSubmissionsSubmission.  # noqa: E501


        :return: The extended_properties of this MicrosoftIngestionApiModelsSubmissionsSubmission.  # noqa: E501
        :rtype: list[MicrosoftIngestionApiModelsCommonTypeValuePair]
        """
        return self._extended_properties

    @extended_properties.setter
    def extended_properties(self, extended_properties):
        """Sets the extended_properties of this MicrosoftIngestionApiModelsSubmissionsSubmission.


        :param extended_properties: The extended_properties of this MicrosoftIngestionApiModelsSubmissionsSubmission.  # noqa: E501
        :type: list[MicrosoftIngestionApiModelsCommonTypeValuePair]
        """

        self._extended_properties = extended_properties

    @property
    def release_number(self):
        """Gets the release_number of this MicrosoftIngestionApiModelsSubmissionsSubmission.  # noqa: E501


        :return: The release_number of this MicrosoftIngestionApiModelsSubmissionsSubmission.  # noqa: E501
        :rtype: int
        """
        return self._release_number

    @release_number.setter
    def release_number(self, release_number):
        """Sets the release_number of this MicrosoftIngestionApiModelsSubmissionsSubmission.


        :param release_number: The release_number of this MicrosoftIngestionApiModelsSubmissionsSubmission.  # noqa: E501
        :type: int
        """

        self._release_number = release_number

    @property
    def friendly_name(self):
        """Gets the friendly_name of this MicrosoftIngestionApiModelsSubmissionsSubmission.  # noqa: E501


        :return: The friendly_name of this MicrosoftIngestionApiModelsSubmissionsSubmission.  # noqa: E501
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this MicrosoftIngestionApiModelsSubmissionsSubmission.


        :param friendly_name: The friendly_name of this MicrosoftIngestionApiModelsSubmissionsSubmission.  # noqa: E501
        :type: str
        """

        self._friendly_name = friendly_name

    @property
    def are_resources_ready(self):
        """Gets the are_resources_ready of this MicrosoftIngestionApiModelsSubmissionsSubmission.  # noqa: E501


        :return: The are_resources_ready of this MicrosoftIngestionApiModelsSubmissionsSubmission.  # noqa: E501
        :rtype: bool
        """
        return self._are_resources_ready

    @are_resources_ready.setter
    def are_resources_ready(self, are_resources_ready):
        """Sets the are_resources_ready of this MicrosoftIngestionApiModelsSubmissionsSubmission.


        :param are_resources_ready: The are_resources_ready of this MicrosoftIngestionApiModelsSubmissionsSubmission.  # noqa: E501
        :type: bool
        """

        self._are_resources_ready = are_resources_ready

    @property
    def id(self):
        """Gets the id of this MicrosoftIngestionApiModelsSubmissionsSubmission.  # noqa: E501


        :return: The id of this MicrosoftIngestionApiModelsSubmissionsSubmission.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MicrosoftIngestionApiModelsSubmissionsSubmission.


        :param id: The id of this MicrosoftIngestionApiModelsSubmissionsSubmission.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MicrosoftIngestionApiModelsSubmissionsSubmission, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MicrosoftIngestionApiModelsSubmissionsSubmission):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
