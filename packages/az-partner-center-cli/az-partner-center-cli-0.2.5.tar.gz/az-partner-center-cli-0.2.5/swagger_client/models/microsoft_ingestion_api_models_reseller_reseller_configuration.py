# coding: utf-8

"""
    https://api.partner.microsoft.com/v1.0/ingestion

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MicrosoftIngestionApiModelsResellerResellerConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'resource_type': 'str',
        'reseller_channel_state': 'str',
        'tenant_ids': 'list[str]'
    }

    attribute_map = {
        'resource_type': 'resourceType',
        'reseller_channel_state': 'resellerChannelState',
        'tenant_ids': 'tenantIds'
    }

    def __init__(self, resource_type=None, reseller_channel_state=None, tenant_ids=None):  # noqa: E501
        """MicrosoftIngestionApiModelsResellerResellerConfiguration - a model defined in Swagger"""  # noqa: E501
        self._resource_type = None
        self._reseller_channel_state = None
        self._tenant_ids = None
        self.discriminator = None
        if resource_type is not None:
            self.resource_type = resource_type
        if reseller_channel_state is not None:
            self.reseller_channel_state = reseller_channel_state
        if tenant_ids is not None:
            self.tenant_ids = tenant_ids

    @property
    def resource_type(self):
        """Gets the resource_type of this MicrosoftIngestionApiModelsResellerResellerConfiguration.  # noqa: E501


        :return: The resource_type of this MicrosoftIngestionApiModelsResellerResellerConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this MicrosoftIngestionApiModelsResellerResellerConfiguration.


        :param resource_type: The resource_type of this MicrosoftIngestionApiModelsResellerResellerConfiguration.  # noqa: E501
        :type: str
        """
        allowed_values = ["ResellerConfiguration"]  # noqa: E501
        if resource_type not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_type` ({0}), must be one of {1}"  # noqa: E501
                .format(resource_type, allowed_values)
            )

        self._resource_type = resource_type

    @property
    def reseller_channel_state(self):
        """Gets the reseller_channel_state of this MicrosoftIngestionApiModelsResellerResellerConfiguration.  # noqa: E501


        :return: The reseller_channel_state of this MicrosoftIngestionApiModelsResellerResellerConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._reseller_channel_state

    @reseller_channel_state.setter
    def reseller_channel_state(self, reseller_channel_state):
        """Sets the reseller_channel_state of this MicrosoftIngestionApiModelsResellerResellerConfiguration.


        :param reseller_channel_state: The reseller_channel_state of this MicrosoftIngestionApiModelsResellerResellerConfiguration.  # noqa: E501
        :type: str
        """
        allowed_values = ["Disabled", "PartialOptIn", "OptOut", "Enabled"]  # noqa: E501
        if reseller_channel_state not in allowed_values:
            raise ValueError(
                "Invalid value for `reseller_channel_state` ({0}), must be one of {1}"  # noqa: E501
                .format(reseller_channel_state, allowed_values)
            )

        self._reseller_channel_state = reseller_channel_state

    @property
    def tenant_ids(self):
        """Gets the tenant_ids of this MicrosoftIngestionApiModelsResellerResellerConfiguration.  # noqa: E501


        :return: The tenant_ids of this MicrosoftIngestionApiModelsResellerResellerConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._tenant_ids

    @tenant_ids.setter
    def tenant_ids(self, tenant_ids):
        """Sets the tenant_ids of this MicrosoftIngestionApiModelsResellerResellerConfiguration.


        :param tenant_ids: The tenant_ids of this MicrosoftIngestionApiModelsResellerResellerConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._tenant_ids = tenant_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MicrosoftIngestionApiModelsResellerResellerConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MicrosoftIngestionApiModelsResellerResellerConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
