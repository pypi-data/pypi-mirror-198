# coding: utf-8

"""
    https://api.partner.microsoft.com/v1.0/ingestion

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MicrosoftIngestionApiModelsAvailabilitiesTrial(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'duration_type': 'str',
        'duration': 'int',
        'date_time_range': 'MicrosoftIngestionApiModelsAvailabilitiesLocalizedDateTimeRange'
    }

    attribute_map = {
        'type': 'type',
        'duration_type': 'durationType',
        'duration': 'duration',
        'date_time_range': 'dateTimeRange'
    }

    def __init__(self, type=None, duration_type=None, duration=None, date_time_range=None):  # noqa: E501
        """MicrosoftIngestionApiModelsAvailabilitiesTrial - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._duration_type = None
        self._duration = None
        self._date_time_range = None
        self.discriminator = None
        if type is not None:
            self.type = type
        if duration_type is not None:
            self.duration_type = duration_type
        if duration is not None:
            self.duration = duration
        if date_time_range is not None:
            self.date_time_range = date_time_range

    @property
    def type(self):
        """Gets the type of this MicrosoftIngestionApiModelsAvailabilitiesTrial.  # noqa: E501


        :return: The type of this MicrosoftIngestionApiModelsAvailabilitiesTrial.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MicrosoftIngestionApiModelsAvailabilitiesTrial.


        :param type: The type of this MicrosoftIngestionApiModelsAvailabilitiesTrial.  # noqa: E501
        :type: str
        """
        allowed_values = ["NoTrial", "TimedAccess", "TimedUsage", "Unlimited"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def duration_type(self):
        """Gets the duration_type of this MicrosoftIngestionApiModelsAvailabilitiesTrial.  # noqa: E501


        :return: The duration_type of this MicrosoftIngestionApiModelsAvailabilitiesTrial.  # noqa: E501
        :rtype: str
        """
        return self._duration_type

    @duration_type.setter
    def duration_type(self, duration_type):
        """Sets the duration_type of this MicrosoftIngestionApiModelsAvailabilitiesTrial.


        :param duration_type: The duration_type of this MicrosoftIngestionApiModelsAvailabilitiesTrial.  # noqa: E501
        :type: str
        """
        allowed_values = ["Minute", "Days", "Months"]  # noqa: E501
        if duration_type not in allowed_values:
            raise ValueError(
                "Invalid value for `duration_type` ({0}), must be one of {1}"  # noqa: E501
                .format(duration_type, allowed_values)
            )

        self._duration_type = duration_type

    @property
    def duration(self):
        """Gets the duration of this MicrosoftIngestionApiModelsAvailabilitiesTrial.  # noqa: E501


        :return: The duration of this MicrosoftIngestionApiModelsAvailabilitiesTrial.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this MicrosoftIngestionApiModelsAvailabilitiesTrial.


        :param duration: The duration of this MicrosoftIngestionApiModelsAvailabilitiesTrial.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def date_time_range(self):
        """Gets the date_time_range of this MicrosoftIngestionApiModelsAvailabilitiesTrial.  # noqa: E501


        :return: The date_time_range of this MicrosoftIngestionApiModelsAvailabilitiesTrial.  # noqa: E501
        :rtype: MicrosoftIngestionApiModelsAvailabilitiesLocalizedDateTimeRange
        """
        return self._date_time_range

    @date_time_range.setter
    def date_time_range(self, date_time_range):
        """Sets the date_time_range of this MicrosoftIngestionApiModelsAvailabilitiesTrial.


        :param date_time_range: The date_time_range of this MicrosoftIngestionApiModelsAvailabilitiesTrial.  # noqa: E501
        :type: MicrosoftIngestionApiModelsAvailabilitiesLocalizedDateTimeRange
        """

        self._date_time_range = date_time_range

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MicrosoftIngestionApiModelsAvailabilitiesTrial, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MicrosoftIngestionApiModelsAvailabilitiesTrial):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
