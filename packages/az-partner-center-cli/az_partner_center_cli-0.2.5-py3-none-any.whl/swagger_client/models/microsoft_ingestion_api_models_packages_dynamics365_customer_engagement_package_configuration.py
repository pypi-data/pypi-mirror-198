# coding: utf-8

"""
    https://api.partner.microsoft.com/v1.0/ingestion

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.microsoft_ingestion_api_models_packages_base_package_configuration import MicrosoftIngestionApiModelsPackagesBasePackageConfiguration  # noqa: F401,E501

class MicrosoftIngestionApiModelsPackagesDynamics365CustomerEngagementPackageConfiguration(MicrosoftIngestionApiModelsPackagesBasePackageConfiguration):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'resource_type': 'str',
        'base_license_model': 'str',
        'require_s2_s_outbound_and_crm_secure_store_access': 'bool',
        'application_configuration_uri': 'str',
        'package_location_uri': 'str',
        'package_region_availabilities': 'list[MicrosoftIngestionApiModelsPackagesPackageRegionAvailability]',
        'multiple_packages_in_package_file': 'bool'
    }
    if hasattr(MicrosoftIngestionApiModelsPackagesBasePackageConfiguration, "swagger_types"):
        swagger_types.update(MicrosoftIngestionApiModelsPackagesBasePackageConfiguration.swagger_types)

    attribute_map = {
        'resource_type': 'resourceType',
        'base_license_model': 'baseLicenseModel',
        'require_s2_s_outbound_and_crm_secure_store_access': 'requireS2SOutboundAndCrmSecureStoreAccess',
        'application_configuration_uri': 'applicationConfigurationUri',
        'package_location_uri': 'packageLocationUri',
        'package_region_availabilities': 'packageRegionAvailabilities',
        'multiple_packages_in_package_file': 'multiplePackagesInPackageFile'
    }
    if hasattr(MicrosoftIngestionApiModelsPackagesBasePackageConfiguration, "attribute_map"):
        attribute_map.update(MicrosoftIngestionApiModelsPackagesBasePackageConfiguration.attribute_map)

    def __init__(self, resource_type=None, base_license_model=None, require_s2_s_outbound_and_crm_secure_store_access=None, application_configuration_uri=None, package_location_uri=None, package_region_availabilities=None, multiple_packages_in_package_file=None, *args, **kwargs):  # noqa: E501
        """MicrosoftIngestionApiModelsPackagesDynamics365CustomerEngagementPackageConfiguration - a model defined in Swagger"""  # noqa: E501
        self._resource_type = None
        self._base_license_model = None
        self._require_s2_s_outbound_and_crm_secure_store_access = None
        self._application_configuration_uri = None
        self._package_location_uri = None
        self._package_region_availabilities = None
        self._multiple_packages_in_package_file = None
        self.discriminator = None
        if resource_type is not None:
            self.resource_type = resource_type
        if base_license_model is not None:
            self.base_license_model = base_license_model
        if require_s2_s_outbound_and_crm_secure_store_access is not None:
            self.require_s2_s_outbound_and_crm_secure_store_access = require_s2_s_outbound_and_crm_secure_store_access
        if application_configuration_uri is not None:
            self.application_configuration_uri = application_configuration_uri
        if package_location_uri is not None:
            self.package_location_uri = package_location_uri
        if package_region_availabilities is not None:
            self.package_region_availabilities = package_region_availabilities
        if multiple_packages_in_package_file is not None:
            self.multiple_packages_in_package_file = multiple_packages_in_package_file
        MicrosoftIngestionApiModelsPackagesBasePackageConfiguration.__init__(self, *args, **kwargs)

    @property
    def resource_type(self):
        """Gets the resource_type of this MicrosoftIngestionApiModelsPackagesDynamics365CustomerEngagementPackageConfiguration.  # noqa: E501


        :return: The resource_type of this MicrosoftIngestionApiModelsPackagesDynamics365CustomerEngagementPackageConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this MicrosoftIngestionApiModelsPackagesDynamics365CustomerEngagementPackageConfiguration.


        :param resource_type: The resource_type of this MicrosoftIngestionApiModelsPackagesDynamics365CustomerEngagementPackageConfiguration.  # noqa: E501
        :type: str
        """
        allowed_values = ["Dynamics365CustomerEngagementPackageConfiguration"]  # noqa: E501
        if resource_type not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_type` ({0}), must be one of {1}"  # noqa: E501
                .format(resource_type, allowed_values)
            )

        self._resource_type = resource_type

    @property
    def base_license_model(self):
        """Gets the base_license_model of this MicrosoftIngestionApiModelsPackagesDynamics365CustomerEngagementPackageConfiguration.  # noqa: E501


        :return: The base_license_model of this MicrosoftIngestionApiModelsPackagesDynamics365CustomerEngagementPackageConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._base_license_model

    @base_license_model.setter
    def base_license_model(self, base_license_model):
        """Sets the base_license_model of this MicrosoftIngestionApiModelsPackagesDynamics365CustomerEngagementPackageConfiguration.


        :param base_license_model: The base_license_model of this MicrosoftIngestionApiModelsPackagesDynamics365CustomerEngagementPackageConfiguration.  # noqa: E501
        :type: str
        """
        allowed_values = ["Resource", "User"]  # noqa: E501
        if base_license_model not in allowed_values:
            raise ValueError(
                "Invalid value for `base_license_model` ({0}), must be one of {1}"  # noqa: E501
                .format(base_license_model, allowed_values)
            )

        self._base_license_model = base_license_model

    @property
    def require_s2_s_outbound_and_crm_secure_store_access(self):
        """Gets the require_s2_s_outbound_and_crm_secure_store_access of this MicrosoftIngestionApiModelsPackagesDynamics365CustomerEngagementPackageConfiguration.  # noqa: E501


        :return: The require_s2_s_outbound_and_crm_secure_store_access of this MicrosoftIngestionApiModelsPackagesDynamics365CustomerEngagementPackageConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._require_s2_s_outbound_and_crm_secure_store_access

    @require_s2_s_outbound_and_crm_secure_store_access.setter
    def require_s2_s_outbound_and_crm_secure_store_access(self, require_s2_s_outbound_and_crm_secure_store_access):
        """Sets the require_s2_s_outbound_and_crm_secure_store_access of this MicrosoftIngestionApiModelsPackagesDynamics365CustomerEngagementPackageConfiguration.


        :param require_s2_s_outbound_and_crm_secure_store_access: The require_s2_s_outbound_and_crm_secure_store_access of this MicrosoftIngestionApiModelsPackagesDynamics365CustomerEngagementPackageConfiguration.  # noqa: E501
        :type: bool
        """

        self._require_s2_s_outbound_and_crm_secure_store_access = require_s2_s_outbound_and_crm_secure_store_access

    @property
    def application_configuration_uri(self):
        """Gets the application_configuration_uri of this MicrosoftIngestionApiModelsPackagesDynamics365CustomerEngagementPackageConfiguration.  # noqa: E501


        :return: The application_configuration_uri of this MicrosoftIngestionApiModelsPackagesDynamics365CustomerEngagementPackageConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._application_configuration_uri

    @application_configuration_uri.setter
    def application_configuration_uri(self, application_configuration_uri):
        """Sets the application_configuration_uri of this MicrosoftIngestionApiModelsPackagesDynamics365CustomerEngagementPackageConfiguration.


        :param application_configuration_uri: The application_configuration_uri of this MicrosoftIngestionApiModelsPackagesDynamics365CustomerEngagementPackageConfiguration.  # noqa: E501
        :type: str
        """

        self._application_configuration_uri = application_configuration_uri

    @property
    def package_location_uri(self):
        """Gets the package_location_uri of this MicrosoftIngestionApiModelsPackagesDynamics365CustomerEngagementPackageConfiguration.  # noqa: E501


        :return: The package_location_uri of this MicrosoftIngestionApiModelsPackagesDynamics365CustomerEngagementPackageConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._package_location_uri

    @package_location_uri.setter
    def package_location_uri(self, package_location_uri):
        """Sets the package_location_uri of this MicrosoftIngestionApiModelsPackagesDynamics365CustomerEngagementPackageConfiguration.


        :param package_location_uri: The package_location_uri of this MicrosoftIngestionApiModelsPackagesDynamics365CustomerEngagementPackageConfiguration.  # noqa: E501
        :type: str
        """

        self._package_location_uri = package_location_uri

    @property
    def package_region_availabilities(self):
        """Gets the package_region_availabilities of this MicrosoftIngestionApiModelsPackagesDynamics365CustomerEngagementPackageConfiguration.  # noqa: E501


        :return: The package_region_availabilities of this MicrosoftIngestionApiModelsPackagesDynamics365CustomerEngagementPackageConfiguration.  # noqa: E501
        :rtype: list[MicrosoftIngestionApiModelsPackagesPackageRegionAvailability]
        """
        return self._package_region_availabilities

    @package_region_availabilities.setter
    def package_region_availabilities(self, package_region_availabilities):
        """Sets the package_region_availabilities of this MicrosoftIngestionApiModelsPackagesDynamics365CustomerEngagementPackageConfiguration.


        :param package_region_availabilities: The package_region_availabilities of this MicrosoftIngestionApiModelsPackagesDynamics365CustomerEngagementPackageConfiguration.  # noqa: E501
        :type: list[MicrosoftIngestionApiModelsPackagesPackageRegionAvailability]
        """

        self._package_region_availabilities = package_region_availabilities

    @property
    def multiple_packages_in_package_file(self):
        """Gets the multiple_packages_in_package_file of this MicrosoftIngestionApiModelsPackagesDynamics365CustomerEngagementPackageConfiguration.  # noqa: E501


        :return: The multiple_packages_in_package_file of this MicrosoftIngestionApiModelsPackagesDynamics365CustomerEngagementPackageConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._multiple_packages_in_package_file

    @multiple_packages_in_package_file.setter
    def multiple_packages_in_package_file(self, multiple_packages_in_package_file):
        """Sets the multiple_packages_in_package_file of this MicrosoftIngestionApiModelsPackagesDynamics365CustomerEngagementPackageConfiguration.


        :param multiple_packages_in_package_file: The multiple_packages_in_package_file of this MicrosoftIngestionApiModelsPackagesDynamics365CustomerEngagementPackageConfiguration.  # noqa: E501
        :type: bool
        """

        self._multiple_packages_in_package_file = multiple_packages_in_package_file

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MicrosoftIngestionApiModelsPackagesDynamics365CustomerEngagementPackageConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MicrosoftIngestionApiModelsPackagesDynamics365CustomerEngagementPackageConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
