# coding: utf-8

"""
    https://api.partner.microsoft.com/v1.0/ingestion

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.microsoft_ingestion_api_models_common_entity_resource import MicrosoftIngestionApiModelsCommonEntityResource  # noqa: F401,E501

class MicrosoftIngestionApiModelsListingsListingVideo(MicrosoftIngestionApiModelsCommonEntityResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'resource_type': 'str',
        'file_name': 'str',
        'file_sas_uri': 'str',
        'streaming_uri': 'str',
        'state': 'str',
        'thumbnail': 'MicrosoftIngestionApiModelsListingsListingVideoThumbnail'
    }
    if hasattr(MicrosoftIngestionApiModelsCommonEntityResource, "swagger_types"):
        swagger_types.update(MicrosoftIngestionApiModelsCommonEntityResource.swagger_types)

    attribute_map = {
        'resource_type': 'resourceType',
        'file_name': 'fileName',
        'file_sas_uri': 'fileSasUri',
        'streaming_uri': 'streamingUri',
        'state': 'state',
        'thumbnail': 'thumbnail'
    }
    if hasattr(MicrosoftIngestionApiModelsCommonEntityResource, "attribute_map"):
        attribute_map.update(MicrosoftIngestionApiModelsCommonEntityResource.attribute_map)

    def __init__(self, resource_type=None, file_name=None, file_sas_uri=None, streaming_uri=None, state=None, thumbnail=None, *args, **kwargs):  # noqa: E501
        """MicrosoftIngestionApiModelsListingsListingVideo - a model defined in Swagger"""  # noqa: E501
        self._resource_type = None
        self._file_name = None
        self._file_sas_uri = None
        self._streaming_uri = None
        self._state = None
        self._thumbnail = None
        self.discriminator = None
        if resource_type is not None:
            self.resource_type = resource_type
        if file_name is not None:
            self.file_name = file_name
        if file_sas_uri is not None:
            self.file_sas_uri = file_sas_uri
        if streaming_uri is not None:
            self.streaming_uri = streaming_uri
        if state is not None:
            self.state = state
        if thumbnail is not None:
            self.thumbnail = thumbnail
        MicrosoftIngestionApiModelsCommonEntityResource.__init__(self, *args, **kwargs)

    @property
    def resource_type(self):
        """Gets the resource_type of this MicrosoftIngestionApiModelsListingsListingVideo.  # noqa: E501


        :return: The resource_type of this MicrosoftIngestionApiModelsListingsListingVideo.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this MicrosoftIngestionApiModelsListingsListingVideo.


        :param resource_type: The resource_type of this MicrosoftIngestionApiModelsListingsListingVideo.  # noqa: E501
        :type: str
        """
        allowed_values = ["ListingVideo"]  # noqa: E501
        if resource_type not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_type` ({0}), must be one of {1}"  # noqa: E501
                .format(resource_type, allowed_values)
            )

        self._resource_type = resource_type

    @property
    def file_name(self):
        """Gets the file_name of this MicrosoftIngestionApiModelsListingsListingVideo.  # noqa: E501


        :return: The file_name of this MicrosoftIngestionApiModelsListingsListingVideo.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this MicrosoftIngestionApiModelsListingsListingVideo.


        :param file_name: The file_name of this MicrosoftIngestionApiModelsListingsListingVideo.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def file_sas_uri(self):
        """Gets the file_sas_uri of this MicrosoftIngestionApiModelsListingsListingVideo.  # noqa: E501


        :return: The file_sas_uri of this MicrosoftIngestionApiModelsListingsListingVideo.  # noqa: E501
        :rtype: str
        """
        return self._file_sas_uri

    @file_sas_uri.setter
    def file_sas_uri(self, file_sas_uri):
        """Sets the file_sas_uri of this MicrosoftIngestionApiModelsListingsListingVideo.


        :param file_sas_uri: The file_sas_uri of this MicrosoftIngestionApiModelsListingsListingVideo.  # noqa: E501
        :type: str
        """

        self._file_sas_uri = file_sas_uri

    @property
    def streaming_uri(self):
        """Gets the streaming_uri of this MicrosoftIngestionApiModelsListingsListingVideo.  # noqa: E501


        :return: The streaming_uri of this MicrosoftIngestionApiModelsListingsListingVideo.  # noqa: E501
        :rtype: str
        """
        return self._streaming_uri

    @streaming_uri.setter
    def streaming_uri(self, streaming_uri):
        """Sets the streaming_uri of this MicrosoftIngestionApiModelsListingsListingVideo.


        :param streaming_uri: The streaming_uri of this MicrosoftIngestionApiModelsListingsListingVideo.  # noqa: E501
        :type: str
        """

        self._streaming_uri = streaming_uri

    @property
    def state(self):
        """Gets the state of this MicrosoftIngestionApiModelsListingsListingVideo.  # noqa: E501


        :return: The state of this MicrosoftIngestionApiModelsListingsListingVideo.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this MicrosoftIngestionApiModelsListingsListingVideo.


        :param state: The state of this MicrosoftIngestionApiModelsListingsListingVideo.  # noqa: E501
        :type: str
        """
        allowed_values = ["PendingUpload", "Uploaded", "InProcessing", "Processed", "ProcessFailed"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def thumbnail(self):
        """Gets the thumbnail of this MicrosoftIngestionApiModelsListingsListingVideo.  # noqa: E501


        :return: The thumbnail of this MicrosoftIngestionApiModelsListingsListingVideo.  # noqa: E501
        :rtype: MicrosoftIngestionApiModelsListingsListingVideoThumbnail
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail):
        """Sets the thumbnail of this MicrosoftIngestionApiModelsListingsListingVideo.


        :param thumbnail: The thumbnail of this MicrosoftIngestionApiModelsListingsListingVideo.  # noqa: E501
        :type: MicrosoftIngestionApiModelsListingsListingVideoThumbnail
        """

        self._thumbnail = thumbnail

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MicrosoftIngestionApiModelsListingsListingVideo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MicrosoftIngestionApiModelsListingsListingVideo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
