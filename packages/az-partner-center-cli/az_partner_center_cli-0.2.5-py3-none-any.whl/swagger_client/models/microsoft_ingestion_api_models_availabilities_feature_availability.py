# coding: utf-8

"""
    https://api.partner.microsoft.com/v1.0/ingestion

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.microsoft_ingestion_api_models_common_entity_resource import MicrosoftIngestionApiModelsCommonEntityResource  # noqa: F401,E501

class MicrosoftIngestionApiModelsAvailabilitiesFeatureAvailability(MicrosoftIngestionApiModelsCommonEntityResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'resource_type': 'str',
        'visibility': 'str',
        'market_states': 'list[MicrosoftIngestionApiModelsAvailabilitiesMarketState]',
        'properties': 'list[MicrosoftIngestionApiModelsCommonTypeValuePair]',
        'trial': 'MicrosoftIngestionApiModelsAvailabilitiesTrial',
        'tenant_audiences': 'list[MicrosoftIngestionApiModelsAvailabilitiesAudienceMember]',
        'subscription_audiences': 'list[MicrosoftIngestionApiModelsAvailabilitiesAudienceMember]',
        'price_schedules': 'list[MicrosoftIngestionApiModelsAvailabilitiesScheduleInfoMicrosoftIngestionApiModelsAvailabilitiesPriceSchedule_]',
        'custom_meters': 'list[MicrosoftIngestionApiModelsAvailabilitiesCustomMeter]',
        'is_hidden': 'bool'
    }
    if hasattr(MicrosoftIngestionApiModelsCommonEntityResource, "swagger_types"):
        swagger_types.update(MicrosoftIngestionApiModelsCommonEntityResource.swagger_types)

    attribute_map = {
        'resource_type': 'resourceType',
        'visibility': 'visibility',
        'market_states': 'marketStates',
        'properties': 'properties',
        'trial': 'trial',
        'tenant_audiences': 'tenantAudiences',
        'subscription_audiences': 'subscriptionAudiences',
        'price_schedules': 'priceSchedules',
        'custom_meters': 'customMeters',
        'is_hidden': 'isHidden'
    }
    if hasattr(MicrosoftIngestionApiModelsCommonEntityResource, "attribute_map"):
        attribute_map.update(MicrosoftIngestionApiModelsCommonEntityResource.attribute_map)

    def __init__(self, resource_type=None, visibility=None, market_states=None, properties=None, trial=None, tenant_audiences=None, subscription_audiences=None, price_schedules=None, custom_meters=None, is_hidden=None, *args, **kwargs):  # noqa: E501
        """MicrosoftIngestionApiModelsAvailabilitiesFeatureAvailability - a model defined in Swagger"""  # noqa: E501
        self._resource_type = None
        self._visibility = None
        self._market_states = None
        self._properties = None
        self._trial = None
        self._tenant_audiences = None
        self._subscription_audiences = None
        self._price_schedules = None
        self._custom_meters = None
        self._is_hidden = None
        self.discriminator = None
        if resource_type is not None:
            self.resource_type = resource_type
        if visibility is not None:
            self.visibility = visibility
        if market_states is not None:
            self.market_states = market_states
        if properties is not None:
            self.properties = properties
        if trial is not None:
            self.trial = trial
        if tenant_audiences is not None:
            self.tenant_audiences = tenant_audiences
        if subscription_audiences is not None:
            self.subscription_audiences = subscription_audiences
        if price_schedules is not None:
            self.price_schedules = price_schedules
        if custom_meters is not None:
            self.custom_meters = custom_meters
        if is_hidden is not None:
            self.is_hidden = is_hidden
        MicrosoftIngestionApiModelsCommonEntityResource.__init__(self, *args, **kwargs)

    @property
    def resource_type(self):
        """Gets the resource_type of this MicrosoftIngestionApiModelsAvailabilitiesFeatureAvailability.  # noqa: E501


        :return: The resource_type of this MicrosoftIngestionApiModelsAvailabilitiesFeatureAvailability.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this MicrosoftIngestionApiModelsAvailabilitiesFeatureAvailability.


        :param resource_type: The resource_type of this MicrosoftIngestionApiModelsAvailabilitiesFeatureAvailability.  # noqa: E501
        :type: str
        """
        allowed_values = ["FeatureAvailability"]  # noqa: E501
        if resource_type not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_type` ({0}), must be one of {1}"  # noqa: E501
                .format(resource_type, allowed_values)
            )

        self._resource_type = resource_type

    @property
    def visibility(self):
        """Gets the visibility of this MicrosoftIngestionApiModelsAvailabilitiesFeatureAvailability.  # noqa: E501


        :return: The visibility of this MicrosoftIngestionApiModelsAvailabilitiesFeatureAvailability.  # noqa: E501
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this MicrosoftIngestionApiModelsAvailabilitiesFeatureAvailability.


        :param visibility: The visibility of this MicrosoftIngestionApiModelsAvailabilitiesFeatureAvailability.  # noqa: E501
        :type: str
        """
        allowed_values = ["Public", "Private"]  # noqa: E501
        if visibility not in allowed_values:
            raise ValueError(
                "Invalid value for `visibility` ({0}), must be one of {1}"  # noqa: E501
                .format(visibility, allowed_values)
            )

        self._visibility = visibility

    @property
    def market_states(self):
        """Gets the market_states of this MicrosoftIngestionApiModelsAvailabilitiesFeatureAvailability.  # noqa: E501


        :return: The market_states of this MicrosoftIngestionApiModelsAvailabilitiesFeatureAvailability.  # noqa: E501
        :rtype: list[MicrosoftIngestionApiModelsAvailabilitiesMarketState]
        """
        return self._market_states

    @market_states.setter
    def market_states(self, market_states):
        """Sets the market_states of this MicrosoftIngestionApiModelsAvailabilitiesFeatureAvailability.


        :param market_states: The market_states of this MicrosoftIngestionApiModelsAvailabilitiesFeatureAvailability.  # noqa: E501
        :type: list[MicrosoftIngestionApiModelsAvailabilitiesMarketState]
        """

        self._market_states = market_states

    @property
    def properties(self):
        """Gets the properties of this MicrosoftIngestionApiModelsAvailabilitiesFeatureAvailability.  # noqa: E501


        :return: The properties of this MicrosoftIngestionApiModelsAvailabilitiesFeatureAvailability.  # noqa: E501
        :rtype: list[MicrosoftIngestionApiModelsCommonTypeValuePair]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this MicrosoftIngestionApiModelsAvailabilitiesFeatureAvailability.


        :param properties: The properties of this MicrosoftIngestionApiModelsAvailabilitiesFeatureAvailability.  # noqa: E501
        :type: list[MicrosoftIngestionApiModelsCommonTypeValuePair]
        """

        self._properties = properties

    @property
    def trial(self):
        """Gets the trial of this MicrosoftIngestionApiModelsAvailabilitiesFeatureAvailability.  # noqa: E501


        :return: The trial of this MicrosoftIngestionApiModelsAvailabilitiesFeatureAvailability.  # noqa: E501
        :rtype: MicrosoftIngestionApiModelsAvailabilitiesTrial
        """
        return self._trial

    @trial.setter
    def trial(self, trial):
        """Sets the trial of this MicrosoftIngestionApiModelsAvailabilitiesFeatureAvailability.


        :param trial: The trial of this MicrosoftIngestionApiModelsAvailabilitiesFeatureAvailability.  # noqa: E501
        :type: MicrosoftIngestionApiModelsAvailabilitiesTrial
        """

        self._trial = trial

    @property
    def tenant_audiences(self):
        """Gets the tenant_audiences of this MicrosoftIngestionApiModelsAvailabilitiesFeatureAvailability.  # noqa: E501


        :return: The tenant_audiences of this MicrosoftIngestionApiModelsAvailabilitiesFeatureAvailability.  # noqa: E501
        :rtype: list[MicrosoftIngestionApiModelsAvailabilitiesAudienceMember]
        """
        return self._tenant_audiences

    @tenant_audiences.setter
    def tenant_audiences(self, tenant_audiences):
        """Sets the tenant_audiences of this MicrosoftIngestionApiModelsAvailabilitiesFeatureAvailability.


        :param tenant_audiences: The tenant_audiences of this MicrosoftIngestionApiModelsAvailabilitiesFeatureAvailability.  # noqa: E501
        :type: list[MicrosoftIngestionApiModelsAvailabilitiesAudienceMember]
        """

        self._tenant_audiences = tenant_audiences

    @property
    def subscription_audiences(self):
        """Gets the subscription_audiences of this MicrosoftIngestionApiModelsAvailabilitiesFeatureAvailability.  # noqa: E501


        :return: The subscription_audiences of this MicrosoftIngestionApiModelsAvailabilitiesFeatureAvailability.  # noqa: E501
        :rtype: list[MicrosoftIngestionApiModelsAvailabilitiesAudienceMember]
        """
        return self._subscription_audiences

    @subscription_audiences.setter
    def subscription_audiences(self, subscription_audiences):
        """Sets the subscription_audiences of this MicrosoftIngestionApiModelsAvailabilitiesFeatureAvailability.


        :param subscription_audiences: The subscription_audiences of this MicrosoftIngestionApiModelsAvailabilitiesFeatureAvailability.  # noqa: E501
        :type: list[MicrosoftIngestionApiModelsAvailabilitiesAudienceMember]
        """

        self._subscription_audiences = subscription_audiences

    @property
    def price_schedules(self):
        """Gets the price_schedules of this MicrosoftIngestionApiModelsAvailabilitiesFeatureAvailability.  # noqa: E501


        :return: The price_schedules of this MicrosoftIngestionApiModelsAvailabilitiesFeatureAvailability.  # noqa: E501
        :rtype: list[MicrosoftIngestionApiModelsAvailabilitiesScheduleInfoMicrosoftIngestionApiModelsAvailabilitiesPriceSchedule_]
        """
        return self._price_schedules

    @price_schedules.setter
    def price_schedules(self, price_schedules):
        """Sets the price_schedules of this MicrosoftIngestionApiModelsAvailabilitiesFeatureAvailability.


        :param price_schedules: The price_schedules of this MicrosoftIngestionApiModelsAvailabilitiesFeatureAvailability.  # noqa: E501
        :type: list[MicrosoftIngestionApiModelsAvailabilitiesScheduleInfoMicrosoftIngestionApiModelsAvailabilitiesPriceSchedule_]
        """

        self._price_schedules = price_schedules

    @property
    def custom_meters(self):
        """Gets the custom_meters of this MicrosoftIngestionApiModelsAvailabilitiesFeatureAvailability.  # noqa: E501


        :return: The custom_meters of this MicrosoftIngestionApiModelsAvailabilitiesFeatureAvailability.  # noqa: E501
        :rtype: list[MicrosoftIngestionApiModelsAvailabilitiesCustomMeter]
        """
        return self._custom_meters

    @custom_meters.setter
    def custom_meters(self, custom_meters):
        """Sets the custom_meters of this MicrosoftIngestionApiModelsAvailabilitiesFeatureAvailability.


        :param custom_meters: The custom_meters of this MicrosoftIngestionApiModelsAvailabilitiesFeatureAvailability.  # noqa: E501
        :type: list[MicrosoftIngestionApiModelsAvailabilitiesCustomMeter]
        """

        self._custom_meters = custom_meters

    @property
    def is_hidden(self):
        """Gets the is_hidden of this MicrosoftIngestionApiModelsAvailabilitiesFeatureAvailability.  # noqa: E501


        :return: The is_hidden of this MicrosoftIngestionApiModelsAvailabilitiesFeatureAvailability.  # noqa: E501
        :rtype: bool
        """
        return self._is_hidden

    @is_hidden.setter
    def is_hidden(self, is_hidden):
        """Sets the is_hidden of this MicrosoftIngestionApiModelsAvailabilitiesFeatureAvailability.


        :param is_hidden: The is_hidden of this MicrosoftIngestionApiModelsAvailabilitiesFeatureAvailability.  # noqa: E501
        :type: bool
        """

        self._is_hidden = is_hidden

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MicrosoftIngestionApiModelsAvailabilitiesFeatureAvailability, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MicrosoftIngestionApiModelsAvailabilitiesFeatureAvailability):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
