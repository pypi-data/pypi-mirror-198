# coding: utf-8

"""
    https://api.partner.microsoft.com/v1.0/ingestion

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.microsoft_ingestion_api_models_common_identified_resource import MicrosoftIngestionApiModelsCommonIdentifiedResource  # noqa: F401,E501

class MicrosoftIngestionApiModelsBranchesBranch(MicrosoftIngestionApiModelsCommonIdentifiedResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'resource_type': 'str',
        'friendly_name': 'str',
        'type': 'str',
        'module': 'str',
        'current_draft_instance_id': 'str',
        'variant_id': 'str'
    }
    if hasattr(MicrosoftIngestionApiModelsCommonIdentifiedResource, "swagger_types"):
        swagger_types.update(MicrosoftIngestionApiModelsCommonIdentifiedResource.swagger_types)

    attribute_map = {
        'resource_type': 'resourceType',
        'friendly_name': 'friendlyName',
        'type': 'type',
        'module': 'module',
        'current_draft_instance_id': 'currentDraftInstanceID',
        'variant_id': 'variantID'
    }
    if hasattr(MicrosoftIngestionApiModelsCommonIdentifiedResource, "attribute_map"):
        attribute_map.update(MicrosoftIngestionApiModelsCommonIdentifiedResource.attribute_map)

    def __init__(self, resource_type=None, friendly_name=None, type=None, module=None, current_draft_instance_id=None, variant_id=None, *args, **kwargs):  # noqa: E501
        """MicrosoftIngestionApiModelsBranchesBranch - a model defined in Swagger"""  # noqa: E501
        self._resource_type = None
        self._friendly_name = None
        self._type = None
        self._module = None
        self._current_draft_instance_id = None
        self._variant_id = None
        self.discriminator = None
        if resource_type is not None:
            self.resource_type = resource_type
        if friendly_name is not None:
            self.friendly_name = friendly_name
        if type is not None:
            self.type = type
        if module is not None:
            self.module = module
        if current_draft_instance_id is not None:
            self.current_draft_instance_id = current_draft_instance_id
        if variant_id is not None:
            self.variant_id = variant_id
        MicrosoftIngestionApiModelsCommonIdentifiedResource.__init__(self, *args, **kwargs)

    @property
    def resource_type(self):
        """Gets the resource_type of this MicrosoftIngestionApiModelsBranchesBranch.  # noqa: E501


        :return: The resource_type of this MicrosoftIngestionApiModelsBranchesBranch.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this MicrosoftIngestionApiModelsBranchesBranch.


        :param resource_type: The resource_type of this MicrosoftIngestionApiModelsBranchesBranch.  # noqa: E501
        :type: str
        """
        allowed_values = ["Branch"]  # noqa: E501
        if resource_type not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_type` ({0}), must be one of {1}"  # noqa: E501
                .format(resource_type, allowed_values)
            )

        self._resource_type = resource_type

    @property
    def friendly_name(self):
        """Gets the friendly_name of this MicrosoftIngestionApiModelsBranchesBranch.  # noqa: E501


        :return: The friendly_name of this MicrosoftIngestionApiModelsBranchesBranch.  # noqa: E501
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this MicrosoftIngestionApiModelsBranchesBranch.


        :param friendly_name: The friendly_name of this MicrosoftIngestionApiModelsBranchesBranch.  # noqa: E501
        :type: str
        """

        self._friendly_name = friendly_name

    @property
    def type(self):
        """Gets the type of this MicrosoftIngestionApiModelsBranchesBranch.  # noqa: E501


        :return: The type of this MicrosoftIngestionApiModelsBranchesBranch.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MicrosoftIngestionApiModelsBranchesBranch.


        :param type: The type of this MicrosoftIngestionApiModelsBranchesBranch.  # noqa: E501
        :type: str
        """
        allowed_values = ["Main", "Private"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def module(self):
        """Gets the module of this MicrosoftIngestionApiModelsBranchesBranch.  # noqa: E501


        :return: The module of this MicrosoftIngestionApiModelsBranchesBranch.  # noqa: E501
        :rtype: str
        """
        return self._module

    @module.setter
    def module(self, module):
        """Sets the module of this MicrosoftIngestionApiModelsBranchesBranch.


        :param module: The module of this MicrosoftIngestionApiModelsBranchesBranch.  # noqa: E501
        :type: str
        """
        allowed_values = ["Listing", "Property", "Package", "Availability", "SupplementalContent", "Cosell"]  # noqa: E501
        if module not in allowed_values:
            raise ValueError(
                "Invalid value for `module` ({0}), must be one of {1}"  # noqa: E501
                .format(module, allowed_values)
            )

        self._module = module

    @property
    def current_draft_instance_id(self):
        """Gets the current_draft_instance_id of this MicrosoftIngestionApiModelsBranchesBranch.  # noqa: E501


        :return: The current_draft_instance_id of this MicrosoftIngestionApiModelsBranchesBranch.  # noqa: E501
        :rtype: str
        """
        return self._current_draft_instance_id

    @current_draft_instance_id.setter
    def current_draft_instance_id(self, current_draft_instance_id):
        """Sets the current_draft_instance_id of this MicrosoftIngestionApiModelsBranchesBranch.


        :param current_draft_instance_id: The current_draft_instance_id of this MicrosoftIngestionApiModelsBranchesBranch.  # noqa: E501
        :type: str
        """

        self._current_draft_instance_id = current_draft_instance_id

    @property
    def variant_id(self):
        """Gets the variant_id of this MicrosoftIngestionApiModelsBranchesBranch.  # noqa: E501


        :return: The variant_id of this MicrosoftIngestionApiModelsBranchesBranch.  # noqa: E501
        :rtype: str
        """
        return self._variant_id

    @variant_id.setter
    def variant_id(self, variant_id):
        """Sets the variant_id of this MicrosoftIngestionApiModelsBranchesBranch.


        :param variant_id: The variant_id of this MicrosoftIngestionApiModelsBranchesBranch.  # noqa: E501
        :type: str
        """

        self._variant_id = variant_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MicrosoftIngestionApiModelsBranchesBranch, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MicrosoftIngestionApiModelsBranchesBranch):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
