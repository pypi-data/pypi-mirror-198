# coding: utf-8

"""
    https://api.partner.microsoft.com/v1.0/ingestion

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.microsoft_ingestion_api_models_common_entity_resource import MicrosoftIngestionApiModelsCommonEntityResource  # noqa: F401,E501

class MicrosoftIngestionApiModelsCosellCosellListing(MicrosoftIngestionApiModelsCommonEntityResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'resource_type': 'str',
        'offer_platforms': 'list[str]',
        'end_customer_segments': 'list[str]',
        'offer_type': 'str',
        'solution_areas': 'list[MicrosoftIngestionApiModelsCosellCosellSolutionArea]',
        'contacts': 'list[MicrosoftIngestionApiModelsCosellCosellContact]',
        'asset_references': 'list[MicrosoftIngestionApiModelsCommonTypeValuePair]'
    }
    if hasattr(MicrosoftIngestionApiModelsCommonEntityResource, "swagger_types"):
        swagger_types.update(MicrosoftIngestionApiModelsCommonEntityResource.swagger_types)

    attribute_map = {
        'resource_type': 'resourceType',
        'offer_platforms': 'offerPlatforms',
        'end_customer_segments': 'endCustomerSegments',
        'offer_type': 'offerType',
        'solution_areas': 'solutionAreas',
        'contacts': 'contacts',
        'asset_references': 'assetReferences'
    }
    if hasattr(MicrosoftIngestionApiModelsCommonEntityResource, "attribute_map"):
        attribute_map.update(MicrosoftIngestionApiModelsCommonEntityResource.attribute_map)

    def __init__(self, resource_type=None, offer_platforms=None, end_customer_segments=None, offer_type=None, solution_areas=None, contacts=None, asset_references=None, *args, **kwargs):  # noqa: E501
        """MicrosoftIngestionApiModelsCosellCosellListing - a model defined in Swagger"""  # noqa: E501
        self._resource_type = None
        self._offer_platforms = None
        self._end_customer_segments = None
        self._offer_type = None
        self._solution_areas = None
        self._contacts = None
        self._asset_references = None
        self.discriminator = None
        if resource_type is not None:
            self.resource_type = resource_type
        if offer_platforms is not None:
            self.offer_platforms = offer_platforms
        if end_customer_segments is not None:
            self.end_customer_segments = end_customer_segments
        if offer_type is not None:
            self.offer_type = offer_type
        if solution_areas is not None:
            self.solution_areas = solution_areas
        if contacts is not None:
            self.contacts = contacts
        if asset_references is not None:
            self.asset_references = asset_references
        MicrosoftIngestionApiModelsCommonEntityResource.__init__(self, *args, **kwargs)

    @property
    def resource_type(self):
        """Gets the resource_type of this MicrosoftIngestionApiModelsCosellCosellListing.  # noqa: E501


        :return: The resource_type of this MicrosoftIngestionApiModelsCosellCosellListing.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this MicrosoftIngestionApiModelsCosellCosellListing.


        :param resource_type: The resource_type of this MicrosoftIngestionApiModelsCosellCosellListing.  # noqa: E501
        :type: str
        """
        allowed_values = ["CosellListing"]  # noqa: E501
        if resource_type not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_type` ({0}), must be one of {1}"  # noqa: E501
                .format(resource_type, allowed_values)
            )

        self._resource_type = resource_type

    @property
    def offer_platforms(self):
        """Gets the offer_platforms of this MicrosoftIngestionApiModelsCosellCosellListing.  # noqa: E501


        :return: The offer_platforms of this MicrosoftIngestionApiModelsCosellCosellListing.  # noqa: E501
        :rtype: list[str]
        """
        return self._offer_platforms

    @offer_platforms.setter
    def offer_platforms(self, offer_platforms):
        """Sets the offer_platforms of this MicrosoftIngestionApiModelsCosellCosellListing.


        :param offer_platforms: The offer_platforms of this MicrosoftIngestionApiModelsCosellCosellListing.  # noqa: E501
        :type: list[str]
        """

        self._offer_platforms = offer_platforms

    @property
    def end_customer_segments(self):
        """Gets the end_customer_segments of this MicrosoftIngestionApiModelsCosellCosellListing.  # noqa: E501


        :return: The end_customer_segments of this MicrosoftIngestionApiModelsCosellCosellListing.  # noqa: E501
        :rtype: list[str]
        """
        return self._end_customer_segments

    @end_customer_segments.setter
    def end_customer_segments(self, end_customer_segments):
        """Sets the end_customer_segments of this MicrosoftIngestionApiModelsCosellCosellListing.


        :param end_customer_segments: The end_customer_segments of this MicrosoftIngestionApiModelsCosellCosellListing.  # noqa: E501
        :type: list[str]
        """

        self._end_customer_segments = end_customer_segments

    @property
    def offer_type(self):
        """Gets the offer_type of this MicrosoftIngestionApiModelsCosellCosellListing.  # noqa: E501


        :return: The offer_type of this MicrosoftIngestionApiModelsCosellCosellListing.  # noqa: E501
        :rtype: str
        """
        return self._offer_type

    @offer_type.setter
    def offer_type(self, offer_type):
        """Sets the offer_type of this MicrosoftIngestionApiModelsCosellCosellListing.


        :param offer_type: The offer_type of this MicrosoftIngestionApiModelsCosellCosellListing.  # noqa: E501
        :type: str
        """

        self._offer_type = offer_type

    @property
    def solution_areas(self):
        """Gets the solution_areas of this MicrosoftIngestionApiModelsCosellCosellListing.  # noqa: E501


        :return: The solution_areas of this MicrosoftIngestionApiModelsCosellCosellListing.  # noqa: E501
        :rtype: list[MicrosoftIngestionApiModelsCosellCosellSolutionArea]
        """
        return self._solution_areas

    @solution_areas.setter
    def solution_areas(self, solution_areas):
        """Sets the solution_areas of this MicrosoftIngestionApiModelsCosellCosellListing.


        :param solution_areas: The solution_areas of this MicrosoftIngestionApiModelsCosellCosellListing.  # noqa: E501
        :type: list[MicrosoftIngestionApiModelsCosellCosellSolutionArea]
        """

        self._solution_areas = solution_areas

    @property
    def contacts(self):
        """Gets the contacts of this MicrosoftIngestionApiModelsCosellCosellListing.  # noqa: E501


        :return: The contacts of this MicrosoftIngestionApiModelsCosellCosellListing.  # noqa: E501
        :rtype: list[MicrosoftIngestionApiModelsCosellCosellContact]
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """Sets the contacts of this MicrosoftIngestionApiModelsCosellCosellListing.


        :param contacts: The contacts of this MicrosoftIngestionApiModelsCosellCosellListing.  # noqa: E501
        :type: list[MicrosoftIngestionApiModelsCosellCosellContact]
        """

        self._contacts = contacts

    @property
    def asset_references(self):
        """Gets the asset_references of this MicrosoftIngestionApiModelsCosellCosellListing.  # noqa: E501


        :return: The asset_references of this MicrosoftIngestionApiModelsCosellCosellListing.  # noqa: E501
        :rtype: list[MicrosoftIngestionApiModelsCommonTypeValuePair]
        """
        return self._asset_references

    @asset_references.setter
    def asset_references(self, asset_references):
        """Sets the asset_references of this MicrosoftIngestionApiModelsCosellCosellListing.


        :param asset_references: The asset_references of this MicrosoftIngestionApiModelsCosellCosellListing.  # noqa: E501
        :type: list[MicrosoftIngestionApiModelsCommonTypeValuePair]
        """

        self._asset_references = asset_references

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MicrosoftIngestionApiModelsCosellCosellListing, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MicrosoftIngestionApiModelsCosellCosellListing):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
