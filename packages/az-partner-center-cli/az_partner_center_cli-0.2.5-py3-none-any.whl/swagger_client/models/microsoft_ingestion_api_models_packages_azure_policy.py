# coding: utf-8

"""
    https://api.partner.microsoft.com/v1.0/ingestion

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MicrosoftIngestionApiModelsPackagesAzurePolicy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'policy_name': 'str',
        'policy_definition_id': 'str',
        'policy_parameters': 'str',
        'policy_sku': 'str'
    }

    attribute_map = {
        'policy_name': 'policyName',
        'policy_definition_id': 'policyDefinitionID',
        'policy_parameters': 'policyParameters',
        'policy_sku': 'policySku'
    }

    def __init__(self, policy_name=None, policy_definition_id=None, policy_parameters=None, policy_sku=None):  # noqa: E501
        """MicrosoftIngestionApiModelsPackagesAzurePolicy - a model defined in Swagger"""  # noqa: E501
        self._policy_name = None
        self._policy_definition_id = None
        self._policy_parameters = None
        self._policy_sku = None
        self.discriminator = None
        if policy_name is not None:
            self.policy_name = policy_name
        if policy_definition_id is not None:
            self.policy_definition_id = policy_definition_id
        if policy_parameters is not None:
            self.policy_parameters = policy_parameters
        if policy_sku is not None:
            self.policy_sku = policy_sku

    @property
    def policy_name(self):
        """Gets the policy_name of this MicrosoftIngestionApiModelsPackagesAzurePolicy.  # noqa: E501


        :return: The policy_name of this MicrosoftIngestionApiModelsPackagesAzurePolicy.  # noqa: E501
        :rtype: str
        """
        return self._policy_name

    @policy_name.setter
    def policy_name(self, policy_name):
        """Sets the policy_name of this MicrosoftIngestionApiModelsPackagesAzurePolicy.


        :param policy_name: The policy_name of this MicrosoftIngestionApiModelsPackagesAzurePolicy.  # noqa: E501
        :type: str
        """

        self._policy_name = policy_name

    @property
    def policy_definition_id(self):
        """Gets the policy_definition_id of this MicrosoftIngestionApiModelsPackagesAzurePolicy.  # noqa: E501


        :return: The policy_definition_id of this MicrosoftIngestionApiModelsPackagesAzurePolicy.  # noqa: E501
        :rtype: str
        """
        return self._policy_definition_id

    @policy_definition_id.setter
    def policy_definition_id(self, policy_definition_id):
        """Sets the policy_definition_id of this MicrosoftIngestionApiModelsPackagesAzurePolicy.


        :param policy_definition_id: The policy_definition_id of this MicrosoftIngestionApiModelsPackagesAzurePolicy.  # noqa: E501
        :type: str
        """

        self._policy_definition_id = policy_definition_id

    @property
    def policy_parameters(self):
        """Gets the policy_parameters of this MicrosoftIngestionApiModelsPackagesAzurePolicy.  # noqa: E501


        :return: The policy_parameters of this MicrosoftIngestionApiModelsPackagesAzurePolicy.  # noqa: E501
        :rtype: str
        """
        return self._policy_parameters

    @policy_parameters.setter
    def policy_parameters(self, policy_parameters):
        """Sets the policy_parameters of this MicrosoftIngestionApiModelsPackagesAzurePolicy.


        :param policy_parameters: The policy_parameters of this MicrosoftIngestionApiModelsPackagesAzurePolicy.  # noqa: E501
        :type: str
        """

        self._policy_parameters = policy_parameters

    @property
    def policy_sku(self):
        """Gets the policy_sku of this MicrosoftIngestionApiModelsPackagesAzurePolicy.  # noqa: E501


        :return: The policy_sku of this MicrosoftIngestionApiModelsPackagesAzurePolicy.  # noqa: E501
        :rtype: str
        """
        return self._policy_sku

    @policy_sku.setter
    def policy_sku(self, policy_sku):
        """Sets the policy_sku of this MicrosoftIngestionApiModelsPackagesAzurePolicy.


        :param policy_sku: The policy_sku of this MicrosoftIngestionApiModelsPackagesAzurePolicy.  # noqa: E501
        :type: str
        """

        self._policy_sku = policy_sku

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MicrosoftIngestionApiModelsPackagesAzurePolicy, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MicrosoftIngestionApiModelsPackagesAzurePolicy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
