# coding: utf-8

"""
    https://api.partner.microsoft.com/v1.0/ingestion

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.microsoft_ingestion_api_models_common_entity_resource import MicrosoftIngestionApiModelsCommonEntityResource  # noqa: F401,E501

class MicrosoftIngestionApiModelsListingsBaseListing(MicrosoftIngestionApiModelsCommonEntityResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'language_code': 'str',
        'title': 'str',
        'description': 'str',
        'short_description': 'str',
        'publisher_name': 'str',
        'keywords': 'list[str]'
    }
    if hasattr(MicrosoftIngestionApiModelsCommonEntityResource, "swagger_types"):
        swagger_types.update(MicrosoftIngestionApiModelsCommonEntityResource.swagger_types)

    attribute_map = {
        'language_code': 'languageCode',
        'title': 'title',
        'description': 'description',
        'short_description': 'shortDescription',
        'publisher_name': 'publisherName',
        'keywords': 'keywords'
    }
    if hasattr(MicrosoftIngestionApiModelsCommonEntityResource, "attribute_map"):
        attribute_map.update(MicrosoftIngestionApiModelsCommonEntityResource.attribute_map)

    def __init__(self, language_code=None, title=None, description=None, short_description=None, publisher_name=None, keywords=None, *args, **kwargs):  # noqa: E501
        """MicrosoftIngestionApiModelsListingsBaseListing - a model defined in Swagger"""  # noqa: E501
        self._language_code = None
        self._title = None
        self._description = None
        self._short_description = None
        self._publisher_name = None
        self._keywords = None
        self.discriminator = None
        if language_code is not None:
            self.language_code = language_code
        if title is not None:
            self.title = title
        if description is not None:
            self.description = description
        if short_description is not None:
            self.short_description = short_description
        if publisher_name is not None:
            self.publisher_name = publisher_name
        if keywords is not None:
            self.keywords = keywords
        MicrosoftIngestionApiModelsCommonEntityResource.__init__(self, *args, **kwargs)

    @property
    def language_code(self):
        """Gets the language_code of this MicrosoftIngestionApiModelsListingsBaseListing.  # noqa: E501


        :return: The language_code of this MicrosoftIngestionApiModelsListingsBaseListing.  # noqa: E501
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this MicrosoftIngestionApiModelsListingsBaseListing.


        :param language_code: The language_code of this MicrosoftIngestionApiModelsListingsBaseListing.  # noqa: E501
        :type: str
        """

        self._language_code = language_code

    @property
    def title(self):
        """Gets the title of this MicrosoftIngestionApiModelsListingsBaseListing.  # noqa: E501


        :return: The title of this MicrosoftIngestionApiModelsListingsBaseListing.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this MicrosoftIngestionApiModelsListingsBaseListing.


        :param title: The title of this MicrosoftIngestionApiModelsListingsBaseListing.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this MicrosoftIngestionApiModelsListingsBaseListing.  # noqa: E501


        :return: The description of this MicrosoftIngestionApiModelsListingsBaseListing.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MicrosoftIngestionApiModelsListingsBaseListing.


        :param description: The description of this MicrosoftIngestionApiModelsListingsBaseListing.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def short_description(self):
        """Gets the short_description of this MicrosoftIngestionApiModelsListingsBaseListing.  # noqa: E501


        :return: The short_description of this MicrosoftIngestionApiModelsListingsBaseListing.  # noqa: E501
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this MicrosoftIngestionApiModelsListingsBaseListing.


        :param short_description: The short_description of this MicrosoftIngestionApiModelsListingsBaseListing.  # noqa: E501
        :type: str
        """

        self._short_description = short_description

    @property
    def publisher_name(self):
        """Gets the publisher_name of this MicrosoftIngestionApiModelsListingsBaseListing.  # noqa: E501


        :return: The publisher_name of this MicrosoftIngestionApiModelsListingsBaseListing.  # noqa: E501
        :rtype: str
        """
        return self._publisher_name

    @publisher_name.setter
    def publisher_name(self, publisher_name):
        """Sets the publisher_name of this MicrosoftIngestionApiModelsListingsBaseListing.


        :param publisher_name: The publisher_name of this MicrosoftIngestionApiModelsListingsBaseListing.  # noqa: E501
        :type: str
        """

        self._publisher_name = publisher_name

    @property
    def keywords(self):
        """Gets the keywords of this MicrosoftIngestionApiModelsListingsBaseListing.  # noqa: E501


        :return: The keywords of this MicrosoftIngestionApiModelsListingsBaseListing.  # noqa: E501
        :rtype: list[str]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this MicrosoftIngestionApiModelsListingsBaseListing.


        :param keywords: The keywords of this MicrosoftIngestionApiModelsListingsBaseListing.  # noqa: E501
        :type: list[str]
        """

        self._keywords = keywords

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MicrosoftIngestionApiModelsListingsBaseListing, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MicrosoftIngestionApiModelsListingsBaseListing):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
