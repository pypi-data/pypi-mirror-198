# coding: utf-8

"""
    https://api.partner.microsoft.com/v1.0/ingestion

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.microsoft_ingestion_api_models_properties_base_property import MicrosoftIngestionApiModelsPropertiesBaseProperty  # noqa: F401,E501

class MicrosoftIngestionApiModelsPropertiesAzureProperty(MicrosoftIngestionApiModelsPropertiesBaseProperty):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'resource_type': 'str',
        'industries': 'list[str]',
        'leveled_categories': 'MicrosoftIngestionApiModelsPropertiesAzurePropertyLeveledCategories',
        'categories': 'list[str]',
        'additional_categories': 'list[str]',
        'submission_version': 'str',
        'hide_keys': 'list[str]',
        'product_tags': 'list[str]',
        'app_version': 'str',
        'use_enterprise_contract': 'bool',
        'terms_of_use': 'str',
        'marketing_only_change': 'bool',
        'global_amendment_terms': 'str',
        'custom_amendments': 'list[MicrosoftIngestionApiModelsPropertiesCustomAmendment]'
    }
    if hasattr(MicrosoftIngestionApiModelsPropertiesBaseProperty, "swagger_types"):
        swagger_types.update(MicrosoftIngestionApiModelsPropertiesBaseProperty.swagger_types)

    attribute_map = {
        'resource_type': 'resourceType',
        'industries': 'industries',
        'leveled_categories': 'leveledCategories',
        'categories': 'categories',
        'additional_categories': 'additionalCategories',
        'submission_version': 'submissionVersion',
        'hide_keys': 'hideKeys',
        'product_tags': 'productTags',
        'app_version': 'appVersion',
        'use_enterprise_contract': 'useEnterpriseContract',
        'terms_of_use': 'termsOfUse',
        'marketing_only_change': 'marketingOnlyChange',
        'global_amendment_terms': 'globalAmendmentTerms',
        'custom_amendments': 'customAmendments'
    }
    if hasattr(MicrosoftIngestionApiModelsPropertiesBaseProperty, "attribute_map"):
        attribute_map.update(MicrosoftIngestionApiModelsPropertiesBaseProperty.attribute_map)

    def __init__(self, resource_type=None, industries=None, leveled_categories=None, categories=None, additional_categories=None, submission_version=None, hide_keys=None, product_tags=None, app_version=None, use_enterprise_contract=None, terms_of_use=None, marketing_only_change=None, global_amendment_terms=None, custom_amendments=None, *args, **kwargs):  # noqa: E501
        """MicrosoftIngestionApiModelsPropertiesAzureProperty - a model defined in Swagger"""  # noqa: E501
        self._resource_type = None
        self._industries = None
        self._leveled_categories = None
        self._categories = None
        self._additional_categories = None
        self._submission_version = None
        self._hide_keys = None
        self._product_tags = None
        self._app_version = None
        self._use_enterprise_contract = None
        self._terms_of_use = None
        self._marketing_only_change = None
        self._global_amendment_terms = None
        self._custom_amendments = None
        self.discriminator = None
        if resource_type is not None:
            self.resource_type = resource_type
        if industries is not None:
            self.industries = industries
        if leveled_categories is not None:
            self.leveled_categories = leveled_categories
        if categories is not None:
            self.categories = categories
        if additional_categories is not None:
            self.additional_categories = additional_categories
        if submission_version is not None:
            self.submission_version = submission_version
        if hide_keys is not None:
            self.hide_keys = hide_keys
        if product_tags is not None:
            self.product_tags = product_tags
        if app_version is not None:
            self.app_version = app_version
        if use_enterprise_contract is not None:
            self.use_enterprise_contract = use_enterprise_contract
        if terms_of_use is not None:
            self.terms_of_use = terms_of_use
        if marketing_only_change is not None:
            self.marketing_only_change = marketing_only_change
        if global_amendment_terms is not None:
            self.global_amendment_terms = global_amendment_terms
        if custom_amendments is not None:
            self.custom_amendments = custom_amendments
        MicrosoftIngestionApiModelsPropertiesBaseProperty.__init__(self, *args, **kwargs)

    @property
    def resource_type(self):
        """Gets the resource_type of this MicrosoftIngestionApiModelsPropertiesAzureProperty.  # noqa: E501


        :return: The resource_type of this MicrosoftIngestionApiModelsPropertiesAzureProperty.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this MicrosoftIngestionApiModelsPropertiesAzureProperty.


        :param resource_type: The resource_type of this MicrosoftIngestionApiModelsPropertiesAzureProperty.  # noqa: E501
        :type: str
        """
        allowed_values = ["AzureProperty"]  # noqa: E501
        if resource_type not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_type` ({0}), must be one of {1}"  # noqa: E501
                .format(resource_type, allowed_values)
            )

        self._resource_type = resource_type

    @property
    def industries(self):
        """Gets the industries of this MicrosoftIngestionApiModelsPropertiesAzureProperty.  # noqa: E501


        :return: The industries of this MicrosoftIngestionApiModelsPropertiesAzureProperty.  # noqa: E501
        :rtype: list[str]
        """
        return self._industries

    @industries.setter
    def industries(self, industries):
        """Sets the industries of this MicrosoftIngestionApiModelsPropertiesAzureProperty.


        :param industries: The industries of this MicrosoftIngestionApiModelsPropertiesAzureProperty.  # noqa: E501
        :type: list[str]
        """

        self._industries = industries

    @property
    def leveled_categories(self):
        """Gets the leveled_categories of this MicrosoftIngestionApiModelsPropertiesAzureProperty.  # noqa: E501


        :return: The leveled_categories of this MicrosoftIngestionApiModelsPropertiesAzureProperty.  # noqa: E501
        :rtype: MicrosoftIngestionApiModelsPropertiesAzurePropertyLeveledCategories
        """
        return self._leveled_categories

    @leveled_categories.setter
    def leveled_categories(self, leveled_categories):
        """Sets the leveled_categories of this MicrosoftIngestionApiModelsPropertiesAzureProperty.


        :param leveled_categories: The leveled_categories of this MicrosoftIngestionApiModelsPropertiesAzureProperty.  # noqa: E501
        :type: MicrosoftIngestionApiModelsPropertiesAzurePropertyLeveledCategories
        """

        self._leveled_categories = leveled_categories

    @property
    def categories(self):
        """Gets the categories of this MicrosoftIngestionApiModelsPropertiesAzureProperty.  # noqa: E501


        :return: The categories of this MicrosoftIngestionApiModelsPropertiesAzureProperty.  # noqa: E501
        :rtype: list[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this MicrosoftIngestionApiModelsPropertiesAzureProperty.


        :param categories: The categories of this MicrosoftIngestionApiModelsPropertiesAzureProperty.  # noqa: E501
        :type: list[str]
        """

        self._categories = categories

    @property
    def additional_categories(self):
        """Gets the additional_categories of this MicrosoftIngestionApiModelsPropertiesAzureProperty.  # noqa: E501


        :return: The additional_categories of this MicrosoftIngestionApiModelsPropertiesAzureProperty.  # noqa: E501
        :rtype: list[str]
        """
        return self._additional_categories

    @additional_categories.setter
    def additional_categories(self, additional_categories):
        """Sets the additional_categories of this MicrosoftIngestionApiModelsPropertiesAzureProperty.


        :param additional_categories: The additional_categories of this MicrosoftIngestionApiModelsPropertiesAzureProperty.  # noqa: E501
        :type: list[str]
        """

        self._additional_categories = additional_categories

    @property
    def submission_version(self):
        """Gets the submission_version of this MicrosoftIngestionApiModelsPropertiesAzureProperty.  # noqa: E501


        :return: The submission_version of this MicrosoftIngestionApiModelsPropertiesAzureProperty.  # noqa: E501
        :rtype: str
        """
        return self._submission_version

    @submission_version.setter
    def submission_version(self, submission_version):
        """Sets the submission_version of this MicrosoftIngestionApiModelsPropertiesAzureProperty.


        :param submission_version: The submission_version of this MicrosoftIngestionApiModelsPropertiesAzureProperty.  # noqa: E501
        :type: str
        """

        self._submission_version = submission_version

    @property
    def hide_keys(self):
        """Gets the hide_keys of this MicrosoftIngestionApiModelsPropertiesAzureProperty.  # noqa: E501


        :return: The hide_keys of this MicrosoftIngestionApiModelsPropertiesAzureProperty.  # noqa: E501
        :rtype: list[str]
        """
        return self._hide_keys

    @hide_keys.setter
    def hide_keys(self, hide_keys):
        """Sets the hide_keys of this MicrosoftIngestionApiModelsPropertiesAzureProperty.


        :param hide_keys: The hide_keys of this MicrosoftIngestionApiModelsPropertiesAzureProperty.  # noqa: E501
        :type: list[str]
        """

        self._hide_keys = hide_keys

    @property
    def product_tags(self):
        """Gets the product_tags of this MicrosoftIngestionApiModelsPropertiesAzureProperty.  # noqa: E501


        :return: The product_tags of this MicrosoftIngestionApiModelsPropertiesAzureProperty.  # noqa: E501
        :rtype: list[str]
        """
        return self._product_tags

    @product_tags.setter
    def product_tags(self, product_tags):
        """Sets the product_tags of this MicrosoftIngestionApiModelsPropertiesAzureProperty.


        :param product_tags: The product_tags of this MicrosoftIngestionApiModelsPropertiesAzureProperty.  # noqa: E501
        :type: list[str]
        """

        self._product_tags = product_tags

    @property
    def app_version(self):
        """Gets the app_version of this MicrosoftIngestionApiModelsPropertiesAzureProperty.  # noqa: E501


        :return: The app_version of this MicrosoftIngestionApiModelsPropertiesAzureProperty.  # noqa: E501
        :rtype: str
        """
        return self._app_version

    @app_version.setter
    def app_version(self, app_version):
        """Sets the app_version of this MicrosoftIngestionApiModelsPropertiesAzureProperty.


        :param app_version: The app_version of this MicrosoftIngestionApiModelsPropertiesAzureProperty.  # noqa: E501
        :type: str
        """

        self._app_version = app_version

    @property
    def use_enterprise_contract(self):
        """Gets the use_enterprise_contract of this MicrosoftIngestionApiModelsPropertiesAzureProperty.  # noqa: E501


        :return: The use_enterprise_contract of this MicrosoftIngestionApiModelsPropertiesAzureProperty.  # noqa: E501
        :rtype: bool
        """
        return self._use_enterprise_contract

    @use_enterprise_contract.setter
    def use_enterprise_contract(self, use_enterprise_contract):
        """Sets the use_enterprise_contract of this MicrosoftIngestionApiModelsPropertiesAzureProperty.


        :param use_enterprise_contract: The use_enterprise_contract of this MicrosoftIngestionApiModelsPropertiesAzureProperty.  # noqa: E501
        :type: bool
        """

        self._use_enterprise_contract = use_enterprise_contract

    @property
    def terms_of_use(self):
        """Gets the terms_of_use of this MicrosoftIngestionApiModelsPropertiesAzureProperty.  # noqa: E501


        :return: The terms_of_use of this MicrosoftIngestionApiModelsPropertiesAzureProperty.  # noqa: E501
        :rtype: str
        """
        return self._terms_of_use

    @terms_of_use.setter
    def terms_of_use(self, terms_of_use):
        """Sets the terms_of_use of this MicrosoftIngestionApiModelsPropertiesAzureProperty.


        :param terms_of_use: The terms_of_use of this MicrosoftIngestionApiModelsPropertiesAzureProperty.  # noqa: E501
        :type: str
        """

        self._terms_of_use = terms_of_use

    @property
    def marketing_only_change(self):
        """Gets the marketing_only_change of this MicrosoftIngestionApiModelsPropertiesAzureProperty.  # noqa: E501


        :return: The marketing_only_change of this MicrosoftIngestionApiModelsPropertiesAzureProperty.  # noqa: E501
        :rtype: bool
        """
        return self._marketing_only_change

    @marketing_only_change.setter
    def marketing_only_change(self, marketing_only_change):
        """Sets the marketing_only_change of this MicrosoftIngestionApiModelsPropertiesAzureProperty.


        :param marketing_only_change: The marketing_only_change of this MicrosoftIngestionApiModelsPropertiesAzureProperty.  # noqa: E501
        :type: bool
        """

        self._marketing_only_change = marketing_only_change

    @property
    def global_amendment_terms(self):
        """Gets the global_amendment_terms of this MicrosoftIngestionApiModelsPropertiesAzureProperty.  # noqa: E501


        :return: The global_amendment_terms of this MicrosoftIngestionApiModelsPropertiesAzureProperty.  # noqa: E501
        :rtype: str
        """
        return self._global_amendment_terms

    @global_amendment_terms.setter
    def global_amendment_terms(self, global_amendment_terms):
        """Sets the global_amendment_terms of this MicrosoftIngestionApiModelsPropertiesAzureProperty.


        :param global_amendment_terms: The global_amendment_terms of this MicrosoftIngestionApiModelsPropertiesAzureProperty.  # noqa: E501
        :type: str
        """

        self._global_amendment_terms = global_amendment_terms

    @property
    def custom_amendments(self):
        """Gets the custom_amendments of this MicrosoftIngestionApiModelsPropertiesAzureProperty.  # noqa: E501


        :return: The custom_amendments of this MicrosoftIngestionApiModelsPropertiesAzureProperty.  # noqa: E501
        :rtype: list[MicrosoftIngestionApiModelsPropertiesCustomAmendment]
        """
        return self._custom_amendments

    @custom_amendments.setter
    def custom_amendments(self, custom_amendments):
        """Sets the custom_amendments of this MicrosoftIngestionApiModelsPropertiesAzureProperty.


        :param custom_amendments: The custom_amendments of this MicrosoftIngestionApiModelsPropertiesAzureProperty.  # noqa: E501
        :type: list[MicrosoftIngestionApiModelsPropertiesCustomAmendment]
        """

        self._custom_amendments = custom_amendments

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MicrosoftIngestionApiModelsPropertiesAzureProperty, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MicrosoftIngestionApiModelsPropertiesAzureProperty):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
