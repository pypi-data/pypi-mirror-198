# coding: utf-8

"""
    https://api.partner.microsoft.com/v1.0/ingestion

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MicrosoftIngestionApiModelsSubmissionsCertificationReport(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'report_time_in_utc': 'datetime',
        'status': 'str',
        'file_uri': 'str'
    }

    attribute_map = {
        'report_time_in_utc': 'reportTimeInUtc',
        'status': 'status',
        'file_uri': 'fileUri'
    }

    def __init__(self, report_time_in_utc=None, status=None, file_uri=None):  # noqa: E501
        """MicrosoftIngestionApiModelsSubmissionsCertificationReport - a model defined in Swagger"""  # noqa: E501
        self._report_time_in_utc = None
        self._status = None
        self._file_uri = None
        self.discriminator = None
        if report_time_in_utc is not None:
            self.report_time_in_utc = report_time_in_utc
        if status is not None:
            self.status = status
        if file_uri is not None:
            self.file_uri = file_uri

    @property
    def report_time_in_utc(self):
        """Gets the report_time_in_utc of this MicrosoftIngestionApiModelsSubmissionsCertificationReport.  # noqa: E501


        :return: The report_time_in_utc of this MicrosoftIngestionApiModelsSubmissionsCertificationReport.  # noqa: E501
        :rtype: datetime
        """
        return self._report_time_in_utc

    @report_time_in_utc.setter
    def report_time_in_utc(self, report_time_in_utc):
        """Sets the report_time_in_utc of this MicrosoftIngestionApiModelsSubmissionsCertificationReport.


        :param report_time_in_utc: The report_time_in_utc of this MicrosoftIngestionApiModelsSubmissionsCertificationReport.  # noqa: E501
        :type: datetime
        """

        self._report_time_in_utc = report_time_in_utc

    @property
    def status(self):
        """Gets the status of this MicrosoftIngestionApiModelsSubmissionsCertificationReport.  # noqa: E501


        :return: The status of this MicrosoftIngestionApiModelsSubmissionsCertificationReport.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MicrosoftIngestionApiModelsSubmissionsCertificationReport.


        :param status: The status of this MicrosoftIngestionApiModelsSubmissionsCertificationReport.  # noqa: E501
        :type: str
        """
        allowed_values = ["Pending", "Failed", "Passed", "PassedWithNotes", "Unknown"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def file_uri(self):
        """Gets the file_uri of this MicrosoftIngestionApiModelsSubmissionsCertificationReport.  # noqa: E501


        :return: The file_uri of this MicrosoftIngestionApiModelsSubmissionsCertificationReport.  # noqa: E501
        :rtype: str
        """
        return self._file_uri

    @file_uri.setter
    def file_uri(self, file_uri):
        """Sets the file_uri of this MicrosoftIngestionApiModelsSubmissionsCertificationReport.


        :param file_uri: The file_uri of this MicrosoftIngestionApiModelsSubmissionsCertificationReport.  # noqa: E501
        :type: str
        """

        self._file_uri = file_uri

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MicrosoftIngestionApiModelsSubmissionsCertificationReport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MicrosoftIngestionApiModelsSubmissionsCertificationReport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
