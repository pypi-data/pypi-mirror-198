# coding: utf-8

"""
    https://api.partner.microsoft.com/v1.0/ingestion

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.microsoft_ingestion_api_models_common_entity_resource import MicrosoftIngestionApiModelsCommonEntityResource  # noqa: F401,E501

class MicrosoftIngestionApiModelsAvailabilitiesProductAvailability(MicrosoftIngestionApiModelsCommonEntityResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'resource_type': 'str',
        'visibility': 'str',
        'enterprise_licensing': 'str',
        'audiences': 'list[MicrosoftIngestionApiModelsAvailabilitiesPreviewMarketplaceGroup]',
        'email_audiences': 'list[MicrosoftIngestionApiModelsAvailabilitiesAudienceMember]',
        'subscription_audiences': 'list[MicrosoftIngestionApiModelsAvailabilitiesAudienceMember]',
        'hide_key_audience': 'str'
    }
    if hasattr(MicrosoftIngestionApiModelsCommonEntityResource, "swagger_types"):
        swagger_types.update(MicrosoftIngestionApiModelsCommonEntityResource.swagger_types)

    attribute_map = {
        'resource_type': 'resourceType',
        'visibility': 'visibility',
        'enterprise_licensing': 'enterpriseLicensing',
        'audiences': 'audiences',
        'email_audiences': 'emailAudiences',
        'subscription_audiences': 'subscriptionAudiences',
        'hide_key_audience': 'hideKeyAudience'
    }
    if hasattr(MicrosoftIngestionApiModelsCommonEntityResource, "attribute_map"):
        attribute_map.update(MicrosoftIngestionApiModelsCommonEntityResource.attribute_map)

    def __init__(self, resource_type=None, visibility=None, enterprise_licensing=None, audiences=None, email_audiences=None, subscription_audiences=None, hide_key_audience=None, *args, **kwargs):  # noqa: E501
        """MicrosoftIngestionApiModelsAvailabilitiesProductAvailability - a model defined in Swagger"""  # noqa: E501
        self._resource_type = None
        self._visibility = None
        self._enterprise_licensing = None
        self._audiences = None
        self._email_audiences = None
        self._subscription_audiences = None
        self._hide_key_audience = None
        self.discriminator = None
        if resource_type is not None:
            self.resource_type = resource_type
        if visibility is not None:
            self.visibility = visibility
        if enterprise_licensing is not None:
            self.enterprise_licensing = enterprise_licensing
        if audiences is not None:
            self.audiences = audiences
        if email_audiences is not None:
            self.email_audiences = email_audiences
        if subscription_audiences is not None:
            self.subscription_audiences = subscription_audiences
        if hide_key_audience is not None:
            self.hide_key_audience = hide_key_audience
        MicrosoftIngestionApiModelsCommonEntityResource.__init__(self, *args, **kwargs)

    @property
    def resource_type(self):
        """Gets the resource_type of this MicrosoftIngestionApiModelsAvailabilitiesProductAvailability.  # noqa: E501


        :return: The resource_type of this MicrosoftIngestionApiModelsAvailabilitiesProductAvailability.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this MicrosoftIngestionApiModelsAvailabilitiesProductAvailability.


        :param resource_type: The resource_type of this MicrosoftIngestionApiModelsAvailabilitiesProductAvailability.  # noqa: E501
        :type: str
        """
        allowed_values = ["ProductAvailability"]  # noqa: E501
        if resource_type not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_type` ({0}), must be one of {1}"  # noqa: E501
                .format(resource_type, allowed_values)
            )

        self._resource_type = resource_type

    @property
    def visibility(self):
        """Gets the visibility of this MicrosoftIngestionApiModelsAvailabilitiesProductAvailability.  # noqa: E501


        :return: The visibility of this MicrosoftIngestionApiModelsAvailabilitiesProductAvailability.  # noqa: E501
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this MicrosoftIngestionApiModelsAvailabilitiesProductAvailability.


        :param visibility: The visibility of this MicrosoftIngestionApiModelsAvailabilitiesProductAvailability.  # noqa: E501
        :type: str
        """

        self._visibility = visibility

    @property
    def enterprise_licensing(self):
        """Gets the enterprise_licensing of this MicrosoftIngestionApiModelsAvailabilitiesProductAvailability.  # noqa: E501


        :return: The enterprise_licensing of this MicrosoftIngestionApiModelsAvailabilitiesProductAvailability.  # noqa: E501
        :rtype: str
        """
        return self._enterprise_licensing

    @enterprise_licensing.setter
    def enterprise_licensing(self, enterprise_licensing):
        """Sets the enterprise_licensing of this MicrosoftIngestionApiModelsAvailabilitiesProductAvailability.


        :param enterprise_licensing: The enterprise_licensing of this MicrosoftIngestionApiModelsAvailabilitiesProductAvailability.  # noqa: E501
        :type: str
        """

        self._enterprise_licensing = enterprise_licensing

    @property
    def audiences(self):
        """Gets the audiences of this MicrosoftIngestionApiModelsAvailabilitiesProductAvailability.  # noqa: E501


        :return: The audiences of this MicrosoftIngestionApiModelsAvailabilitiesProductAvailability.  # noqa: E501
        :rtype: list[MicrosoftIngestionApiModelsAvailabilitiesPreviewMarketplaceGroup]
        """
        return self._audiences

    @audiences.setter
    def audiences(self, audiences):
        """Sets the audiences of this MicrosoftIngestionApiModelsAvailabilitiesProductAvailability.


        :param audiences: The audiences of this MicrosoftIngestionApiModelsAvailabilitiesProductAvailability.  # noqa: E501
        :type: list[MicrosoftIngestionApiModelsAvailabilitiesPreviewMarketplaceGroup]
        """

        self._audiences = audiences

    @property
    def email_audiences(self):
        """Gets the email_audiences of this MicrosoftIngestionApiModelsAvailabilitiesProductAvailability.  # noqa: E501


        :return: The email_audiences of this MicrosoftIngestionApiModelsAvailabilitiesProductAvailability.  # noqa: E501
        :rtype: list[MicrosoftIngestionApiModelsAvailabilitiesAudienceMember]
        """
        return self._email_audiences

    @email_audiences.setter
    def email_audiences(self, email_audiences):
        """Sets the email_audiences of this MicrosoftIngestionApiModelsAvailabilitiesProductAvailability.


        :param email_audiences: The email_audiences of this MicrosoftIngestionApiModelsAvailabilitiesProductAvailability.  # noqa: E501
        :type: list[MicrosoftIngestionApiModelsAvailabilitiesAudienceMember]
        """

        self._email_audiences = email_audiences

    @property
    def subscription_audiences(self):
        """Gets the subscription_audiences of this MicrosoftIngestionApiModelsAvailabilitiesProductAvailability.  # noqa: E501


        :return: The subscription_audiences of this MicrosoftIngestionApiModelsAvailabilitiesProductAvailability.  # noqa: E501
        :rtype: list[MicrosoftIngestionApiModelsAvailabilitiesAudienceMember]
        """
        return self._subscription_audiences

    @subscription_audiences.setter
    def subscription_audiences(self, subscription_audiences):
        """Sets the subscription_audiences of this MicrosoftIngestionApiModelsAvailabilitiesProductAvailability.


        :param subscription_audiences: The subscription_audiences of this MicrosoftIngestionApiModelsAvailabilitiesProductAvailability.  # noqa: E501
        :type: list[MicrosoftIngestionApiModelsAvailabilitiesAudienceMember]
        """

        self._subscription_audiences = subscription_audiences

    @property
    def hide_key_audience(self):
        """Gets the hide_key_audience of this MicrosoftIngestionApiModelsAvailabilitiesProductAvailability.  # noqa: E501


        :return: The hide_key_audience of this MicrosoftIngestionApiModelsAvailabilitiesProductAvailability.  # noqa: E501
        :rtype: str
        """
        return self._hide_key_audience

    @hide_key_audience.setter
    def hide_key_audience(self, hide_key_audience):
        """Sets the hide_key_audience of this MicrosoftIngestionApiModelsAvailabilitiesProductAvailability.


        :param hide_key_audience: The hide_key_audience of this MicrosoftIngestionApiModelsAvailabilitiesProductAvailability.  # noqa: E501
        :type: str
        """

        self._hide_key_audience = hide_key_audience

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MicrosoftIngestionApiModelsAvailabilitiesProductAvailability, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MicrosoftIngestionApiModelsAvailabilitiesProductAvailability):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
