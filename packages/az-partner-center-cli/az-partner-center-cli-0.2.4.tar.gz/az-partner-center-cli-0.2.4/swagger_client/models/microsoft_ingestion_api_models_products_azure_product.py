# coding: utf-8

"""
    https://api.partner.microsoft.com/v1.0/ingestion

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.microsoft_ingestion_api_models_products_base_product import MicrosoftIngestionApiModelsProductsBaseProduct  # noqa: F401,E501

class MicrosoftIngestionApiModelsProductsAzureProduct(MicrosoftIngestionApiModelsProductsBaseProduct):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'offer_marketing_url_i_dentifier': 'str',
        'resource_type': 'str',
        'external_i_ds': 'list[MicrosoftIngestionApiModelsCommonTypeValuePair]'
    }
    if hasattr(MicrosoftIngestionApiModelsProductsBaseProduct, "swagger_types"):
        swagger_types.update(MicrosoftIngestionApiModelsProductsBaseProduct.swagger_types)

    attribute_map = {
        'offer_marketing_url_i_dentifier': 'offerMarketingUrlIDentifier',
        'resource_type': 'resourceType',
        'external_i_ds': 'externalIDs'
    }
    if hasattr(MicrosoftIngestionApiModelsProductsBaseProduct, "attribute_map"):
        attribute_map.update(MicrosoftIngestionApiModelsProductsBaseProduct.attribute_map)

    def __init__(self, offer_marketing_url_i_dentifier=None, resource_type=None, external_i_ds=None, *args, **kwargs):  # noqa: E501
        """MicrosoftIngestionApiModelsProductsAzureProduct - a model defined in Swagger"""  # noqa: E501
        self._offer_marketing_url_i_dentifier = None
        self._resource_type = None
        self._external_i_ds = None
        self.discriminator = None
        if offer_marketing_url_i_dentifier is not None:
            self.offer_marketing_url_i_dentifier = offer_marketing_url_i_dentifier
        if resource_type is not None:
            self.resource_type = resource_type
        if external_i_ds is not None:
            self.external_i_ds = external_i_ds
        MicrosoftIngestionApiModelsProductsBaseProduct.__init__(self, *args, **kwargs)

    @property
    def offer_marketing_url_i_dentifier(self):
        """Gets the offer_marketing_url_i_dentifier of this MicrosoftIngestionApiModelsProductsAzureProduct.  # noqa: E501


        :return: The offer_marketing_url_i_dentifier of this MicrosoftIngestionApiModelsProductsAzureProduct.  # noqa: E501
        :rtype: str
        """
        return self._offer_marketing_url_i_dentifier

    @offer_marketing_url_i_dentifier.setter
    def offer_marketing_url_i_dentifier(self, offer_marketing_url_i_dentifier):
        """Sets the offer_marketing_url_i_dentifier of this MicrosoftIngestionApiModelsProductsAzureProduct.


        :param offer_marketing_url_i_dentifier: The offer_marketing_url_i_dentifier of this MicrosoftIngestionApiModelsProductsAzureProduct.  # noqa: E501
        :type: str
        """

        self._offer_marketing_url_i_dentifier = offer_marketing_url_i_dentifier

    @property
    def resource_type(self):
        """Gets the resource_type of this MicrosoftIngestionApiModelsProductsAzureProduct.  # noqa: E501


        :return: The resource_type of this MicrosoftIngestionApiModelsProductsAzureProduct.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this MicrosoftIngestionApiModelsProductsAzureProduct.


        :param resource_type: The resource_type of this MicrosoftIngestionApiModelsProductsAzureProduct.  # noqa: E501
        :type: str
        """
        allowed_values = ["AzureApplication", "AzureDeveloperService", "AzureThirdPartyVirtualMachine", "AzureContainer", "AzureVisualStudioExtension", "AzureDynamics365ForCustomerEngagement", "AzureDynamics365ForOperations", "AzureDynamics365BusinessCentral"]  # noqa: E501
        if resource_type not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_type` ({0}), must be one of {1}"  # noqa: E501
                .format(resource_type, allowed_values)
            )

        self._resource_type = resource_type

    @property
    def external_i_ds(self):
        """Gets the external_i_ds of this MicrosoftIngestionApiModelsProductsAzureProduct.  # noqa: E501


        :return: The external_i_ds of this MicrosoftIngestionApiModelsProductsAzureProduct.  # noqa: E501
        :rtype: list[MicrosoftIngestionApiModelsCommonTypeValuePair]
        """
        return self._external_i_ds

    @external_i_ds.setter
    def external_i_ds(self, external_i_ds):
        """Sets the external_i_ds of this MicrosoftIngestionApiModelsProductsAzureProduct.


        :param external_i_ds: The external_i_ds of this MicrosoftIngestionApiModelsProductsAzureProduct.  # noqa: E501
        :type: list[MicrosoftIngestionApiModelsCommonTypeValuePair]
        """

        self._external_i_ds = external_i_ds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MicrosoftIngestionApiModelsProductsAzureProduct, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MicrosoftIngestionApiModelsProductsAzureProduct):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
