# coding: utf-8

"""
    https://api.partner.microsoft.com/v1.0/ingestion

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MicrosoftIngestionApiModelsSubmissionsSubmissionCreationRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'resource_type': 'str',
        'targets': 'list[MicrosoftIngestionApiModelsCommonTypeValuePair]',
        'resources': 'list[MicrosoftIngestionApiModelsCommonTypeValuePair]',
        'variant_resources': 'list[MicrosoftIngestionApiModelsSubmissionsVariantResource]',
        'publish_option': 'MicrosoftIngestionApiModelsSubmissionsPublishOption',
        'extended_properties': 'list[MicrosoftIngestionApiModelsCommonTypeValuePair]'
    }

    attribute_map = {
        'resource_type': 'resourceType',
        'targets': 'targets',
        'resources': 'resources',
        'variant_resources': 'variantResources',
        'publish_option': 'publishOption',
        'extended_properties': 'extendedProperties'
    }

    def __init__(self, resource_type=None, targets=None, resources=None, variant_resources=None, publish_option=None, extended_properties=None):  # noqa: E501
        """MicrosoftIngestionApiModelsSubmissionsSubmissionCreationRequest - a model defined in Swagger"""  # noqa: E501
        self._resource_type = None
        self._targets = None
        self._resources = None
        self._variant_resources = None
        self._publish_option = None
        self._extended_properties = None
        self.discriminator = None
        if resource_type is not None:
            self.resource_type = resource_type
        if targets is not None:
            self.targets = targets
        if resources is not None:
            self.resources = resources
        if variant_resources is not None:
            self.variant_resources = variant_resources
        if publish_option is not None:
            self.publish_option = publish_option
        if extended_properties is not None:
            self.extended_properties = extended_properties

    @property
    def resource_type(self):
        """Gets the resource_type of this MicrosoftIngestionApiModelsSubmissionsSubmissionCreationRequest.  # noqa: E501


        :return: The resource_type of this MicrosoftIngestionApiModelsSubmissionsSubmissionCreationRequest.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this MicrosoftIngestionApiModelsSubmissionsSubmissionCreationRequest.


        :param resource_type: The resource_type of this MicrosoftIngestionApiModelsSubmissionsSubmissionCreationRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["SubmissionCreationRequest"]  # noqa: E501
        if resource_type not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_type` ({0}), must be one of {1}"  # noqa: E501
                .format(resource_type, allowed_values)
            )

        self._resource_type = resource_type

    @property
    def targets(self):
        """Gets the targets of this MicrosoftIngestionApiModelsSubmissionsSubmissionCreationRequest.  # noqa: E501


        :return: The targets of this MicrosoftIngestionApiModelsSubmissionsSubmissionCreationRequest.  # noqa: E501
        :rtype: list[MicrosoftIngestionApiModelsCommonTypeValuePair]
        """
        return self._targets

    @targets.setter
    def targets(self, targets):
        """Sets the targets of this MicrosoftIngestionApiModelsSubmissionsSubmissionCreationRequest.


        :param targets: The targets of this MicrosoftIngestionApiModelsSubmissionsSubmissionCreationRequest.  # noqa: E501
        :type: list[MicrosoftIngestionApiModelsCommonTypeValuePair]
        """

        self._targets = targets

    @property
    def resources(self):
        """Gets the resources of this MicrosoftIngestionApiModelsSubmissionsSubmissionCreationRequest.  # noqa: E501


        :return: The resources of this MicrosoftIngestionApiModelsSubmissionsSubmissionCreationRequest.  # noqa: E501
        :rtype: list[MicrosoftIngestionApiModelsCommonTypeValuePair]
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this MicrosoftIngestionApiModelsSubmissionsSubmissionCreationRequest.


        :param resources: The resources of this MicrosoftIngestionApiModelsSubmissionsSubmissionCreationRequest.  # noqa: E501
        :type: list[MicrosoftIngestionApiModelsCommonTypeValuePair]
        """

        self._resources = resources

    @property
    def variant_resources(self):
        """Gets the variant_resources of this MicrosoftIngestionApiModelsSubmissionsSubmissionCreationRequest.  # noqa: E501


        :return: The variant_resources of this MicrosoftIngestionApiModelsSubmissionsSubmissionCreationRequest.  # noqa: E501
        :rtype: list[MicrosoftIngestionApiModelsSubmissionsVariantResource]
        """
        return self._variant_resources

    @variant_resources.setter
    def variant_resources(self, variant_resources):
        """Sets the variant_resources of this MicrosoftIngestionApiModelsSubmissionsSubmissionCreationRequest.


        :param variant_resources: The variant_resources of this MicrosoftIngestionApiModelsSubmissionsSubmissionCreationRequest.  # noqa: E501
        :type: list[MicrosoftIngestionApiModelsSubmissionsVariantResource]
        """

        self._variant_resources = variant_resources

    @property
    def publish_option(self):
        """Gets the publish_option of this MicrosoftIngestionApiModelsSubmissionsSubmissionCreationRequest.  # noqa: E501


        :return: The publish_option of this MicrosoftIngestionApiModelsSubmissionsSubmissionCreationRequest.  # noqa: E501
        :rtype: MicrosoftIngestionApiModelsSubmissionsPublishOption
        """
        return self._publish_option

    @publish_option.setter
    def publish_option(self, publish_option):
        """Sets the publish_option of this MicrosoftIngestionApiModelsSubmissionsSubmissionCreationRequest.


        :param publish_option: The publish_option of this MicrosoftIngestionApiModelsSubmissionsSubmissionCreationRequest.  # noqa: E501
        :type: MicrosoftIngestionApiModelsSubmissionsPublishOption
        """

        self._publish_option = publish_option

    @property
    def extended_properties(self):
        """Gets the extended_properties of this MicrosoftIngestionApiModelsSubmissionsSubmissionCreationRequest.  # noqa: E501


        :return: The extended_properties of this MicrosoftIngestionApiModelsSubmissionsSubmissionCreationRequest.  # noqa: E501
        :rtype: list[MicrosoftIngestionApiModelsCommonTypeValuePair]
        """
        return self._extended_properties

    @extended_properties.setter
    def extended_properties(self, extended_properties):
        """Sets the extended_properties of this MicrosoftIngestionApiModelsSubmissionsSubmissionCreationRequest.


        :param extended_properties: The extended_properties of this MicrosoftIngestionApiModelsSubmissionsSubmissionCreationRequest.  # noqa: E501
        :type: list[MicrosoftIngestionApiModelsCommonTypeValuePair]
        """

        self._extended_properties = extended_properties

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MicrosoftIngestionApiModelsSubmissionsSubmissionCreationRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MicrosoftIngestionApiModelsSubmissionsSubmissionCreationRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
