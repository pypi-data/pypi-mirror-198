# coding: utf-8

"""
    https://api.partner.microsoft.com/v1.0/ingestion

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MicrosoftIngestionApiModelsAvailabilitiesScheduleInfoMicrosoftIngestionApiModelsAvailabilitiesPriceSchedule_(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_base_schedule': 'bool',
        'market_codes': 'list[str]',
        'friendly_name': 'str',
        'schedules': 'list[MicrosoftIngestionApiModelsAvailabilitiesPriceSchedule]'
    }

    attribute_map = {
        'is_base_schedule': 'isBaseSchedule',
        'market_codes': 'marketCodes',
        'friendly_name': 'friendlyName',
        'schedules': 'schedules'
    }

    def __init__(self, is_base_schedule=None, market_codes=None, friendly_name=None, schedules=None):  # noqa: E501
        """MicrosoftIngestionApiModelsAvailabilitiesScheduleInfoMicrosoftIngestionApiModelsAvailabilitiesPriceSchedule_ - a model defined in Swagger"""  # noqa: E501
        self._is_base_schedule = None
        self._market_codes = None
        self._friendly_name = None
        self._schedules = None
        self.discriminator = None
        if is_base_schedule is not None:
            self.is_base_schedule = is_base_schedule
        if market_codes is not None:
            self.market_codes = market_codes
        if friendly_name is not None:
            self.friendly_name = friendly_name
        if schedules is not None:
            self.schedules = schedules

    @property
    def is_base_schedule(self):
        """Gets the is_base_schedule of this MicrosoftIngestionApiModelsAvailabilitiesScheduleInfoMicrosoftIngestionApiModelsAvailabilitiesPriceSchedule_.  # noqa: E501


        :return: The is_base_schedule of this MicrosoftIngestionApiModelsAvailabilitiesScheduleInfoMicrosoftIngestionApiModelsAvailabilitiesPriceSchedule_.  # noqa: E501
        :rtype: bool
        """
        return self._is_base_schedule

    @is_base_schedule.setter
    def is_base_schedule(self, is_base_schedule):
        """Sets the is_base_schedule of this MicrosoftIngestionApiModelsAvailabilitiesScheduleInfoMicrosoftIngestionApiModelsAvailabilitiesPriceSchedule_.


        :param is_base_schedule: The is_base_schedule of this MicrosoftIngestionApiModelsAvailabilitiesScheduleInfoMicrosoftIngestionApiModelsAvailabilitiesPriceSchedule_.  # noqa: E501
        :type: bool
        """

        self._is_base_schedule = is_base_schedule

    @property
    def market_codes(self):
        """Gets the market_codes of this MicrosoftIngestionApiModelsAvailabilitiesScheduleInfoMicrosoftIngestionApiModelsAvailabilitiesPriceSchedule_.  # noqa: E501

        ISO country code  # noqa: E501

        :return: The market_codes of this MicrosoftIngestionApiModelsAvailabilitiesScheduleInfoMicrosoftIngestionApiModelsAvailabilitiesPriceSchedule_.  # noqa: E501
        :rtype: list[str]
        """
        return self._market_codes

    @market_codes.setter
    def market_codes(self, market_codes):
        """Sets the market_codes of this MicrosoftIngestionApiModelsAvailabilitiesScheduleInfoMicrosoftIngestionApiModelsAvailabilitiesPriceSchedule_.

        ISO country code  # noqa: E501

        :param market_codes: The market_codes of this MicrosoftIngestionApiModelsAvailabilitiesScheduleInfoMicrosoftIngestionApiModelsAvailabilitiesPriceSchedule_.  # noqa: E501
        :type: list[str]
        """

        self._market_codes = market_codes

    @property
    def friendly_name(self):
        """Gets the friendly_name of this MicrosoftIngestionApiModelsAvailabilitiesScheduleInfoMicrosoftIngestionApiModelsAvailabilitiesPriceSchedule_.  # noqa: E501


        :return: The friendly_name of this MicrosoftIngestionApiModelsAvailabilitiesScheduleInfoMicrosoftIngestionApiModelsAvailabilitiesPriceSchedule_.  # noqa: E501
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this MicrosoftIngestionApiModelsAvailabilitiesScheduleInfoMicrosoftIngestionApiModelsAvailabilitiesPriceSchedule_.


        :param friendly_name: The friendly_name of this MicrosoftIngestionApiModelsAvailabilitiesScheduleInfoMicrosoftIngestionApiModelsAvailabilitiesPriceSchedule_.  # noqa: E501
        :type: str
        """

        self._friendly_name = friendly_name

    @property
    def schedules(self):
        """Gets the schedules of this MicrosoftIngestionApiModelsAvailabilitiesScheduleInfoMicrosoftIngestionApiModelsAvailabilitiesPriceSchedule_.  # noqa: E501


        :return: The schedules of this MicrosoftIngestionApiModelsAvailabilitiesScheduleInfoMicrosoftIngestionApiModelsAvailabilitiesPriceSchedule_.  # noqa: E501
        :rtype: list[MicrosoftIngestionApiModelsAvailabilitiesPriceSchedule]
        """
        return self._schedules

    @schedules.setter
    def schedules(self, schedules):
        """Sets the schedules of this MicrosoftIngestionApiModelsAvailabilitiesScheduleInfoMicrosoftIngestionApiModelsAvailabilitiesPriceSchedule_.


        :param schedules: The schedules of this MicrosoftIngestionApiModelsAvailabilitiesScheduleInfoMicrosoftIngestionApiModelsAvailabilitiesPriceSchedule_.  # noqa: E501
        :type: list[MicrosoftIngestionApiModelsAvailabilitiesPriceSchedule]
        """

        self._schedules = schedules

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MicrosoftIngestionApiModelsAvailabilitiesScheduleInfoMicrosoftIngestionApiModelsAvailabilitiesPriceSchedule_, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MicrosoftIngestionApiModelsAvailabilitiesScheduleInfoMicrosoftIngestionApiModelsAvailabilitiesPriceSchedule_):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
