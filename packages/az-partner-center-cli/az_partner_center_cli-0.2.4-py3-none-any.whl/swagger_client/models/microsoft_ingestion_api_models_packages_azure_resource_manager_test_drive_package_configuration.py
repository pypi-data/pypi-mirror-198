# coding: utf-8

"""
    https://api.partner.microsoft.com/v1.0/ingestion

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.microsoft_ingestion_api_models_packages_azure_base_test_drive_package_configuration import MicrosoftIngestionApiModelsPackagesAzureBaseTestDrivePackageConfiguration  # noqa: F401,E501

class MicrosoftIngestionApiModelsPackagesAzureResourceManagerTestDrivePackageConfiguration(MicrosoftIngestionApiModelsPackagesAzureBaseTestDrivePackageConfiguration):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'resource_type': 'str',
        'regions': 'list[str]',
        'hot_instances': 'int',
        'warm_instances': 'int',
        'cold_instances': 'int',
        'azure_subscription_id': 'str'
    }
    if hasattr(MicrosoftIngestionApiModelsPackagesAzureBaseTestDrivePackageConfiguration, "swagger_types"):
        swagger_types.update(MicrosoftIngestionApiModelsPackagesAzureBaseTestDrivePackageConfiguration.swagger_types)

    attribute_map = {
        'resource_type': 'resourceType',
        'regions': 'regions',
        'hot_instances': 'hotInstances',
        'warm_instances': 'warmInstances',
        'cold_instances': 'coldInstances',
        'azure_subscription_id': 'azureSubscriptionID'
    }
    if hasattr(MicrosoftIngestionApiModelsPackagesAzureBaseTestDrivePackageConfiguration, "attribute_map"):
        attribute_map.update(MicrosoftIngestionApiModelsPackagesAzureBaseTestDrivePackageConfiguration.attribute_map)

    def __init__(self, resource_type=None, regions=None, hot_instances=None, warm_instances=None, cold_instances=None, azure_subscription_id=None, *args, **kwargs):  # noqa: E501
        """MicrosoftIngestionApiModelsPackagesAzureResourceManagerTestDrivePackageConfiguration - a model defined in Swagger"""  # noqa: E501
        self._resource_type = None
        self._regions = None
        self._hot_instances = None
        self._warm_instances = None
        self._cold_instances = None
        self._azure_subscription_id = None
        self.discriminator = None
        if resource_type is not None:
            self.resource_type = resource_type
        if regions is not None:
            self.regions = regions
        if hot_instances is not None:
            self.hot_instances = hot_instances
        if warm_instances is not None:
            self.warm_instances = warm_instances
        if cold_instances is not None:
            self.cold_instances = cold_instances
        if azure_subscription_id is not None:
            self.azure_subscription_id = azure_subscription_id
        MicrosoftIngestionApiModelsPackagesAzureBaseTestDrivePackageConfiguration.__init__(self, *args, **kwargs)

    @property
    def resource_type(self):
        """Gets the resource_type of this MicrosoftIngestionApiModelsPackagesAzureResourceManagerTestDrivePackageConfiguration.  # noqa: E501


        :return: The resource_type of this MicrosoftIngestionApiModelsPackagesAzureResourceManagerTestDrivePackageConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this MicrosoftIngestionApiModelsPackagesAzureResourceManagerTestDrivePackageConfiguration.


        :param resource_type: The resource_type of this MicrosoftIngestionApiModelsPackagesAzureResourceManagerTestDrivePackageConfiguration.  # noqa: E501
        :type: str
        """
        allowed_values = ["AzureResourceManagerTestDrivePackageConfiguration"]  # noqa: E501
        if resource_type not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_type` ({0}), must be one of {1}"  # noqa: E501
                .format(resource_type, allowed_values)
            )

        self._resource_type = resource_type

    @property
    def regions(self):
        """Gets the regions of this MicrosoftIngestionApiModelsPackagesAzureResourceManagerTestDrivePackageConfiguration.  # noqa: E501


        :return: The regions of this MicrosoftIngestionApiModelsPackagesAzureResourceManagerTestDrivePackageConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._regions

    @regions.setter
    def regions(self, regions):
        """Sets the regions of this MicrosoftIngestionApiModelsPackagesAzureResourceManagerTestDrivePackageConfiguration.


        :param regions: The regions of this MicrosoftIngestionApiModelsPackagesAzureResourceManagerTestDrivePackageConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._regions = regions

    @property
    def hot_instances(self):
        """Gets the hot_instances of this MicrosoftIngestionApiModelsPackagesAzureResourceManagerTestDrivePackageConfiguration.  # noqa: E501


        :return: The hot_instances of this MicrosoftIngestionApiModelsPackagesAzureResourceManagerTestDrivePackageConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._hot_instances

    @hot_instances.setter
    def hot_instances(self, hot_instances):
        """Sets the hot_instances of this MicrosoftIngestionApiModelsPackagesAzureResourceManagerTestDrivePackageConfiguration.


        :param hot_instances: The hot_instances of this MicrosoftIngestionApiModelsPackagesAzureResourceManagerTestDrivePackageConfiguration.  # noqa: E501
        :type: int
        """

        self._hot_instances = hot_instances

    @property
    def warm_instances(self):
        """Gets the warm_instances of this MicrosoftIngestionApiModelsPackagesAzureResourceManagerTestDrivePackageConfiguration.  # noqa: E501


        :return: The warm_instances of this MicrosoftIngestionApiModelsPackagesAzureResourceManagerTestDrivePackageConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._warm_instances

    @warm_instances.setter
    def warm_instances(self, warm_instances):
        """Sets the warm_instances of this MicrosoftIngestionApiModelsPackagesAzureResourceManagerTestDrivePackageConfiguration.


        :param warm_instances: The warm_instances of this MicrosoftIngestionApiModelsPackagesAzureResourceManagerTestDrivePackageConfiguration.  # noqa: E501
        :type: int
        """

        self._warm_instances = warm_instances

    @property
    def cold_instances(self):
        """Gets the cold_instances of this MicrosoftIngestionApiModelsPackagesAzureResourceManagerTestDrivePackageConfiguration.  # noqa: E501


        :return: The cold_instances of this MicrosoftIngestionApiModelsPackagesAzureResourceManagerTestDrivePackageConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._cold_instances

    @cold_instances.setter
    def cold_instances(self, cold_instances):
        """Sets the cold_instances of this MicrosoftIngestionApiModelsPackagesAzureResourceManagerTestDrivePackageConfiguration.


        :param cold_instances: The cold_instances of this MicrosoftIngestionApiModelsPackagesAzureResourceManagerTestDrivePackageConfiguration.  # noqa: E501
        :type: int
        """

        self._cold_instances = cold_instances

    @property
    def azure_subscription_id(self):
        """Gets the azure_subscription_id of this MicrosoftIngestionApiModelsPackagesAzureResourceManagerTestDrivePackageConfiguration.  # noqa: E501


        :return: The azure_subscription_id of this MicrosoftIngestionApiModelsPackagesAzureResourceManagerTestDrivePackageConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._azure_subscription_id

    @azure_subscription_id.setter
    def azure_subscription_id(self, azure_subscription_id):
        """Sets the azure_subscription_id of this MicrosoftIngestionApiModelsPackagesAzureResourceManagerTestDrivePackageConfiguration.


        :param azure_subscription_id: The azure_subscription_id of this MicrosoftIngestionApiModelsPackagesAzureResourceManagerTestDrivePackageConfiguration.  # noqa: E501
        :type: str
        """

        self._azure_subscription_id = azure_subscription_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MicrosoftIngestionApiModelsPackagesAzureResourceManagerTestDrivePackageConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MicrosoftIngestionApiModelsPackagesAzureResourceManagerTestDrivePackageConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
