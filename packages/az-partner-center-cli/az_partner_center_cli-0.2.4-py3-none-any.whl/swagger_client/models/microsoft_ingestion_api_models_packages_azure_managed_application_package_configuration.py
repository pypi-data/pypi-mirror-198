# coding: utf-8

"""
    https://api.partner.microsoft.com/v1.0/ingestion

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.microsoft_ingestion_api_models_packages_base_package_configuration import MicrosoftIngestionApiModelsPackagesBasePackageConfiguration  # noqa: F401,E501

class MicrosoftIngestionApiModelsPackagesAzureManagedApplicationPackageConfiguration(MicrosoftIngestionApiModelsPackagesBasePackageConfiguration):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'resource_type': 'str',
        'version': 'str',
        'allow_jit_access': 'bool',
        'can_enable_customer_actions': 'bool',
        'allowed_customer_actions': 'list[str]',
        'public_azure_tenant_id': 'str',
        'public_azure_authorizations': 'list[MicrosoftIngestionApiModelsPackagesRoleAuthorization]',
        'azure_government_tenant_id': 'str',
        'azure_government_authorizations': 'list[MicrosoftIngestionApiModelsPackagesRoleAuthorization]',
        'policies': 'list[MicrosoftIngestionApiModelsPackagesAzurePolicy]',
        'package_references': 'list[MicrosoftIngestionApiModelsCommonTypeValuePair]'
    }
    if hasattr(MicrosoftIngestionApiModelsPackagesBasePackageConfiguration, "swagger_types"):
        swagger_types.update(MicrosoftIngestionApiModelsPackagesBasePackageConfiguration.swagger_types)

    attribute_map = {
        'resource_type': 'resourceType',
        'version': 'version',
        'allow_jit_access': 'allowJitAccess',
        'can_enable_customer_actions': 'canEnableCustomerActions',
        'allowed_customer_actions': 'allowedCustomerActions',
        'public_azure_tenant_id': 'publicAzureTenantID',
        'public_azure_authorizations': 'publicAzureAuthorizations',
        'azure_government_tenant_id': 'azureGovernmentTenantID',
        'azure_government_authorizations': 'azureGovernmentAuthorizations',
        'policies': 'policies',
        'package_references': 'packageReferences'
    }
    if hasattr(MicrosoftIngestionApiModelsPackagesBasePackageConfiguration, "attribute_map"):
        attribute_map.update(MicrosoftIngestionApiModelsPackagesBasePackageConfiguration.attribute_map)

    def __init__(self, resource_type=None, version=None, allow_jit_access=None, can_enable_customer_actions=None, allowed_customer_actions=None, public_azure_tenant_id=None, public_azure_authorizations=None, azure_government_tenant_id=None, azure_government_authorizations=None, policies=None, package_references=None, *args, **kwargs):  # noqa: E501
        """MicrosoftIngestionApiModelsPackagesAzureManagedApplicationPackageConfiguration - a model defined in Swagger"""  # noqa: E501
        self._resource_type = None
        self._version = None
        self._allow_jit_access = None
        self._can_enable_customer_actions = None
        self._allowed_customer_actions = None
        self._public_azure_tenant_id = None
        self._public_azure_authorizations = None
        self._azure_government_tenant_id = None
        self._azure_government_authorizations = None
        self._policies = None
        self._package_references = None
        self.discriminator = None
        if resource_type is not None:
            self.resource_type = resource_type
        if version is not None:
            self.version = version
        if allow_jit_access is not None:
            self.allow_jit_access = allow_jit_access
        if can_enable_customer_actions is not None:
            self.can_enable_customer_actions = can_enable_customer_actions
        if allowed_customer_actions is not None:
            self.allowed_customer_actions = allowed_customer_actions
        if public_azure_tenant_id is not None:
            self.public_azure_tenant_id = public_azure_tenant_id
        if public_azure_authorizations is not None:
            self.public_azure_authorizations = public_azure_authorizations
        if azure_government_tenant_id is not None:
            self.azure_government_tenant_id = azure_government_tenant_id
        if azure_government_authorizations is not None:
            self.azure_government_authorizations = azure_government_authorizations
        if policies is not None:
            self.policies = policies
        if package_references is not None:
            self.package_references = package_references
        MicrosoftIngestionApiModelsPackagesBasePackageConfiguration.__init__(self, *args, **kwargs)

    @property
    def resource_type(self):
        """Gets the resource_type of this MicrosoftIngestionApiModelsPackagesAzureManagedApplicationPackageConfiguration.  # noqa: E501


        :return: The resource_type of this MicrosoftIngestionApiModelsPackagesAzureManagedApplicationPackageConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this MicrosoftIngestionApiModelsPackagesAzureManagedApplicationPackageConfiguration.


        :param resource_type: The resource_type of this MicrosoftIngestionApiModelsPackagesAzureManagedApplicationPackageConfiguration.  # noqa: E501
        :type: str
        """
        allowed_values = ["AzureManagedApplicationPackageConfiguration"]  # noqa: E501
        if resource_type not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_type` ({0}), must be one of {1}"  # noqa: E501
                .format(resource_type, allowed_values)
            )

        self._resource_type = resource_type

    @property
    def version(self):
        """Gets the version of this MicrosoftIngestionApiModelsPackagesAzureManagedApplicationPackageConfiguration.  # noqa: E501


        :return: The version of this MicrosoftIngestionApiModelsPackagesAzureManagedApplicationPackageConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this MicrosoftIngestionApiModelsPackagesAzureManagedApplicationPackageConfiguration.


        :param version: The version of this MicrosoftIngestionApiModelsPackagesAzureManagedApplicationPackageConfiguration.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def allow_jit_access(self):
        """Gets the allow_jit_access of this MicrosoftIngestionApiModelsPackagesAzureManagedApplicationPackageConfiguration.  # noqa: E501


        :return: The allow_jit_access of this MicrosoftIngestionApiModelsPackagesAzureManagedApplicationPackageConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._allow_jit_access

    @allow_jit_access.setter
    def allow_jit_access(self, allow_jit_access):
        """Sets the allow_jit_access of this MicrosoftIngestionApiModelsPackagesAzureManagedApplicationPackageConfiguration.


        :param allow_jit_access: The allow_jit_access of this MicrosoftIngestionApiModelsPackagesAzureManagedApplicationPackageConfiguration.  # noqa: E501
        :type: bool
        """

        self._allow_jit_access = allow_jit_access

    @property
    def can_enable_customer_actions(self):
        """Gets the can_enable_customer_actions of this MicrosoftIngestionApiModelsPackagesAzureManagedApplicationPackageConfiguration.  # noqa: E501


        :return: The can_enable_customer_actions of this MicrosoftIngestionApiModelsPackagesAzureManagedApplicationPackageConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._can_enable_customer_actions

    @can_enable_customer_actions.setter
    def can_enable_customer_actions(self, can_enable_customer_actions):
        """Sets the can_enable_customer_actions of this MicrosoftIngestionApiModelsPackagesAzureManagedApplicationPackageConfiguration.


        :param can_enable_customer_actions: The can_enable_customer_actions of this MicrosoftIngestionApiModelsPackagesAzureManagedApplicationPackageConfiguration.  # noqa: E501
        :type: bool
        """

        self._can_enable_customer_actions = can_enable_customer_actions

    @property
    def allowed_customer_actions(self):
        """Gets the allowed_customer_actions of this MicrosoftIngestionApiModelsPackagesAzureManagedApplicationPackageConfiguration.  # noqa: E501


        :return: The allowed_customer_actions of this MicrosoftIngestionApiModelsPackagesAzureManagedApplicationPackageConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_customer_actions

    @allowed_customer_actions.setter
    def allowed_customer_actions(self, allowed_customer_actions):
        """Sets the allowed_customer_actions of this MicrosoftIngestionApiModelsPackagesAzureManagedApplicationPackageConfiguration.


        :param allowed_customer_actions: The allowed_customer_actions of this MicrosoftIngestionApiModelsPackagesAzureManagedApplicationPackageConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._allowed_customer_actions = allowed_customer_actions

    @property
    def public_azure_tenant_id(self):
        """Gets the public_azure_tenant_id of this MicrosoftIngestionApiModelsPackagesAzureManagedApplicationPackageConfiguration.  # noqa: E501


        :return: The public_azure_tenant_id of this MicrosoftIngestionApiModelsPackagesAzureManagedApplicationPackageConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._public_azure_tenant_id

    @public_azure_tenant_id.setter
    def public_azure_tenant_id(self, public_azure_tenant_id):
        """Sets the public_azure_tenant_id of this MicrosoftIngestionApiModelsPackagesAzureManagedApplicationPackageConfiguration.


        :param public_azure_tenant_id: The public_azure_tenant_id of this MicrosoftIngestionApiModelsPackagesAzureManagedApplicationPackageConfiguration.  # noqa: E501
        :type: str
        """

        self._public_azure_tenant_id = public_azure_tenant_id

    @property
    def public_azure_authorizations(self):
        """Gets the public_azure_authorizations of this MicrosoftIngestionApiModelsPackagesAzureManagedApplicationPackageConfiguration.  # noqa: E501


        :return: The public_azure_authorizations of this MicrosoftIngestionApiModelsPackagesAzureManagedApplicationPackageConfiguration.  # noqa: E501
        :rtype: list[MicrosoftIngestionApiModelsPackagesRoleAuthorization]
        """
        return self._public_azure_authorizations

    @public_azure_authorizations.setter
    def public_azure_authorizations(self, public_azure_authorizations):
        """Sets the public_azure_authorizations of this MicrosoftIngestionApiModelsPackagesAzureManagedApplicationPackageConfiguration.


        :param public_azure_authorizations: The public_azure_authorizations of this MicrosoftIngestionApiModelsPackagesAzureManagedApplicationPackageConfiguration.  # noqa: E501
        :type: list[MicrosoftIngestionApiModelsPackagesRoleAuthorization]
        """

        self._public_azure_authorizations = public_azure_authorizations

    @property
    def azure_government_tenant_id(self):
        """Gets the azure_government_tenant_id of this MicrosoftIngestionApiModelsPackagesAzureManagedApplicationPackageConfiguration.  # noqa: E501


        :return: The azure_government_tenant_id of this MicrosoftIngestionApiModelsPackagesAzureManagedApplicationPackageConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._azure_government_tenant_id

    @azure_government_tenant_id.setter
    def azure_government_tenant_id(self, azure_government_tenant_id):
        """Sets the azure_government_tenant_id of this MicrosoftIngestionApiModelsPackagesAzureManagedApplicationPackageConfiguration.


        :param azure_government_tenant_id: The azure_government_tenant_id of this MicrosoftIngestionApiModelsPackagesAzureManagedApplicationPackageConfiguration.  # noqa: E501
        :type: str
        """

        self._azure_government_tenant_id = azure_government_tenant_id

    @property
    def azure_government_authorizations(self):
        """Gets the azure_government_authorizations of this MicrosoftIngestionApiModelsPackagesAzureManagedApplicationPackageConfiguration.  # noqa: E501


        :return: The azure_government_authorizations of this MicrosoftIngestionApiModelsPackagesAzureManagedApplicationPackageConfiguration.  # noqa: E501
        :rtype: list[MicrosoftIngestionApiModelsPackagesRoleAuthorization]
        """
        return self._azure_government_authorizations

    @azure_government_authorizations.setter
    def azure_government_authorizations(self, azure_government_authorizations):
        """Sets the azure_government_authorizations of this MicrosoftIngestionApiModelsPackagesAzureManagedApplicationPackageConfiguration.


        :param azure_government_authorizations: The azure_government_authorizations of this MicrosoftIngestionApiModelsPackagesAzureManagedApplicationPackageConfiguration.  # noqa: E501
        :type: list[MicrosoftIngestionApiModelsPackagesRoleAuthorization]
        """

        self._azure_government_authorizations = azure_government_authorizations

    @property
    def policies(self):
        """Gets the policies of this MicrosoftIngestionApiModelsPackagesAzureManagedApplicationPackageConfiguration.  # noqa: E501


        :return: The policies of this MicrosoftIngestionApiModelsPackagesAzureManagedApplicationPackageConfiguration.  # noqa: E501
        :rtype: list[MicrosoftIngestionApiModelsPackagesAzurePolicy]
        """
        return self._policies

    @policies.setter
    def policies(self, policies):
        """Sets the policies of this MicrosoftIngestionApiModelsPackagesAzureManagedApplicationPackageConfiguration.


        :param policies: The policies of this MicrosoftIngestionApiModelsPackagesAzureManagedApplicationPackageConfiguration.  # noqa: E501
        :type: list[MicrosoftIngestionApiModelsPackagesAzurePolicy]
        """

        self._policies = policies

    @property
    def package_references(self):
        """Gets the package_references of this MicrosoftIngestionApiModelsPackagesAzureManagedApplicationPackageConfiguration.  # noqa: E501


        :return: The package_references of this MicrosoftIngestionApiModelsPackagesAzureManagedApplicationPackageConfiguration.  # noqa: E501
        :rtype: list[MicrosoftIngestionApiModelsCommonTypeValuePair]
        """
        return self._package_references

    @package_references.setter
    def package_references(self, package_references):
        """Sets the package_references of this MicrosoftIngestionApiModelsPackagesAzureManagedApplicationPackageConfiguration.


        :param package_references: The package_references of this MicrosoftIngestionApiModelsPackagesAzureManagedApplicationPackageConfiguration.  # noqa: E501
        :type: list[MicrosoftIngestionApiModelsCommonTypeValuePair]
        """

        self._package_references = package_references

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MicrosoftIngestionApiModelsPackagesAzureManagedApplicationPackageConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MicrosoftIngestionApiModelsPackagesAzureManagedApplicationPackageConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
