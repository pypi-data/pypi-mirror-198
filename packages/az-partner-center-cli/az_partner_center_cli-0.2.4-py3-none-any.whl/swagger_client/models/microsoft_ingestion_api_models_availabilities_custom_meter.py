# coding: utf-8

"""
    https://api.partner.microsoft.com/v1.0/ingestion

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MicrosoftIngestionApiModelsAvailabilitiesCustomMeter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_enabled': 'bool',
        'id': 'str',
        'unique_id': 'str',
        'display_name': 'str',
        'unit_of_measure': 'str',
        'price_in_usd': 'float',
        'included_base_quantities': 'list[MicrosoftIngestionApiModelsAvailabilitiesIncludedBaseQuantity]'
    }

    attribute_map = {
        'is_enabled': 'isEnabled',
        'id': 'ID',
        'unique_id': 'uniqueID',
        'display_name': 'displayName',
        'unit_of_measure': 'unitOfMeasure',
        'price_in_usd': 'priceInUsd',
        'included_base_quantities': 'includedBaseQuantities'
    }

    def __init__(self, is_enabled=None, id=None, unique_id=None, display_name=None, unit_of_measure=None, price_in_usd=None, included_base_quantities=None):  # noqa: E501
        """MicrosoftIngestionApiModelsAvailabilitiesCustomMeter - a model defined in Swagger"""  # noqa: E501
        self._is_enabled = None
        self._id = None
        self._unique_id = None
        self._display_name = None
        self._unit_of_measure = None
        self._price_in_usd = None
        self._included_base_quantities = None
        self.discriminator = None
        if is_enabled is not None:
            self.is_enabled = is_enabled
        if id is not None:
            self.id = id
        if unique_id is not None:
            self.unique_id = unique_id
        if display_name is not None:
            self.display_name = display_name
        if unit_of_measure is not None:
            self.unit_of_measure = unit_of_measure
        if price_in_usd is not None:
            self.price_in_usd = price_in_usd
        if included_base_quantities is not None:
            self.included_base_quantities = included_base_quantities

    @property
    def is_enabled(self):
        """Gets the is_enabled of this MicrosoftIngestionApiModelsAvailabilitiesCustomMeter.  # noqa: E501


        :return: The is_enabled of this MicrosoftIngestionApiModelsAvailabilitiesCustomMeter.  # noqa: E501
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this MicrosoftIngestionApiModelsAvailabilitiesCustomMeter.


        :param is_enabled: The is_enabled of this MicrosoftIngestionApiModelsAvailabilitiesCustomMeter.  # noqa: E501
        :type: bool
        """

        self._is_enabled = is_enabled

    @property
    def id(self):
        """Gets the id of this MicrosoftIngestionApiModelsAvailabilitiesCustomMeter.  # noqa: E501


        :return: The id of this MicrosoftIngestionApiModelsAvailabilitiesCustomMeter.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MicrosoftIngestionApiModelsAvailabilitiesCustomMeter.


        :param id: The id of this MicrosoftIngestionApiModelsAvailabilitiesCustomMeter.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def unique_id(self):
        """Gets the unique_id of this MicrosoftIngestionApiModelsAvailabilitiesCustomMeter.  # noqa: E501


        :return: The unique_id of this MicrosoftIngestionApiModelsAvailabilitiesCustomMeter.  # noqa: E501
        :rtype: str
        """
        return self._unique_id

    @unique_id.setter
    def unique_id(self, unique_id):
        """Sets the unique_id of this MicrosoftIngestionApiModelsAvailabilitiesCustomMeter.


        :param unique_id: The unique_id of this MicrosoftIngestionApiModelsAvailabilitiesCustomMeter.  # noqa: E501
        :type: str
        """

        self._unique_id = unique_id

    @property
    def display_name(self):
        """Gets the display_name of this MicrosoftIngestionApiModelsAvailabilitiesCustomMeter.  # noqa: E501


        :return: The display_name of this MicrosoftIngestionApiModelsAvailabilitiesCustomMeter.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this MicrosoftIngestionApiModelsAvailabilitiesCustomMeter.


        :param display_name: The display_name of this MicrosoftIngestionApiModelsAvailabilitiesCustomMeter.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def unit_of_measure(self):
        """Gets the unit_of_measure of this MicrosoftIngestionApiModelsAvailabilitiesCustomMeter.  # noqa: E501


        :return: The unit_of_measure of this MicrosoftIngestionApiModelsAvailabilitiesCustomMeter.  # noqa: E501
        :rtype: str
        """
        return self._unit_of_measure

    @unit_of_measure.setter
    def unit_of_measure(self, unit_of_measure):
        """Sets the unit_of_measure of this MicrosoftIngestionApiModelsAvailabilitiesCustomMeter.


        :param unit_of_measure: The unit_of_measure of this MicrosoftIngestionApiModelsAvailabilitiesCustomMeter.  # noqa: E501
        :type: str
        """

        self._unit_of_measure = unit_of_measure

    @property
    def price_in_usd(self):
        """Gets the price_in_usd of this MicrosoftIngestionApiModelsAvailabilitiesCustomMeter.  # noqa: E501


        :return: The price_in_usd of this MicrosoftIngestionApiModelsAvailabilitiesCustomMeter.  # noqa: E501
        :rtype: float
        """
        return self._price_in_usd

    @price_in_usd.setter
    def price_in_usd(self, price_in_usd):
        """Sets the price_in_usd of this MicrosoftIngestionApiModelsAvailabilitiesCustomMeter.


        :param price_in_usd: The price_in_usd of this MicrosoftIngestionApiModelsAvailabilitiesCustomMeter.  # noqa: E501
        :type: float
        """

        self._price_in_usd = price_in_usd

    @property
    def included_base_quantities(self):
        """Gets the included_base_quantities of this MicrosoftIngestionApiModelsAvailabilitiesCustomMeter.  # noqa: E501


        :return: The included_base_quantities of this MicrosoftIngestionApiModelsAvailabilitiesCustomMeter.  # noqa: E501
        :rtype: list[MicrosoftIngestionApiModelsAvailabilitiesIncludedBaseQuantity]
        """
        return self._included_base_quantities

    @included_base_quantities.setter
    def included_base_quantities(self, included_base_quantities):
        """Sets the included_base_quantities of this MicrosoftIngestionApiModelsAvailabilitiesCustomMeter.


        :param included_base_quantities: The included_base_quantities of this MicrosoftIngestionApiModelsAvailabilitiesCustomMeter.  # noqa: E501
        :type: list[MicrosoftIngestionApiModelsAvailabilitiesIncludedBaseQuantity]
        """

        self._included_base_quantities = included_base_quantities

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MicrosoftIngestionApiModelsAvailabilitiesCustomMeter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MicrosoftIngestionApiModelsAvailabilitiesCustomMeter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
