# coding: utf-8

"""
    https://api.partner.microsoft.com/v1.0/ingestion

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MicrosoftIngestionApiModelsProductsAzureProductSetup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'resource_type': 'str',
        'selling_option': 'str',
        'call_to_action': 'str',
        'trial_uri': 'str',
        'enable_test_drive': 'bool',
        'test_drive_type': 'str',
        'channel_states': 'list[MicrosoftIngestionApiModelsCommonTypeValuePair]'
    }

    attribute_map = {
        'resource_type': 'resourceType',
        'selling_option': 'sellingOption',
        'call_to_action': 'callToAction',
        'trial_uri': 'trialUri',
        'enable_test_drive': 'enableTestDrive',
        'test_drive_type': 'testDriveType',
        'channel_states': 'channelStates'
    }

    def __init__(self, resource_type=None, selling_option=None, call_to_action=None, trial_uri=None, enable_test_drive=None, test_drive_type=None, channel_states=None):  # noqa: E501
        """MicrosoftIngestionApiModelsProductsAzureProductSetup - a model defined in Swagger"""  # noqa: E501
        self._resource_type = None
        self._selling_option = None
        self._call_to_action = None
        self._trial_uri = None
        self._enable_test_drive = None
        self._test_drive_type = None
        self._channel_states = None
        self.discriminator = None
        if resource_type is not None:
            self.resource_type = resource_type
        if selling_option is not None:
            self.selling_option = selling_option
        if call_to_action is not None:
            self.call_to_action = call_to_action
        if trial_uri is not None:
            self.trial_uri = trial_uri
        if enable_test_drive is not None:
            self.enable_test_drive = enable_test_drive
        if test_drive_type is not None:
            self.test_drive_type = test_drive_type
        if channel_states is not None:
            self.channel_states = channel_states

    @property
    def resource_type(self):
        """Gets the resource_type of this MicrosoftIngestionApiModelsProductsAzureProductSetup.  # noqa: E501


        :return: The resource_type of this MicrosoftIngestionApiModelsProductsAzureProductSetup.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this MicrosoftIngestionApiModelsProductsAzureProductSetup.


        :param resource_type: The resource_type of this MicrosoftIngestionApiModelsProductsAzureProductSetup.  # noqa: E501
        :type: str
        """
        allowed_values = ["AzureProductSetup"]  # noqa: E501
        if resource_type not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_type` ({0}), must be one of {1}"  # noqa: E501
                .format(resource_type, allowed_values)
            )

        self._resource_type = resource_type

    @property
    def selling_option(self):
        """Gets the selling_option of this MicrosoftIngestionApiModelsProductsAzureProductSetup.  # noqa: E501


        :return: The selling_option of this MicrosoftIngestionApiModelsProductsAzureProductSetup.  # noqa: E501
        :rtype: str
        """
        return self._selling_option

    @selling_option.setter
    def selling_option(self, selling_option):
        """Sets the selling_option of this MicrosoftIngestionApiModelsProductsAzureProductSetup.


        :param selling_option: The selling_option of this MicrosoftIngestionApiModelsProductsAzureProductSetup.  # noqa: E501
        :type: str
        """
        allowed_values = ["ListingOnly", "ListAndSell"]  # noqa: E501
        if selling_option not in allowed_values:
            raise ValueError(
                "Invalid value for `selling_option` ({0}), must be one of {1}"  # noqa: E501
                .format(selling_option, allowed_values)
            )

        self._selling_option = selling_option

    @property
    def call_to_action(self):
        """Gets the call_to_action of this MicrosoftIngestionApiModelsProductsAzureProductSetup.  # noqa: E501


        :return: The call_to_action of this MicrosoftIngestionApiModelsProductsAzureProductSetup.  # noqa: E501
        :rtype: str
        """
        return self._call_to_action

    @call_to_action.setter
    def call_to_action(self, call_to_action):
        """Sets the call_to_action of this MicrosoftIngestionApiModelsProductsAzureProductSetup.


        :param call_to_action: The call_to_action of this MicrosoftIngestionApiModelsProductsAzureProductSetup.  # noqa: E501
        :type: str
        """
        allowed_values = ["free", "free-trial", "contact-me"]  # noqa: E501
        if call_to_action not in allowed_values:
            raise ValueError(
                "Invalid value for `call_to_action` ({0}), must be one of {1}"  # noqa: E501
                .format(call_to_action, allowed_values)
            )

        self._call_to_action = call_to_action

    @property
    def trial_uri(self):
        """Gets the trial_uri of this MicrosoftIngestionApiModelsProductsAzureProductSetup.  # noqa: E501


        :return: The trial_uri of this MicrosoftIngestionApiModelsProductsAzureProductSetup.  # noqa: E501
        :rtype: str
        """
        return self._trial_uri

    @trial_uri.setter
    def trial_uri(self, trial_uri):
        """Sets the trial_uri of this MicrosoftIngestionApiModelsProductsAzureProductSetup.


        :param trial_uri: The trial_uri of this MicrosoftIngestionApiModelsProductsAzureProductSetup.  # noqa: E501
        :type: str
        """

        self._trial_uri = trial_uri

    @property
    def enable_test_drive(self):
        """Gets the enable_test_drive of this MicrosoftIngestionApiModelsProductsAzureProductSetup.  # noqa: E501


        :return: The enable_test_drive of this MicrosoftIngestionApiModelsProductsAzureProductSetup.  # noqa: E501
        :rtype: bool
        """
        return self._enable_test_drive

    @enable_test_drive.setter
    def enable_test_drive(self, enable_test_drive):
        """Sets the enable_test_drive of this MicrosoftIngestionApiModelsProductsAzureProductSetup.


        :param enable_test_drive: The enable_test_drive of this MicrosoftIngestionApiModelsProductsAzureProductSetup.  # noqa: E501
        :type: bool
        """

        self._enable_test_drive = enable_test_drive

    @property
    def test_drive_type(self):
        """Gets the test_drive_type of this MicrosoftIngestionApiModelsProductsAzureProductSetup.  # noqa: E501


        :return: The test_drive_type of this MicrosoftIngestionApiModelsProductsAzureProductSetup.  # noqa: E501
        :rtype: str
        """
        return self._test_drive_type

    @test_drive_type.setter
    def test_drive_type(self, test_drive_type):
        """Sets the test_drive_type of this MicrosoftIngestionApiModelsProductsAzureProductSetup.


        :param test_drive_type: The test_drive_type of this MicrosoftIngestionApiModelsProductsAzureProductSetup.  # noqa: E501
        :type: str
        """

        self._test_drive_type = test_drive_type

    @property
    def channel_states(self):
        """Gets the channel_states of this MicrosoftIngestionApiModelsProductsAzureProductSetup.  # noqa: E501


        :return: The channel_states of this MicrosoftIngestionApiModelsProductsAzureProductSetup.  # noqa: E501
        :rtype: list[MicrosoftIngestionApiModelsCommonTypeValuePair]
        """
        return self._channel_states

    @channel_states.setter
    def channel_states(self, channel_states):
        """Sets the channel_states of this MicrosoftIngestionApiModelsProductsAzureProductSetup.


        :param channel_states: The channel_states of this MicrosoftIngestionApiModelsProductsAzureProductSetup.  # noqa: E501
        :type: list[MicrosoftIngestionApiModelsCommonTypeValuePair]
        """

        self._channel_states = channel_states

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MicrosoftIngestionApiModelsProductsAzureProductSetup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MicrosoftIngestionApiModelsProductsAzureProductSetup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
