# coding: utf-8

"""
    https://api.partner.microsoft.com/v1.0/ingestion

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MicrosoftIngestionApiModelsPackagesPackageRegionAvailability(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'region': 'str',
        'is_available': 'bool',
        'application_configuration_uri': 'str'
    }

    attribute_map = {
        'region': 'region',
        'is_available': 'isAvailable',
        'application_configuration_uri': 'applicationConfigurationUri'
    }

    def __init__(self, region=None, is_available=None, application_configuration_uri=None):  # noqa: E501
        """MicrosoftIngestionApiModelsPackagesPackageRegionAvailability - a model defined in Swagger"""  # noqa: E501
        self._region = None
        self._is_available = None
        self._application_configuration_uri = None
        self.discriminator = None
        if region is not None:
            self.region = region
        if is_available is not None:
            self.is_available = is_available
        if application_configuration_uri is not None:
            self.application_configuration_uri = application_configuration_uri

    @property
    def region(self):
        """Gets the region of this MicrosoftIngestionApiModelsPackagesPackageRegionAvailability.  # noqa: E501


        :return: The region of this MicrosoftIngestionApiModelsPackagesPackageRegionAvailability.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this MicrosoftIngestionApiModelsPackagesPackageRegionAvailability.


        :param region: The region of this MicrosoftIngestionApiModelsPackagesPackageRegionAvailability.  # noqa: E501
        :type: str
        """
        allowed_values = ["NorthAmerica", "SouthAmerica", "Canada", "Emea", "India", "Japan", "Apac", "Australia", "UnitedKingdom", "GermanySovereign", "USGovSovereign", "USGovHighSovereign", "ChinaSovereign", "TipSovereign", "France", "USDepartmentOfDefense"]  # noqa: E501
        if region not in allowed_values:
            raise ValueError(
                "Invalid value for `region` ({0}), must be one of {1}"  # noqa: E501
                .format(region, allowed_values)
            )

        self._region = region

    @property
    def is_available(self):
        """Gets the is_available of this MicrosoftIngestionApiModelsPackagesPackageRegionAvailability.  # noqa: E501


        :return: The is_available of this MicrosoftIngestionApiModelsPackagesPackageRegionAvailability.  # noqa: E501
        :rtype: bool
        """
        return self._is_available

    @is_available.setter
    def is_available(self, is_available):
        """Sets the is_available of this MicrosoftIngestionApiModelsPackagesPackageRegionAvailability.


        :param is_available: The is_available of this MicrosoftIngestionApiModelsPackagesPackageRegionAvailability.  # noqa: E501
        :type: bool
        """

        self._is_available = is_available

    @property
    def application_configuration_uri(self):
        """Gets the application_configuration_uri of this MicrosoftIngestionApiModelsPackagesPackageRegionAvailability.  # noqa: E501


        :return: The application_configuration_uri of this MicrosoftIngestionApiModelsPackagesPackageRegionAvailability.  # noqa: E501
        :rtype: str
        """
        return self._application_configuration_uri

    @application_configuration_uri.setter
    def application_configuration_uri(self, application_configuration_uri):
        """Sets the application_configuration_uri of this MicrosoftIngestionApiModelsPackagesPackageRegionAvailability.


        :param application_configuration_uri: The application_configuration_uri of this MicrosoftIngestionApiModelsPackagesPackageRegionAvailability.  # noqa: E501
        :type: str
        """

        self._application_configuration_uri = application_configuration_uri

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MicrosoftIngestionApiModelsPackagesPackageRegionAvailability, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MicrosoftIngestionApiModelsPackagesPackageRegionAvailability):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
