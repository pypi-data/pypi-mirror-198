# coding: utf-8

"""
    https://api.partner.microsoft.com/v1.0/ingestion

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MicrosoftIngestionApiModelsAvailabilitiesPriceSchedule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'retail_price': 'MicrosoftIngestionApiModelsAvailabilitiesPrice',
        'pricing_model': 'str',
        'price_cadence': 'MicrosoftIngestionApiModelsAvailabilitiesPricingCadence',
        'pricing_units': 'list[MicrosoftIngestionApiModelsAvailabilitiesPricingUnit]',
        'date_time_range': 'MicrosoftIngestionApiModelsAvailabilitiesLocalizedDateTimeRange'
    }

    attribute_map = {
        'retail_price': 'retailPrice',
        'pricing_model': 'pricingModel',
        'price_cadence': 'priceCadence',
        'pricing_units': 'pricingUnits',
        'date_time_range': 'dateTimeRange'
    }

    def __init__(self, retail_price=None, pricing_model=None, price_cadence=None, pricing_units=None, date_time_range=None):  # noqa: E501
        """MicrosoftIngestionApiModelsAvailabilitiesPriceSchedule - a model defined in Swagger"""  # noqa: E501
        self._retail_price = None
        self._pricing_model = None
        self._price_cadence = None
        self._pricing_units = None
        self._date_time_range = None
        self.discriminator = None
        if retail_price is not None:
            self.retail_price = retail_price
        if pricing_model is not None:
            self.pricing_model = pricing_model
        if price_cadence is not None:
            self.price_cadence = price_cadence
        if pricing_units is not None:
            self.pricing_units = pricing_units
        if date_time_range is not None:
            self.date_time_range = date_time_range

    @property
    def retail_price(self):
        """Gets the retail_price of this MicrosoftIngestionApiModelsAvailabilitiesPriceSchedule.  # noqa: E501


        :return: The retail_price of this MicrosoftIngestionApiModelsAvailabilitiesPriceSchedule.  # noqa: E501
        :rtype: MicrosoftIngestionApiModelsAvailabilitiesPrice
        """
        return self._retail_price

    @retail_price.setter
    def retail_price(self, retail_price):
        """Sets the retail_price of this MicrosoftIngestionApiModelsAvailabilitiesPriceSchedule.


        :param retail_price: The retail_price of this MicrosoftIngestionApiModelsAvailabilitiesPriceSchedule.  # noqa: E501
        :type: MicrosoftIngestionApiModelsAvailabilitiesPrice
        """

        self._retail_price = retail_price

    @property
    def pricing_model(self):
        """Gets the pricing_model of this MicrosoftIngestionApiModelsAvailabilitiesPriceSchedule.  # noqa: E501


        :return: The pricing_model of this MicrosoftIngestionApiModelsAvailabilitiesPriceSchedule.  # noqa: E501
        :rtype: str
        """
        return self._pricing_model

    @pricing_model.setter
    def pricing_model(self, pricing_model):
        """Sets the pricing_model of this MicrosoftIngestionApiModelsAvailabilitiesPriceSchedule.


        :param pricing_model: The pricing_model of this MicrosoftIngestionApiModelsAvailabilitiesPriceSchedule.  # noqa: E501
        :type: str
        """
        allowed_values = ["Flat", "Recurring", "Usage"]  # noqa: E501
        if pricing_model not in allowed_values:
            raise ValueError(
                "Invalid value for `pricing_model` ({0}), must be one of {1}"  # noqa: E501
                .format(pricing_model, allowed_values)
            )

        self._pricing_model = pricing_model

    @property
    def price_cadence(self):
        """Gets the price_cadence of this MicrosoftIngestionApiModelsAvailabilitiesPriceSchedule.  # noqa: E501


        :return: The price_cadence of this MicrosoftIngestionApiModelsAvailabilitiesPriceSchedule.  # noqa: E501
        :rtype: MicrosoftIngestionApiModelsAvailabilitiesPricingCadence
        """
        return self._price_cadence

    @price_cadence.setter
    def price_cadence(self, price_cadence):
        """Sets the price_cadence of this MicrosoftIngestionApiModelsAvailabilitiesPriceSchedule.


        :param price_cadence: The price_cadence of this MicrosoftIngestionApiModelsAvailabilitiesPriceSchedule.  # noqa: E501
        :type: MicrosoftIngestionApiModelsAvailabilitiesPricingCadence
        """

        self._price_cadence = price_cadence

    @property
    def pricing_units(self):
        """Gets the pricing_units of this MicrosoftIngestionApiModelsAvailabilitiesPriceSchedule.  # noqa: E501


        :return: The pricing_units of this MicrosoftIngestionApiModelsAvailabilitiesPriceSchedule.  # noqa: E501
        :rtype: list[MicrosoftIngestionApiModelsAvailabilitiesPricingUnit]
        """
        return self._pricing_units

    @pricing_units.setter
    def pricing_units(self, pricing_units):
        """Sets the pricing_units of this MicrosoftIngestionApiModelsAvailabilitiesPriceSchedule.


        :param pricing_units: The pricing_units of this MicrosoftIngestionApiModelsAvailabilitiesPriceSchedule.  # noqa: E501
        :type: list[MicrosoftIngestionApiModelsAvailabilitiesPricingUnit]
        """

        self._pricing_units = pricing_units

    @property
    def date_time_range(self):
        """Gets the date_time_range of this MicrosoftIngestionApiModelsAvailabilitiesPriceSchedule.  # noqa: E501


        :return: The date_time_range of this MicrosoftIngestionApiModelsAvailabilitiesPriceSchedule.  # noqa: E501
        :rtype: MicrosoftIngestionApiModelsAvailabilitiesLocalizedDateTimeRange
        """
        return self._date_time_range

    @date_time_range.setter
    def date_time_range(self, date_time_range):
        """Sets the date_time_range of this MicrosoftIngestionApiModelsAvailabilitiesPriceSchedule.


        :param date_time_range: The date_time_range of this MicrosoftIngestionApiModelsAvailabilitiesPriceSchedule.  # noqa: E501
        :type: MicrosoftIngestionApiModelsAvailabilitiesLocalizedDateTimeRange
        """

        self._date_time_range = date_time_range

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MicrosoftIngestionApiModelsAvailabilitiesPriceSchedule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MicrosoftIngestionApiModelsAvailabilitiesPriceSchedule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
