# coding: utf-8

"""
    https://api.partner.microsoft.com/v1.0/ingestion

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MicrosoftIngestionApiModelsAvailabilitiesPricingUnit(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'unit_type': 'str',
        'is_unlimited_unit': 'bool',
        'lower_unit': 'int',
        'upper_unit': 'int'
    }

    attribute_map = {
        'name': 'name',
        'unit_type': 'unitType',
        'is_unlimited_unit': 'isUnlimitedUnit',
        'lower_unit': 'lowerUnit',
        'upper_unit': 'upperUnit'
    }

    def __init__(self, name=None, unit_type=None, is_unlimited_unit=None, lower_unit=None, upper_unit=None):  # noqa: E501
        """MicrosoftIngestionApiModelsAvailabilitiesPricingUnit - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._unit_type = None
        self._is_unlimited_unit = None
        self._lower_unit = None
        self._upper_unit = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if unit_type is not None:
            self.unit_type = unit_type
        if is_unlimited_unit is not None:
            self.is_unlimited_unit = is_unlimited_unit
        if lower_unit is not None:
            self.lower_unit = lower_unit
        if upper_unit is not None:
            self.upper_unit = upper_unit

    @property
    def name(self):
        """Gets the name of this MicrosoftIngestionApiModelsAvailabilitiesPricingUnit.  # noqa: E501


        :return: The name of this MicrosoftIngestionApiModelsAvailabilitiesPricingUnit.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MicrosoftIngestionApiModelsAvailabilitiesPricingUnit.


        :param name: The name of this MicrosoftIngestionApiModelsAvailabilitiesPricingUnit.  # noqa: E501
        :type: str
        """
        allowed_values = ["sharedcore", "transactions"]  # noqa: E501
        if name not in allowed_values:
            raise ValueError(
                "Invalid value for `name` ({0}), must be one of {1}"  # noqa: E501
                .format(name, allowed_values)
            )

        self._name = name

    @property
    def unit_type(self):
        """Gets the unit_type of this MicrosoftIngestionApiModelsAvailabilitiesPricingUnit.  # noqa: E501


        :return: The unit_type of this MicrosoftIngestionApiModelsAvailabilitiesPricingUnit.  # noqa: E501
        :rtype: str
        """
        return self._unit_type

    @unit_type.setter
    def unit_type(self, unit_type):
        """Sets the unit_type of this MicrosoftIngestionApiModelsAvailabilitiesPricingUnit.


        :param unit_type: The unit_type of this MicrosoftIngestionApiModelsAvailabilitiesPricingUnit.  # noqa: E501
        :type: str
        """

        self._unit_type = unit_type

    @property
    def is_unlimited_unit(self):
        """Gets the is_unlimited_unit of this MicrosoftIngestionApiModelsAvailabilitiesPricingUnit.  # noqa: E501


        :return: The is_unlimited_unit of this MicrosoftIngestionApiModelsAvailabilitiesPricingUnit.  # noqa: E501
        :rtype: bool
        """
        return self._is_unlimited_unit

    @is_unlimited_unit.setter
    def is_unlimited_unit(self, is_unlimited_unit):
        """Sets the is_unlimited_unit of this MicrosoftIngestionApiModelsAvailabilitiesPricingUnit.


        :param is_unlimited_unit: The is_unlimited_unit of this MicrosoftIngestionApiModelsAvailabilitiesPricingUnit.  # noqa: E501
        :type: bool
        """

        self._is_unlimited_unit = is_unlimited_unit

    @property
    def lower_unit(self):
        """Gets the lower_unit of this MicrosoftIngestionApiModelsAvailabilitiesPricingUnit.  # noqa: E501


        :return: The lower_unit of this MicrosoftIngestionApiModelsAvailabilitiesPricingUnit.  # noqa: E501
        :rtype: int
        """
        return self._lower_unit

    @lower_unit.setter
    def lower_unit(self, lower_unit):
        """Sets the lower_unit of this MicrosoftIngestionApiModelsAvailabilitiesPricingUnit.


        :param lower_unit: The lower_unit of this MicrosoftIngestionApiModelsAvailabilitiesPricingUnit.  # noqa: E501
        :type: int
        """

        self._lower_unit = lower_unit

    @property
    def upper_unit(self):
        """Gets the upper_unit of this MicrosoftIngestionApiModelsAvailabilitiesPricingUnit.  # noqa: E501


        :return: The upper_unit of this MicrosoftIngestionApiModelsAvailabilitiesPricingUnit.  # noqa: E501
        :rtype: int
        """
        return self._upper_unit

    @upper_unit.setter
    def upper_unit(self, upper_unit):
        """Sets the upper_unit of this MicrosoftIngestionApiModelsAvailabilitiesPricingUnit.


        :param upper_unit: The upper_unit of this MicrosoftIngestionApiModelsAvailabilitiesPricingUnit.  # noqa: E501
        :type: int
        """

        self._upper_unit = upper_unit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MicrosoftIngestionApiModelsAvailabilitiesPricingUnit, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MicrosoftIngestionApiModelsAvailabilitiesPricingUnit):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
