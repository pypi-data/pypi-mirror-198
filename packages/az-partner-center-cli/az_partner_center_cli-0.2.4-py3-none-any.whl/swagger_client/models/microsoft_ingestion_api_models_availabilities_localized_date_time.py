# coding: utf-8

"""
    https://api.partner.microsoft.com/v1.0/ingestion

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MicrosoftIngestionApiModelsAvailabilitiesLocalizedDateTime(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'localize_per_market': 'bool',
        'date_time_in_utc': 'datetime'
    }

    attribute_map = {
        'localize_per_market': 'localizePerMarket',
        'date_time_in_utc': 'dateTimeInUtc'
    }

    def __init__(self, localize_per_market=None, date_time_in_utc=None):  # noqa: E501
        """MicrosoftIngestionApiModelsAvailabilitiesLocalizedDateTime - a model defined in Swagger"""  # noqa: E501
        self._localize_per_market = None
        self._date_time_in_utc = None
        self.discriminator = None
        if localize_per_market is not None:
            self.localize_per_market = localize_per_market
        if date_time_in_utc is not None:
            self.date_time_in_utc = date_time_in_utc

    @property
    def localize_per_market(self):
        """Gets the localize_per_market of this MicrosoftIngestionApiModelsAvailabilitiesLocalizedDateTime.  # noqa: E501


        :return: The localize_per_market of this MicrosoftIngestionApiModelsAvailabilitiesLocalizedDateTime.  # noqa: E501
        :rtype: bool
        """
        return self._localize_per_market

    @localize_per_market.setter
    def localize_per_market(self, localize_per_market):
        """Sets the localize_per_market of this MicrosoftIngestionApiModelsAvailabilitiesLocalizedDateTime.


        :param localize_per_market: The localize_per_market of this MicrosoftIngestionApiModelsAvailabilitiesLocalizedDateTime.  # noqa: E501
        :type: bool
        """

        self._localize_per_market = localize_per_market

    @property
    def date_time_in_utc(self):
        """Gets the date_time_in_utc of this MicrosoftIngestionApiModelsAvailabilitiesLocalizedDateTime.  # noqa: E501


        :return: The date_time_in_utc of this MicrosoftIngestionApiModelsAvailabilitiesLocalizedDateTime.  # noqa: E501
        :rtype: datetime
        """
        return self._date_time_in_utc

    @date_time_in_utc.setter
    def date_time_in_utc(self, date_time_in_utc):
        """Sets the date_time_in_utc of this MicrosoftIngestionApiModelsAvailabilitiesLocalizedDateTime.


        :param date_time_in_utc: The date_time_in_utc of this MicrosoftIngestionApiModelsAvailabilitiesLocalizedDateTime.  # noqa: E501
        :type: datetime
        """

        self._date_time_in_utc = date_time_in_utc

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MicrosoftIngestionApiModelsAvailabilitiesLocalizedDateTime, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MicrosoftIngestionApiModelsAvailabilitiesLocalizedDateTime):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
