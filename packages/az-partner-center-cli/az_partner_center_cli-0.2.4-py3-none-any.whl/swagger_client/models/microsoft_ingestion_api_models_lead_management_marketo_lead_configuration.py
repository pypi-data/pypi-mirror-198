# coding: utf-8

"""
    https://api.partner.microsoft.com/v1.0/ingestion

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.microsoft_ingestion_api_models_lead_management_base_lead_configuration import MicrosoftIngestionApiModelsLeadManagementBaseLeadConfiguration  # noqa: F401,E501

class MicrosoftIngestionApiModelsLeadManagementMarketoLeadConfiguration(MicrosoftIngestionApiModelsLeadManagementBaseLeadConfiguration):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'resource_type': 'str',
        'server_id': 'str',
        'munchkin_account_id': 'str',
        'form_id': 'str'
    }
    if hasattr(MicrosoftIngestionApiModelsLeadManagementBaseLeadConfiguration, "swagger_types"):
        swagger_types.update(MicrosoftIngestionApiModelsLeadManagementBaseLeadConfiguration.swagger_types)

    attribute_map = {
        'resource_type': 'resourceType',
        'server_id': 'serverID',
        'munchkin_account_id': 'munchkinAccountID',
        'form_id': 'formID'
    }
    if hasattr(MicrosoftIngestionApiModelsLeadManagementBaseLeadConfiguration, "attribute_map"):
        attribute_map.update(MicrosoftIngestionApiModelsLeadManagementBaseLeadConfiguration.attribute_map)

    def __init__(self, resource_type=None, server_id=None, munchkin_account_id=None, form_id=None, *args, **kwargs):  # noqa: E501
        """MicrosoftIngestionApiModelsLeadManagementMarketoLeadConfiguration - a model defined in Swagger"""  # noqa: E501
        self._resource_type = None
        self._server_id = None
        self._munchkin_account_id = None
        self._form_id = None
        self.discriminator = None
        if resource_type is not None:
            self.resource_type = resource_type
        if server_id is not None:
            self.server_id = server_id
        if munchkin_account_id is not None:
            self.munchkin_account_id = munchkin_account_id
        if form_id is not None:
            self.form_id = form_id
        MicrosoftIngestionApiModelsLeadManagementBaseLeadConfiguration.__init__(self, *args, **kwargs)

    @property
    def resource_type(self):
        """Gets the resource_type of this MicrosoftIngestionApiModelsLeadManagementMarketoLeadConfiguration.  # noqa: E501


        :return: The resource_type of this MicrosoftIngestionApiModelsLeadManagementMarketoLeadConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this MicrosoftIngestionApiModelsLeadManagementMarketoLeadConfiguration.


        :param resource_type: The resource_type of this MicrosoftIngestionApiModelsLeadManagementMarketoLeadConfiguration.  # noqa: E501
        :type: str
        """
        allowed_values = ["MarketoLeadConfiguration"]  # noqa: E501
        if resource_type not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_type` ({0}), must be one of {1}"  # noqa: E501
                .format(resource_type, allowed_values)
            )

        self._resource_type = resource_type

    @property
    def server_id(self):
        """Gets the server_id of this MicrosoftIngestionApiModelsLeadManagementMarketoLeadConfiguration.  # noqa: E501


        :return: The server_id of this MicrosoftIngestionApiModelsLeadManagementMarketoLeadConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._server_id

    @server_id.setter
    def server_id(self, server_id):
        """Sets the server_id of this MicrosoftIngestionApiModelsLeadManagementMarketoLeadConfiguration.


        :param server_id: The server_id of this MicrosoftIngestionApiModelsLeadManagementMarketoLeadConfiguration.  # noqa: E501
        :type: str
        """

        self._server_id = server_id

    @property
    def munchkin_account_id(self):
        """Gets the munchkin_account_id of this MicrosoftIngestionApiModelsLeadManagementMarketoLeadConfiguration.  # noqa: E501


        :return: The munchkin_account_id of this MicrosoftIngestionApiModelsLeadManagementMarketoLeadConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._munchkin_account_id

    @munchkin_account_id.setter
    def munchkin_account_id(self, munchkin_account_id):
        """Sets the munchkin_account_id of this MicrosoftIngestionApiModelsLeadManagementMarketoLeadConfiguration.


        :param munchkin_account_id: The munchkin_account_id of this MicrosoftIngestionApiModelsLeadManagementMarketoLeadConfiguration.  # noqa: E501
        :type: str
        """

        self._munchkin_account_id = munchkin_account_id

    @property
    def form_id(self):
        """Gets the form_id of this MicrosoftIngestionApiModelsLeadManagementMarketoLeadConfiguration.  # noqa: E501


        :return: The form_id of this MicrosoftIngestionApiModelsLeadManagementMarketoLeadConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._form_id

    @form_id.setter
    def form_id(self, form_id):
        """Sets the form_id of this MicrosoftIngestionApiModelsLeadManagementMarketoLeadConfiguration.


        :param form_id: The form_id of this MicrosoftIngestionApiModelsLeadManagementMarketoLeadConfiguration.  # noqa: E501
        :type: str
        """

        self._form_id = form_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MicrosoftIngestionApiModelsLeadManagementMarketoLeadConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MicrosoftIngestionApiModelsLeadManagementMarketoLeadConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
