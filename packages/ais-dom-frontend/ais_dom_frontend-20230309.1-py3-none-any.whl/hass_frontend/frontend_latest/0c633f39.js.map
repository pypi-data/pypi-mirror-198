{"version":3,"file":"0c633f39.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAkqBA","sources":["webpack://home-assistant-frontend/./src/panels/calendar/ha-full-calendar.ts"],"sourcesContent":["import type { CalendarOptions } from \"@fullcalendar/core\";\nimport { Calendar } from \"@fullcalendar/core\";\nimport allLocales from \"@fullcalendar/core/locales-all\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport listPlugin from \"@fullcalendar/list\";\nimport \"@material/mwc-button\";\nimport {\n  mdiPlus,\n  mdiViewAgenda,\n  mdiViewDay,\n  mdiViewModule,\n  mdiViewWeek,\n} from \"@mdi/js\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  nothing,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoize from \"memoize-one\";\nimport { firstWeekdayIndex } from \"../../common/datetime/first_weekday\";\nimport { useAmPm } from \"../../common/datetime/use_am_pm\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { supportsFeature } from \"../../common/entity/supports-feature\";\nimport { LocalizeFunc } from \"../../common/translations/localize\";\nimport { computeRTLDirection } from \"../../common/util/compute_rtl\";\nimport \"../../components/ha-button-toggle-group\";\nimport \"../../components/ha-fab\";\nimport \"../../components/ha-icon-button-next\";\nimport \"../../components/ha-icon-button-prev\";\nimport type {\n  Calendar as CalendarData,\n  CalendarEvent,\n} from \"../../data/calendar\";\nimport { CalendarEntityFeature } from \"../../data/calendar\";\nimport { haStyle } from \"../../resources/styles\";\nimport type {\n  CalendarViewChanged,\n  FullCalendarView,\n  HomeAssistant,\n  ToggleButton,\n} from \"../../types\";\nimport { showCalendarEventDetailDialog } from \"./show-dialog-calendar-event-detail\";\nimport { showCalendarEventEditDialog } from \"./show-dialog-calendar-event-editor\";\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-full-calendar\": HAFullCalendar;\n  }\n  interface HASSDomEvents {\n    \"view-changed\": CalendarViewChanged;\n  }\n}\n\nconst defaultFullCalendarConfig: CalendarOptions = {\n  headerToolbar: false,\n  plugins: [dayGridPlugin, listPlugin, interactionPlugin],\n  initialView: \"dayGridMonth\",\n  dayMaxEventRows: true,\n  height: \"parent\",\n  locales: allLocales,\n  views: {\n    listWeek: {\n      type: \"list\",\n      duration: { days: 7 },\n    },\n  },\n};\n\n@customElement(\"ha-full-calendar\")\nexport class HAFullCalendar extends LitElement {\n  public hass!: HomeAssistant;\n\n  @property({ type: Boolean, reflect: true }) public narrow = false;\n\n  @property({ attribute: false }) public events: CalendarEvent[] = [];\n\n  @property({ attribute: false }) public calendars: CalendarData[] = [];\n\n  @property({ attribute: false }) public views: FullCalendarView[] = [\n    \"dayGridMonth\",\n    \"dayGridWeek\",\n    \"dayGridDay\",\n    \"listWeek\",\n  ];\n\n  @property() public initialView: FullCalendarView = \"dayGridMonth\";\n\n  @property() public eventDisplay = \"auto\";\n\n  @property({ attribute: false }) public error?: string = undefined;\n\n  private calendar?: Calendar;\n\n  private _viewButtons?: ToggleButton[];\n\n  @state() private _activeView = this.initialView;\n\n  public updateSize(): void {\n    this.calendar?.updateSize();\n  }\n\n  protected render() {\n    const viewToggleButtons = this._viewToggleButtons(\n      this.views,\n      this.hass.localize\n    );\n\n    return html`\n      ${this.calendar\n        ? html`\n            ${this.error\n              ? html`<ha-alert\n                  alert-type=\"error\"\n                  dismissable\n                  @alert-dismissed-clicked=${this._clearError}\n                  >${this.error}</ha-alert\n                >`\n              : \"\"}\n            <div class=\"header\">\n              ${!this.narrow\n                ? html`\n                    <div class=\"navigation\">\n                      <mwc-button\n                        outlined\n                        class=\"today\"\n                        @click=${this._handleToday}\n                        >${this.hass.localize(\n                          \"ui.components.calendar.today\"\n                        )}</mwc-button\n                      >\n                      <ha-icon-button-prev\n                        .label=${this.hass.localize(\"ui.common.previous\")}\n                        class=\"prev\"\n                        @click=${this._handlePrev}\n                      >\n                      </ha-icon-button-prev>\n                      <ha-icon-button-next\n                        .label=${this.hass.localize(\"ui.common.next\")}\n                        class=\"next\"\n                        @click=${this._handleNext}\n                      >\n                      </ha-icon-button-next>\n                    </div>\n                    <h1>${this.calendar.view.title}</h1>\n                    <ha-button-toggle-group\n                      .buttons=${viewToggleButtons}\n                      .active=${this._activeView}\n                      @value-changed=${this._handleView}\n                      .dir=${computeRTLDirection(this.hass)}\n                    ></ha-button-toggle-group>\n                  `\n                : html`\n                    <div class=\"controls\">\n                      <h1>${this.calendar.view.title}</h1>\n                      <div>\n                        <ha-icon-button-prev\n                          .label=${this.hass.localize(\"ui.common.previous\")}\n                          class=\"prev\"\n                          @click=${this._handlePrev}\n                        >\n                        </ha-icon-button-prev>\n                        <ha-icon-button-next\n                          .label=${this.hass.localize(\"ui.common.next\")}\n                          class=\"next\"\n                          @click=${this._handleNext}\n                        >\n                        </ha-icon-button-next>\n                      </div>\n                    </div>\n                    <div class=\"controls\">\n                      <mwc-button\n                        outlined\n                        class=\"today\"\n                        @click=${this._handleToday}\n                        >${this.hass.localize(\n                          \"ui.components.calendar.today\"\n                        )}</mwc-button\n                      >\n                      <ha-button-toggle-group\n                        .buttons=${viewToggleButtons}\n                        .active=${this._activeView}\n                        @value-changed=${this._handleView}\n                        .dir=${computeRTLDirection(this.hass)}\n                      ></ha-button-toggle-group>\n                    </div>\n                  `}\n            </div>\n          `\n        : \"\"}\n\n      <div id=\"calendar\"></div>\n      ${this._hasMutableCalendars\n        ? html`<ha-fab\n            slot=\"fab\"\n            .label=${this.hass.localize(\"ui.components.calendar.event.add\")}\n            extended\n            @click=${this._createEvent}\n          >\n            <ha-svg-icon slot=\"icon\" .path=${mdiPlus}></ha-svg-icon>\n          </ha-fab>`\n        : nothing}\n    `;\n  }\n\n  public willUpdate(changedProps: PropertyValues): void {\n    super.willUpdate(changedProps);\n\n    if (!this.calendar) {\n      return;\n    }\n\n    if (changedProps.has(\"events\")) {\n      this.calendar.removeAllEventSources();\n      this.calendar.addEventSource(this.events);\n    }\n\n    if (changedProps.has(\"views\") && !this.views.includes(this._activeView!)) {\n      this._activeView =\n        this.initialView && this.views.includes(this.initialView)\n          ? this.initialView\n          : this.views[0];\n      this.calendar!.changeView(this._activeView);\n      this._fireViewChanged();\n    }\n\n    if (changedProps.has(\"eventDisplay\")) {\n      this.calendar!.setOption(\"eventDisplay\", this.eventDisplay);\n    }\n\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant;\n\n    if (oldHass && oldHass.language !== this.hass.language) {\n      this.calendar.setOption(\"locale\", this.hass.language);\n    }\n  }\n\n  protected firstUpdated(): void {\n    const config: CalendarOptions = {\n      ...defaultFullCalendarConfig,\n      locale: this.hass.language,\n      firstDay: firstWeekdayIndex(this.hass.locale),\n      initialView: this.initialView,\n      eventDisplay: this.eventDisplay,\n      eventTimeFormat: {\n        hour: useAmPm(this.hass.locale) ? \"numeric\" : \"2-digit\",\n        minute: useAmPm(this.hass.locale) ? \"numeric\" : \"2-digit\",\n        hour12: useAmPm(this.hass.locale),\n      },\n    };\n\n    config.dateClick = (info) => this._handleDateClick(info);\n    config.eventClick = (info) => this._handleEventClick(info);\n\n    this.calendar = new Calendar(\n      this.shadowRoot!.getElementById(\"calendar\")!,\n      config\n    );\n    this.calendar!.render();\n    this._fireViewChanged();\n  }\n\n  // Return if there are calendars that support creating events\n  private get _hasMutableCalendars(): boolean {\n    return this.calendars.some((selCal) => {\n      const entityStateObj = this.hass.states[selCal.entity_id];\n      return (\n        entityStateObj &&\n        supportsFeature(entityStateObj, CalendarEntityFeature.CREATE_EVENT)\n      );\n    });\n  }\n\n  private _createEvent(_info) {\n    // Logic for selectedDate: In week and day view, use the start of the week or the selected day.\n    // If we are in month view, we only use the start of the month, if we are not showing the\n    // current actual month, as for that one the current day is automatically highlighted and\n    // defaulting to a different day in the event creation dialog would be weird.\n    showCalendarEventEditDialog(this, {\n      selectedDate:\n        this._activeView === \"dayGridWeek\" ||\n        this._activeView === \"dayGridDay\" ||\n        (this._activeView === \"dayGridMonth\" &&\n          this.calendar!.view.currentStart.getMonth() !== new Date().getMonth())\n          ? this.calendar!.view.currentStart\n          : undefined,\n      updated: () => {\n        this._fireViewChanged();\n      },\n    });\n  }\n\n  private _handleEventClick(info): void {\n    const entityStateObj = this.hass.states[info.event.extendedProps.calendar];\n    const canEdit =\n      entityStateObj &&\n      supportsFeature(entityStateObj, CalendarEntityFeature.UPDATE_EVENT);\n    const canDelete =\n      entityStateObj &&\n      supportsFeature(entityStateObj, CalendarEntityFeature.DELETE_EVENT);\n    showCalendarEventDetailDialog(this, {\n      calendarId: info.event.extendedProps.calendar,\n      entry: info.event.extendedProps.eventData,\n      color: info.event.backgroundColor,\n      updated: () => {\n        this._fireViewChanged();\n      },\n      canEdit: canEdit,\n      canDelete: canDelete,\n    });\n  }\n\n  private _handleDateClick(info): void {\n    if (info.view.type !== \"dayGridMonth\") {\n      return;\n    }\n    this._activeView = \"dayGridDay\";\n    this.calendar!.changeView(\"dayGridDay\");\n    this.calendar!.gotoDate(info.dateStr);\n    this._fireViewChanged();\n  }\n\n  private _handleNext(): void {\n    this.calendar!.next();\n    this._fireViewChanged();\n  }\n\n  private _handlePrev(): void {\n    this.calendar!.prev();\n    this._fireViewChanged();\n  }\n\n  private _handleToday(): void {\n    this.calendar!.today();\n    this._fireViewChanged();\n  }\n\n  private _handleView(ev: CustomEvent): void {\n    this._activeView = ev.detail.value;\n    this.calendar!.changeView(this._activeView!);\n    this._fireViewChanged();\n  }\n\n  private _fireViewChanged(): void {\n    fireEvent(this, \"view-changed\", {\n      start: this.calendar!.view.activeStart,\n      end: this.calendar!.view.activeEnd,\n      view: this.calendar!.view.type,\n    });\n  }\n\n  private _viewToggleButtons = memoize((views, localize: LocalizeFunc) => {\n    if (!this._viewButtons) {\n      this._viewButtons = [\n        {\n          label: localize(\n            \"ui.panel.lovelace.editor.card.calendar.views.dayGridMonth\"\n          ),\n          value: \"dayGridMonth\",\n          iconPath: mdiViewModule,\n        },\n        {\n          label: localize(\n            \"ui.panel.lovelace.editor.card.calendar.views.dayGridWeek\"\n          ),\n          value: \"dayGridWeek\",\n          iconPath: mdiViewWeek,\n        },\n        {\n          label: localize(\n            \"ui.panel.lovelace.editor.card.calendar.views.dayGridDay\"\n          ),\n          value: \"dayGridDay\",\n          iconPath: mdiViewDay,\n        },\n        {\n          label: localize(\n            \"ui.panel.lovelace.editor.card.calendar.views.listWeek\"\n          ),\n          value: \"listWeek\",\n          iconPath: mdiViewAgenda,\n        },\n      ];\n    }\n\n    return this._viewButtons.filter((button) =>\n      views.includes(button.value as FullCalendarView)\n    );\n  });\n\n  private _clearError() {\n    this.error = undefined;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        :host {\n          display: flex;\n          flex-direction: column;\n          --fc-theme-standard-border-color: var(--divider-color);\n        }\n\n        .header {\n          display: flex;\n          align-items: center;\n          justify-content: space-between;\n          padding-bottom: 8px;\n        }\n\n        :host([narrow]) .header {\n          padding-right: 8px;\n          padding-left: 8px;\n          flex-direction: column;\n          align-items: flex-start;\n          justify-content: initial;\n        }\n\n        .navigation {\n          display: flex;\n          align-items: center;\n          flex-grow: 0;\n        }\n\n        a {\n          color: var(--primary-color);\n        }\n\n        .controls {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          width: 100%;\n        }\n\n        .today {\n          margin-right: 20px;\n          margin-inline-end: 20px;\n          margin-inline-start: initial;\n          direction: var(--direction);\n        }\n\n        .prev,\n        .next {\n          --mdc-icon-button-size: 32px;\n        }\n\n        ha-button-toggle-group {\n          color: var(--primary-color);\n        }\n\n        ha-fab {\n          position: absolute;\n          bottom: 32px;\n          right: 32px;\n          z-index: 1;\n        }\n\n        ha-alert {\n          display: block;\n          margin: 4px 0;\n        }\n\n        #calendar {\n          flex-grow: 1;\n          background-color: var(\n            --ha-card-background,\n            var(--card-background-color, white)\n          );\n          min-height: 400px;\n          --fc-neutral-bg-color: var(\n            --ha-card-background,\n            var(--card-background-color, white)\n          );\n          --fc-list-event-hover-bg-color: var(\n            --ha-card-background,\n            var(--card-background-color, white)\n          );\n          --fc-theme-standard-border-color: var(--divider-color);\n          --fc-border-color: var(--divider-color);\n          --fc-page-bg-color: var(\n            --ha-card-background,\n            var(--card-background-color, white)\n          );\n        }\n\n        a {\n          color: inherit !important;\n        }\n\n        .fc-theme-standard .fc-scrollgrid {\n          border: 1px solid var(--divider-color);\n          border-radius: var(--mdc-shape-small, 4px);\n        }\n\n        .fc-theme-standard td {\n          border-bottom-left-radius: var(--mdc-shape-small, 4px);\n          border-bottom-right-radius: var(--mdc-shape-small, 4px);\n        }\n\n        .fc-scrollgrid-section-header td {\n          border: none;\n        }\n\n        th.fc-col-header-cell.fc-day {\n          background-color: var(--table-header-background-color);\n          color: var(--primary-text-color);\n          font-size: 11px;\n          font-weight: bold;\n          text-transform: uppercase;\n        }\n\n        .fc-daygrid-dot-event:hover {\n          background-color: inherit;\n        }\n\n        .fc-daygrid-day-top {\n          text-align: center;\n          padding-top: 5px;\n          justify-content: center;\n        }\n\n        table.fc-scrollgrid-sync-table\n          tbody\n          tr:first-child\n          .fc-daygrid-day-top {\n          padding-top: 0;\n        }\n\n        a.fc-daygrid-day-number {\n          float: none !important;\n          font-size: 12px;\n          cursor: pointer;\n        }\n\n        .fc .fc-daygrid-day-number {\n          padding: 3px !important;\n        }\n\n        .fc .fc-daygrid-day.fc-day-today {\n          background: inherit;\n        }\n\n        td.fc-day-today .fc-daygrid-day-number {\n          height: 26px;\n          color: var(--text-primary-color) !important;\n          background-color: var(--primary-color);\n          border-radius: 50%;\n          display: inline-block;\n          text-align: center;\n          white-space: nowrap;\n          width: max-content;\n          min-width: 24px;\n        }\n\n        .fc-daygrid-day-events {\n          margin-top: 4px;\n        }\n\n        .fc-event {\n          border-radius: 4px;\n          line-height: 1.7;\n          cursor: pointer;\n        }\n\n        .fc-daygrid-block-event .fc-event-main {\n          padding: 0 1px;\n        }\n\n        .fc-day-past .fc-daygrid-day-events {\n          opacity: 0.5;\n        }\n\n        .fc-icon-x:before {\n          font-family: var(--paper-font-common-base_-_font-family);\n          content: \"X\";\n        }\n\n        .fc-popover {\n          background-color: var(--primary-background-color) !important;\n        }\n\n        .fc-popover-header {\n          background-color: var(--secondary-background-color) !important;\n        }\n\n        .fc-theme-standard .fc-list-day-frame {\n          background-color: transparent;\n        }\n\n        .fc-list.fc-view,\n        .fc-list-event.fc-event td {\n          border: none;\n        }\n\n        .fc-list-day.fc-day th {\n          border-bottom: none;\n          border-top: 1px solid var(--fc-theme-standard-border-color, #ddd) !important;\n        }\n\n        .fc-list-day-text {\n          font-size: 16px;\n          font-weight: 400;\n        }\n\n        .fc-list-day-side-text {\n          font-weight: 400;\n          font-size: 16px;\n          color: var(--primary-color);\n        }\n\n        .fc-list-table td,\n        .fc-list-day-frame {\n          padding-top: 12px;\n          padding-bottom: 12px;\n        }\n\n        :host([narrow])\n          .fc-dayGridMonth-view\n          .fc-daygrid-dot-event\n          .fc-event-time,\n        :host([narrow])\n          .fc-dayGridMonth-view\n          .fc-daygrid-dot-event\n          .fc-event-title,\n        :host([narrow]) .fc-dayGridMonth-view .fc-daygrid-day-bottom {\n          display: none;\n        }\n\n        :host([narrow])\n          .fc\n          .fc-dayGridMonth-view\n          .fc-daygrid-event-harness-abs {\n          visibility: visible !important;\n          position: static;\n        }\n\n        :host([narrow]) .fc-dayGridMonth-view .fc-daygrid-day-events {\n          display: flex;\n          min-height: 2em !important;\n          justify-content: center;\n          flex-wrap: wrap;\n          max-height: 2em;\n          height: 2em;\n          overflow: hidden;\n        }\n\n        :host([narrow]) .fc-dayGridMonth-view .fc-scrollgrid-sync-table {\n          overflow: hidden;\n        }\n\n        .fc-scroller::-webkit-scrollbar {\n          width: 0.4rem;\n          height: 0.4rem;\n        }\n\n        .fc-scroller::-webkit-scrollbar-thumb {\n          -webkit-border-radius: 4px;\n          border-radius: 4px;\n          background: var(--scrollbar-thumb-color);\n        }\n\n        .fc-scroller {\n          overflow-y: auto;\n          scrollbar-color: var(--scrollbar-thumb-color) transparent;\n          scrollbar-width: thin;\n        }\n      `,\n    ];\n  }\n}\n"],"names":[],"sourceRoot":""}