{"version":3,"file":"7a7dbaec.js","mappings":";;;;;;AAkEA;ACcA;AAEA;AACA;AAeA;AAEA;AAGA;AAkBA;AAEA;AACA;AAQA;AC/EA;;AAKA;;AA+FA;AC1IA;;AAUA;;AA2BA","sources":["webpack://home-assistant-frontend/./src/components/trace/ha-timeline.ts","webpack://home-assistant-frontend/./src/components/trace/hat-graph-branch.ts","webpack://home-assistant-frontend/./src/components/trace/hat-graph-node.ts","webpack://home-assistant-frontend/./src/components/trace/hat-graph-spacer.ts"],"sourcesContent":["import { mdiCircleOutline } from \"@mdi/js\";\nimport { css, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { buttonLinkStyle } from \"../../resources/styles\";\nimport \"../ha-svg-icon\";\n\n@customElement(\"ha-timeline\")\nexport class HaTimeline extends LitElement {\n  @property({ type: Boolean, reflect: true }) public label = false;\n\n  @property({ type: Boolean, reflect: true }) public raised = false;\n\n  @property({ reflect: true, type: Boolean }) notEnabled = false;\n\n  @property({ type: Boolean }) public lastItem = false;\n\n  @property({ type: String }) public icon?: string;\n\n  @property({ attribute: false }) public moreItems?: TemplateResult[];\n\n  @state() private _showMore = false;\n\n  protected render() {\n    return html`\n      <div class=\"timeline-start\">\n        ${this.label\n          ? \"\"\n          : html`\n              <ha-svg-icon .path=${this.icon || mdiCircleOutline}></ha-svg-icon>\n            `}\n        ${this.lastItem ? \"\" : html`<div class=\"line\"></div>`}\n      </div>\n      <div class=\"content\">\n        <slot></slot>\n        ${!this.moreItems\n          ? \"\"\n          : html`\n              <div>\n                ${this._showMore ||\n                // If there is only 1 item hidden behind \"show more\", just show it\n                // instead of showing the more info link. We're not animals.\n                this.moreItems.length === 1\n                  ? this.moreItems\n                  : html`\n                      <button class=\"link\" @click=${this._handleShowMore}>\n                        Show ${this.moreItems.length} more items\n                      </button>\n                    `}\n              </div>\n            `}\n      </div>\n    `;\n  }\n\n  private _handleShowMore() {\n    this._showMore = true;\n  }\n\n  static get styles() {\n    return [\n      css`\n        :host {\n          display: flex;\n          flex-direction: row;\n        }\n        :host(:not([lastItem])) {\n          min-height: 50px;\n        }\n        :host([label]) {\n          margin-top: -8px;\n          font-style: italic;\n          color: var(--timeline-label-color, var(--secondary-text-color));\n        }\n        .timeline-start {\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          margin-right: 8px;\n          width: 24px;\n        }\n        :host([notEnabled]) ha-svg-icon {\n          opacity: 0.5;\n        }\n        ha-svg-icon {\n          color: var(\n            --timeline-ball-color,\n            var(--timeline-color, var(--secondary-text-color))\n          );\n          border-radius: 50%;\n        }\n        :host([raised]) ha-svg-icon {\n          transform: scale(1.3);\n        }\n        .line {\n          flex: 1;\n          width: 2px;\n          background-color: var(\n            --timeline-line-color,\n            var(--timeline-color, var(--secondary-text-color))\n          );\n          margin: 4px 0;\n        }\n        .content {\n          margin-top: 2px;\n        }\n        :host(:not([lastItem])) .content {\n          padding-bottom: 16px;\n        }\n        :host([label]) .content {\n          margin-top: 0;\n          padding-top: 6px;\n        }\n      `,\n      buttonLinkStyle,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-timeline\": HaTimeline;\n  }\n}\n","import { css, html, LitElement, svg } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { BRANCH_HEIGHT, SPACING } from \"./hat-graph-const\";\n\ninterface BranchConfig {\n  x: number;\n  height: number;\n  start: boolean;\n  end: boolean;\n  track: boolean;\n}\n\n/**\n * @attribute active\n * @attribute track\n */\n@customElement(\"hat-graph-branch\")\nexport class HatGraphBranch extends LitElement {\n  @property({ reflect: true, type: Boolean }) disabled?: boolean;\n\n  @property({ type: Boolean }) selected?: boolean;\n\n  @property({ type: Boolean }) start = false;\n\n  @property({ type: Boolean }) short = false;\n\n  @state() _branches: BranchConfig[] = [];\n\n  private _totalWidth = 0;\n\n  private _maxHeight = 0;\n\n  private _updateBranches(ev: Event) {\n    let total_width = 0;\n    const heights: number[] = [];\n    const branches: BranchConfig[] = [];\n    (ev.target as HTMLSlotElement).assignedElements().forEach((c) => {\n      const width = c.clientWidth;\n      const height = c.clientHeight;\n      branches.push({\n        x: width / 2 + total_width,\n        height,\n        start: c.hasAttribute(\"graphStart\"),\n        end: c.hasAttribute(\"graphEnd\"),\n        track: c.hasAttribute(\"track\"),\n      });\n      total_width += width;\n      heights.push(height);\n    });\n    this._totalWidth = total_width;\n    this._maxHeight = Math.max(...heights);\n    this._branches = branches.sort((a, b) => {\n      if (a.track && !b.track) {\n        return 1;\n      }\n      if (a.track && b.track) {\n        return 0;\n      }\n      return -1;\n    });\n  }\n\n  render() {\n    return html`\n      <slot name=\"head\"></slot>\n      ${!this.start\n        ? svg`\n            <svg\n              id=\"top\"\n              width=\"${this._totalWidth}\"\n            >\n              ${this._branches.map((branch) =>\n                branch.start\n                  ? \"\"\n                  : svg`\n                  <path\n                    class=${classMap({\n                      track: branch.track,\n                    })}\n                    d=\"\n                      M ${this._totalWidth / 2} 0\n                      L ${branch.x} ${BRANCH_HEIGHT}\n                      \"/>\n                `\n              )}\n            </svg>\n          `\n        : \"\"}\n      <div id=\"branches\">\n        <svg id=\"lines\" width=${this._totalWidth} height=${this._maxHeight}>\n          ${this._branches.map((branch) => {\n            if (branch.end) return \"\";\n            return svg`\n                    <path\n                      class=${classMap({\n                        track: branch.track,\n                      })}\n                      d=\"\n                        M ${branch.x} ${branch.height}\n                        v ${this._maxHeight - branch.height}\n                        \"/>\n                  `;\n          })}\n        </svg>\n        <slot @slotchange=${this._updateBranches}></slot>\n      </div>\n\n      ${!this.short\n        ? svg`\n            <svg\n              id=\"bottom\"\n              width=\"${this._totalWidth}\"\n            >\n              ${this._branches.map((branch) => {\n                if (branch.end) return \"\";\n                return svg`\n                  <path\n                    class=${classMap({\n                      track: branch.track,\n                    })}\n                    d=\"\n                      M ${branch.x} 0\n                      V ${SPACING}\n                      L ${this._totalWidth / 2} ${BRANCH_HEIGHT + SPACING}\n                      \"/>\n                `;\n              })}\n            </svg>\n          `\n        : \"\"}\n    `;\n  }\n\n  static get styles() {\n    return css`\n      :host {\n        position: relative;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n      }\n      :host(:focus) {\n        outline: none;\n      }\n      #branches {\n        position: relative;\n        display: flex;\n        flex-direction: row;\n        align-items: start;\n      }\n      ::slotted(*) {\n        z-index: 1;\n      }\n      ::slotted([slot=\"head\"]) {\n        margin-bottom: calc(var(--hat-graph-branch-height) / -2);\n      }\n      #lines {\n        position: absolute;\n      }\n      #top {\n        height: var(--hat-graph-branch-height);\n      }\n      #bottom {\n        height: calc(var(--hat-graph-branch-height) + var(--hat-graph-spacing));\n      }\n      path {\n        stroke: var(--stroke-clr);\n        stroke-width: 2;\n        fill: none;\n      }\n      path.track {\n        stroke: var(--track-clr);\n      }\n      :host([disabled]) path {\n        stroke: var(--disabled-clr);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hat-graph-branch\": HatGraphBranch;\n  }\n}\n","import {\n  css,\n  LitElement,\n  PropertyValues,\n  html,\n  TemplateResult,\n  svg,\n} from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { NODE_SIZE, SPACING } from \"./hat-graph-const\";\n\n/**\n * @attribute active\n * @attribute track\n */\n@customElement(\"hat-graph-node\")\nexport class HatGraphNode extends LitElement {\n  @property() iconPath?: string;\n\n  @property({ reflect: true, type: Boolean }) disabled?: boolean;\n\n  @property({ reflect: true, type: Boolean }) notEnabled = false;\n\n  @property({ reflect: true, type: Boolean }) graphStart?: boolean;\n\n  @property({ type: Boolean, attribute: \"nofocus\" }) noFocus = false;\n\n  @property({ reflect: true, type: Number }) badge?: number;\n\n  protected updated(changedProps: PropertyValues) {\n    if (changedProps.has(\"noFocus\")) {\n      if (!this.hasAttribute(\"tabindex\") && !this.noFocus) {\n        this.setAttribute(\"tabindex\", \"0\");\n      } else if (changedProps.get(\"noFocus\") !== undefined && this.noFocus) {\n        this.removeAttribute(\"tabindex\");\n      }\n    }\n  }\n\n  protected render(): TemplateResult {\n    const height = NODE_SIZE + (this.graphStart ? 2 : SPACING + 1);\n    const width = SPACING + NODE_SIZE;\n    return html`\n      <svg\n        width=\"${width}px\"\n        height=\"${height}px\"\n        viewBox=\"-${Math.ceil(width / 2)} -${this.graphStart\n          ? Math.ceil(height / 2)\n          : Math.ceil((NODE_SIZE + SPACING * 2) / 2)} ${width} ${height}\"\n      >\n        ${this.graphStart\n          ? ``\n          : svg`\n          <path\n            class=\"connector\"\n            d=\"\n              M 0 ${-SPACING - NODE_SIZE / 2}\n              L 0 0\n            \"\n            line-caps=\"round\"\n          />\n          `}\n        <g class=\"node\">\n          <circle cx=\"0\" cy=\"0\" r=${NODE_SIZE / 2} />\n          }\n          ${this.badge\n            ? svg`\n        <g class=\"number\">\n          <circle\n            cx=\"8\"\n            cy=${-NODE_SIZE / 2}\n            r=\"8\"\n          ></circle>\n          <text\n            x=\"8\"\n            y=${-NODE_SIZE / 2}\n            text-anchor=\"middle\"\n            alignment-baseline=\"middle\"\n          >${this.badge > 9 ? \"9+\" : this.badge}</text>\n        </g>\n      `\n            : \"\"}\n          <g style=\"pointer-events: none\" transform=\"translate(${-12} ${-12})\">\n            ${this.iconPath ? svg`<path class=\"icon\" d=${this.iconPath}/>` : \"\"}\n          </g>\n        </g>\n      </svg>\n    `;\n  }\n\n  static get styles() {\n    return css`\n      :host {\n        display: flex;\n        flex-direction: column;\n        min-width: calc(var(--hat-graph-node-size) + var(--hat-graph-spacing));\n        height: calc(\n          var(--hat-graph-node-size) + var(--hat-graph-spacing) + 1px\n        );\n      }\n      :host([graphStart]) {\n        height: calc(var(--hat-graph-node-size) + 2px);\n      }\n      :host([track]) {\n        --stroke-clr: var(--track-clr);\n        --icon-clr: var(--default-icon-clr);\n      }\n      :host([active]) circle {\n        --stroke-clr: var(--active-clr);\n        --icon-clr: var(--default-icon-clr);\n      }\n      :host(:focus) {\n        outline: none;\n      }\n      :host(:hover) circle {\n        --stroke-clr: var(--hover-clr);\n        --icon-clr: var(--default-icon-clr);\n      }\n      :host([notEnabled]) circle {\n        --stroke-clr: var(--disabled-clr);\n      }\n      :host([notEnabled][active]) circle {\n        --stroke-clr: var(--disabled-active-clr);\n      }\n      :host([notEnabled]:hover) circle {\n        --stroke-clr: var(--disabled-hover-clr);\n      }\n      svg {\n        width: 100%;\n        height: 100%;\n      }\n      circle,\n      path.connector {\n        stroke: var(--stroke-clr);\n        stroke-width: 2;\n        fill: none;\n      }\n      circle {\n        fill: var(--background-clr);\n        stroke: var(--circle-clr, var(--stroke-clr));\n      }\n      .number circle {\n        fill: var(--track-clr);\n        stroke: none;\n        stroke-width: 0;\n      }\n      .number text {\n        font-size: smaller;\n      }\n      path.icon {\n        fill: var(--icon-clr);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hat-graph-node\": HatGraphNode;\n  }\n}\n","import { css, LitElement, html } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { SPACING, NODE_SIZE } from \"./hat-graph-const\";\n\n/**\n * @attribute active\n * @attribute track\n */\n@customElement(\"hat-graph-spacer\")\nexport class HatGraphSpacer extends LitElement {\n  @property({ reflect: true, type: Boolean }) disabled?: boolean;\n\n  render() {\n    return html`\n      <svg viewBox=\"-${SPACING / 2} 0 10 ${SPACING + NODE_SIZE + 1}\">\n        <path\n          d=\"\n              M 0 ${SPACING + NODE_SIZE + 1}\n              V 0\n            \"\n          line-caps=\"round\"\n        />\n        }\n      </svg>\n    `;\n  }\n\n  static get styles() {\n    return css`\n      :host {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n      }\n      svg {\n        width: var(--hat-graph-spacing);\n        height: calc(\n          var(--hat-graph-spacing) + var(--hat-graph-node-size) + 1px\n        );\n      }\n      :host([track]) {\n        --stroke-clr: var(--track-clr);\n      }\n      :host-context([disabled]) {\n        --stroke-clr: var(--disabled-clr);\n      }\n      path {\n        stroke: var(--stroke-clr);\n        stroke-width: 2;\n        fill: none;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hat-graph-spacer\": HatGraphSpacer;\n  }\n}\n"],"names":[],"sourceRoot":""}