{"version":3,"file":"7f599238.js","mappings":";;;;;;AA+IA;;;ACaA;;;;;;AC+hBA","sources":["webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/panels/config/integrations/ha-integration-list-item.ts","webpack://home-assistant-frontend/./src/panels/config/integrations/dialog-add-integration.ts"],"sourcesContent":["import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-icon-button\";\n\nconst SUPPRESS_DEFAULT_PRESS_SELECTOR = [\"button\"];\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <div class=\"header_title\">${title}</div>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  protected readonly [FOCUS_TARGET];\n\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  protected firstUpdated(): void {\n    super.firstUpdated();\n    this.suppressDefaultPressSelector = [\n      this.suppressDefaultPressSelector,\n      SUPPRESS_DEFAULT_PRESS_SELECTOR,\n    ].join(\", \");\n    this._updateScrolledAttribute();\n    this.contentElement?.addEventListener(\"scroll\", this._onScroll);\n  }\n\n  disconnectedCallback(): void {\n    super.disconnectedCallback();\n    this.contentElement.removeEventListener(\"scroll\", this._onScroll);\n  }\n\n  private _onScroll = () => {\n    this._updateScrolledAttribute();\n  };\n\n  private _updateScrolledAttribute() {\n    if (!this.contentElement) return;\n    this.toggleAttribute(\"scrolled\", this.contentElement.scrollTop !== 0);\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(\n          --dialog-scroll-divider-color,\n          var(--divider-color)\n        );\n        z-index: var(--dialog-z-index, 7);\n        -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n        backdrop-filter: var(--dialog-backdrop-filter, none);\n        --mdc-dialog-box-shadow: var(--dialog-box-shadow, none);\n        --mdc-typography-headline6-font-weight: 400;\n        --mdc-typography-headline6-font-size: 1.574rem;\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 24px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertical-align-dialog, center);\n      }\n      .mdc-dialog__title {\n        padding: 24px 24px 0 24px;\n      }\n      .mdc-dialog__actions {\n        padding: 0 24px 24px 24px;\n      }\n      .mdc-dialog__title::before {\n        display: block;\n        height: 0px;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 24px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        margin-top: var(--dialog-surface-margin-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(--ha-dialog-border-radius, 28px);\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_button {\n        position: absolute;\n        right: 16px;\n        top: 14px;\n        text-decoration: none;\n        color: inherit;\n      }\n      .header_title {\n        margin-right: 32px;\n        margin-inline-end: 32px;\n        margin-inline-start: initial;\n        direction: var(--direction);\n      }\n      .header_button {\n        inset-inline-start: initial;\n        inset-inline-end: 16px;\n        direction: var(--direction);\n      }\n      .dialog-actions {\n        inset-inline-start: initial !important;\n        inset-inline-end: 0px !important;\n        direction: var(--direction);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import {\n  GraphicType,\n  ListItemBase,\n} from \"@material/mwc-list/mwc-list-item-base\";\nimport { styles } from \"@material/mwc-list/mwc-list-item.css\";\nimport { mdiCloudOutline, mdiOpenInNew, mdiPackageVariant } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, nothing } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { domainToName } from \"../../../data/integration\";\nimport { HomeAssistant } from \"../../../types\";\nimport { brandsUrl } from \"../../../util/brands-url\";\nimport { IntegrationListItem } from \"./dialog-add-integration\";\n\n@customElement(\"ha-integration-list-item\")\nexport class HaIntegrationListItem extends ListItemBase {\n  public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public integration?: IntegrationListItem;\n\n  @property({ type: String, reflect: true }) graphic: GraphicType = \"medium\";\n\n  @property({ type: Boolean }) hasMeta = true;\n\n  @property({ type: Boolean }) brand = false;\n\n  // @ts-expect-error\n  protected override renderSingleLine() {\n    if (!this.integration) {\n      return nothing;\n    }\n    return html`${this.integration.name ||\n    domainToName(this.hass.localize, this.integration.domain)}\n    ${this.integration.is_helper ? \" (helper)\" : \"\"}`;\n  }\n\n  // @ts-expect-error\n  protected override renderGraphic() {\n    if (!this.integration) {\n      return nothing;\n    }\n    const graphicClasses = {\n      multi: this.multipleGraphics,\n    };\n\n    return html` <span\n      class=\"mdc-deprecated-list-item__graphic material-icons ${classMap(\n        graphicClasses\n      )}\"\n    >\n      <img\n        alt=\"\"\n        loading=\"lazy\"\n        src=${brandsUrl({\n          domain: this.integration.domain,\n          type: \"icon\",\n          useFallback: true,\n          darkOptimized: this.hass.themes?.darkMode,\n          brand: this.brand,\n        })}\n        referrerpolicy=\"no-referrer\"\n      />\n    </span>`;\n  }\n\n  // @ts-expect-error\n  protected override renderMeta() {\n    if (!this.integration) {\n      return nothing;\n    }\n    return html`<span class=\"mdc-deprecated-list-item__meta material-icons\">\n      ${this.integration.cloud\n        ? html`<span\n            ><ha-svg-icon .path=${mdiCloudOutline}></ha-svg-icon\n            ><paper-tooltip animation-delay=\"0\" position=\"left\"\n              >${this.hass.localize(\n                \"ui.panel.config.integrations.config_entry.depends_on_cloud\"\n              )}</paper-tooltip\n            ></span\n          >`\n        : \"\"}\n      ${!this.integration.is_built_in\n        ? html`<span\n            ><ha-svg-icon .path=${mdiPackageVariant}></ha-svg-icon\n            ><paper-tooltip animation-delay=\"0\" position=\"left\"\n              >${this.hass.localize(\n                \"ui.panel.config.integrations.config_entry.provided_by_custom_integration\"\n              )}</paper-tooltip\n            ></span\n          >`\n        : \"\"}\n      ${!this.integration.config_flow &&\n      !this.integration.integrations &&\n      !this.integration.iot_standards\n        ? html`<span\n            ><paper-tooltip animation-delay=\"0\" position=\"left\"\n              >${this.hass.localize(\n                \"ui.panel.config.integrations.config_entry.yaml_only\"\n              )}</paper-tooltip\n            ><ha-svg-icon\n              .path=${mdiOpenInNew}\n              class=\"open-in-new\"\n            ></ha-svg-icon\n          ></span>`\n        : html`<ha-icon-next></ha-icon-next>`}\n    </span>`;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      styles,\n      css`\n        :host {\n          --mdc-list-side-padding: 24px;\n          --mdc-list-item-graphic-size: 40px;\n        }\n        :host([graphic=\"avatar\"]:not([twoLine])),\n        :host([graphic=\"icon\"]:not([twoLine])) {\n          height: 48px;\n        }\n        span.material-icons:first-of-type {\n          margin-inline-start: 0px !important;\n          margin-inline-end: var(\n            --mdc-list-item-graphic-margin,\n            16px\n          ) !important;\n          direction: var(--direction);\n        }\n        span.material-icons:last-of-type {\n          margin-inline-start: auto !important;\n          margin-inline-end: 0px !important;\n          direction: var(--direction);\n        }\n        img {\n          width: 40px;\n          height: 40px;\n        }\n        .mdc-deprecated-list-item__meta {\n          width: auto;\n          white-space: nowrap;\n        }\n        .mdc-deprecated-list-item__meta > * {\n          margin-right: 8px;\n        }\n        .mdc-deprecated-list-item__meta > *:last-child {\n          margin-right: 0px;\n        }\n        ha-icon-next {\n          margin-right: 8px;\n        }\n        .open-in-new {\n          --mdc-icon-size: 22px;\n          padding: 1px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-integration-list-item\": HaIntegrationListItem;\n  }\n}\n","import \"@material/mwc-button\";\nimport \"@material/mwc-list/mwc-list\";\nimport Fuse from \"fuse.js\";\nimport {\n  css,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n  nothing,\n} from \"lit\";\nimport { customElement, state } from \"lit/decorators\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport memoizeOne from \"memoize-one\";\nimport { isComponentLoaded } from \"../../../common/config/is_component_loaded\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport {\n  protocolIntegrationPicked,\n  PROTOCOL_INTEGRATIONS,\n} from \"../../../common/integrations/protocolIntegrationPicked\";\nimport { navigate } from \"../../../common/navigate\";\nimport { caseInsensitiveStringCompare } from \"../../../common/string/compare\";\nimport { LocalizeFunc } from \"../../../common/translations/localize\";\nimport { createCloseHeading } from \"../../../components/ha-dialog\";\nimport \"../../../components/ha-icon-button-prev\";\nimport \"../../../components/search-input\";\nimport { fetchConfigFlowInProgress } from \"../../../data/config_flow\";\nimport { DataEntryFlowProgress } from \"../../../data/data_entry_flow\";\nimport {\n  domainToName,\n  fetchIntegrationManifest,\n} from \"../../../data/integration\";\nimport {\n  Brand,\n  Brands,\n  findIntegration,\n  getIntegrationDescriptions,\n  Integration,\n  Integrations,\n} from \"../../../data/integrations\";\nimport { showConfigFlowDialog } from \"../../../dialogs/config-flow/show-dialog-config-flow\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n} from \"../../../dialogs/generic/show-dialog-box\";\nimport { haStyleDialog, haStyleScrollbar } from \"../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../types\";\nimport \"./ha-domain-integrations\";\nimport \"./ha-integration-list-item\";\nimport {\n  AddIntegrationDialogParams,\n  showYamlIntegrationDialog,\n} from \"./show-add-integration-dialog\";\n\nexport interface IntegrationListItem {\n  name: string;\n  domain: string;\n  config_flow?: boolean;\n  is_helper?: boolean;\n  integrations?: string[];\n  domains?: string[];\n  iot_standards?: string[];\n  supported_by?: string;\n  cloud?: boolean;\n  is_built_in?: boolean;\n  is_add?: boolean;\n}\n\n@customElement(\"dialog-add-integration\")\nclass AddIntegrationDialog extends LitElement {\n  public hass!: HomeAssistant;\n\n  @state() private _integrations?: Brands;\n\n  @state() private _helpers?: Integrations;\n\n  @state() private _initialFilter?: string;\n\n  @state() private _filter?: string;\n\n  @state() private _pickedBrand?: string;\n\n  @state() private _prevPickedBrand?: string;\n\n  @state() private _flowsInProgress?: DataEntryFlowProgress[];\n\n  @state() private _open = false;\n\n  @state() private _narrow = false;\n\n  private _width?: number;\n\n  private _height?: number;\n\n  public showDialog(params?: AddIntegrationDialogParams): void {\n    this._load();\n    this._open = true;\n    this._pickedBrand = params?.brand;\n    this._initialFilter = params?.initialFilter;\n    this._narrow = matchMedia(\n      \"all and (max-width: 450px), all and (max-height: 500px)\"\n    ).matches;\n  }\n\n  public closeDialog() {\n    this._open = false;\n    this._integrations = undefined;\n    this._helpers = undefined;\n    this._pickedBrand = undefined;\n    this._prevPickedBrand = undefined;\n    this._flowsInProgress = undefined;\n    this._filter = undefined;\n    this._width = undefined;\n    this._height = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  public willUpdate(changedProps: PropertyValues): void {\n    super.willUpdate(changedProps);\n    if (this._filter === undefined && this._initialFilter !== undefined) {\n      this._filter = this._initialFilter;\n    }\n    if (this._initialFilter !== undefined && this._filter === \"\") {\n      this._initialFilter = undefined;\n      this._filter = \"\";\n      this._width = undefined;\n      this._height = undefined;\n    } else if (\n      this.hasUpdated &&\n      changedProps.has(\"_filter\") &&\n      (!this._width || !this._height)\n    ) {\n      // Store the width and height so that when we search, box doesn't jump\n      const boundingRect =\n        this.shadowRoot!.querySelector(\"mwc-list\")?.getBoundingClientRect();\n      this._width = boundingRect?.width;\n      this._height = boundingRect?.height;\n    }\n  }\n\n  private _filterIntegrations = memoizeOne(\n    (\n      i: Brands,\n      h: Integrations,\n      components: HomeAssistant[\"config\"][\"components\"],\n      localize: LocalizeFunc,\n      filter?: string\n    ): IntegrationListItem[] => {\n      const addDeviceRows: IntegrationListItem[] = PROTOCOL_INTEGRATIONS.filter(\n        (domain) => components.includes(domain)\n      )\n        .map((domain) => ({\n          name: localize(`ui.panel.config.integrations.add_${domain}_device`),\n          domain,\n          config_flow: true,\n          is_built_in: true,\n          is_add: true,\n        }))\n        .sort((a, b) =>\n          caseInsensitiveStringCompare(\n            a.name,\n            b.name,\n            this.hass.locale.language\n          )\n        );\n\n      const integrations: IntegrationListItem[] = [];\n      const yamlIntegrations: IntegrationListItem[] = [];\n\n      Object.entries(i).forEach(([domain, integration]) => {\n        if (\n          \"integration_type\" in integration &&\n          (integration.config_flow ||\n            integration.iot_standards ||\n            integration.supported_by)\n        ) {\n          // Integration with a config flow, iot standard, or supported by\n          const supportedIntegration = integration.supported_by\n            ? findIntegration(this._integrations, integration.supported_by)\n            : integration;\n          if (!supportedIntegration) {\n            return;\n          }\n          integrations.push({\n            domain,\n            name: integration.name || domainToName(localize, domain),\n            config_flow: supportedIntegration.config_flow,\n            iot_standards: supportedIntegration.iot_standards,\n            supported_by: integration.supported_by,\n            is_built_in: supportedIntegration.is_built_in !== false,\n            cloud: supportedIntegration.iot_class?.startsWith(\"cloud_\"),\n          });\n        } else if (\n          !(\"integration_type\" in integration) &&\n          (\"iot_standards\" in integration || \"integrations\" in integration)\n        ) {\n          // Brand\n          integrations.push({\n            domain,\n            name: integration.name || domainToName(localize, domain),\n            iot_standards: integration.iot_standards,\n            integrations: integration.integrations\n              ? Object.entries(integration.integrations).map(\n                  ([dom, val]) => val.name || domainToName(localize, dom)\n                )\n              : undefined,\n            domains: integration.integrations\n              ? Object.keys(integration.integrations)\n              : undefined,\n            is_built_in: integration.is_built_in !== false,\n          });\n        } else if (filter && \"integration_type\" in integration) {\n          // Integration without a config flow\n          yamlIntegrations.push({\n            domain,\n            name: integration.name || domainToName(localize, domain),\n            config_flow: integration.config_flow,\n            is_built_in: integration.is_built_in !== false,\n            cloud: integration.iot_class?.startsWith(\"cloud_\"),\n          });\n        }\n      });\n\n      if (filter) {\n        const options: Fuse.IFuseOptions<IntegrationListItem> = {\n          keys: [\n            \"name\",\n            \"domain\",\n            \"supported_by\",\n            \"integrations\",\n            \"iot_standards\",\n          ],\n          isCaseSensitive: false,\n          minMatchCharLength: 2,\n          threshold: 0.2,\n        };\n        const helpers = Object.entries(h).map(([domain, integration]) => ({\n          domain,\n          name: integration.name || domainToName(localize, domain),\n          config_flow: integration.config_flow,\n          is_helper: true,\n          is_built_in: integration.is_built_in !== false,\n          cloud: integration.iot_class?.startsWith(\"cloud_\"),\n        }));\n        return [\n          ...new Fuse(integrations, options)\n            .search(filter)\n            .map((result) => result.item),\n          ...new Fuse(yamlIntegrations, options)\n            .search(filter)\n            .map((result) => result.item),\n          ...new Fuse(helpers, options)\n            .search(filter)\n            .map((result) => result.item),\n        ];\n      }\n      return [\n        ...addDeviceRows,\n        ...integrations.sort((a, b) =>\n          caseInsensitiveStringCompare(\n            a.name || \"\",\n            b.name || \"\",\n            this.hass.locale.language\n          )\n        ),\n      ];\n    }\n  );\n\n  private _getIntegrations() {\n    return this._filterIntegrations(\n      this._integrations!,\n      this._helpers!,\n      this.hass.config.components,\n      this.hass.localize,\n      this._filter\n    );\n  }\n\n  protected render() {\n    if (!this._open) {\n      return nothing;\n    }\n    const integrations = this._integrations\n      ? this._getIntegrations()\n      : undefined;\n\n    const pickedIntegration = this._pickedBrand\n      ? this._integrations?.[this._pickedBrand] ||\n        findIntegration(this._integrations, this._pickedBrand)\n      : undefined;\n\n    return html`<ha-dialog\n      open\n      @closed=${this.closeDialog}\n      scrimClickAction\n      escapeKeyAction\n      hideActions\n      .heading=${createCloseHeading(\n        this.hass,\n        this.hass.localize(\"ui.panel.config.integrations.new\")\n      )}\n    >\n      ${this._pickedBrand && (!this._integrations || pickedIntegration)\n        ? html`<div slot=\"heading\">\n              <ha-icon-button-prev\n                @click=${this._prevClicked}\n              ></ha-icon-button-prev>\n              <h2 class=\"mdc-dialog__title\">\n                ${this._calculateBrandHeading(pickedIntegration)}\n              </h2>\n            </div>\n            ${this._renderIntegration(pickedIntegration)}`\n        : this._renderAll(integrations)}\n    </ha-dialog>`;\n  }\n\n  private _calculateBrandHeading(integration: Brand | Integration | undefined) {\n    if (\n      integration?.iot_standards &&\n      !(\"integrations\" in integration) &&\n      !this._flowsInProgress?.length\n    ) {\n      return \"What type of device is it?\";\n    }\n    if (\n      integration &&\n      !integration?.iot_standards &&\n      !(\"integrations\" in integration) &&\n      this._flowsInProgress?.length\n    ) {\n      return \"Want to add these discovered devices?\";\n    }\n    return \"What do you want to add?\";\n  }\n\n  private _renderIntegration(\n    integration: Brand | Integration | undefined\n  ): TemplateResult {\n    return html`<ha-domain-integrations\n      .hass=${this.hass}\n      .domain=${this._pickedBrand}\n      .integration=${integration}\n      .flowsInProgress=${this._flowsInProgress}\n      style=${styleMap({\n        minWidth: `${this._width}px`,\n        minHeight: `581px`,\n      })}\n      @close-dialog=${this.closeDialog}\n      @supported-by=${this._handleSupportedByEvent}\n      @select-brand=${this._handleSelectBrandEvent}\n    ></ha-domain-integrations>`;\n  }\n\n  private _handleSelectBrandEvent(ev: CustomEvent) {\n    this._prevPickedBrand = this._pickedBrand;\n    this._pickedBrand = ev.detail.brand;\n  }\n\n  private _handleSupportedByEvent(ev: CustomEvent) {\n    this._supportedBy(ev.detail.integration);\n  }\n\n  private _supportedBy(integration) {\n    const supportIntegration = findIntegration(\n      this._integrations,\n      integration.supported_by\n    );\n    showConfirmationDialog(this, {\n      text: this.hass.localize(\n        \"ui.panel.config.integrations.config_flow.supported_brand_flow\",\n        {\n          supported_brand:\n            integration.name ||\n            domainToName(this.hass.localize, integration.domain),\n          flow_domain_name:\n            supportIntegration?.name ||\n            domainToName(this.hass.localize, integration.supported_by),\n        }\n      ),\n      confirm: () => {\n        this.closeDialog();\n        if (PROTOCOL_INTEGRATIONS.includes(integration.supported_by)) {\n          protocolIntegrationPicked(this, this.hass, integration.supported_by);\n          return;\n        }\n        if (supportIntegration) {\n          this._handleIntegrationPicked({\n            domain: integration.supported_by,\n            name:\n              supportIntegration.name ||\n              domainToName(this.hass.localize, integration.supported_by),\n            config_flow: supportIntegration.config_flow,\n            iot_standards: supportIntegration.iot_standards,\n          });\n        } else {\n          showAlertDialog(this, {\n            text: \"Integration not found\",\n            warning: true,\n          });\n        }\n      },\n    });\n  }\n\n  private _renderAll(integrations?: IntegrationListItem[]): TemplateResult {\n    return html`<search-input\n        .hass=${this.hass}\n        autofocus\n        dialogInitialFocus\n        .filter=${this._filter}\n        @value-changed=${this._filterChanged}\n        .label=${this.hass.localize(\n          \"ui.panel.config.integrations.search_brand\"\n        )}\n        @keypress=${this._maybeSubmit}\n      ></search-input>\n      ${integrations\n        ? html`<mwc-list>\n            <lit-virtualizer\n              scroller\n              class=\"ha-scrollbar\"\n              style=${styleMap({\n                width: `${this._width}px`,\n                height: this._narrow ? \"calc(100vh - 184px)\" : \"500px\",\n              })}\n              @click=${this._integrationPicked}\n              .items=${integrations}\n              .renderItem=${this._renderRow}\n            >\n            </lit-virtualizer>\n          </mwc-list>`\n        : html`<ha-circular-progress active></ha-circular-progress>`} `;\n  }\n\n  private _renderRow = (integration: IntegrationListItem) => {\n    if (!integration) {\n      return nothing;\n    }\n    return html`\n      <ha-integration-list-item\n        brand\n        .hass=${this.hass}\n        .integration=${integration}\n      >\n      </ha-integration-list-item>\n    `;\n  };\n\n  private async _load() {\n    const descriptions = await getIntegrationDescriptions(this.hass);\n    for (const integration in descriptions.custom.integration) {\n      if (\n        !Object.prototype.hasOwnProperty.call(\n          descriptions.custom.integration,\n          integration\n        )\n      ) {\n        continue;\n      }\n      descriptions.custom.integration[integration].is_built_in = false;\n    }\n    this._integrations = {\n      ...descriptions.core.integration,\n      ...descriptions.custom.integration,\n    };\n    for (const integration in descriptions.custom.helper) {\n      if (\n        !Object.prototype.hasOwnProperty.call(\n          descriptions.custom.helper,\n          integration\n        )\n      ) {\n        continue;\n      }\n      descriptions.custom.helper[integration].is_built_in = false;\n    }\n    this._helpers = {\n      ...descriptions.core.helper,\n      ...descriptions.custom.helper,\n    };\n    this.hass.loadBackendTranslation(\n      \"title\",\n      descriptions.core.translated_name,\n      true\n    );\n  }\n\n  private async _filterChanged(e) {\n    this._filter = e.detail.value;\n  }\n\n  private _integrationPicked(ev) {\n    const listItem = ev.target.closest(\"ha-integration-list-item\");\n    if (!listItem) {\n      return;\n    }\n    this._handleIntegrationPicked(listItem.integration);\n  }\n\n  private async _handleIntegrationPicked(integration: IntegrationListItem) {\n    if (integration.supported_by) {\n      this._supportedBy(integration);\n      return;\n    }\n\n    if (integration.is_add) {\n      protocolIntegrationPicked(this, this.hass, integration.domain);\n      this.closeDialog();\n      return;\n    }\n\n    if (integration.is_helper) {\n      this.closeDialog();\n      navigate(`/config/helpers/add?domain=${integration.domain}`);\n      return;\n    }\n\n    if (integration.integrations) {\n      let domains = integration.domains || [];\n      if (integration.domain === \"apple\") {\n        // we show discoverd homekit devices in their own brand section, dont show them at apple\n        domains = domains.filter((domain) => domain !== \"homekit_controller\");\n      }\n      this._fetchFlowsInProgress(domains);\n      this._pickedBrand = integration.domain;\n      return;\n    }\n\n    if (\n      (PROTOCOL_INTEGRATIONS as ReadonlyArray<string>).includes(\n        integration.domain\n      ) &&\n      isComponentLoaded(this.hass, integration.domain)\n    ) {\n      this._pickedBrand = integration.domain;\n      return;\n    }\n\n    if (integration.iot_standards) {\n      this._pickedBrand = integration.domain;\n      return;\n    }\n\n    if (integration.config_flow) {\n      this._createFlow(integration);\n      return;\n    }\n\n    if (\n      [\"cloud\", \"google_assistant\", \"alexa\"].includes(integration.domain) &&\n      isComponentLoaded(this.hass, \"cloud\")\n    ) {\n      this.closeDialog();\n      navigate(\"/config/cloud\");\n      return;\n    }\n\n    const manifest = await fetchIntegrationManifest(\n      this.hass,\n      integration.domain\n    );\n    showYamlIntegrationDialog(this, { manifest });\n  }\n\n  private async _createFlow(integration: IntegrationListItem) {\n    const flowsInProgress = await this._fetchFlowsInProgress([\n      integration.domain,\n    ]);\n\n    if (flowsInProgress?.length) {\n      this._pickedBrand = integration.domain;\n      return;\n    }\n\n    const manifest = await fetchIntegrationManifest(\n      this.hass,\n      integration.domain\n    );\n\n    this.closeDialog();\n\n    showConfigFlowDialog(this, {\n      startFlowHandler: integration.domain,\n      showAdvanced: this.hass.userData?.showAdvanced,\n      manifest,\n    });\n  }\n\n  private async _fetchFlowsInProgress(domains: string[]) {\n    const flowsInProgress = (\n      await fetchConfigFlowInProgress(this.hass.connection)\n    ).filter(\n      (flow) =>\n        // filter config flows that are not for the integration we are looking for\n        domains.includes(flow.handler) ||\n        // filter config flows of other domains (like homekit) that are for the domains we are looking for\n        (\"alternative_domain\" in flow.context &&\n          domains.includes(flow.context.alternative_domain))\n    );\n\n    if (flowsInProgress.length) {\n      this._flowsInProgress = flowsInProgress;\n    }\n    return flowsInProgress;\n  }\n\n  private _maybeSubmit(ev: KeyboardEvent) {\n    if (ev.key !== \"Enter\") {\n      return;\n    }\n\n    const integrations = this._getIntegrations();\n\n    if (integrations.length > 0) {\n      this._handleIntegrationPicked(integrations[0]);\n    }\n  }\n\n  private _prevClicked() {\n    this._pickedBrand = this._prevPickedBrand;\n    if (!this._prevPickedBrand) {\n      this._flowsInProgress = undefined;\n    }\n    this._prevPickedBrand = undefined;\n  }\n\n  static styles = [\n    haStyleScrollbar,\n    haStyleDialog,\n    css`\n      @media all and (min-width: 550px) {\n        ha-dialog {\n          --mdc-dialog-min-width: 500px;\n        }\n      }\n      ha-dialog {\n        --dialog-content-padding: 0;\n      }\n      search-input {\n        display: block;\n        margin: 16px 16px 0;\n      }\n      .divider {\n        border-bottom-color: var(--divider-color);\n      }\n      h2 {\n        padding-inline-end: 66px;\n        direction: var(--direction);\n      }\n      p {\n        text-align: center;\n        padding: 16px;\n        margin: 0;\n      }\n      p > a {\n        color: var(--primary-color);\n      }\n      ha-circular-progress {\n        width: 100%;\n        display: flex;\n        justify-content: center;\n        margin: 24px 0;\n      }\n      lit-virtualizer {\n        contain: size layout !important;\n      }\n      ha-integration-list-item {\n        width: 100%;\n      }\n      ha-icon-button-prev {\n        color: var(--secondary-text-color);\n        position: absolute;\n        left: 16px;\n        top: 14px;\n        inset-inline-end: initial;\n        inset-inline-start: 16px;\n        direction: var(--direction);\n      }\n      .mdc-dialog__title {\n        margin: 0;\n        margin-bottom: 8px;\n        margin-left: 48px;\n        padding: 24px 24px 0 24px;\n        color: var(--mdc-dialog-heading-ink-color, rgba(0, 0, 0, 0.87));\n        font-size: var(--mdc-typography-headline6-font-size, 1.25rem);\n        line-height: var(--mdc-typography-headline6-line-height, 2rem);\n        font-weight: var(--mdc-typography-headline6-font-weight, 500);\n        letter-spacing: var(\n          --mdc-typography-headline6-letter-spacing,\n          0.0125em\n        );\n        text-decoration: var(\n          --mdc-typography-headline6-text-decoration,\n          inherit\n        );\n        text-transform: var(--mdc-typography-headline6-text-transform, inherit);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-add-integration\": AddIntegrationDialog;\n  }\n}\n"],"names":[],"sourceRoot":""}