{"version":3,"file":"2072b03e.js","mappings":";;;;;;AA+IA;;;ACiFA;;;;;ACtKA;;ACoRA;;ACjQA;;ACwBA","sources":["webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/components/ha-expansion-panel.ts","webpack://home-assistant-frontend/./src/components/ha-list-item.ts","webpack://home-assistant-frontend/./src/components/ha-related-items.ts","webpack://home-assistant-frontend/./src/components/ha-settings-row.ts","webpack://home-assistant-frontend/./src/dialogs/more-info/ha-more-info-logbook.ts"],"sourcesContent":["import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-icon-button\";\n\nconst SUPPRESS_DEFAULT_PRESS_SELECTOR = [\"button\"];\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <div class=\"header_title\">${title}</div>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  protected readonly [FOCUS_TARGET];\n\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  protected firstUpdated(): void {\n    super.firstUpdated();\n    this.suppressDefaultPressSelector = [\n      this.suppressDefaultPressSelector,\n      SUPPRESS_DEFAULT_PRESS_SELECTOR,\n    ].join(\", \");\n    this._updateScrolledAttribute();\n    this.contentElement?.addEventListener(\"scroll\", this._onScroll);\n  }\n\n  disconnectedCallback(): void {\n    super.disconnectedCallback();\n    this.contentElement.removeEventListener(\"scroll\", this._onScroll);\n  }\n\n  private _onScroll = () => {\n    this._updateScrolledAttribute();\n  };\n\n  private _updateScrolledAttribute() {\n    if (!this.contentElement) return;\n    this.toggleAttribute(\"scrolled\", this.contentElement.scrollTop !== 0);\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(\n          --dialog-scroll-divider-color,\n          var(--divider-color)\n        );\n        z-index: var(--dialog-z-index, 7);\n        -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n        backdrop-filter: var(--dialog-backdrop-filter, none);\n        --mdc-dialog-box-shadow: var(--dialog-box-shadow, none);\n        --mdc-typography-headline6-font-weight: 400;\n        --mdc-typography-headline6-font-size: 1.574rem;\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 24px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertical-align-dialog, center);\n      }\n      .mdc-dialog__title {\n        padding: 24px 24px 0 24px;\n      }\n      .mdc-dialog__actions {\n        padding: 0 24px 24px 24px;\n      }\n      .mdc-dialog__title::before {\n        display: block;\n        height: 0px;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 24px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        margin-top: var(--dialog-surface-margin-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(--ha-dialog-border-radius, 28px);\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_button {\n        position: absolute;\n        right: 16px;\n        top: 14px;\n        text-decoration: none;\n        color: inherit;\n      }\n      .header_title {\n        margin-right: 32px;\n        margin-inline-end: 32px;\n        margin-inline-start: initial;\n        direction: var(--direction);\n      }\n      .header_button {\n        inset-inline-start: initial;\n        inset-inline-end: 16px;\n        direction: var(--direction);\n      }\n      .dialog-actions {\n        inset-inline-start: initial !important;\n        inset-inline-end: 0px !important;\n        direction: var(--direction);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import { mdiChevronDown } from \"@mdi/js\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { nextRender } from \"../common/util/render-status\";\nimport \"./ha-svg-icon\";\n\n@customElement(\"ha-expansion-panel\")\nexport class HaExpansionPanel extends LitElement {\n  @property({ type: Boolean, reflect: true }) expanded = false;\n\n  @property({ type: Boolean, reflect: true }) outlined = false;\n\n  @property({ type: Boolean, reflect: true }) leftChevron = false;\n\n  @property() header?: string;\n\n  @property() secondary?: string;\n\n  @state() _showContent = this.expanded;\n\n  @query(\".container\") private _container!: HTMLDivElement;\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"top ${classMap({ expanded: this.expanded })}\">\n        <div\n          id=\"summary\"\n          @click=${this._toggleContainer}\n          @keydown=${this._toggleContainer}\n          @focus=${this._focusChanged}\n          @blur=${this._focusChanged}\n          role=\"button\"\n          tabindex=\"0\"\n          aria-expanded=${this.expanded}\n          aria-controls=\"sect1\"\n        >\n          ${this.leftChevron\n            ? html`\n                <ha-svg-icon\n                  .path=${mdiChevronDown}\n                  class=\"summary-icon ${classMap({ expanded: this.expanded })}\"\n                ></ha-svg-icon>\n              `\n            : \"\"}\n          <slot name=\"header\">\n            <div class=\"header\">\n              ${this.header}\n              <slot class=\"secondary\" name=\"secondary\">${this.secondary}</slot>\n            </div>\n          </slot>\n          ${!this.leftChevron\n            ? html`\n                <ha-svg-icon\n                  .path=${mdiChevronDown}\n                  class=\"summary-icon ${classMap({ expanded: this.expanded })}\"\n                ></ha-svg-icon>\n              `\n            : \"\"}\n        </div>\n        <slot name=\"icons\"></slot>\n      </div>\n      <div\n        class=\"container ${classMap({ expanded: this.expanded })}\"\n        @transitionend=${this._handleTransitionEnd}\n        role=\"region\"\n        aria-labelledby=\"summary\"\n        aria-hidden=${!this.expanded}\n        tabindex=\"-1\"\n      >\n        ${this._showContent ? html`<slot></slot>` : \"\"}\n      </div>\n    `;\n  }\n\n  protected willUpdate(changedProps: PropertyValues) {\n    super.willUpdate(changedProps);\n    if (changedProps.has(\"expanded\") && this.expanded) {\n      this._showContent = this.expanded;\n      setTimeout(() => {\n        // Verify we're still expanded\n        if (this.expanded) {\n          this._container.style.overflow = \"initial\";\n        }\n      }, 300);\n    }\n  }\n\n  private _handleTransitionEnd() {\n    this._container.style.removeProperty(\"height\");\n    this._container.style.overflow = this.expanded ? \"initial\" : \"hidden\";\n    this._showContent = this.expanded;\n  }\n\n  private async _toggleContainer(ev): Promise<void> {\n    if (ev.defaultPrevented) {\n      return;\n    }\n    if (ev.type === \"keydown\" && ev.key !== \"Enter\" && ev.key !== \" \") {\n      return;\n    }\n    ev.preventDefault();\n    const newExpanded = !this.expanded;\n    fireEvent(this, \"expanded-will-change\", { expanded: newExpanded });\n    this._container.style.overflow = \"hidden\";\n\n    if (newExpanded) {\n      this._showContent = true;\n      // allow for dynamic content to be rendered\n      await nextRender();\n    }\n\n    const scrollHeight = this._container.scrollHeight;\n    this._container.style.height = `${scrollHeight}px`;\n\n    if (!newExpanded) {\n      setTimeout(() => {\n        this._container.style.height = \"0px\";\n      }, 0);\n    }\n\n    this.expanded = newExpanded;\n    fireEvent(this, \"expanded-changed\", { expanded: this.expanded });\n  }\n\n  private _focusChanged(ev) {\n    this.shadowRoot!.querySelector(\".top\")!.classList.toggle(\n      \"focused\",\n      ev.type === \"focus\"\n    );\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: block;\n      }\n\n      .top {\n        display: flex;\n        align-items: center;\n        border-radius: var(--ha-card-border-radius, 12px);\n      }\n\n      .top.expanded {\n        border-bottom-left-radius: 0px;\n        border-bottom-right-radius: 0px;\n      }\n\n      .top.focused {\n        background: var(--input-fill-color);\n      }\n\n      :host([outlined]) {\n        box-shadow: none;\n        border-width: 1px;\n        border-style: solid;\n        border-color: var(\n          --ha-card-border-color,\n          var(--divider-color, #e0e0e0)\n        );\n        border-radius: var(--ha-card-border-radius, 12px);\n      }\n\n      .summary-icon {\n        margin-left: 8px;\n      }\n\n      :host([leftchevron]) .summary-icon {\n        margin-left: 0;\n        margin-right: 8px;\n      }\n\n      #summary {\n        flex: 1;\n        display: flex;\n        padding: var(--expansion-panel-summary-padding, 0 8px);\n        min-height: 48px;\n        align-items: center;\n        cursor: pointer;\n        overflow: hidden;\n        font-weight: 500;\n        outline: none;\n      }\n\n      .summary-icon {\n        transition: transform 150ms cubic-bezier(0.4, 0, 0.2, 1);\n        direction: var(--direction);\n      }\n\n      .summary-icon.expanded {\n        transform: rotate(180deg);\n      }\n\n      .header,\n      ::slotted([slot=\"header\"]) {\n        flex: 1;\n      }\n\n      .container {\n        padding: var(--expansion-panel-content-padding, 0 8px);\n        overflow: hidden;\n        transition: height 300ms cubic-bezier(0.4, 0, 0.2, 1);\n        height: 0px;\n      }\n\n      .container.expanded {\n        height: auto;\n      }\n\n      .secondary {\n        display: block;\n        color: var(--secondary-text-color);\n        font-size: 12px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-expansion-panel\": HaExpansionPanel;\n  }\n\n  // for fire event\n  interface HASSDomEvents {\n    \"expanded-changed\": {\n      expanded: boolean;\n    };\n    \"expanded-will-change\": {\n      expanded: boolean;\n    };\n  }\n}\n","import { ListItemBase } from \"@material/mwc-list/mwc-list-item-base\";\nimport { styles } from \"@material/mwc-list/mwc-list-item.css\";\nimport { css, CSSResultGroup } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-list-item\")\nexport class HaListItem extends ListItemBase {\n  static get styles(): CSSResultGroup {\n    return [\n      styles,\n      css`\n        :host {\n          padding-left: var(--mdc-list-side-padding, 20px);\n          padding-right: var(--mdc-list-side-padding, 20px);\n        }\n        :host([graphic=\"avatar\"]:not([twoLine])),\n        :host([graphic=\"icon\"]:not([twoLine])) {\n          height: 48px;\n        }\n        span.material-icons:first-of-type {\n          margin-inline-start: 0px !important;\n          margin-inline-end: var(\n            --mdc-list-item-graphic-margin,\n            16px\n          ) !important;\n          direction: var(--direction);\n        }\n        span.material-icons:last-of-type {\n          margin-inline-start: auto !important;\n          margin-inline-end: 0px !important;\n          direction: var(--direction);\n        }\n        :host([multiline-secondary]) {\n          height: auto;\n        }\n        :host([multiline-secondary]) .mdc-deprecated-list-item__text {\n          padding: 8px 0;\n        }\n        :host([multiline-secondary]) .mdc-deprecated-list-item__secondary-text {\n          text-overflow: initial;\n          white-space: normal;\n          overflow: auto;\n          display: inline-block;\n          margin-top: 10px;\n        }\n        :host([multiline-secondary]) .mdc-deprecated-list-item__primary-text {\n          margin-top: 10px;\n        }\n        :host([multiline-secondary])\n          .mdc-deprecated-list-item__secondary-text::before {\n          display: none;\n        }\n        :host([multiline-secondary])\n          .mdc-deprecated-list-item__primary-text::before {\n          display: none;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-list-item\": HaListItem;\n  }\n}\n","import { HassEntity, UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  nothing,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport {\n  AreaRegistryEntry,\n  subscribeAreaRegistry,\n} from \"../data/area_registry\";\nimport { ConfigEntry, getConfigEntries } from \"../data/config_entries\";\nimport {\n  DeviceRegistryEntry,\n  subscribeDeviceRegistry,\n} from \"../data/device_registry\";\nimport { SceneEntity } from \"../data/scene\";\nimport { findRelated, ItemType, RelatedResult } from \"../data/search\";\nimport { SubscribeMixin } from \"../mixins/subscribe-mixin\";\nimport { HomeAssistant } from \"../types\";\nimport \"./ha-switch\";\n\n@customElement(\"ha-related-items\")\nexport class HaRelatedItems extends SubscribeMixin(LitElement) {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public itemType!: ItemType;\n\n  @property() public itemId!: string;\n\n  @state() private _entries?: ConfigEntry[];\n\n  @state() private _devices?: DeviceRegistryEntry[];\n\n  @state() private _areas?: AreaRegistryEntry[];\n\n  @state() private _related?: RelatedResult;\n\n  public hassSubscribe(): UnsubscribeFunc[] {\n    return [\n      subscribeDeviceRegistry(this.hass.connection!, (devices) => {\n        this._devices = devices;\n      }),\n      subscribeAreaRegistry(this.hass.connection!, (areas) => {\n        this._areas = areas;\n      }),\n    ];\n  }\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n    getConfigEntries(this.hass).then((configEntries) => {\n      this._entries = configEntries;\n    });\n    this.hass.loadBackendTranslation(\"title\");\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    super.updated(changedProps);\n    if (\n      (changedProps.has(\"itemId\") || changedProps.has(\"itemType\")) &&\n      this.itemId &&\n      this.itemType\n    ) {\n      this._findRelated();\n    }\n  }\n\n  protected render() {\n    if (!this._related) {\n      return nothing;\n    }\n    if (Object.keys(this._related).length === 0) {\n      return html`\n        ${this.hass.localize(\"ui.components.related-items.no_related_found\")}\n      `;\n    }\n    return html`\n      ${this._related.config_entry && this._entries\n        ? this._related.config_entry.map((relatedConfigEntryId) => {\n            const entry: ConfigEntry | undefined = this._entries!.find(\n              (configEntry) => configEntry.entry_id === relatedConfigEntryId\n            );\n            if (!entry) {\n              return \"\";\n            }\n            return html`\n              <h3>\n                ${this.hass.localize(\n                  \"ui.components.related-items.integration\"\n                )}:\n              </h3>\n              <a\n                href=${`/config/integrations#config_entry=${relatedConfigEntryId}`}\n                @click=${this._navigateAwayClose}\n              >\n                ${this.hass.localize(`component.${entry.domain}.title`)}:\n                ${entry.title}\n              </a>\n            `;\n          })\n        : \"\"}\n      ${this._related.device && this._devices\n        ? this._related.device.map((relatedDeviceId) => {\n            const device: DeviceRegistryEntry | undefined = this._devices!.find(\n              (dev) => dev.id === relatedDeviceId\n            );\n            if (!device) {\n              return \"\";\n            }\n            return html`\n              <h3>\n                ${this.hass.localize(\"ui.components.related-items.device\")}:\n              </h3>\n              <a\n                href=\"/config/devices/device/${relatedDeviceId}\"\n                @click=${this._navigateAwayClose}\n              >\n                ${device.name_by_user || device.name}\n              </a>\n            `;\n          })\n        : \"\"}\n      ${this._related.area && this._areas\n        ? this._related.area.map((relatedAreaId) => {\n            const area: AreaRegistryEntry | undefined = this._areas!.find(\n              (ar) => ar.area_id === relatedAreaId\n            );\n            if (!area) {\n              return \"\";\n            }\n            return html`\n              <h3>\n                ${this.hass.localize(\"ui.components.related-items.area\")}:\n              </h3>\n              <a\n                href=\"/config/areas/area/${relatedAreaId}\"\n                @click=${this._navigateAwayClose}\n              >\n                ${area.name}\n              </a>\n            `;\n          })\n        : \"\"}\n      ${this._related.entity\n        ? html`\n            <h3>\n              ${this.hass.localize(\"ui.components.related-items.entity\")}:\n            </h3>\n            <ul>\n              ${this._related.entity.map((entityId) => {\n                const entity: HassEntity | undefined =\n                  this.hass.states[entityId];\n                if (!entity) {\n                  return \"\";\n                }\n                return html`\n                  <li>\n                    <button\n                      @click=${this._openMoreInfo}\n                      .entityId=${entityId}\n                      class=\"link\"\n                    >\n                      ${entity.attributes.friendly_name || entityId}\n                    </button>\n                  </li>\n                `;\n              })}\n            </ul>\n          `\n        : \"\"}\n      ${this._related.group\n        ? html`\n            <h3>${this.hass.localize(\"ui.components.related-items.group\")}:</h3>\n            <ul>\n              ${this._related.group.map((groupId) => {\n                const group: HassEntity | undefined = this.hass.states[groupId];\n                if (!group) {\n                  return \"\";\n                }\n                return html`\n                  <li>\n                    <button\n                      class=\"link\"\n                      @click=${this._openMoreInfo}\n                      .entityId=${groupId}\n                    >\n                      ${group.attributes.friendly_name || group.entity_id}\n                    </button>\n                  </li>\n                `;\n              })}\n            </ul>\n          `\n        : \"\"}\n      ${this._related.scene\n        ? html`\n            <h3>${this.hass.localize(\"ui.components.related-items.scene\")}:</h3>\n            <ul>\n              ${this._related.scene.map((sceneId) => {\n                const scene: SceneEntity | undefined =\n                  this.hass.states[sceneId];\n                if (!scene) {\n                  return \"\";\n                }\n                return html`\n                  <li>\n                    <button\n                      class=\"link\"\n                      @click=${this._openMoreInfo}\n                      .entityId=${sceneId}\n                    >\n                      ${scene.attributes.friendly_name || scene.entity_id}\n                    </button>\n                  </li>\n                `;\n              })}\n            </ul>\n          `\n        : \"\"}\n      ${this._related.automation\n        ? html`\n            <h3>\n              ${this.hass.localize(\"ui.components.related-items.automation\")}:\n            </h3>\n            <ul>\n              ${this._related.automation.map((automationId) => {\n                const automation: HassEntity | undefined =\n                  this.hass.states[automationId];\n                if (!automation) {\n                  return \"\";\n                }\n                return html`\n                  <li>\n                    <button\n                      class=\"link\"\n                      @click=${this._openMoreInfo}\n                      .entityId=${automationId}\n                    >\n                      ${automation.attributes.friendly_name ||\n                      automation.entity_id}\n                    </button>\n                  </li>\n                `;\n              })}\n            </ul>\n          `\n        : \"\"}\n      ${this._related.script\n        ? html`\n            <h3>\n              ${this.hass.localize(\"ui.components.related-items.script\")}:\n            </h3>\n            <ul>\n              ${this._related.script.map((scriptId) => {\n                const script: HassEntity | undefined =\n                  this.hass.states[scriptId];\n                if (!script) {\n                  return \"\";\n                }\n                return html`\n                  <li>\n                    <button\n                      class=\"link\"\n                      @click=${this._openMoreInfo}\n                      .entityId=${scriptId}\n                    >\n                      ${script.attributes.friendly_name || script.entity_id}\n                    </button>\n                  </li>\n                `;\n              })}\n            </ul>\n          `\n        : \"\"}\n    `;\n  }\n\n  private async _navigateAwayClose() {\n    // allow new page to open before closing dialog\n    await new Promise((resolve) => {\n      setTimeout(resolve, 0);\n    });\n    fireEvent(this, \"close-dialog\");\n  }\n\n  private async _findRelated() {\n    this._related = await findRelated(this.hass, this.itemType, this.itemId);\n    await this.updateComplete;\n    fireEvent(this, \"iron-resize\");\n  }\n\n  private _openMoreInfo(ev: CustomEvent) {\n    const entityId = (ev.target as any).entityId;\n    fireEvent(this, \"hass-more-info\", { entityId });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      a {\n        color: var(--primary-color);\n      }\n      button.link {\n        color: var(--primary-color);\n        text-align: left;\n        cursor: pointer;\n        background: none;\n        border-width: initial;\n        border-style: none;\n        border-color: initial;\n        border-image: initial;\n        padding: 0px;\n        font: inherit;\n        text-decoration: underline;\n      }\n      h3 {\n        font-family: var(--paper-font-title_-_font-family);\n        -webkit-font-smoothing: var(\n          --paper-font-title_-_-webkit-font-smoothing\n        );\n        font-size: var(--paper-font-title_-_font-size);\n        font-weight: var(--paper-font-headline-_font-weight);\n        letter-spacing: var(--paper-font-title_-_letter-spacing);\n        line-height: var(--paper-font-title_-_line-height);\n        opacity: var(--dark-primary-opacity);\n      }\n      h3:first-child {\n        margin-top: 0;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-related-items\": HaRelatedItems;\n  }\n}\n","import \"@polymer/paper-item/paper-item-body\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-settings-row\")\nexport class HaSettingsRow extends LitElement {\n  @property({ type: Boolean, reflect: true }) public narrow!: boolean;\n\n  @property({ type: Boolean, attribute: \"three-line\" })\n  public threeLine = false;\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"prefix-wrap\">\n        <slot name=\"prefix\"></slot>\n        <paper-item-body\n          ?two-line=${!this.threeLine}\n          ?three-line=${this.threeLine}\n        >\n          <slot name=\"heading\"></slot>\n          <div secondary><slot name=\"description\"></slot></div>\n        </paper-item-body>\n      </div>\n      <div class=\"content\"><slot></slot></div>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: flex;\n        padding: 0 16px;\n        align-content: normal;\n        align-self: auto;\n        align-items: center;\n      }\n      paper-item-body {\n        padding: 8px 16px 8px 0;\n      }\n      paper-item-body[two-line] {\n        min-height: calc(\n          var(--paper-item-body-two-line-min-height, 72px) - 16px\n        );\n        flex: 1;\n      }\n      .content {\n        display: contents;\n      }\n      :host(:not([narrow])) .content {\n        display: var(--settings-row-content-display, flex);\n        justify-content: flex-end;\n        flex: 1;\n        padding: 16px 0;\n      }\n      .content ::slotted(*) {\n        width: var(--settings-row-content-width);\n      }\n      :host([narrow]) {\n        align-items: normal;\n        flex-direction: column;\n        border-top: 1px solid var(--divider-color);\n        padding-bottom: 8px;\n      }\n      ::slotted(ha-switch) {\n        padding: 16px 0;\n      }\n      div[secondary] {\n        white-space: normal;\n      }\n      .prefix-wrap {\n        display: var(--settings-row-prefix-display);\n      }\n      :host([narrow]) .prefix-wrap {\n        display: flex;\n        align-items: center;\n      }\n    `;\n  }\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-settings-row\": HaSettingsRow;\n  }\n}\n","import { startOfYesterday } from \"date-fns/esm\";\nimport { css, html, LitElement, PropertyValues, nothing } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { isComponentLoaded } from \"../../common/config/is_component_loaded\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport \"../../panels/logbook/ha-logbook\";\nimport type { HomeAssistant } from \"../../types\";\n\n@customElement(\"ha-more-info-logbook\")\nexport class MoreInfoLogbook extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public entityId!: string;\n\n  private _showMoreHref = \"\";\n\n  private _time = { recent: 86400 };\n\n  private _entityIdAsList = memoizeOne((entityId: string) => [entityId]);\n\n  protected render() {\n    if (!isComponentLoaded(this.hass, \"logbook\") || !this.entityId) {\n      return nothing;\n    }\n    const stateObj = this.hass.states[this.entityId];\n\n    if (!stateObj) {\n      return nothing;\n    }\n\n    return html`\n      <div class=\"header\">\n        <div class=\"title\">\n          ${this.hass.localize(\"ui.dialogs.more_info_control.logbook\")}\n        </div>\n        <a href=${this._showMoreHref} @click=${this._close}\n          >${this.hass.localize(\"ui.dialogs.more_info_control.show_more\")}</a\n        >\n      </div>\n      <ha-logbook\n        .hass=${this.hass}\n        .time=${this._time}\n        .entityIds=${this._entityIdAsList(this.entityId)}\n        narrow\n        no-icon\n        no-name\n        show-indicator\n        relative-time\n      ></ha-logbook>\n    `;\n  }\n\n  protected willUpdate(changedProps: PropertyValues): void {\n    super.willUpdate(changedProps);\n\n    if (changedProps.has(\"entityId\") && this.entityId) {\n      this._showMoreHref = `/logbook?entity_id=${\n        this.entityId\n      }&start_date=${startOfYesterday().toISOString()}`;\n    }\n  }\n\n  private _close(): void {\n    setTimeout(() => fireEvent(this, \"close-dialog\"), 500);\n  }\n\n  static get styles() {\n    return [\n      css`\n        ha-logbook {\n          --logbook-max-height: 250px;\n        }\n        @media all and (max-width: 450px), all and (max-height: 500px) {\n          ha-logbook {\n            --logbook-max-height: unset;\n          }\n        }\n        .header {\n          display: flex;\n          flex-direction: row;\n          justify-content: space-between;\n          align-items: center;\n          margin-bottom: 8px;\n        }\n        .header > a,\n        a:visited {\n          color: var(--primary-color);\n        }\n        .title {\n          font-family: var(--paper-font-title_-_font-family);\n          -webkit-font-smoothing: var(\n            --paper-font-title_-_-webkit-font-smoothing\n          );\n          font-size: var(--paper-font-subhead_-_font-size);\n          font-weight: var(--paper-font-title_-_font-weight);\n          letter-spacing: var(--paper-font-title_-_letter-spacing);\n          line-height: var(--paper-font-title_-_line-height);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-more-info-logbook\": MoreInfoLogbook;\n  }\n}\n"],"names":[],"sourceRoot":""}