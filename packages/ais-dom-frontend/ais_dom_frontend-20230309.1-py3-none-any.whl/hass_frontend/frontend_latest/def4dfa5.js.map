{"version":3,"file":"def4dfa5.js","mappings":";;;AAgOA;;ACkHA","sources":["webpack://home-assistant-frontend/./src/components/ha-expansion-panel.ts","webpack://home-assistant-frontend/./src/panels/developer-tools/state/developer-tools-state.js"],"sourcesContent":["import { mdiChevronDown } from \"@mdi/js\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { nextRender } from \"../common/util/render-status\";\nimport \"./ha-svg-icon\";\n\n@customElement(\"ha-expansion-panel\")\nexport class HaExpansionPanel extends LitElement {\n  @property({ type: Boolean, reflect: true }) expanded = false;\n\n  @property({ type: Boolean, reflect: true }) outlined = false;\n\n  @property({ type: Boolean, reflect: true }) leftChevron = false;\n\n  @property() header?: string;\n\n  @property() secondary?: string;\n\n  @state() _showContent = this.expanded;\n\n  @query(\".container\") private _container!: HTMLDivElement;\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"top ${classMap({ expanded: this.expanded })}\">\n        <div\n          id=\"summary\"\n          @click=${this._toggleContainer}\n          @keydown=${this._toggleContainer}\n          @focus=${this._focusChanged}\n          @blur=${this._focusChanged}\n          role=\"button\"\n          tabindex=\"0\"\n          aria-expanded=${this.expanded}\n          aria-controls=\"sect1\"\n        >\n          ${this.leftChevron\n            ? html`\n                <ha-svg-icon\n                  .path=${mdiChevronDown}\n                  class=\"summary-icon ${classMap({ expanded: this.expanded })}\"\n                ></ha-svg-icon>\n              `\n            : \"\"}\n          <slot name=\"header\">\n            <div class=\"header\">\n              ${this.header}\n              <slot class=\"secondary\" name=\"secondary\">${this.secondary}</slot>\n            </div>\n          </slot>\n          ${!this.leftChevron\n            ? html`\n                <ha-svg-icon\n                  .path=${mdiChevronDown}\n                  class=\"summary-icon ${classMap({ expanded: this.expanded })}\"\n                ></ha-svg-icon>\n              `\n            : \"\"}\n        </div>\n        <slot name=\"icons\"></slot>\n      </div>\n      <div\n        class=\"container ${classMap({ expanded: this.expanded })}\"\n        @transitionend=${this._handleTransitionEnd}\n        role=\"region\"\n        aria-labelledby=\"summary\"\n        aria-hidden=${!this.expanded}\n        tabindex=\"-1\"\n      >\n        ${this._showContent ? html`<slot></slot>` : \"\"}\n      </div>\n    `;\n  }\n\n  protected willUpdate(changedProps: PropertyValues) {\n    super.willUpdate(changedProps);\n    if (changedProps.has(\"expanded\") && this.expanded) {\n      this._showContent = this.expanded;\n      setTimeout(() => {\n        // Verify we're still expanded\n        if (this.expanded) {\n          this._container.style.overflow = \"initial\";\n        }\n      }, 300);\n    }\n  }\n\n  private _handleTransitionEnd() {\n    this._container.style.removeProperty(\"height\");\n    this._container.style.overflow = this.expanded ? \"initial\" : \"hidden\";\n    this._showContent = this.expanded;\n  }\n\n  private async _toggleContainer(ev): Promise<void> {\n    if (ev.defaultPrevented) {\n      return;\n    }\n    if (ev.type === \"keydown\" && ev.key !== \"Enter\" && ev.key !== \" \") {\n      return;\n    }\n    ev.preventDefault();\n    const newExpanded = !this.expanded;\n    fireEvent(this, \"expanded-will-change\", { expanded: newExpanded });\n    this._container.style.overflow = \"hidden\";\n\n    if (newExpanded) {\n      this._showContent = true;\n      // allow for dynamic content to be rendered\n      await nextRender();\n    }\n\n    const scrollHeight = this._container.scrollHeight;\n    this._container.style.height = `${scrollHeight}px`;\n\n    if (!newExpanded) {\n      setTimeout(() => {\n        this._container.style.height = \"0px\";\n      }, 0);\n    }\n\n    this.expanded = newExpanded;\n    fireEvent(this, \"expanded-changed\", { expanded: this.expanded });\n  }\n\n  private _focusChanged(ev) {\n    this.shadowRoot!.querySelector(\".top\")!.classList.toggle(\n      \"focused\",\n      ev.type === \"focus\"\n    );\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: block;\n      }\n\n      .top {\n        display: flex;\n        align-items: center;\n        border-radius: var(--ha-card-border-radius, 12px);\n      }\n\n      .top.expanded {\n        border-bottom-left-radius: 0px;\n        border-bottom-right-radius: 0px;\n      }\n\n      .top.focused {\n        background: var(--input-fill-color);\n      }\n\n      :host([outlined]) {\n        box-shadow: none;\n        border-width: 1px;\n        border-style: solid;\n        border-color: var(\n          --ha-card-border-color,\n          var(--divider-color, #e0e0e0)\n        );\n        border-radius: var(--ha-card-border-radius, 12px);\n      }\n\n      .summary-icon {\n        margin-left: 8px;\n      }\n\n      :host([leftchevron]) .summary-icon {\n        margin-left: 0;\n        margin-right: 8px;\n      }\n\n      #summary {\n        flex: 1;\n        display: flex;\n        padding: var(--expansion-panel-summary-padding, 0 8px);\n        min-height: 48px;\n        align-items: center;\n        cursor: pointer;\n        overflow: hidden;\n        font-weight: 500;\n        outline: none;\n      }\n\n      .summary-icon {\n        transition: transform 150ms cubic-bezier(0.4, 0, 0.2, 1);\n        direction: var(--direction);\n      }\n\n      .summary-icon.expanded {\n        transform: rotate(180deg);\n      }\n\n      .header,\n      ::slotted([slot=\"header\"]) {\n        flex: 1;\n      }\n\n      .container {\n        padding: var(--expansion-panel-content-padding, 0 8px);\n        overflow: hidden;\n        transition: height 300ms cubic-bezier(0.4, 0, 0.2, 1);\n        height: 0px;\n      }\n\n      .container.expanded {\n        height: auto;\n      }\n\n      .secondary {\n        display: block;\n        color: var(--secondary-text-color);\n        font-size: 12px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-expansion-panel\": HaExpansionPanel;\n  }\n\n  // for fire event\n  interface HASSDomEvents {\n    \"expanded-changed\": {\n      expanded: boolean;\n    };\n    \"expanded-will-change\": {\n      expanded: boolean;\n    };\n  }\n}\n","import { addHours } from \"date-fns/esm\";\nimport \"@material/mwc-button\";\nimport {\n  mdiClipboardTextMultipleOutline,\n  mdiInformationOutline,\n  mdiRefresh,\n} from \"@mdi/js\";\nimport { html } from \"@polymer/polymer/lib/utils/html-tag\";\n/* eslint-plugin-disable lit */\nimport { PolymerElement } from \"@polymer/polymer/polymer-element\";\nimport { dump, load } from \"js-yaml\";\nimport { formatDateTimeWithSeconds } from \"../../../common/datetime/format_date_time\";\nimport { computeRTL } from \"../../../common/util/compute_rtl\";\nimport { escapeRegExp } from \"../../../common/string/escape_regexp\";\nimport { copyToClipboard } from \"../../../common/util/copy-clipboard\";\nimport \"../../../components/entity/ha-entity-picker\";\nimport \"../../../components/ha-code-editor\";\nimport \"../../../components/ha-icon-button\";\nimport \"../../../components/ha-svg-icon\";\nimport \"../../../components/ha-checkbox\";\nimport \"../../../components/ha-tip\";\nimport \"../../../components/search-input\";\nimport \"../../../components/ha-expansion-panel\";\nimport { showAlertDialog } from \"../../../dialogs/generic/show-dialog-box\";\nimport { EventsMixin } from \"../../../mixins/events-mixin\";\nimport LocalizeMixin from \"../../../mixins/localize-mixin\";\nimport \"../../../styles/polymer-ha-style\";\n\nconst ERROR_SENTINEL = {};\n/*\n * @appliesMixin EventsMixin\n * @appliesMixin LocalizeMixin\n */\nclass HaPanelDevState extends EventsMixin(LocalizeMixin(PolymerElement)) {\n  static get template() {\n    return html`\n      <style include=\"ha-style\">\n        :host {\n          -ms-user-select: initial;\n          -webkit-user-select: initial;\n          -moz-user-select: initial;\n          display: block;\n          padding: 16px;\n          padding: max(16px, env(safe-area-inset-top))\n            max(16px, env(safe-area-inset-right))\n            max(16px, env(safe-area-inset-bottom))\n            max(16px, env(safe-area-inset-left));\n        }\n\n        ha-textfield {\n          display: block;\n        }\n\n        .state-input {\n          margin-top: 16px;\n        }\n\n        ha-expansion-panel {\n          margin: 0 8px 16px;\n        }\n\n        .inputs {\n          width: 100%;\n          max-width: 400px;\n        }\n\n        .info {\n          padding: 0 16px;\n        }\n\n        .button-row {\n          display: flex;\n          margin-top: 8px;\n          align-items: center;\n        }\n\n        .table-wrapper {\n          width: 100%;\n          overflow: auto;\n        }\n\n        .entities th {\n          padding: 0 8px;\n          text-align: left;\n          font-size: var(\n            --paper-input-container-shared-input-style_-_font-size\n          );\n        }\n\n        .filters th {\n          padding: 0;\n        }\n\n        .filters search-input {\n          display: block;\n          --mdc-text-field-fill-color: transparent;\n        }\n        ha-tip {\n          display: flex;\n          padding: 8px 0;\n        }\n\n        th.attributes {\n          position: relative;\n        }\n\n        th.attributes ha-checkbox {\n          position: absolute;\n          bottom: -8px;\n        }\n\n        :host([rtl]) .entities th {\n          text-align: right;\n          direction: rtl;\n        }\n\n        :host([rtl]) .filters {\n          direction: rtl;\n        }\n\n        .entities tr {\n          vertical-align: top;\n          direction: ltr;\n        }\n\n        .entities tr:nth-child(odd) {\n          background-color: var(--table-row-background-color, #fff);\n        }\n\n        .entities tr:nth-child(even) {\n          background-color: var(--table-row-alternative-background-color, #eee);\n        }\n        .entities td {\n          padding: 4px;\n          min-width: 200px;\n          word-break: break-word;\n        }\n        .entities ha-svg-icon {\n          --mdc-icon-size: 20px;\n          padding: 4px;\n          cursor: pointer;\n          flex-shrink: 0;\n          margin-right: 8px;\n        }\n        .entities td:nth-child(1) {\n          min-width: 300px;\n          width: 30%;\n        }\n        .entities td:nth-child(3) {\n          white-space: pre-wrap;\n          word-break: break-word;\n        }\n\n        .entities a {\n          color: var(--primary-color);\n        }\n\n        .entities .id-name-container {\n          display: flex;\n          flex-direction: column;\n        }\n        .entities .id-name-row {\n          display: flex;\n          align-items: center;\n        }\n\n        :host([narrow]) .state-wrapper {\n          flex-direction: column;\n        }\n\n        :host([narrow]) .info {\n          padding: 0;\n        }\n      </style>\n      <h1>\n        [[localize('ui.panel.developer-tools.tabs.states.current_entities')]]\n      </h1>\n      <ha-expansion-panel\n        header=\"[[localize('ui.panel.developer-tools.tabs.states.set_state')]]\"\n        outlined\n        expanded=\"[[_expanded]]\"\n        on-expanded-changed=\"expandedChanged\"\n      >\n        <p>\n          [[localize('ui.panel.developer-tools.tabs.states.description1')]]<br />\n          [[localize('ui.panel.developer-tools.tabs.states.description2')]]\n        </p>\n        <div class=\"state-wrapper flex layout horizontal\">\n          <div class=\"inputs\">\n            <ha-entity-picker\n              autofocus\n              hass=\"[[hass]]\"\n              value=\"{{_entityId}}\"\n              on-change=\"entityIdChanged\"\n              allow-custom-entity\n            ></ha-entity-picker>\n            <ha-tip hass=\"[[hass]]\">[[localize('ui.tips.key_e_hint')]]</ha-tip>\n            <ha-textfield\n              label=\"[[localize('ui.panel.developer-tools.tabs.states.state')]]\"\n              required\n              autocapitalize=\"none\"\n              autocomplete=\"off\"\n              autocorrect=\"off\"\n              spellcheck=\"false\"\n              value=\"[[_state]]\"\n              on-change=\"stateChanged\"\n              class=\"state-input\"\n            ></ha-textfield>\n            <p>\n              [[localize('ui.panel.developer-tools.tabs.states.state_attributes')]]\n            </p>\n            <ha-code-editor\n              mode=\"yaml\"\n              value=\"[[_stateAttributes]]\"\n              error=\"[[!validJSON]]\"\n              on-value-changed=\"_yamlChanged\"\n              dir=\"ltr\"\n            ></ha-code-editor>\n            <div class=\"button-row\">\n              <mwc-button\n                on-click=\"handleSetState\"\n                disabled=\"[[!validJSON]]\"\n                raised\n                >[[localize('ui.panel.developer-tools.tabs.states.set_state')]]</mwc-button\n              >\n              <ha-icon-button\n                on-click=\"entityIdChanged\"\n                label=\"[[localize('ui.common.refresh')]]\"\n                path=\"[[refreshIcon()]]\"\n              ></ha-icon-button>\n            </div>\n          </div>\n          <div class=\"info\">\n            <template is=\"dom-if\" if=\"[[_entity]]\">\n              <p>\n                <b\n                  >[[localize('ui.panel.developer-tools.tabs.states.last_changed')]]:</b\n                ><br />\n                <a href=\"[[historyFromLastChanged(_entity)]]\"\n                  >[[lastChangedString(_entity)]]</a\n                >\n              </p>\n              <p>\n                <b\n                  >[[localize('ui.panel.developer-tools.tabs.states.last_updated')]]:</b\n                ><br />\n                <a href=\"[[historyFromLastUpdated(_entity)]]\"\n                  >[[lastUpdatedString(_entity)]]</a\n                >\n              </p>\n            </template>\n          </div>\n        </div>\n      </ha-expansion-panel>\n      <div class=\"table-wrapper\">\n        <table class=\"entities\">\n          <tr>\n            <th>[[localize('ui.panel.developer-tools.tabs.states.entity')]]</th>\n            <th>[[localize('ui.panel.developer-tools.tabs.states.state')]]</th>\n            <th hidden$=\"[[narrow]]\" class=\"attributes\">\n              [[localize('ui.panel.developer-tools.tabs.states.attributes')]]\n              <ha-checkbox\n                checked=\"[[_showAttributes]]\"\n                on-change=\"saveAttributeCheckboxState\"\n                reducedTouchTarget\n              ></ha-checkbox>\n            </th>\n          </tr>\n          <tr class=\"filters\">\n            <th>\n              <search-input\n                label=\"[[localize('ui.panel.developer-tools.tabs.states.filter_entities')]]\"\n                value=\"[[_entityFilter]]\"\n                on-value-changed=\"_entityFilterChanged\"\n              ></search-input>\n            </th>\n            <th>\n              <search-input\n                label=\"[[localize('ui.panel.developer-tools.tabs.states.filter_states')]]\"\n                type=\"search\"\n                value=\"[[_stateFilter]]\"\n                on-value-changed=\"_stateFilterChanged\"\n              ></search-input>\n            </th>\n            <th hidden$=\"[[!computeShowAttributes(narrow, _showAttributes)]]\">\n              <search-input\n                label=\"[[localize('ui.panel.developer-tools.tabs.states.filter_attributes')]]\"\n                type=\"search\"\n                value=\"[[_attributeFilter]]\"\n                on-value-changed=\"_attributeFilterChanged\"\n              ></search-input>\n            </th>\n          </tr>\n          <tr hidden$=\"[[!computeShowEntitiesPlaceholder(_entities)]]\">\n            <td colspan=\"3\">\n              [[localize('ui.panel.developer-tools.tabs.states.no_entities')]]\n            </td>\n          </tr>\n          <template is=\"dom-repeat\" items=\"[[_entities]]\" as=\"entity\">\n            <tr>\n              <td>\n                <div class=\"id-name-container\">\n                  <div class=\"id-name-row\">\n                    <ha-svg-icon\n                      on-click=\"copyEntity\"\n                      alt=\"[[localize('ui.panel.developer-tools.tabs.states.copy_id')]]\"\n                      title=\"[[localize('ui.panel.developer-tools.tabs.states.copy_id')]]\"\n                      path=\"[[clipboardOutlineIcon()]]\"\n                    ></ha-svg-icon>\n                    <a href=\"#\" on-click=\"entitySelected\"\n                      >[[entity.entity_id]]</a\n                    >\n                  </div>\n                  <div class=\"id-name-row\">\n                    <ha-svg-icon\n                      on-click=\"entityMoreInfo\"\n                      alt=\"[[localize('ui.panel.developer-tools.tabs.states.more_info')]]\"\n                      title=\"[[localize('ui.panel.developer-tools.tabs.states.more_info')]]\"\n                      path=\"[[informationOutlineIcon()]]\"\n                    ></ha-svg-icon>\n                    <span class=\"secondary\">\n                      [[entity.attributes.friendly_name]]\n                    </span>\n                  </div>\n                </div>\n              </td>\n              <td>[[entity.state]]</td>\n              <template\n                is=\"dom-if\"\n                if=\"[[computeShowAttributes(narrow, _showAttributes)]]\"\n              >\n                <td>[[attributeString(entity)]]</td>\n              </template>\n            </tr>\n          </template>\n        </table>\n      </div>\n    `;\n  }\n\n  static get properties() {\n    return {\n      hass: {\n        type: Object,\n      },\n\n      parsedJSON: {\n        type: Object,\n        computed: \"_computeParsedStateAttributes(_stateAttributes)\",\n      },\n\n      validJSON: {\n        type: Boolean,\n        computed: \"_computeValidJSON(parsedJSON)\",\n      },\n\n      _entityId: {\n        type: String,\n        value: \"\",\n      },\n\n      _entityFilter: {\n        type: String,\n        value: \"\",\n      },\n\n      _stateFilter: {\n        type: String,\n        value: \"\",\n      },\n\n      _attributeFilter: {\n        type: String,\n        value: \"\",\n      },\n\n      _entity: {\n        type: Object,\n      },\n\n      _state: {\n        type: String,\n        value: \"\",\n      },\n\n      _stateAttributes: {\n        type: String,\n        value: \"\",\n      },\n\n      _showAttributes: {\n        type: Boolean,\n        value: JSON.parse(\n          localStorage.getItem(\"devToolsShowAttributes\") || true\n        ),\n      },\n\n      _entities: {\n        type: Array,\n        computed:\n          \"computeEntities(hass, _entityFilter, _stateFilter, _attributeFilter)\",\n      },\n\n      _expanded: {\n        type: Boolean,\n        value: false,\n      },\n\n      narrow: {\n        type: Boolean,\n        reflectToAttribute: true,\n      },\n\n      rtl: {\n        reflectToAttribute: true,\n        computed: \"_computeRTL(hass)\",\n      },\n    };\n  }\n\n  copyEntity(ev) {\n    ev.preventDefault();\n    copyToClipboard(ev.model.entity.entity_id);\n  }\n\n  entitySelected(ev) {\n    const state = ev.model.entity;\n    this._entityId = state.entity_id;\n    this._entity = state;\n    this._state = state.state;\n    this._stateAttributes = dump(state.attributes);\n    this._expanded = true;\n    ev.preventDefault();\n  }\n\n  entityIdChanged() {\n    if (!this._entityId) {\n      this._entity = undefined;\n      this._state = \"\";\n      this._stateAttributes = \"\";\n      return;\n    }\n    const state = this.hass.states[this._entityId];\n    if (!state) {\n      return;\n    }\n    this._entity = state;\n    this._state = state.state;\n    this._stateAttributes = dump(state.attributes);\n    this._expanded = true;\n  }\n\n  stateChanged(ev) {\n    this._state = ev.target.value;\n  }\n\n  _entityFilterChanged(ev) {\n    this._entityFilter = ev.detail.value;\n  }\n\n  _stateFilterChanged(ev) {\n    this._stateFilter = ev.detail.value;\n  }\n\n  _attributeFilterChanged(ev) {\n    this._attributeFilter = ev.detail.value;\n  }\n\n  _getHistoryURL(entityId, inputDate) {\n    const date = new Date(inputDate);\n    const hourBefore = addHours(date, -1).toISOString();\n    return `/history?entity_id=${entityId}&start_date=${hourBefore}`;\n  }\n\n  historyFromLastChanged(entity) {\n    return this._getHistoryURL(entity.entity_id, entity.last_changed);\n  }\n\n  historyFromLastUpdated(entity) {\n    return this._getHistoryURL(entity.entity_id, entity.last_updated);\n  }\n\n  expandedChanged(ev) {\n    this._expanded = ev.detail.expanded;\n  }\n\n  entityMoreInfo(ev) {\n    ev.preventDefault();\n    this.fire(\"hass-more-info\", { entityId: ev.model.entity.entity_id });\n  }\n\n  handleSetState() {\n    if (!this._entityId) {\n      showAlertDialog(this, {\n        text: this.hass.localize(\n          \"ui.panel.developer-tools.tabs.states.alert_entity_field\"\n        ),\n      });\n      return;\n    }\n    this.hass.callApi(\"POST\", \"states/\" + this._entityId, {\n      state: this._state,\n      attributes: this.parsedJSON,\n    });\n  }\n\n  informationOutlineIcon() {\n    return mdiInformationOutline;\n  }\n\n  clipboardOutlineIcon() {\n    return mdiClipboardTextMultipleOutline;\n  }\n\n  refreshIcon() {\n    return mdiRefresh;\n  }\n\n  computeEntities(hass, _entityFilter, _stateFilter, _attributeFilter) {\n    const entityFilterRegExp =\n      _entityFilter &&\n      RegExp(escapeRegExp(_entityFilter).replace(/\\\\\\*/g, \".*\"), \"i\");\n\n    const stateFilterRegExp =\n      _stateFilter &&\n      RegExp(escapeRegExp(_stateFilter).replace(/\\\\\\*/g, \".*\"), \"i\");\n\n    let keyFilterRegExp;\n    let valueFilterRegExp;\n    let multiMode = false;\n\n    if (_attributeFilter) {\n      const colonIndex = _attributeFilter.indexOf(\":\");\n      multiMode = colonIndex !== -1;\n\n      const keyFilter = multiMode\n        ? _attributeFilter.substring(0, colonIndex).trim()\n        : _attributeFilter;\n      const valueFilter = multiMode\n        ? _attributeFilter.substring(colonIndex + 1).trim()\n        : _attributeFilter;\n\n      keyFilterRegExp = RegExp(\n        escapeRegExp(keyFilter).replace(/\\\\\\*/g, \".*\"),\n        \"i\"\n      );\n      valueFilterRegExp = multiMode\n        ? RegExp(escapeRegExp(valueFilter).replace(/\\\\\\*/g, \".*\"), \"i\")\n        : keyFilterRegExp;\n    }\n\n    return Object.values(hass.states)\n      .filter((value) => {\n        if (\n          entityFilterRegExp &&\n          !entityFilterRegExp.test(value.entity_id) &&\n          (value.attributes.friendly_name === undefined ||\n            !entityFilterRegExp.test(value.attributes.friendly_name))\n        ) {\n          return false;\n        }\n\n        if (stateFilterRegExp && !stateFilterRegExp.test(value.state)) {\n          return false;\n        }\n\n        if (keyFilterRegExp && valueFilterRegExp) {\n          for (const [key, attributeValue] of Object.entries(\n            value.attributes\n          )) {\n            const match = keyFilterRegExp.test(key);\n            if (match && !multiMode) {\n              return true; // in single mode we're already satisfied with this match\n            }\n            if (!match && multiMode) {\n              continue;\n            }\n\n            if (\n              attributeValue !== undefined &&\n              valueFilterRegExp.test(JSON.stringify(attributeValue))\n            ) {\n              return true;\n            }\n          }\n\n          // there are no attributes where the key and/or value can be matched\n          return false;\n        }\n\n        return true;\n      })\n      .sort((entityA, entityB) => {\n        if (entityA.entity_id < entityB.entity_id) {\n          return -1;\n        }\n        if (entityA.entity_id > entityB.entity_id) {\n          return 1;\n        }\n        return 0;\n      });\n  }\n\n  computeShowEntitiesPlaceholder(_entities) {\n    return _entities.length === 0;\n  }\n\n  computeShowAttributes(narrow, _showAttributes) {\n    return !narrow && _showAttributes;\n  }\n\n  attributeString(entity) {\n    let output = \"\";\n    let i;\n    let keys;\n    let key;\n    let value;\n\n    for (i = 0, keys = Object.keys(entity.attributes); i < keys.length; i++) {\n      key = keys[i];\n      value = this.formatAttributeValue(entity.attributes[key]);\n      output += `${key}: ${value}\\n`;\n    }\n    return output;\n  }\n\n  lastChangedString(entity) {\n    return formatDateTimeWithSeconds(\n      new Date(entity.last_changed),\n      this.hass.locale\n    );\n  }\n\n  lastUpdatedString(entity) {\n    return formatDateTimeWithSeconds(\n      new Date(entity.last_updated),\n      this.hass.locale\n    );\n  }\n\n  formatAttributeValue(value) {\n    if (\n      (Array.isArray(value) && value.some((val) => val instanceof Object)) ||\n      (!Array.isArray(value) && value instanceof Object)\n    ) {\n      return `\\n${dump(value)}`;\n    }\n    return Array.isArray(value) ? value.join(\", \") : value;\n  }\n\n  saveAttributeCheckboxState(ev) {\n    this._showAttributes = ev.target.checked;\n    try {\n      localStorage.setItem(\"devToolsShowAttributes\", ev.target.checked);\n    } catch (e) {\n      // Catch for Safari private mode\n    }\n  }\n\n  _computeParsedStateAttributes(stateAttributes) {\n    try {\n      return stateAttributes.trim() ? load(stateAttributes) : {};\n    } catch (err) {\n      return ERROR_SENTINEL;\n    }\n  }\n\n  _computeValidJSON(parsedJSON) {\n    return parsedJSON !== ERROR_SENTINEL;\n  }\n\n  _yamlChanged(ev) {\n    this._stateAttributes = ev.detail.value;\n  }\n\n  _computeRTL(hass) {\n    return computeRTL(hass);\n  }\n}\n\ncustomElements.define(\"developer-tools-state\", HaPanelDevState);\n"],"names":[],"sourceRoot":""}