{"version":3,"file":"795ce633.js","mappings":";;;;;;;AA+IA;;AC6GA","sources":["webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/panels/config/zone/dialog-zone-detail.ts"],"sourcesContent":["import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-icon-button\";\n\nconst SUPPRESS_DEFAULT_PRESS_SELECTOR = [\"button\"];\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <div class=\"header_title\">${title}</div>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  protected readonly [FOCUS_TARGET];\n\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  protected firstUpdated(): void {\n    super.firstUpdated();\n    this.suppressDefaultPressSelector = [\n      this.suppressDefaultPressSelector,\n      SUPPRESS_DEFAULT_PRESS_SELECTOR,\n    ].join(\", \");\n    this._updateScrolledAttribute();\n    this.contentElement?.addEventListener(\"scroll\", this._onScroll);\n  }\n\n  disconnectedCallback(): void {\n    super.disconnectedCallback();\n    this.contentElement.removeEventListener(\"scroll\", this._onScroll);\n  }\n\n  private _onScroll = () => {\n    this._updateScrolledAttribute();\n  };\n\n  private _updateScrolledAttribute() {\n    if (!this.contentElement) return;\n    this.toggleAttribute(\"scrolled\", this.contentElement.scrollTop !== 0);\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(\n          --dialog-scroll-divider-color,\n          var(--divider-color)\n        );\n        z-index: var(--dialog-z-index, 7);\n        -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n        backdrop-filter: var(--dialog-backdrop-filter, none);\n        --mdc-dialog-box-shadow: var(--dialog-box-shadow, none);\n        --mdc-typography-headline6-font-weight: 400;\n        --mdc-typography-headline6-font-size: 1.574rem;\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 24px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertical-align-dialog, center);\n      }\n      .mdc-dialog__title {\n        padding: 24px 24px 0 24px;\n      }\n      .mdc-dialog__actions {\n        padding: 0 24px 24px 24px;\n      }\n      .mdc-dialog__title::before {\n        display: block;\n        height: 0px;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 24px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        margin-top: var(--dialog-surface-margin-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(--ha-dialog-border-radius, 28px);\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_button {\n        position: absolute;\n        right: 16px;\n        top: 14px;\n        text-decoration: none;\n        color: inherit;\n      }\n      .header_title {\n        margin-right: 32px;\n        margin-inline-end: 32px;\n        margin-inline-start: initial;\n        direction: var(--direction);\n      }\n      .header_button {\n        inset-inline-start: initial;\n        inset-inline-end: 16px;\n        direction: var(--direction);\n      }\n      .dialog-actions {\n        inset-inline-start: initial !important;\n        inset-inline-end: 0px !important;\n        direction: var(--direction);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import \"@material/mwc-button\";\nimport { css, CSSResultGroup, html, LitElement, nothing } from \"lit\";\nimport { property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { addDistanceToCoord } from \"../../../common/location/add_distance_to_coord\";\nimport { createCloseHeading } from \"../../../components/ha-dialog\";\nimport \"../../../components/ha-form/ha-form\";\nimport { SchemaUnion } from \"../../../components/ha-form/types\";\nimport { getZoneEditorInitData, ZoneMutableParams } from \"../../../data/zone\";\nimport { haStyleDialog } from \"../../../resources/styles\";\nimport { HomeAssistant } from \"../../../types\";\nimport { ZoneDetailDialogParams } from \"./show-dialog-zone-detail\";\n\nclass DialogZoneDetail extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _error?: Record<string, string>;\n\n  @state() private _data?: ZoneMutableParams;\n\n  @state() private _params?: ZoneDetailDialogParams;\n\n  @state() private _submitting = false;\n\n  public showDialog(params: ZoneDetailDialogParams): void {\n    this._params = params;\n    this._error = undefined;\n    if (this._params.entry) {\n      this._data = this._params.entry;\n    } else {\n      const initConfig = getZoneEditorInitData();\n      let movedHomeLocation;\n      if (!initConfig?.latitude || !initConfig?.longitude) {\n        movedHomeLocation = addDistanceToCoord(\n          [this.hass.config.latitude, this.hass.config.longitude],\n          Math.random() * 500 * (Math.random() < 0.5 ? -1 : 1),\n          Math.random() * 500 * (Math.random() < 0.5 ? -1 : 1)\n        );\n      }\n      this._data = {\n        latitude: initConfig?.latitude || movedHomeLocation[0],\n        longitude: initConfig?.longitude || movedHomeLocation[1],\n        name: initConfig?.name || \"\",\n        icon: initConfig?.icon || \"mdi:map-marker\",\n        passive: false,\n        radius: 100,\n      };\n    }\n  }\n\n  public closeDialog(): void {\n    this._params = undefined;\n    this._data = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected render() {\n    if (!this._params || !this._data) {\n      return nothing;\n    }\n    const nameInvalid = this._data.name.trim() === \"\";\n    const iconInvalid = Boolean(\n      this._data.icon && !this._data.icon.trim().includes(\":\")\n    );\n    const latInvalid = String(this._data.latitude) === \"\";\n    const lngInvalid = String(this._data.longitude) === \"\";\n    const radiusInvalid = String(this._data.radius) === \"\";\n\n    const valid =\n      !nameInvalid &&\n      !iconInvalid &&\n      !latInvalid &&\n      !lngInvalid &&\n      !radiusInvalid;\n\n    return html`\n      <ha-dialog\n        open\n        @closed=${this.closeDialog}\n        scrimClickAction\n        escapeKeyAction\n        .heading=${createCloseHeading(\n          this.hass,\n          this._params.entry\n            ? this._params.entry.name\n            : this.hass!.localize(\"ui.panel.config.zone.detail.new_zone\")\n        )}\n      >\n        <div>\n          <ha-form\n            .hass=${this.hass}\n            .schema=${this._schema(this._data.icon)}\n            .data=${this._formData(this._data)}\n            .error=${this._error}\n            .computeLabel=${this._computeLabel}\n            class=${this._data.passive ? \"passive\" : \"\"}\n            @value-changed=${this._valueChanged}\n          ></ha-form>\n        </div>\n        ${this._params.entry\n          ? html`\n              <mwc-button\n                slot=\"secondaryAction\"\n                class=\"warning\"\n                @click=${this._deleteEntry}\n                .disabled=${this._submitting}\n              >\n                ${this.hass!.localize(\"ui.panel.config.zone.detail.delete\")}\n              </mwc-button>\n            `\n          : nothing}\n        <mwc-button\n          slot=\"primaryAction\"\n          @click=${this._updateEntry}\n          .disabled=${!valid || this._submitting}\n        >\n          ${this._params.entry\n            ? this.hass!.localize(\"ui.panel.config.zone.detail.update\")\n            : this.hass!.localize(\"ui.panel.config.zone.detail.create\")}\n        </mwc-button>\n      </ha-dialog>\n    `;\n  }\n\n  private _schema = memoizeOne(\n    (icon?: string) =>\n      [\n        {\n          name: \"name\",\n          required: true,\n          selector: {\n            text: {},\n          },\n        },\n        {\n          name: \"icon\",\n          required: false,\n          selector: {\n            icon: {},\n          },\n        },\n        {\n          name: \"location\",\n          required: true,\n          selector: { location: { radius: true, icon } },\n        },\n        {\n          name: \"\",\n          type: \"grid\",\n          schema: [\n            {\n              name: \"latitude\",\n              required: true,\n              selector: { text: {} },\n            },\n            {\n              name: \"longitude\",\n              required: true,\n\n              selector: { text: {} },\n            },\n          ],\n        },\n        { name: \"passive_note\", type: \"constant\" },\n        { name: \"passive\", selector: { boolean: {} } },\n        {\n          name: \"radius\",\n          required: false,\n          selector: { number: { min: 0, max: 999999, mode: \"box\" } },\n        },\n      ] as const\n  );\n\n  private _formData = memoizeOne((data: ZoneMutableParams) => ({\n    ...data,\n    location: {\n      latitude: data.latitude,\n      longitude: data.longitude,\n      radius: data.radius,\n    },\n  }));\n\n  private _valueChanged(ev: CustomEvent) {\n    this._error = undefined;\n    const value = ev.detail.value;\n    if (\n      value.location.latitude !== this._data!.latitude ||\n      value.location.longitude !== this._data!.longitude ||\n      value.location.radius !== this._data!.radius\n    ) {\n      value.latitude = value.location.latitude;\n      value.longitude = value.location.longitude;\n      value.radius = Math.round(value.location.radius);\n    }\n    delete value.location;\n    if (!value.icon) {\n      delete value.icon;\n    }\n    this._data = value;\n  }\n\n  private _computeLabel = (\n    entry: SchemaUnion<ReturnType<typeof this._schema>>\n  ): string => this.hass.localize(`ui.panel.config.zone.detail.${entry.name}`);\n\n  private async _updateEntry() {\n    this._submitting = true;\n    try {\n      if (this._params!.entry) {\n        await this._params!.updateEntry!(this._data!);\n      } else {\n        await this._params!.createEntry(this._data!);\n      }\n      this.closeDialog();\n    } catch (err: any) {\n      this._error = { base: err ? err.message : \"Unknown error\" };\n    } finally {\n      this._submitting = false;\n    }\n  }\n\n  private async _deleteEntry() {\n    this._submitting = true;\n    try {\n      if (await this._params!.removeEntry!()) {\n        this._params = undefined;\n      }\n    } finally {\n      this._submitting = false;\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        ha-dialog {\n          --mdc-dialog-min-width: 600px;\n        }\n        @media all and (max-width: 450px), all and (max-height: 500px) {\n          ha-dialog {\n            --mdc-dialog-min-width: calc(\n              100vw - env(safe-area-inset-right) - env(safe-area-inset-left)\n            );\n          }\n        }\n        ha-form.passive {\n          --zone-radius-color: var(--secondary-text-color);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-zone-detail\": DialogZoneDetail;\n  }\n}\n\ncustomElements.define(\"dialog-zone-detail\", DialogZoneDetail);\n"],"names":[],"sourceRoot":""}