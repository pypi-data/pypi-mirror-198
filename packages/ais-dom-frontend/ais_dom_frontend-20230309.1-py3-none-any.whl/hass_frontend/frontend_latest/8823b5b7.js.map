{"version":3,"file":"8823b5b7.js","mappings":";;;;;;AAyVA","sources":["webpack://home-assistant-frontend/./src/layouts/hass-tabs-subpage.ts"],"sourcesContent":["import \"@material/mwc-ripple\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, eventOptions, property, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport memoizeOne from \"memoize-one\";\nimport { isComponentLoaded } from \"../common/config/is_component_loaded\";\nimport { restoreScroll } from \"../common/decorators/restore-scroll\";\nimport { LocalizeFunc } from \"../common/translations/localize\";\nimport { computeRTL } from \"../common/util/compute_rtl\";\nimport \"../components/ha-icon-button-arrow-prev\";\nimport \"../components/ha-menu-button\";\nimport \"../components/ha-svg-icon\";\nimport \"../components/ha-tab\";\nimport { HomeAssistant, Route } from \"../types\";\n\nexport interface PageNavigation {\n  path: string;\n  translationKey?: string;\n  component?: string;\n  components?: string[];\n  name?: string;\n  core?: boolean;\n  advancedOnly?: boolean;\n  iconPath?: string;\n  description?: string;\n  iconColor?: string;\n  info?: any;\n}\n\n@customElement(\"hass-tabs-subpage\")\nclass HassTabsSubpage extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public supervisor = false;\n\n  @property({ attribute: false }) public localizeFunc?: LocalizeFunc;\n\n  @property({ type: String, attribute: \"back-path\" }) public backPath?: string;\n\n  @property() public backCallback?: () => void;\n\n  @property({ type: Boolean, attribute: \"main-page\" }) public mainPage = false;\n\n  @property({ attribute: false }) public route!: Route;\n\n  @property({ attribute: false }) public tabs!: PageNavigation[];\n\n  @property({ type: Boolean, reflect: true }) public narrow = false;\n\n  @property({ type: Boolean, reflect: true, attribute: \"is-wide\" })\n  public isWide = false;\n\n  @property({ type: Boolean, reflect: true }) public rtl = false;\n\n  @state() private _activeTab?: PageNavigation;\n\n  // @ts-ignore\n  @restoreScroll(\".content\") private _savedScrollPos?: number;\n\n  private _getTabs = memoizeOne(\n    (\n      tabs: PageNavigation[],\n      activeTab: PageNavigation | undefined,\n      showAdvanced: boolean | undefined,\n      _components,\n      _language,\n      _narrow,\n      localizeFunc\n    ) => {\n      const shownTabs = tabs.filter(\n        (page) =>\n          (!page.component ||\n            page.core ||\n            isComponentLoaded(this.hass, page.component)) &&\n          (!page.advancedOnly || showAdvanced)\n      );\n\n      if (shownTabs.length < 2) {\n        if (shownTabs.length === 1) {\n          const page = shownTabs[0];\n          return [\n            page.translationKey ? localizeFunc(page.translationKey) : page.name,\n          ];\n        }\n        return [\"\"];\n      }\n\n      return shownTabs.map(\n        (page) =>\n          html`\n            <a href=${page.path}>\n              <ha-tab\n                .hass=${this.hass}\n                .active=${page.path === activeTab?.path}\n                .narrow=${this.narrow}\n                .name=${page.translationKey\n                  ? localizeFunc(page.translationKey)\n                  : page.name}\n              >\n                ${page.iconPath\n                  ? html`<ha-svg-icon\n                      slot=\"icon\"\n                      .path=${page.iconPath}\n                    ></ha-svg-icon>`\n                  : \"\"}\n              </ha-tab>\n            </a>\n          `\n      );\n    }\n  );\n\n  public willUpdate(changedProperties: PropertyValues) {\n    if (changedProperties.has(\"route\")) {\n      this._activeTab = this.tabs.find((tab) =>\n        `${this.route.prefix}${this.route.path}`.includes(tab.path)\n      );\n    }\n    if (changedProperties.has(\"hass\")) {\n      const oldHass = changedProperties.get(\"hass\") as\n        | HomeAssistant\n        | undefined;\n      if (!oldHass || oldHass.language !== this.hass.language) {\n        this.rtl = computeRTL(this.hass);\n      }\n    }\n    super.willUpdate(changedProperties);\n  }\n\n  protected render(): TemplateResult {\n    const tabs = this._getTabs(\n      this.tabs,\n      this._activeTab,\n      this.hass.userData?.showAdvanced,\n      this.hass.config.components,\n      this.hass.language,\n      this.narrow,\n      this.localizeFunc || this.hass.localize\n    );\n    const showTabs = tabs.length > 1;\n    return html`\n      <div class=\"toolbar\">\n        ${this.mainPage || (!this.backPath && history.state?.root)\n          ? html`\n              <ha-menu-button\n                .hassio=${this.supervisor}\n                .hass=${this.hass}\n                .narrow=${this.narrow}\n              ></ha-menu-button>\n            `\n          : this.backPath\n          ? html`\n              <a href=${this.backPath}>\n                <ha-icon-button-arrow-prev\n                  .hass=${this.hass}\n                ></ha-icon-button-arrow-prev>\n              </a>\n            `\n          : html`\n              <ha-icon-button-arrow-prev\n                .hass=${this.hass}\n                @click=${this._backTapped}\n              ></ha-icon-button-arrow-prev>\n            `}\n        ${this.narrow || !showTabs\n          ? html`<div class=\"main-title\">\n              <slot name=\"header\">${!showTabs ? tabs[0] : \"\"}</slot>\n            </div>`\n          : \"\"}\n        ${showTabs\n          ? html`\n              <div id=\"tabbar\" class=${classMap({ \"bottom-bar\": this.narrow })}>\n                ${tabs}\n              </div>\n            `\n          : \"\"}\n        <div id=\"toolbar-icon\">\n          <slot name=\"toolbar-icon\"></slot>\n        </div>\n      </div>\n      <div\n        class=\"content ${classMap({ tabs: showTabs })}\"\n        @scroll=${this._saveScrollPos}\n      >\n        <slot></slot>\n      </div>\n      <div id=\"fab\" class=${classMap({ tabs: showTabs })}>\n        <slot name=\"fab\"></slot>\n      </div>\n    `;\n  }\n\n  @eventOptions({ passive: true })\n  private _saveScrollPos(e: Event) {\n    this._savedScrollPos = (e.target as HTMLDivElement).scrollTop;\n  }\n\n  private _backTapped(): void {\n    if (this.backCallback) {\n      this.backCallback();\n      return;\n    }\n    history.back();\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: block;\n        height: 100%;\n        background-color: var(--primary-background-color);\n      }\n\n      :host([narrow]) {\n        width: 100%;\n        position: fixed;\n      }\n\n      ha-menu-button {\n        margin-right: 24px;\n      }\n\n      .toolbar {\n        display: flex;\n        align-items: center;\n        font-size: 20px;\n        height: var(--header-height);\n        background-color: var(--sidebar-background-color);\n        font-weight: 400;\n        border-bottom: 1px solid var(--divider-color);\n        padding: 0 16px;\n        box-sizing: border-box;\n      }\n      .toolbar a {\n        color: var(--sidebar-text-color);\n        text-decoration: none;\n      }\n      .bottom-bar a {\n        width: 25%;\n      }\n\n      #tabbar {\n        display: flex;\n        font-size: 14px;\n        overflow: hidden;\n      }\n\n      #tabbar > a {\n        overflow: hidden;\n        max-width: 45%;\n      }\n\n      #tabbar.bottom-bar {\n        position: absolute;\n        bottom: 0;\n        left: 0;\n        padding: 0 16px;\n        box-sizing: border-box;\n        background-color: var(--sidebar-background-color);\n        border-top: 1px solid var(--divider-color);\n        justify-content: space-around;\n        z-index: 2;\n        font-size: 12px;\n        width: 100%;\n        padding-bottom: env(safe-area-inset-bottom);\n      }\n\n      #tabbar:not(.bottom-bar) {\n        flex: 1;\n        justify-content: center;\n      }\n\n      :host(:not([narrow])) #toolbar-icon {\n        min-width: 40px;\n      }\n\n      ha-menu-button,\n      ha-icon-button-arrow-prev,\n      ::slotted([slot=\"toolbar-icon\"]) {\n        display: flex;\n        flex-shrink: 0;\n        pointer-events: auto;\n        color: var(--sidebar-icon-color);\n      }\n\n      .main-title {\n        flex: 1;\n        max-height: var(--header-height);\n        line-height: 20px;\n        color: var(--sidebar-text-color);\n        margin: var(--main-title-margin, 0 0 0 24px);\n      }\n\n      .content {\n        position: relative;\n        width: calc(\n          100% - env(safe-area-inset-left) - env(safe-area-inset-right)\n        );\n        margin-left: env(safe-area-inset-left);\n        margin-right: env(safe-area-inset-right);\n        height: calc(100% - 1px - var(--header-height));\n        height: calc(\n          100% - 1px - var(--header-height) - env(safe-area-inset-bottom)\n        );\n        overflow: auto;\n        -webkit-overflow-scrolling: touch;\n      }\n\n      :host([narrow]) .content.tabs {\n        height: calc(100% - 2 * var(--header-height));\n        height: calc(\n          100% - 2 * var(--header-height) - env(safe-area-inset-bottom)\n        );\n      }\n\n      #fab {\n        position: fixed;\n        right: calc(16px + env(safe-area-inset-right));\n        bottom: calc(16px + env(safe-area-inset-bottom));\n        z-index: 1;\n      }\n      :host([narrow]) #fab.tabs {\n        bottom: calc(84px + env(safe-area-inset-bottom));\n      }\n      #fab[is-wide] {\n        bottom: 24px;\n        right: 24px;\n      }\n      :host([rtl]) #fab {\n        right: auto;\n        left: calc(16px + env(safe-area-inset-left));\n      }\n      :host([rtl][is-wide]) #fab {\n        bottom: 24px;\n        left: 24px;\n        right: auto;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hass-tabs-subpage\": HassTabsSubpage;\n  }\n}\n"],"names":[],"sourceRoot":""}