{"version":3,"file":"1959fb20.js","mappings":";;AA6PA","sources":["webpack://home-assistant-frontend/./src/components/ha-control-switch.ts"],"sourcesContent":["import {\n  DIRECTION_HORIZONTAL,\n  DIRECTION_VERTICAL,\n  Manager,\n  Swipe,\n  Tap,\n} from \"@egjs/hammerjs\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport \"./ha-svg-icon\";\n\n@customElement(\"ha-control-switch\")\nexport class HaControlSwitch extends LitElement {\n  @property({ type: Boolean, reflect: true })\n  public disabled = false;\n\n  @property({ type: Boolean })\n  public vertical = false;\n\n  @property({ type: Boolean })\n  public reversed = false;\n\n  @property({ type: Boolean, reflect: true })\n  public checked?: boolean;\n\n  // SVG icon path (if you need a non SVG icon instead, use the provided on icon slot to pass an <ha-icon slot=\"icon-on\"> in)\n  @property({ type: String }) pathOn?: string;\n\n  // SVG icon path (if you need a non SVG icon instead, use the provided off icon slot to pass an <ha-icon slot=\"icon-off\"> in)\n  @property({ type: String }) pathOff?: string;\n\n  private _mc?: HammerManager;\n\n  protected firstUpdated(changedProperties: PropertyValues): void {\n    super.firstUpdated(changedProperties);\n    this.setupListeners();\n    this.setAttribute(\"role\", \"switch\");\n    if (!this.hasAttribute(\"tabindex\")) {\n      this.setAttribute(\"tabindex\", \"0\");\n    }\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    super.updated(changedProps);\n    if (changedProps.has(\"checked\")) {\n      this.setAttribute(\"aria-checked\", this.checked ? \"true\" : \"false\");\n    }\n  }\n\n  private _toggle() {\n    if (this.disabled) return;\n    this.checked = !this.checked;\n    fireEvent(this, \"change\");\n  }\n\n  connectedCallback(): void {\n    super.connectedCallback();\n    this.setupListeners();\n  }\n\n  disconnectedCallback(): void {\n    super.disconnectedCallback();\n    this.destroyListeners();\n  }\n\n  @query(\"#switch\")\n  private switch!: HTMLDivElement;\n\n  setupListeners() {\n    if (this.switch && !this._mc) {\n      this._mc = new Manager(this.switch, {\n        touchAction: this.vertical ? \"pan-x\" : \"pan-y\",\n      });\n      this._mc.add(\n        new Swipe({\n          direction: this.vertical ? DIRECTION_VERTICAL : DIRECTION_HORIZONTAL,\n        })\n      );\n\n      this._mc.add(new Tap({ event: \"singletap\" }));\n\n      if (this.vertical) {\n        this._mc.on(\"swipeup\", () => {\n          if (this.disabled) return;\n          this.checked = !!this.reversed;\n          fireEvent(this, \"change\");\n        });\n\n        this._mc.on(\"swipedown\", () => {\n          if (this.disabled) return;\n          this.checked = !this.reversed;\n          fireEvent(this, \"change\");\n        });\n      } else {\n        this._mc.on(\"swiperight\", () => {\n          if (this.disabled) return;\n          this.checked = !this.reversed;\n          fireEvent(this, \"change\");\n        });\n\n        this._mc.on(\"swipeleft\", () => {\n          if (this.disabled) return;\n          this.checked = !!this.reversed;\n          fireEvent(this, \"change\");\n        });\n      }\n\n      this._mc.on(\"singletap\", () => {\n        if (this.disabled) return;\n        this._toggle();\n      });\n      this.addEventListener(\"keydown\", this._keydown);\n    }\n  }\n\n  destroyListeners() {\n    if (this._mc) {\n      this._mc.destroy();\n      this._mc = undefined;\n    }\n    this.removeEventListener(\"keydown\", this._keydown);\n  }\n\n  private _keydown(ev: any) {\n    if (ev.key !== \"Enter\" && ev.key !== \" \") {\n      return;\n    }\n    ev.preventDefault();\n    this._toggle();\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <div id=\"switch\" class=\"switch\">\n        <div class=\"background\"></div>\n        <div class=\"button\" aria-hidden=\"true\">\n          ${this.checked\n            ? this.pathOn\n              ? html`<ha-svg-icon .path=${this.pathOn}></ha-svg-icon>`\n              : html`<slot name=\"icon-on\"></slot>`\n            : this.pathOff\n            ? html`<ha-svg-icon .path=${this.pathOff}></ha-svg-icon>`\n            : html`<slot name=\"icon-off\"></slot>`}\n        </div>\n      </div>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: block;\n        --control-switch-on-color: var(--primary-color);\n        --control-switch-off-color: var(--disabled-color);\n        --control-switch-background-opacity: 0.2;\n        --control-switch-thickness: 40px;\n        --control-switch-border-radius: 12px;\n        --control-switch-padding: 4px;\n        --mdc-icon-size: 20px;\n        height: var(--control-switch-thickness);\n        width: 100%;\n        box-sizing: border-box;\n        user-select: none;\n        cursor: pointer;\n        border-radius: var(--control-switch-border-radius);\n        outline: none;\n        transition: box-shadow 180ms ease-in-out;\n        -webkit-tap-highlight-color: transparent;\n      }\n      :host(:focus-visible) {\n        box-shadow: 0 0 0 2px var(--control-switch-off-color);\n      }\n      :host([checked]:focus-visible) {\n        box-shadow: 0 0 0 2px var(--control-switch-on-color);\n      }\n      .switch {\n        box-sizing: border-box;\n        position: relative;\n        height: 100%;\n        width: 100%;\n        border-radius: var(--control-switch-border-radius);\n        overflow: hidden;\n        padding: var(--control-switch-padding);\n        display: flex;\n      }\n      .switch .background {\n        position: absolute;\n        top: 0;\n        left: 0;\n        height: 100%;\n        width: 100%;\n        background-color: var(--control-switch-off-color);\n        transition: background-color 180ms ease-in-out;\n        opacity: var(--control-switch-background-opacity);\n      }\n      .switch .button {\n        width: 50%;\n        height: 100%;\n        background: lightgrey;\n        border-radius: calc(\n          var(--control-switch-border-radius) - var(--control-switch-padding)\n        );\n        transition: transform 180ms ease-in-out,\n          background-color 180ms ease-in-out;\n        background-color: var(--control-switch-off-color);\n        color: white;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n      }\n      :host([checked]) .switch .background {\n        background-color: var(--control-switch-on-color);\n      }\n      :host([checked]) .switch .button {\n        transform: translateX(100%);\n        background-color: var(--control-switch-on-color);\n      }\n      :host([reversed]) .switch {\n        flex-direction: row-reverse;\n      }\n      :host([reversed][checked]) .switch .button {\n        transform: translateX(-100%);\n      }\n      :host([vertical]) {\n        width: var(--control-switch-thickness);\n        height: 100%;\n      }\n      :host([vertical][checked]) .switch .button {\n        transform: translateY(100%);\n      }\n      :host([vertical]) .switch .button {\n        width: 100%;\n        height: 50%;\n      }\n      :host([vertical][reversed]) .switch {\n        flex-direction: column-reverse;\n      }\n      :host([vertical][reversed][checked]) .switch .button {\n        transform: translateY(-100%);\n      }\n      :host([disabled]) {\n        opacity: 0.5;\n        cursor: not-allowed;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-control-switch\": HaControlSwitch;\n  }\n}\n"],"names":[],"sourceRoot":""}