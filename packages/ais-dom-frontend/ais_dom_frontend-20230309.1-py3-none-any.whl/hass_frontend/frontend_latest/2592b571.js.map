{"version":3,"file":"2592b571.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AA+GA;;;;;;;;ACXA;;;ACgTA","sources":["webpack://home-assistant-frontend/./node_modules/@polymer/iron-icon/iron-icon.js","webpack://home-assistant-frontend/./src/layouts/ha-app-layout.js","webpack://home-assistant-frontend/./src/panels/config/dashboard/ha-config-dashboard.ts"],"sourcesContent":["/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\n\nimport {IronMeta} from '@polymer/iron-meta/iron-meta.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {dom} from '@polymer/polymer/lib/legacy/polymer.dom.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\nimport {Base} from '@polymer/polymer/polymer-legacy.js';\n\n/**\n\nThe `iron-icon` element displays an icon. By default an icon renders as a 24px\nsquare.\n\nExample using src:\n\n    <iron-icon src=\"star.png\"></iron-icon>\n\nExample setting size to 32px x 32px:\n\n    <iron-icon class=\"big\" src=\"big_star.png\"></iron-icon>\n\n    <style is=\"custom-style\">\n      .big {\n        --iron-icon-height: 32px;\n        --iron-icon-width: 32px;\n      }\n    </style>\n\nThe iron elements include several sets of icons. To use the default set of\nicons, import `iron-icons.js` and use the `icon` attribute to specify an icon:\n\n    <script type=\"module\">\n      import \"@polymer/iron-icons/iron-icons.js\";\n    </script>\n\n    <iron-icon icon=\"menu\"></iron-icon>\n\nTo use a different built-in set of icons, import the specific\n`iron-icons/<iconset>-icons.js`, and specify the icon as `<iconset>:<icon>`.\nFor example, to use a communication icon, you would use:\n\n    <script type=\"module\">\n      import \"@polymer/iron-icons/communication-icons.js\";\n    </script>\n\n    <iron-icon icon=\"communication:email\"></iron-icon>\n\nYou can also create custom icon sets of bitmap or SVG icons.\n\nExample of using an icon named `cherry` from a custom iconset with the ID\n`fruit`:\n\n    <iron-icon icon=\"fruit:cherry\"></iron-icon>\n\nSee `<iron-iconset>` and `<iron-iconset-svg>` for more information about how to\ncreate a custom iconset.\n\nSee the `iron-icons` demo to see the icons available in the various iconsets.\n\n### Styling\n\nThe following custom properties are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--iron-icon` | Mixin applied to the icon | {}\n`--iron-icon-width` | Width of the icon | `24px`\n`--iron-icon-height` | Height of the icon | `24px`\n`--iron-icon-fill-color` | Fill color of the svg icon | `currentcolor`\n`--iron-icon-stroke-color` | Stroke color of the svg icon | none\n\n@group Iron Elements\n@element iron-icon\n@demo demo/index.html\n@hero hero.svg\n@homepage polymer.github.io\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        @apply --layout-inline;\n        @apply --layout-center-center;\n        position: relative;\n\n        vertical-align: middle;\n\n        fill: var(--iron-icon-fill-color, currentcolor);\n        stroke: var(--iron-icon-stroke-color, none);\n\n        width: var(--iron-icon-width, 24px);\n        height: var(--iron-icon-height, 24px);\n        @apply --iron-icon;\n      }\n\n      :host([hidden]) {\n        display: none;\n      }\n    </style>\n`,\n\n  is: 'iron-icon',\n\n  properties: {\n\n    /**\n     * The name of the icon to use. The name should be of the form:\n     * `iconset_name:icon_name`.\n     */\n    icon: {type: String},\n\n    /**\n     * The name of the theme to used, if one is specified by the\n     * iconset.\n     */\n    theme: {type: String},\n\n    /**\n     * If using iron-icon without an iconset, you can set the src to be\n     * the URL of an individual icon image file. Note that this will take\n     * precedence over a given icon attribute.\n     */\n    src: {type: String},\n\n    /**\n     * @type {!IronMeta}\n     */\n    _meta: {value: Base.create('iron-meta', {type: 'iconset'})}\n\n  },\n\n  observers: [\n    '_updateIcon(_meta, isAttached)',\n    '_updateIcon(theme, isAttached)',\n    '_srcChanged(src, isAttached)',\n    '_iconChanged(icon, isAttached)'\n  ],\n\n  _DEFAULT_ICONSET: 'icons',\n\n  _iconChanged: function(icon) {\n    var parts = (icon || '').split(':');\n    this._iconName = parts.pop();\n    this._iconsetName = parts.pop() || this._DEFAULT_ICONSET;\n    this._updateIcon();\n  },\n\n  _srcChanged: function(src) {\n    this._updateIcon();\n  },\n\n  _usesIconset: function() {\n    return this.icon || !this.src;\n  },\n\n  /** @suppress {visibility} */\n  _updateIcon: function() {\n    if (this._usesIconset()) {\n      if (this._img && this._img.parentNode) {\n        dom(this.root).removeChild(this._img);\n      }\n      if (this._iconName === '') {\n        if (this._iconset) {\n          this._iconset.removeIcon(this);\n        }\n      } else if (this._iconsetName && this._meta) {\n        this._iconset = /** @type {?Polymer.Iconset} */ (\n            this._meta.byKey(this._iconsetName));\n        if (this._iconset) {\n          this._iconset.applyIcon(this, this._iconName, this.theme);\n          this.unlisten(window, 'iron-iconset-added', '_updateIcon');\n        } else {\n          this.listen(window, 'iron-iconset-added', '_updateIcon');\n        }\n      }\n    } else {\n      if (this._iconset) {\n        this._iconset.removeIcon(this);\n      }\n      if (!this._img) {\n        this._img = document.createElement('img');\n        this._img.style.width = '100%';\n        this._img.style.height = '100%';\n        this._img.draggable = false;\n      }\n      this._img.src = this.src;\n      dom(this.root).appendChild(this._img);\n    }\n  }\n});\n","/* eslint-plugin-disable lit */\n/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n/*\nThis code is copied from app-header-layout.\n'fullbleed' support is removed as Home Assisstant doesn't use it.\ntransform: translate(0) is added.\n*/\n/*\n  FIXME(polymer-modulizer): the above comments were extracted\n  from HTML and may be out of place here. Review them and\n  then delete this comment!\n*/\nimport \"@polymer/app-layout/app-header-layout/app-header-layout\";\nimport { html } from \"@polymer/polymer/lib/utils/html-tag\";\nimport \"@polymer/polymer/polymer-element\";\n\nclass HaAppLayout extends customElements.get(\"app-header-layout\") {\n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: block;\n          /**\n         * Force app-header-layout to have its own stacking context so that its parent can\n         * control the stacking of it relative to other elements (e.g. app-drawer-layout).\n         * This could be done using \\`isolation: isolate\\`, but that's not well supported\n         * across browsers.\n         */\n          position: relative;\n          z-index: 0;\n        }\n\n        #wrapper ::slotted([slot=\"header\"]) {\n          @apply --layout-fixed-top;\n          z-index: 1;\n        }\n\n        #wrapper.initializing ::slotted([slot=\"header\"]) {\n          position: relative;\n        }\n\n        :host([has-scrolling-region]) {\n          height: 100%;\n        }\n\n        :host([has-scrolling-region]) #wrapper ::slotted([slot=\"header\"]) {\n          position: absolute;\n        }\n\n        :host([has-scrolling-region])\n          #wrapper.initializing\n          ::slotted([slot=\"header\"]) {\n          position: relative;\n        }\n\n        :host([has-scrolling-region]) #wrapper #contentContainer {\n          @apply --layout-fit;\n          overflow-y: auto;\n          -webkit-overflow-scrolling: touch;\n        }\n\n        :host([has-scrolling-region]) #wrapper.initializing #contentContainer {\n          position: relative;\n        }\n\n        #contentContainer {\n          /* Create a stacking context here so that all children appear below the header. */\n          position: relative;\n          z-index: 0;\n          /* Using 'transform' will cause 'position: fixed' elements to behave like\n           'position: absolute' relative to this element. */\n          transform: translate(0);\n          margin-left: env(safe-area-inset-left);\n          margin-right: env(safe-area-inset-right);\n          padding-top: env(safe-area-inset-top);\n          padding-bottom: env(safe-area-inset-bottom);\n        }\n\n        @media print {\n          :host([has-scrolling-region]) #wrapper #contentContainer {\n            overflow-y: visible;\n          }\n        }\n      </style>\n\n      <div id=\"wrapper\" class=\"initializing\">\n        <slot id=\"headerSlot\" name=\"header\"></slot>\n\n        <div id=\"contentContainer\"><slot></slot></div>\n        <slot id=\"fab\" name=\"fab\"></slot>\n      </div>\n    `;\n  }\n}\ncustomElements.define(\"ha-app-layout\", HaAppLayout);\n","import type { ActionDetail } from \"@material/mwc-list\";\nimport {\n  mdiCloudLock,\n  mdiDotsVertical,\n  mdiMagnify,\n  mdiPower,\n  mdiUpdate,\n} from \"@mdi/js\";\nimport \"@polymer/app-layout/app-header/app-header\";\nimport \"@polymer/app-layout/app-toolbar/app-toolbar\";\nimport { HassEntities, UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { isComponentLoaded } from \"../../../common/config/is_component_loaded\";\nimport \"../../../components/ha-button-menu\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-icon-button\";\nimport \"../../../components/ha-icon-next\";\nimport \"../../../components/ha-list-item\";\nimport \"../../../components/ha-menu-button\";\nimport \"../../../components/ha-svg-icon\";\nimport \"../../../components/ha-tip\";\nimport { CloudStatus } from \"../../../data/cloud\";\nimport {\n  RepairsIssue,\n  severitySort,\n  subscribeRepairsIssueRegistry,\n} from \"../../../data/repairs\";\nimport {\n  checkForEntityUpdates,\n  filterUpdateEntitiesWithInstall,\n  UpdateEntity,\n} from \"../../../data/update\";\nimport { showQuickBar } from \"../../../dialogs/quick-bar/show-dialog-quick-bar\";\nimport { showRestartDialog } from \"../../../dialogs/restart/show-dialog-restart\";\nimport \"../../../layouts/ha-app-layout\";\nimport { PageNavigation } from \"../../../layouts/hass-tabs-subpage\";\nimport { SubscribeMixin } from \"../../../mixins/subscribe-mixin\";\nimport { haStyle } from \"../../../resources/styles\";\nimport { HomeAssistant } from \"../../../types\";\nimport { documentationUrl } from \"../../../util/documentation-url\";\nimport \"../ha-config-section\";\nimport { configSections } from \"../ha-panel-config\";\nimport \"../repairs/ha-config-repairs\";\nimport \"./ha-config-navigation\";\nimport \"./ha-config-updates\";\n\nconst randomTip = (hass: HomeAssistant, narrow: boolean) => {\n  const weighted: string[] = [];\n  let tips = [\n    {\n      content: hass.localize(\n        \"ui.panel.config.tips.join\",\n        \"forums\",\n        html`<a\n          href=\"https://community.home-assistant.io\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n          >Forums</a\n        >`,\n        \"twitter\",\n        html`<a\n          href=${documentationUrl(hass, `/twitter`)}\n          target=\"_blank\"\n          rel=\"noreferrer\"\n          >Twitter</a\n        >`,\n        \"discord\",\n        html`<a\n          href=${documentationUrl(hass, `/join-chat`)}\n          target=\"_blank\"\n          rel=\"noreferrer\"\n          >Chat</a\n        >`,\n        \"blog\",\n        html`<a\n          href=${documentationUrl(hass, `/blog`)}\n          target=\"_blank\"\n          rel=\"noreferrer\"\n          >Blog</a\n        >`,\n        \"newsletter\",\n        html`<span class=\"keep-together\"\n          ><a\n            href=${documentationUrl(hass, `/newsletter`)}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n            >Newsletter</a\n          >\n        </span>`\n      ),\n      weight: 2,\n      narrow: true,\n    },\n    { content: hass.localize(\"ui.tips.key_c_hint\"), weight: 1, narrow: false },\n    { content: hass.localize(\"ui.tips.key_m_hint\"), weight: 1, narrow: false },\n  ];\n\n  if (narrow) {\n    tips = tips.filter((tip) => tip.narrow);\n  }\n\n  tips.forEach((tip) => {\n    for (let i = 0; i < tip.weight; i++) {\n      weighted.push(tip.content);\n    }\n  });\n\n  return weighted[Math.floor(Math.random() * weighted.length)];\n};\n\n@customElement(\"ha-config-dashboard\")\nclass HaConfigDashboard extends SubscribeMixin(LitElement) {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean, reflect: true })\n  public narrow!: boolean;\n\n  @property() public isWide!: boolean;\n\n  @property() public cloudStatus?: CloudStatus;\n\n  @property() public showAdvanced!: boolean;\n\n  @state() private _tip?: string;\n\n  @state() private _repairsIssues: { issues: RepairsIssue[]; total: number } = {\n    issues: [],\n    total: 0,\n  };\n\n  private _pages = memoizeOne((cloudStatus, isCloudLoaded) => {\n    const pages: PageNavigation[] = [];\n    if (isCloudLoaded) {\n      pages.push({\n        component: \"cloud\",\n        path: \"/config/cloud\",\n        name: \"Home Assistant Cloud\",\n        info: cloudStatus,\n        iconPath: mdiCloudLock,\n        iconColor: \"#3B808E\",\n        translationKey: \"cloud\",\n      });\n    }\n    return [...pages, ...configSections.dashboard];\n  });\n\n  public hassSubscribe(): UnsubscribeFunc[] {\n    return [\n      subscribeRepairsIssueRegistry(this.hass.connection!, (repairs) => {\n        const repairsIssues = repairs.issues.filter((issue) => !issue.ignored);\n\n        this._repairsIssues = {\n          issues: repairsIssues\n            .sort((a, b) => severitySort[a.severity] - severitySort[b.severity])\n            .slice(0, repairsIssues.length === 3 ? repairsIssues.length : 2),\n          total: repairsIssues.length,\n        };\n\n        const integrations: Set<string> = new Set();\n        for (const issue of this._repairsIssues.issues) {\n          integrations.add(issue.domain);\n        }\n        this.hass.loadBackendTranslation(\"issues\", [...integrations]);\n      }),\n    ];\n  }\n\n  protected render(): TemplateResult {\n    const { updates: canInstallUpdates, total: totalUpdates } =\n      this._filterUpdateEntitiesWithInstall(this.hass.states);\n\n    const { issues: repairsIssues, total: totalRepairIssues } =\n      this._repairsIssues;\n\n    return html`\n      <ha-app-layout>\n        <app-header fixed slot=\"header\">\n          <app-toolbar>\n            <ha-menu-button\n              .hass=${this.hass}\n              .narrow=${this.narrow}\n            ></ha-menu-button>\n            <div main-title>${this.hass.localize(\"panel.config\")}</div>\n            <ha-icon-button\n              .label=${this.hass.localize(\"ui.dialogs.quick-bar.title\")}\n              .path=${mdiMagnify}\n              @click=${this._showQuickBar}\n            ></ha-icon-button>\n            <ha-button-menu\n              corner=\"BOTTOM_START\"\n              @action=${this._handleMenuAction}\n            >\n              <ha-icon-button\n                slot=\"trigger\"\n                .label=${this.hass.localize(\"ui.common.menu\")}\n                .path=${mdiDotsVertical}\n              ></ha-icon-button>\n\n              <ha-list-item graphic=\"icon\">\n                ${this.hass.localize(\"ui.panel.config.updates.check_updates\")}\n                <ha-svg-icon slot=\"graphic\" .path=${mdiUpdate}></ha-svg-icon>\n              </ha-list-item>\n\n              <ha-list-item graphic=\"icon\">\n                ${this.hass.localize(\n                  \"ui.panel.config.system_dashboard.restart_homeassistant\"\n                )}\n                <ha-svg-icon slot=\"graphic\" .path=${mdiPower}></ha-svg-icon>\n              </ha-list-item>\n            </ha-button-menu>\n          </app-toolbar>\n        </app-header>\n\n        <ha-config-section\n          .narrow=${this.narrow}\n          .isWide=${this.isWide}\n          full-width\n        >\n          ${repairsIssues.length || canInstallUpdates.length\n            ? html`<ha-card outlined>\n                ${repairsIssues.length\n                  ? html`\n                      <ha-config-repairs\n                        .hass=${this.hass}\n                        .narrow=${this.narrow}\n                        .total=${totalRepairIssues}\n                        .repairsIssues=${repairsIssues}\n                      ></ha-config-repairs>\n                      ${totalRepairIssues > repairsIssues.length\n                        ? html`\n                            <a class=\"button\" href=\"/config/repairs\">\n                              ${this.hass.localize(\n                                \"ui.panel.config.repairs.more_repairs\",\n                                {\n                                  count:\n                                    totalRepairIssues - repairsIssues.length,\n                                }\n                              )}\n                            </a>\n                          `\n                        : \"\"}\n                    `\n                  : \"\"}\n                ${repairsIssues.length && canInstallUpdates.length\n                  ? html`<hr />`\n                  : \"\"}\n                ${canInstallUpdates.length\n                  ? html`\n                      <ha-config-updates\n                        .hass=${this.hass}\n                        .narrow=${this.narrow}\n                        .total=${totalUpdates}\n                        .updateEntities=${canInstallUpdates}\n                      ></ha-config-updates>\n                      ${totalUpdates > canInstallUpdates.length\n                        ? html`\n                            <a class=\"button\" href=\"/config/updates\">\n                              ${this.hass.localize(\n                                \"ui.panel.config.updates.more_updates\",\n                                {\n                                  count:\n                                    totalUpdates - canInstallUpdates.length,\n                                }\n                              )}\n                            </a>\n                          `\n                        : \"\"}\n                    `\n                  : \"\"}\n              </ha-card>`\n            : \"\"}\n          <ha-card outlined>\n            <ha-config-navigation\n              .hass=${this.hass}\n              .narrow=${this.narrow}\n              .showAdvanced=${this.showAdvanced}\n              .pages=${this._pages(\n                this.cloudStatus,\n                isComponentLoaded(this.hass, \"cloud\")\n              )}\n            ></ha-config-navigation>\n          </ha-card>\n          <ha-tip .hass=${this.hass}>${this._tip}</ha-tip>\n        </ha-config-section>\n      </ha-app-layout>\n    `;\n  }\n\n  protected override updated(changedProps: PropertyValues): void {\n    super.updated(changedProps);\n\n    if (!this._tip && changedProps.has(\"hass\")) {\n      this._tip = randomTip(this.hass, this.narrow);\n    }\n  }\n\n  private _filterUpdateEntitiesWithInstall = memoizeOne(\n    (entities: HassEntities): { updates: UpdateEntity[]; total: number } => {\n      const updates = filterUpdateEntitiesWithInstall(entities);\n\n      return {\n        updates: updates.slice(0, updates.length === 3 ? updates.length : 2),\n        total: updates.length,\n      };\n    }\n  );\n\n  private _showQuickBar(): void {\n    showQuickBar(this, {\n      commandMode: true,\n      hint: this.hass.localize(\"ui.dialogs.quick-bar.key_c_hint\"),\n    });\n  }\n\n  private async _handleMenuAction(ev: CustomEvent<ActionDetail>) {\n    switch (ev.detail.index) {\n      case 0:\n        checkForEntityUpdates(this, this.hass);\n        break;\n      case 1:\n        showRestartDialog(this);\n        break;\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        ha-card:last-child {\n          margin-bottom: env(safe-area-inset-bottom);\n        }\n        :host(:not([narrow])) ha-card:last-child {\n          margin-bottom: max(24px, env(safe-area-inset-bottom));\n        }\n        ha-config-section {\n          margin: auto;\n          margin-top: -32px;\n          max-width: 600px;\n        }\n        ha-card {\n          overflow: hidden;\n        }\n        ha-card a {\n          text-decoration: none;\n          color: var(--primary-text-color);\n        }\n        a.button {\n          display: inline-block;\n          color: var(--primary-text-color);\n          padding: 6px 16px;\n          margin: 8px 16px 16px 16px;\n          border-radius: 32px;\n          border: 1px solid var(--divider-color);\n        }\n        .title {\n          font-size: 16px;\n          padding: 16px;\n          padding-bottom: 0;\n        }\n\n        @media all and (max-width: 600px) {\n          ha-card {\n            border-width: 1px 0;\n            border-radius: 0;\n            box-shadow: unset;\n          }\n          ha-config-section {\n            margin-top: -42px;\n          }\n        }\n\n        ha-tip {\n          margin-bottom: max(env(safe-area-inset-bottom), 8px);\n        }\n\n        .new {\n          color: var(--primary-color);\n        }\n\n        .keep-together {\n          display: inline-block;\n        }\n\n        hr {\n          height: 1px;\n          background-color: var(\n            --ha-card-border-color,\n            var(--divider-color, #e0e0e0)\n          );\n          border: none;\n          margin-top: 0;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-dashboard\": HaConfigDashboard;\n  }\n}\n"],"names":[],"sourceRoot":""}