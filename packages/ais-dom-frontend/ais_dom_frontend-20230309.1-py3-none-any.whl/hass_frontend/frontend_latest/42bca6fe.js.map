{"version":3,"file":"42bca6fe.js","mappings":";;;;;;;;;AAoGA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACi8BA","sources":["webpack://home-assistant-frontend/./src/layouts/ha-app-layout.js","webpack://home-assistant-frontend/./src/panels/lovelace/hui-root.ts"],"sourcesContent":["/* eslint-plugin-disable lit */\n/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n/*\nThis code is copied from app-header-layout.\n'fullbleed' support is removed as Home Assisstant doesn't use it.\ntransform: translate(0) is added.\n*/\n/*\n  FIXME(polymer-modulizer): the above comments were extracted\n  from HTML and may be out of place here. Review them and\n  then delete this comment!\n*/\nimport \"@polymer/app-layout/app-header-layout/app-header-layout\";\nimport { html } from \"@polymer/polymer/lib/utils/html-tag\";\nimport \"@polymer/polymer/polymer-element\";\n\nclass HaAppLayout extends customElements.get(\"app-header-layout\") {\n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: block;\n          /**\n         * Force app-header-layout to have its own stacking context so that its parent can\n         * control the stacking of it relative to other elements (e.g. app-drawer-layout).\n         * This could be done using \\`isolation: isolate\\`, but that's not well supported\n         * across browsers.\n         */\n          position: relative;\n          z-index: 0;\n        }\n\n        #wrapper ::slotted([slot=\"header\"]) {\n          @apply --layout-fixed-top;\n          z-index: 1;\n        }\n\n        #wrapper.initializing ::slotted([slot=\"header\"]) {\n          position: relative;\n        }\n\n        :host([has-scrolling-region]) {\n          height: 100%;\n        }\n\n        :host([has-scrolling-region]) #wrapper ::slotted([slot=\"header\"]) {\n          position: absolute;\n        }\n\n        :host([has-scrolling-region])\n          #wrapper.initializing\n          ::slotted([slot=\"header\"]) {\n          position: relative;\n        }\n\n        :host([has-scrolling-region]) #wrapper #contentContainer {\n          @apply --layout-fit;\n          overflow-y: auto;\n          -webkit-overflow-scrolling: touch;\n        }\n\n        :host([has-scrolling-region]) #wrapper.initializing #contentContainer {\n          position: relative;\n        }\n\n        #contentContainer {\n          /* Create a stacking context here so that all children appear below the header. */\n          position: relative;\n          z-index: 0;\n          /* Using 'transform' will cause 'position: fixed' elements to behave like\n           'position: absolute' relative to this element. */\n          transform: translate(0);\n          margin-left: env(safe-area-inset-left);\n          margin-right: env(safe-area-inset-right);\n          padding-top: env(safe-area-inset-top);\n          padding-bottom: env(safe-area-inset-bottom);\n        }\n\n        @media print {\n          :host([has-scrolling-region]) #wrapper #contentContainer {\n            overflow-y: visible;\n          }\n        }\n      </style>\n\n      <div id=\"wrapper\" class=\"initializing\">\n        <slot id=\"headerSlot\" name=\"header\"></slot>\n\n        <div id=\"contentContainer\"><slot></slot></div>\n        <slot id=\"fab\" name=\"fab\"></slot>\n      </div>\n    `;\n  }\n}\ncustomElements.define(\"ha-app-layout\", HaAppLayout);\n","import \"@material/mwc-button\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport type { RequestSelectedDetail } from \"@material/mwc-list/mwc-list-item\";\nimport {\n  mdiCodeBraces,\n  mdiCommentProcessingOutline,\n  mdiDotsVertical,\n  mdiFileMultiple,\n  mdiFormatListBulletedTriangle,\n  mdiHelp,\n  mdiHelpCircle,\n  mdiMagnify,\n  mdiPencil,\n  mdiPlus,\n  mdiRefresh,\n  mdiShape,\n  mdiViewDashboard,\n} from \"@mdi/js\";\nimport \"@polymer/app-layout/app-header/app-header\";\nimport \"@polymer/app-layout/app-scroll-effects/effects/waterfall\";\nimport \"@polymer/app-layout/app-toolbar/app-toolbar\";\nimport \"@polymer/paper-tabs/paper-tab\";\nimport \"@polymer/paper-tabs/paper-tabs\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { ifDefined } from \"lit/directives/if-defined\";\nimport memoizeOne from \"memoize-one\";\nimport { isComponentLoaded } from \"../../common/config/is_component_loaded\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport scrollToTarget from \"../../common/dom/scroll-to-target\";\nimport { shouldHandleRequestSelectedEvent } from \"../../common/mwc/handle-request-selected-event\";\nimport { navigate } from \"../../common/navigate\";\nimport { constructUrlCurrentPath } from \"../../common/url/construct-url\";\nimport {\n  addSearchParam,\n  extractSearchParamsObject,\n  removeSearchParam,\n} from \"../../common/url/search-params\";\nimport { computeRTLDirection } from \"../../common/util/compute_rtl\";\nimport { debounce } from \"../../common/util/debounce\";\nimport { afterNextRender } from \"../../common/util/render-status\";\nimport \"../../components/ha-button-menu\";\nimport \"../../components/ha-icon\";\nimport \"../../components/ha-icon-button\";\nimport \"../../components/ha-icon-button-arrow-next\";\nimport \"../../components/ha-icon-button-arrow-prev\";\nimport \"../../components/ha-menu-button\";\nimport \"../../components/ha-svg-icon\";\nimport \"../../components/ha-tabs\";\nimport type {\n  LovelaceConfig,\n  LovelacePanelConfig,\n  LovelaceViewConfig,\n} from \"../../data/lovelace\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n} from \"../../dialogs/generic/show-dialog-box\";\nimport { showQuickBar } from \"../../dialogs/quick-bar/show-dialog-quick-bar\";\nimport { showVoiceCommandDialog } from \"../../dialogs/voice-command-dialog/show-ha-voice-command-dialog\";\nimport \"../../layouts/ha-app-layout\";\nimport type { haAppLayout } from \"../../layouts/ha-app-layout\";\nimport { haStyle } from \"../../resources/styles\";\nimport type { HomeAssistant } from \"../../types\";\nimport { documentationUrl } from \"../../util/documentation-url\";\nimport { swapView } from \"./editor/config-util\";\nimport { showEditLovelaceDialog } from \"./editor/lovelace-editor/show-edit-lovelace-dialog\";\nimport { showEditViewDialog } from \"./editor/view-editor/show-edit-view-dialog\";\nimport type { Lovelace } from \"./types\";\nimport \"./views/hui-view\";\nimport type { HUIView } from \"./views/hui-view\";\n\n@customElement(\"hui-root\")\nclass HUIRoot extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public lovelace?: Lovelace;\n\n  @property({ type: Boolean }) public narrow = false;\n\n  @property({ attribute: false }) public route?: {\n    path: string;\n    prefix: string;\n  };\n\n  @state() private _curView?: number | \"hass-unused-entities\";\n\n  @query(\"ha-app-layout\", true) private _appLayout!: haAppLayout;\n\n  private _viewCache?: { [viewId: string]: HUIView };\n\n  private _debouncedConfigChanged: () => void;\n\n  private _conversation = memoizeOne((_components) =>\n    isComponentLoaded(this.hass, \"conversation\")\n  );\n\n  constructor() {\n    super();\n    // The view can trigger a re-render when it knows that certain\n    // web components have been loaded.\n    this._debouncedConfigChanged = debounce(\n      () => this._selectView(this._curView, true),\n      100,\n      false\n    );\n  }\n\n  protected render(): TemplateResult {\n    const views = this.lovelace?.config.views ?? [];\n\n    const curViewConfig =\n      typeof this._curView === \"number\" ? views[this._curView] : undefined;\n\n    return html`\n      <ha-app-layout\n        class=${classMap({\n          \"edit-mode\": this._editMode,\n        })}\n        id=\"layout\"\n      >\n        <app-header slot=\"header\" effects=\"waterfall\" fixed condenses>\n          ${this._editMode\n            ? html`\n                <app-toolbar class=\"edit-mode\">\n                  <div main-title>\n                    ${this.config.title ||\n                    this.hass!.localize(\"ui.panel.lovelace.editor.header\")}\n                    <ha-icon-button\n                      .label=${this.hass!.localize(\n                        \"ui.panel.lovelace.editor.edit_lovelace.edit_title\"\n                      )}\n                      .path=${mdiPencil}\n                      class=\"edit-icon\"\n                      @click=${this._editLovelace}\n                    ></ha-icon-button>\n                  </div>\n                  <mwc-button\n                    outlined\n                    class=\"exit-edit-mode\"\n                    .label=${this.hass!.localize(\n                      \"ui.panel.lovelace.menu.exit_edit_mode\"\n                    )}\n                    @click=${this._editModeDisable}\n                  ></mwc-button>\n                  <a\n                    href=${documentationUrl(this.hass, \"/dashboards/\")}\n                    rel=\"noreferrer\"\n                    class=\"menu-link\"\n                    target=\"_blank\"\n                  >\n                    <ha-icon-button\n                      .label=${this.hass!.localize(\n                        \"ui.panel.lovelace.menu.help\"\n                      )}\n                      .path=${mdiHelpCircle}\n                    ></ha-icon-button>\n                  </a>\n                  <ha-button-menu corner=\"BOTTOM_START\">\n                    <ha-icon-button\n                      slot=\"trigger\"\n                      .label=${this.hass!.localize(\n                        \"ui.panel.lovelace.editor.menu.open\"\n                      )}\n                      .path=${mdiDotsVertical}\n                    ></ha-icon-button>\n                    ${__DEMO__ /* No unused entities available in the demo */\n                      ? \"\"\n                      : html`\n                          <mwc-list-item\n                            graphic=\"icon\"\n                            @request-selected=${this._handleUnusedEntities}\n                          >\n                            <ha-svg-icon\n                              slot=\"graphic\"\n                              .path=${mdiFormatListBulletedTriangle}\n                            >\n                            </ha-svg-icon>\n                            ${this.hass!.localize(\n                              \"ui.panel.lovelace.unused_entities.title\"\n                            )}\n                          </mwc-list-item>\n                        `}\n                    <mwc-list-item\n                      graphic=\"icon\"\n                      @request-selected=${this._handleRawEditor}\n                    >\n                      <ha-svg-icon\n                        slot=\"graphic\"\n                        .path=${mdiCodeBraces}\n                      ></ha-svg-icon>\n                      ${this.hass!.localize(\n                        \"ui.panel.lovelace.editor.menu.raw_editor\"\n                      )}\n                    </mwc-list-item>\n                    ${__DEMO__ /* No config available in the demo */\n                      ? \"\"\n                      : html`<mwc-list-item\n                            graphic=\"icon\"\n                            @request-selected=${this._handleManageDashboards}\n                          >\n                            <ha-svg-icon\n                              slot=\"graphic\"\n                              .path=${mdiViewDashboard}\n                            ></ha-svg-icon>\n                            ${this.hass!.localize(\n                              \"ui.panel.lovelace.editor.menu.manage_dashboards\"\n                            )}\n                          </mwc-list-item>\n                          ${this.hass.userData?.showAdvanced\n                            ? html`<mwc-list-item\n                                graphic=\"icon\"\n                                @request-selected=${this._handleManageResources}\n                              >\n                                <ha-svg-icon\n                                  slot=\"graphic\"\n                                  .path=${mdiFileMultiple}\n                                ></ha-svg-icon>\n                                ${this.hass!.localize(\n                                  \"ui.panel.lovelace.editor.menu.manage_resources\"\n                                )}\n                              </mwc-list-item>`\n                            : \"\"} `}\n                  </ha-button-menu>\n                </app-toolbar>\n              `\n            : html`\n                <app-toolbar>\n                  ${curViewConfig?.subview\n                    ? html`\n                        <ha-icon-button-arrow-prev\n                          @click=${this._goBack}\n                        ></ha-icon-button-arrow-prev>\n                      `\n                    : html`\n                        <ha-menu-button\n                          .hass=${this.hass}\n                          .narrow=${this.narrow}\n                        ></ha-menu-button>\n                      `}\n                  ${curViewConfig?.subview\n                    ? html`<div main-title>${curViewConfig.title}</div>`\n                    : views.filter((view) => !view.subview).length > 1\n                    ? html`\n                        <ha-tabs\n                          scrollable\n                          .selected=${this._curView}\n                          @iron-activate=${this._handleViewSelected}\n                          dir=${computeRTLDirection(this.hass!)}\n                        >\n                          ${views.map(\n                            (view) => html`\n                              <paper-tab\n                                aria-label=${ifDefined(view.title)}\n                                class=${classMap({\n                                  \"hide-tab\": Boolean(\n                                    view.subview ||\n                                      (view.visible !== undefined &&\n                                        ((Array.isArray(view.visible) &&\n                                          !view.visible.some(\n                                            (e) =>\n                                              e.user === this.hass!.user?.id\n                                          )) ||\n                                          view.visible === false))\n                                  ),\n                                })}\n                              >\n                                ${view.icon\n                                  ? html`\n                                      <ha-icon\n                                        title=${ifDefined(view.title)}\n                                        .icon=${view.icon}\n                                      ></ha-icon>\n                                    `\n                                  : view.title || \"Unnamed view\"}\n                              </paper-tab>\n                            `\n                          )}\n                        </ha-tabs>\n                      `\n                    : html`<div main-title>${this.config.title}</div>`}\n                  ${!this.narrow\n                    ? html`\n                        <ha-icon-button\n                          .label=${this.hass!.localize(\n                            \"ui.panel.lovelace.menu.search\"\n                          )}\n                          .path=${mdiMagnify}\n                          @click=${this._showQuickBar}\n                        ></ha-icon-button>\n                      `\n                    : \"\"}\n                  ${!this.narrow &&\n                  this._conversation(this.hass.config.components)\n                    ? html`\n                        <ha-icon-button\n                          .label=${this.hass!.localize(\n                            \"ui.panel.lovelace.menu.assist\"\n                          )}\n                          .path=${mdiCommentProcessingOutline}\n                          @click=${this._showVoiceCommandDialog}\n                        ></ha-icon-button>\n                      `\n                    : \"\"}\n                  ${this._showButtonMenu\n                    ? html`\n                        <ha-button-menu corner=\"BOTTOM_START\">\n                          <ha-icon-button\n                            slot=\"trigger\"\n                            .label=${this.hass!.localize(\n                              \"ui.panel.lovelace.editor.menu.open\"\n                            )}\n                            .path=${mdiDotsVertical}\n                          ></ha-icon-button>\n\n                          ${this.narrow\n                            ? html`\n                                <mwc-list-item\n                                  graphic=\"icon\"\n                                  @request-selected=${this._handleShowQuickBar}\n                                >\n                                  ${this.hass!.localize(\n                                    \"ui.panel.lovelace.menu.search\"\n                                  )}\n\n                                  <ha-svg-icon\n                                    slot=\"graphic\"\n                                    .path=${mdiMagnify}\n                                  ></ha-svg-icon>\n                                </mwc-list-item>\n                              `\n                            : \"\"}\n                          ${this.narrow &&\n                          this._conversation(this.hass.config.components)\n                            ? html`\n                                <mwc-list-item\n                                  graphic=\"icon\"\n                                  @request-selected=${this\n                                    ._handleShowVoiceCommandDialog}\n                                >\n                                  ${this.hass!.localize(\n                                    \"ui.panel.lovelace.menu.assist\"\n                                  )}\n\n                                  <ha-svg-icon\n                                    slot=\"graphic\"\n                                    .path=${mdiCommentProcessingOutline}\n                                  ></ha-svg-icon>\n                                </mwc-list-item>\n                              `\n                            : \"\"}\n                          ${this._yamlMode\n                            ? html`\n                                <mwc-list-item\n                                  graphic=\"icon\"\n                                  @request-selected=${this._handleRefresh}\n                                >\n                                  ${this.hass!.localize(\"ui.common.refresh\")}\n\n                                  <ha-svg-icon\n                                    slot=\"graphic\"\n                                    .path=${mdiRefresh}\n                                  ></ha-svg-icon>\n                                </mwc-list-item>\n                                <mwc-list-item\n                                  graphic=\"icon\"\n                                  @request-selected=${this\n                                    ._handleUnusedEntities}\n                                >\n                                  ${this.hass!.localize(\n                                    \"ui.panel.lovelace.unused_entities.title\"\n                                  )}\n\n                                  <ha-svg-icon\n                                    slot=\"graphic\"\n                                    .path=${mdiShape}\n                                  ></ha-svg-icon>\n                                </mwc-list-item>\n                              `\n                            : \"\"}\n                          ${(\n                            this.hass.panels.lovelace\n                              ?.config as LovelacePanelConfig\n                          )?.mode === \"yaml\"\n                            ? html`\n                                <mwc-list-item\n                                  graphic=\"icon\"\n                                  @request-selected=${this\n                                    ._handleReloadResources}\n                                >\n                                  ${this.hass!.localize(\n                                    \"ui.panel.lovelace.menu.reload_resources\"\n                                  )}\n                                  <ha-svg-icon\n                                    slot=\"graphic\"\n                                    .path=${mdiRefresh}\n                                  ></ha-svg-icon>\n                                </mwc-list-item>\n                              `\n                            : \"\"}\n                          ${this.hass!.user?.is_admin &&\n                          !this.hass!.config.safe_mode\n                            ? html`\n                                <mwc-list-item\n                                  graphic=\"icon\"\n                                  @request-selected=${this\n                                    ._handleEnableEditMode}\n                                >\n                                  ${this.hass!.localize(\n                                    \"ui.panel.lovelace.menu.configure_ui\"\n                                  )}\n                                  <ha-svg-icon\n                                    slot=\"graphic\"\n                                    .path=${mdiPencil}\n                                  ></ha-svg-icon>\n                                </mwc-list-item>\n                              `\n                            : \"\"}\n                          ${this._editMode\n                            ? html`\n                                <a\n                                  href=${documentationUrl(\n                                    this.hass,\n                                    \"/lovelace/\"\n                                  )}\n                                  rel=\"noreferrer\"\n                                  class=\"menu-link\"\n                                  target=\"_blank\"\n                                >\n                                  <mwc-list-item graphic=\"icon\">\n                                    ${this.hass!.localize(\n                                      \"ui.panel.lovelace.menu.help\"\n                                    )}\n                                    <ha-svg-icon\n                                      slot=\"graphic\"\n                                      .path=${mdiHelp}\n                                    ></ha-svg-icon>\n                                  </mwc-list-item>\n                                </a>\n                              `\n                            : \"\"}\n                        </ha-button-menu>\n                      `\n                    : \"\"}\n                </app-toolbar>\n              `}\n          ${this._editMode\n            ? html`\n                <div sticky>\n                  <paper-tabs\n                    scrollable\n                    .selected=${this._curView}\n                    @iron-activate=${this._handleViewSelected}\n                    dir=${computeRTLDirection(this.hass!)}\n                  >\n                    ${views.map(\n                      (view) => html`\n                        <paper-tab\n                          aria-label=${ifDefined(view.title)}\n                          class=${classMap({\n                            \"hide-tab\": Boolean(\n                              !this._editMode &&\n                                view.visible !== undefined &&\n                                ((Array.isArray(view.visible) &&\n                                  !view.visible.some(\n                                    (e) => e.user === this.hass!.user?.id\n                                  )) ||\n                                  view.visible === false)\n                            ),\n                          })}\n                        >\n                          ${this._editMode\n                            ? html`\n                                <ha-icon-button-arrow-prev\n                                  .hass=${this.hass}\n                                  .label=${this.hass!.localize(\n                                    \"ui.panel.lovelace.editor.edit_view.move_left\"\n                                  )}\n                                  class=\"edit-icon view\"\n                                  @click=${this._moveViewLeft}\n                                  ?disabled=${this._curView === 0}\n                                ></ha-icon-button-arrow-prev>\n                              `\n                            : \"\"}\n                          ${view.icon\n                            ? html`\n                                <ha-icon\n                                  class=${classMap({\n                                    \"child-view-icon\": Boolean(view.subview),\n                                  })}\n                                  title=${ifDefined(view.title)}\n                                  .icon=${view.icon}\n                                ></ha-icon>\n                              `\n                            : view.title || \"Unnamed view\"}\n                          ${this._editMode\n                            ? html`\n                                <ha-svg-icon\n                                  title=${this.hass!.localize(\n                                    \"ui.panel.lovelace.editor.edit_view.edit\"\n                                  )}\n                                  class=\"edit-icon view\"\n                                  .path=${mdiPencil}\n                                  @click=${this._editView}\n                                ></ha-svg-icon>\n                                <ha-icon-button-arrow-next\n                                  .hass=${this.hass}\n                                  .label=${this.hass!.localize(\n                                    \"ui.panel.lovelace.editor.edit_view.move_right\"\n                                  )}\n                                  class=\"edit-icon view\"\n                                  @click=${this._moveViewRight}\n                                  ?disabled=${(this._curView! as number) + 1 ===\n                                  views.length}\n                                ></ha-icon-button-arrow-next>\n                              `\n                            : \"\"}\n                        </paper-tab>\n                      `\n                    )}\n                    ${this._editMode\n                      ? html`\n                          <ha-icon-button\n                            id=\"add-view\"\n                            @click=${this._addView}\n                            .label=${this.hass!.localize(\n                              \"ui.panel.lovelace.editor.edit_view.add\"\n                            )}\n                            .path=${mdiPlus}\n                          ></ha-icon-button>\n                        `\n                      : \"\"}\n                  </paper-tabs>\n                </div>\n              `\n            : \"\"}\n        </app-header>\n        <div id=\"view\" @ll-rebuild=${this._debouncedConfigChanged}></div>\n      </ha-app-layout>\n    `;\n  }\n\n  private _isVisible = (view: LovelaceViewConfig) =>\n    Boolean(\n      this._editMode ||\n        view.visible === undefined ||\n        view.visible === true ||\n        (Array.isArray(view.visible) &&\n          view.visible.some((show) => show.user === this.hass!.user?.id))\n    );\n\n  protected firstUpdated() {\n    // Check for requested edit mode\n    const searchParams = extractSearchParamsObject();\n    if (searchParams.edit === \"1\") {\n      this.lovelace!.setEditMode(true);\n    } else if (searchParams.conversation === \"1\") {\n      showVoiceCommandDialog(this);\n      window.history.replaceState(\n        null,\n        \"\",\n        constructUrlCurrentPath(removeSearchParam(\"conversation\"))\n      );\n    }\n  }\n\n  protected updated(changedProperties: PropertyValues): void {\n    super.updated(changedProperties);\n\n    const view = this._viewRoot;\n    const huiView = view.lastChild as HUIView;\n\n    if (changedProperties.has(\"hass\") && huiView) {\n      huiView.hass = this.hass;\n    }\n\n    if (changedProperties.has(\"narrow\") && huiView) {\n      huiView.narrow = this.narrow;\n    }\n\n    let newSelectView;\n    let force = false;\n\n    let viewPath: string | undefined = this.route!.path.split(\"/\")[1];\n    viewPath = viewPath ? decodeURI(viewPath) : undefined;\n\n    if (changedProperties.has(\"route\")) {\n      const views = this.config.views;\n\n      if (!viewPath && views.length) {\n        newSelectView = views.findIndex(this._isVisible);\n        this._navigateToView(views[newSelectView].path || newSelectView, true);\n      } else if (viewPath === \"hass-unused-entities\") {\n        newSelectView = \"hass-unused-entities\";\n      } else if (viewPath) {\n        const selectedView = viewPath;\n        const selectedViewInt = Number(selectedView);\n        let index = 0;\n        for (let i = 0; i < views.length; i++) {\n          if (views[i].path === selectedView || i === selectedViewInt) {\n            index = i;\n            break;\n          }\n        }\n        newSelectView = index;\n      }\n    }\n\n    if (changedProperties.has(\"lovelace\")) {\n      const oldLovelace = changedProperties.get(\"lovelace\") as\n        | Lovelace\n        | undefined;\n\n      if (!oldLovelace || oldLovelace.config !== this.lovelace!.config) {\n        // On config change, recreate the current view from scratch.\n        force = true;\n      }\n\n      if (!oldLovelace || oldLovelace.editMode !== this.lovelace!.editMode) {\n        const views = this.config && this.config.views;\n\n        fireEvent(this, \"iron-resize\");\n\n        // Leave unused entities when leaving edit mode\n        if (\n          this.lovelace!.mode === \"storage\" &&\n          viewPath === \"hass-unused-entities\"\n        ) {\n          newSelectView = views.findIndex(this._isVisible);\n          this._navigateToView(\n            views[newSelectView].path || newSelectView,\n            true\n          );\n        }\n      }\n\n      if (!force && huiView) {\n        huiView.lovelace = this.lovelace!;\n      }\n    }\n\n    if (newSelectView !== undefined || force) {\n      if (force && newSelectView === undefined) {\n        newSelectView = this._curView;\n      }\n      // Will allow for ripples to start rendering\n      afterNextRender(() => this._selectView(newSelectView, force));\n    }\n  }\n\n  private get config(): LovelaceConfig {\n    return this.lovelace!.config;\n  }\n\n  private get _yamlMode(): boolean {\n    return this.lovelace!.mode === \"yaml\";\n  }\n\n  private get _editMode() {\n    return this.lovelace!.editMode;\n  }\n\n  private get _layout(): any {\n    return this.shadowRoot!.getElementById(\"layout\");\n  }\n\n  private get _viewRoot(): HTMLDivElement {\n    return this.shadowRoot!.getElementById(\"view\") as HTMLDivElement;\n  }\n\n  private get _showButtonMenu(): boolean {\n    return (\n      (this.narrow && this._conversation(this.hass.config.components)) ||\n      this._editMode ||\n      (this.hass!.user?.is_admin && !this.hass!.config.safe_mode) ||\n      (this.hass.panels.lovelace?.config as LovelacePanelConfig)?.mode ===\n        \"yaml\" ||\n      this._yamlMode\n    );\n  }\n\n  private _handleRefresh(ev: CustomEvent<RequestSelectedDetail>): void {\n    if (!shouldHandleRequestSelectedEvent(ev)) {\n      return;\n    }\n    fireEvent(this, \"config-refresh\");\n  }\n\n  private _handleReloadResources(ev: CustomEvent<RequestSelectedDetail>): void {\n    if (!shouldHandleRequestSelectedEvent(ev)) {\n      return;\n    }\n    this.hass.callService(\"lovelace\", \"reload_resources\");\n    showConfirmationDialog(this, {\n      title: this.hass!.localize(\n        \"ui.panel.lovelace.reload_resources.refresh_header\"\n      ),\n      text: this.hass!.localize(\n        \"ui.panel.lovelace.reload_resources.refresh_body\"\n      ),\n      confirmText: this.hass.localize(\"ui.common.refresh\"),\n      dismissText: this.hass.localize(\"ui.common.not_now\"),\n      confirm: () => location.reload(),\n    });\n  }\n\n  private _handleShowQuickBar(ev: CustomEvent<RequestSelectedDetail>): void {\n    if (!shouldHandleRequestSelectedEvent(ev)) {\n      return;\n    }\n    this._showQuickBar();\n  }\n\n  private _showQuickBar(): void {\n    showQuickBar(this, {\n      commandMode: false,\n      hint: this.hass.localize(\"ui.tips.key_e_hint\"),\n    });\n  }\n\n  private _goBack(): void {\n    const views = this.lovelace?.config.views ?? [];\n    const curViewConfig =\n      typeof this._curView === \"number\" ? views[this._curView] : undefined;\n\n    if (curViewConfig?.back_path) {\n      navigate(curViewConfig.back_path);\n    } else if (history.length > 1) {\n      history.back();\n    } else {\n      navigate(this.route!.prefix);\n    }\n  }\n\n  private _handleRawEditor(ev: CustomEvent<RequestSelectedDetail>): void {\n    if (!shouldHandleRequestSelectedEvent(ev)) {\n      return;\n    }\n    this.lovelace!.enableFullEditMode();\n  }\n\n  private _handleManageDashboards(\n    ev: CustomEvent<RequestSelectedDetail>\n  ): void {\n    if (!shouldHandleRequestSelectedEvent(ev)) {\n      return;\n    }\n    navigate(\"/config/lovelace/dashboards\");\n  }\n\n  private _handleManageResources(ev: CustomEvent<RequestSelectedDetail>): void {\n    if (!shouldHandleRequestSelectedEvent(ev)) {\n      return;\n    }\n    navigate(\"/config/lovelace/resources\");\n  }\n\n  private _handleUnusedEntities(ev: CustomEvent<RequestSelectedDetail>): void {\n    if (!shouldHandleRequestSelectedEvent(ev)) {\n      return;\n    }\n    navigate(`${this.route?.prefix}/hass-unused-entities`);\n  }\n\n  private _handleShowVoiceCommandDialog(\n    ev: CustomEvent<RequestSelectedDetail>\n  ): void {\n    if (!shouldHandleRequestSelectedEvent(ev)) {\n      return;\n    }\n    this._showVoiceCommandDialog();\n  }\n\n  private _showVoiceCommandDialog(): void {\n    showVoiceCommandDialog(this);\n  }\n\n  private _handleEnableEditMode(ev: CustomEvent<RequestSelectedDetail>): void {\n    if (!shouldHandleRequestSelectedEvent(ev)) {\n      return;\n    }\n    if (this._yamlMode) {\n      showAlertDialog(this, {\n        text: \"The edit UI is not available when in YAML mode.\",\n      });\n      return;\n    }\n    this.lovelace!.setEditMode(true);\n  }\n\n  private _editModeDisable(): void {\n    this.lovelace!.setEditMode(false);\n  }\n\n  private _editLovelace() {\n    showEditLovelaceDialog(this, this.lovelace!);\n  }\n\n  private _navigateToView(path: string | number, replace?: boolean) {\n    if (!this.lovelace!.editMode) {\n      navigate(`${this.route!.prefix}/${path}${location.search}`, { replace });\n      return;\n    }\n    navigate(`${this.route!.prefix}/${path}?${addSearchParam({ edit: \"1\" })}`, {\n      replace,\n    });\n  }\n\n  private _editView() {\n    showEditViewDialog(this, {\n      lovelace: this.lovelace!,\n      viewIndex: this._curView as number,\n    });\n  }\n\n  private _moveViewLeft(ev) {\n    ev.stopPropagation();\n    if (this._curView === 0) {\n      return;\n    }\n    const lovelace = this.lovelace!;\n    const oldIndex = this._curView as number;\n    const newIndex = (this._curView as number) - 1;\n    this._curView = newIndex;\n    lovelace.saveConfig(swapView(lovelace.config, oldIndex, newIndex));\n  }\n\n  private _moveViewRight(ev) {\n    ev.stopPropagation();\n    if ((this._curView! as number) + 1 === this.lovelace!.config.views.length) {\n      return;\n    }\n    const lovelace = this.lovelace!;\n    const oldIndex = this._curView as number;\n    const newIndex = (this._curView as number) + 1;\n    this._curView = newIndex;\n    lovelace.saveConfig(swapView(lovelace.config, oldIndex, newIndex));\n  }\n\n  private _addView() {\n    showEditViewDialog(this, {\n      lovelace: this.lovelace!,\n      saveCallback: (viewIndex: number, viewConfig: LovelaceViewConfig) => {\n        const path = viewConfig.path || viewIndex;\n        this._navigateToView(path);\n      },\n    });\n  }\n\n  private _handleViewSelected(ev) {\n    const viewIndex = ev.detail.selected as number;\n\n    if (viewIndex !== this._curView) {\n      const path = this.config.views[viewIndex].path || viewIndex;\n      this._navigateToView(path);\n    }\n    scrollToTarget(this, this._layout.header.scrollTarget);\n  }\n\n  private _selectView(viewIndex: HUIRoot[\"_curView\"], force: boolean): void {\n    if (!force && this._curView === viewIndex) {\n      return;\n    }\n\n    viewIndex = viewIndex === undefined ? 0 : viewIndex;\n\n    this._curView = viewIndex;\n\n    if (force) {\n      this._viewCache = {};\n    }\n\n    // Recreate a new element to clear the applied themes.\n    const root = this._viewRoot;\n\n    if (root.lastChild) {\n      root.removeChild(root.lastChild);\n    }\n\n    if (viewIndex === \"hass-unused-entities\") {\n      const unusedEntities = document.createElement(\"hui-unused-entities\");\n      // Wait for promise to resolve so that the element has been upgraded.\n      import(\"./editor/unused-entities/hui-unused-entities\").then(() => {\n        unusedEntities.hass = this.hass!;\n        unusedEntities.lovelace = this.lovelace!;\n        unusedEntities.narrow = this.narrow;\n      });\n      root.appendChild(unusedEntities);\n      return;\n    }\n\n    let view;\n    const viewConfig = this.config.views[viewIndex];\n\n    if (!viewConfig) {\n      this.lovelace!.setEditMode(true);\n      return;\n    }\n\n    if (!force && this._viewCache![viewIndex]) {\n      view = this._viewCache![viewIndex];\n    } else {\n      view = document.createElement(\"hui-view\");\n      view.index = viewIndex;\n      this._viewCache![viewIndex] = view;\n    }\n\n    view.lovelace = this.lovelace;\n    view.hass = this.hass;\n    view.narrow = this.narrow;\n\n    const configBackground = viewConfig.background || this.config.background;\n\n    if (configBackground) {\n      this._appLayout.style.setProperty(\n        \"--lovelace-background\",\n        configBackground\n      );\n    } else {\n      this._appLayout.style.removeProperty(\"--lovelace-background\");\n    }\n\n    root.appendChild(view);\n    // Recalculate to see if we need to adjust content area for tab bar\n    fireEvent(this, \"iron-resize\");\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        :host {\n          -ms-user-select: none;\n          -webkit-user-select: none;\n          -moz-user-select: none;\n        }\n\n        ha-app-layout {\n          min-height: 100%;\n        }\n        ha-tabs {\n          width: 100%;\n          height: 100%;\n          margin-left: 4px;\n        }\n        paper-tabs {\n          margin-left: 12px;\n          margin-left: max(env(safe-area-inset-left), 12px);\n          margin-right: env(safe-area-inset-right);\n        }\n        ha-tabs,\n        paper-tabs {\n          --paper-tabs-selection-bar-color: var(\n            --app-header-selection-bar-color,\n            var(--app-header-text-color, #fff)\n          );\n          text-transform: uppercase;\n        }\n\n        .edit-mode app-header,\n        .edit-mode app-toolbar {\n          background-color: var(--app-header-edit-background-color, #455a64);\n          color: var(--app-header-edit-text-color, #fff);\n        }\n        .edit-mode div[main-title] {\n          pointer-events: auto;\n        }\n        paper-tab.iron-selected .edit-icon {\n          display: inline-flex;\n        }\n        .edit-icon {\n          color: var(--accent-color);\n          padding-left: 8px;\n          padding-inline-start: 8px;\n          vertical-align: middle;\n          --mdc-theme-text-disabled-on-light: var(--disabled-text-color);\n          direction: var(--direction);\n        }\n        .edit-icon.view {\n          display: none;\n        }\n        #add-view {\n          position: absolute;\n          height: 44px;\n        }\n        #add-view ha-svg-icon {\n          background-color: var(--accent-color);\n          border-radius: 4px;\n        }\n        app-toolbar a {\n          color: var(--text-primary-color, white);\n        }\n        mwc-button.warning:not([disabled]) {\n          color: var(--error-color);\n        }\n        #view {\n          min-height: calc(\n            100vh - var(--header-height) - env(safe-area-inset-top) -\n              env(safe-area-inset-bottom)\n          );\n          /**\n          * Since we only set min-height, if child nodes need percentage\n          * heights they must use absolute positioning so we need relative\n          * positioning here.\n          *\n          * https://www.w3.org/TR/CSS2/visudet.html#the-height-property\n          */\n          position: relative;\n          display: flex;\n        }\n        /**\n         * In edit mode we have the tab bar on a new line *\n         */\n        .edit-mode #view {\n          min-height: calc(\n            100vh - var(--header-height) - 48px - env(safe-area-inset-top) -\n              env(safe-area-inset-bottom)\n          );\n        }\n        #view > * {\n          /**\n          * The view could get larger than the window in Firefox\n          * to prevent that we set the max-width to 100%\n          * flex-grow: 1 and flex-basis: 100% should make sure the view\n          * stays full width.\n          *\n          * https://github.com/home-assistant/home-assistant-polymer/pull/3806\n          */\n          flex: 1 1 100%;\n          max-width: 100%;\n        }\n        .hide-tab {\n          display: none;\n        }\n        .menu-link {\n          text-decoration: none;\n        }\n        hui-view {\n          background: var(\n            --lovelace-background,\n            var(--primary-background-color)\n          );\n        }\n        .exit-edit-mode {\n          --mdc-theme-primary: var(--app-header-edit-text-color, #fff);\n          --mdc-button-outline-color: var(--app-header-edit-text-color, #fff);\n          --mdc-typography-button-font-size: 14px;\n        }\n        .child-view-icon {\n          opacity: 0.5;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-root\": HUIRoot;\n  }\n}\n"],"names":[],"sourceRoot":""}