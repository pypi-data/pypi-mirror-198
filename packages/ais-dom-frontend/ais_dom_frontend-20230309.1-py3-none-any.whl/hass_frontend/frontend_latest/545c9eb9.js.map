{"version":3,"file":"545c9eb9.js","mappings":";;;;;;;AA+IA;;;;;;;;;;;;AC2aA","sources":["webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/panels/lovelace/editor/view-editor/hui-dialog-edit-view.ts"],"sourcesContent":["import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-icon-button\";\n\nconst SUPPRESS_DEFAULT_PRESS_SELECTOR = [\"button\"];\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <div class=\"header_title\">${title}</div>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  protected readonly [FOCUS_TARGET];\n\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  protected firstUpdated(): void {\n    super.firstUpdated();\n    this.suppressDefaultPressSelector = [\n      this.suppressDefaultPressSelector,\n      SUPPRESS_DEFAULT_PRESS_SELECTOR,\n    ].join(\", \");\n    this._updateScrolledAttribute();\n    this.contentElement?.addEventListener(\"scroll\", this._onScroll);\n  }\n\n  disconnectedCallback(): void {\n    super.disconnectedCallback();\n    this.contentElement.removeEventListener(\"scroll\", this._onScroll);\n  }\n\n  private _onScroll = () => {\n    this._updateScrolledAttribute();\n  };\n\n  private _updateScrolledAttribute() {\n    if (!this.contentElement) return;\n    this.toggleAttribute(\"scrolled\", this.contentElement.scrollTop !== 0);\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(\n          --dialog-scroll-divider-color,\n          var(--divider-color)\n        );\n        z-index: var(--dialog-z-index, 7);\n        -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n        backdrop-filter: var(--dialog-backdrop-filter, none);\n        --mdc-dialog-box-shadow: var(--dialog-box-shadow, none);\n        --mdc-typography-headline6-font-weight: 400;\n        --mdc-typography-headline6-font-size: 1.574rem;\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 24px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertical-align-dialog, center);\n      }\n      .mdc-dialog__title {\n        padding: 24px 24px 0 24px;\n      }\n      .mdc-dialog__actions {\n        padding: 0 24px 24px 24px;\n      }\n      .mdc-dialog__title::before {\n        display: block;\n        height: 0px;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 24px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        margin-top: var(--dialog-surface-margin-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(--ha-dialog-border-radius, 28px);\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_button {\n        position: absolute;\n        right: 16px;\n        top: 14px;\n        text-decoration: none;\n        color: inherit;\n      }\n      .header_title {\n        margin-right: 32px;\n        margin-inline-end: 32px;\n        margin-inline-start: initial;\n        direction: var(--direction);\n      }\n      .header_button {\n        inset-inline-start: initial;\n        inset-inline-end: 16px;\n        direction: var(--direction);\n      }\n      .dialog-actions {\n        inset-inline-start: initial !important;\n        inset-inline-end: 0px !important;\n        direction: var(--direction);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import \"@material/mwc-button\";\nimport { ActionDetail } from \"@material/mwc-list\";\nimport { mdiCheck, mdiDotsVertical } from \"@mdi/js\";\nimport \"@polymer/paper-tabs/paper-tab\";\nimport \"@polymer/paper-tabs/paper-tabs\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  nothing,\n} from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { fireEvent, HASSDomEvent } from \"../../../../common/dom/fire_event\";\nimport { stopPropagation } from \"../../../../common/dom/stop_propagation\";\nimport { navigate } from \"../../../../common/navigate\";\nimport { deepEqual } from \"../../../../common/util/deep-equal\";\nimport \"../../../../components/ha-alert\";\nimport \"../../../../components/ha-circular-progress\";\nimport \"../../../../components/ha-dialog\";\nimport { HaYamlEditor } from \"../../../../components/ha-yaml-editor\";\nimport type {\n  LovelaceBadgeConfig,\n  LovelaceCardConfig,\n  LovelaceViewConfig,\n} from \"../../../../data/lovelace\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n} from \"../../../../dialogs/generic/show-dialog-box\";\nimport { haStyleDialog } from \"../../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport \"../../components/hui-entity-editor\";\nimport {\n  DEFAULT_VIEW_LAYOUT,\n  PANEL_VIEW_LAYOUT,\n  VIEWS_NO_BADGE_SUPPORT,\n} from \"../../views/const\";\nimport { addView, deleteView, replaceView } from \"../config-util\";\nimport \"../hui-badge-preview\";\nimport { processEditorEntities } from \"../process-editor-entities\";\nimport {\n  EntitiesEditorEvent,\n  ViewEditEvent,\n  ViewVisibilityChangeEvent,\n} from \"../types\";\nimport \"./hui-view-editor\";\nimport \"./hui-view-visibility-editor\";\nimport { EditViewDialogParams } from \"./show-edit-view-dialog\";\n\n@customElement(\"hui-dialog-edit-view\")\nexport class HuiDialogEditView extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _params?: EditViewDialogParams;\n\n  @state() private _config?: LovelaceViewConfig;\n\n  @state() private _badges?: LovelaceBadgeConfig[];\n\n  @state() private _cards?: LovelaceCardConfig[];\n\n  @state() private _saving = false;\n\n  @state() private _curTab?: string;\n\n  @state() private _dirty = false;\n\n  @state() private _yamlMode = false;\n\n  @query(\"ha-yaml-editor\") private _editor?: HaYamlEditor;\n\n  private _curTabIndex = 0;\n\n  get _type(): string {\n    if (!this._config) {\n      return DEFAULT_VIEW_LAYOUT;\n    }\n    return this._config.panel\n      ? PANEL_VIEW_LAYOUT\n      : this._config.type || DEFAULT_VIEW_LAYOUT;\n  }\n\n  protected updated(changedProperties: PropertyValues) {\n    if (this._yamlMode && changedProperties.has(\"_yamlMode\")) {\n      const viewConfig = {\n        ...this._config,\n        badges: this._badges,\n      };\n      this._editor?.setValue(viewConfig);\n    }\n  }\n\n  public showDialog(params: EditViewDialogParams): void {\n    this._params = params;\n\n    if (this._params.viewIndex === undefined) {\n      this._config = {};\n      this._badges = [];\n      this._cards = [];\n      this._dirty = false;\n    } else {\n      const { cards, badges, ...viewConfig } =\n        this._params.lovelace!.config.views[this._params.viewIndex];\n      this._config = viewConfig;\n      this._badges = badges ? processEditorEntities(badges) : [];\n      this._cards = cards;\n    }\n  }\n\n  public closeDialog(): void {\n    this._curTabIndex = 0;\n    this._params = undefined;\n    this._config = {};\n    this._badges = [];\n    this._yamlMode = false;\n    this._dirty = false;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  private get _viewConfigTitle(): string {\n    if (!this._config || !this._config.title) {\n      return this.hass!.localize(\"ui.panel.lovelace.editor.edit_view.header\");\n    }\n\n    return this.hass!.localize(\n      \"ui.panel.lovelace.editor.edit_view.header_name\",\n      \"name\",\n      this._config.title\n    );\n  }\n\n  protected render() {\n    if (!this._params) {\n      return nothing;\n    }\n\n    let content;\n\n    if (this._yamlMode) {\n      content = html`\n        <ha-yaml-editor\n          .hass=${this.hass}\n          dialogInitialFocus\n          @value-changed=${this._viewYamlChanged}\n        ></ha-yaml-editor>\n      `;\n    } else {\n      switch (this._curTab) {\n        case \"tab-settings\":\n          content = html`\n            <hui-view-editor\n              .isNew=${this._params.viewIndex === undefined}\n              .hass=${this.hass}\n              .config=${this._config}\n              @view-config-changed=${this._viewConfigChanged}\n            ></hui-view-editor>\n          `;\n          break;\n        case \"tab-badges\":\n          content = html`\n            ${this._badges?.length\n              ? html`\n                  ${VIEWS_NO_BADGE_SUPPORT.includes(this._type)\n                    ? html`\n                        <ha-alert alert-type=\"warning\">\n                          ${this.hass!.localize(\n                            \"ui.panel.lovelace.editor.edit_badges.view_no_badges\"\n                          )}\n                        </ha-alert>\n                      `\n                    : \"\"}\n                  <div class=\"preview-badges\">\n                    ${this._badges.map(\n                      (badgeConfig) => html`\n                        <hui-badge-preview\n                          .hass=${this.hass}\n                          .config=${badgeConfig}\n                        ></hui-badge-preview>\n                      `\n                    )}\n                  </div>\n                `\n              : \"\"}\n            <hui-entity-editor\n              .hass=${this.hass}\n              .entities=${this._badges}\n              @entities-changed=${this._badgesChanged}\n            ></hui-entity-editor>\n          `;\n          break;\n        case \"tab-visibility\":\n          content = html`\n            <hui-view-visibility-editor\n              .hass=${this.hass}\n              .config=${this._config}\n              @view-visibility-changed=${this._viewVisibilityChanged}\n            ></hui-view-visibility-editor>\n          `;\n          break;\n        case \"tab-cards\":\n          content = html` Cards `;\n          break;\n      }\n    }\n\n    return html`\n      <ha-dialog\n        open\n        scrimClickAction\n        escapeKeyAction\n        @closed=${this.closeDialog}\n        .heading=${this._viewConfigTitle}\n        class=${classMap({\n          \"yaml-mode\": this._yamlMode,\n        })}\n      >\n        <div slot=\"heading\">\n          <h2>${this._viewConfigTitle}</h2>\n          <ha-button-menu\n            slot=\"icons\"\n            fixed\n            corner=\"BOTTOM_END\"\n            menuCorner=\"END\"\n            @action=${this._handleAction}\n            @closed=${stopPropagation}\n          >\n            <ha-icon-button\n              slot=\"trigger\"\n              .label=${this.hass!.localize(\"ui.common.menu\")}\n              .path=${mdiDotsVertical}\n            ></ha-icon-button>\n            <mwc-list-item graphic=\"icon\">\n              ${this.hass!.localize(\n                \"ui.panel.lovelace.editor.edit_view.edit_ui\"\n              )}\n              ${!this._yamlMode\n                ? html`<ha-svg-icon\n                    class=\"selected_menu_item\"\n                    slot=\"graphic\"\n                    .path=${mdiCheck}\n                  ></ha-svg-icon>`\n                : ``}\n            </mwc-list-item>\n\n            <mwc-list-item graphic=\"icon\">\n              ${this.hass!.localize(\n                \"ui.panel.lovelace.editor.edit_view.edit_yaml\"\n              )}\n              ${this._yamlMode\n                ? html`<ha-svg-icon\n                    class=\"selected_menu_item\"\n                    slot=\"graphic\"\n                    .path=${mdiCheck}\n                  ></ha-svg-icon>`\n                : ``}\n            </mwc-list-item>\n          </ha-button-menu>\n          ${!this._yamlMode\n            ? html`<paper-tabs\n                scrollable\n                hide-scroll-buttons\n                .selected=${this._curTabIndex}\n                @selected-item-changed=${this._handleTabSelected}\n              >\n                <paper-tab id=\"tab-settings\" dialogInitialFocus\n                  >${this.hass!.localize(\n                    \"ui.panel.lovelace.editor.edit_view.tab_settings\"\n                  )}</paper-tab\n                >\n                <paper-tab id=\"tab-badges\"\n                  >${this.hass!.localize(\n                    \"ui.panel.lovelace.editor.edit_view.tab_badges\"\n                  )}</paper-tab\n                >\n                <paper-tab id=\"tab-visibility\"\n                  >${this.hass!.localize(\n                    \"ui.panel.lovelace.editor.edit_view.tab_visibility\"\n                  )}</paper-tab\n                >\n              </paper-tabs>`\n            : \"\"}\n        </div>\n        ${content}\n        ${this._params.viewIndex !== undefined\n          ? html`\n              <mwc-button\n                class=\"warning\"\n                slot=\"secondaryAction\"\n                @click=${this._deleteConfirm}\n              >\n                ${this.hass!.localize(\n                  \"ui.panel.lovelace.editor.edit_view.delete\"\n                )}\n              </mwc-button>\n            `\n          : \"\"}\n        <mwc-button @click=${this.closeDialog} slot=\"primaryAction\"\n          >${this.hass!.localize(\"ui.common.cancel\")}</mwc-button\n        >\n        <mwc-button\n          slot=\"primaryAction\"\n          ?disabled=${!this._config || this._saving || !this._dirty}\n          @click=${this._save}\n        >\n          ${this._saving\n            ? html`<ha-circular-progress\n                active\n                size=\"small\"\n                title=\"Saving\"\n              ></ha-circular-progress>`\n            : \"\"}\n          ${this.hass!.localize(\"ui.common.save\")}</mwc-button\n        >\n      </ha-dialog>\n    `;\n  }\n\n  private async _handleAction(ev: CustomEvent<ActionDetail>) {\n    ev.stopPropagation();\n    ev.preventDefault();\n    switch (ev.detail.index) {\n      case 0:\n        this._yamlMode = false;\n        break;\n      case 1:\n        this._yamlMode = true;\n        break;\n    }\n  }\n\n  private async _delete(): Promise<void> {\n    if (!this._params) {\n      return;\n    }\n    try {\n      await this._params.lovelace!.saveConfig(\n        deleteView(this._params.lovelace!.config, this._params.viewIndex!)\n      );\n      this.closeDialog();\n      navigate(`/${window.location.pathname.split(\"/\")[1]}`);\n    } catch (err: any) {\n      showAlertDialog(this, {\n        text: `Deleting failed: ${err.message}`,\n      });\n    }\n  }\n\n  private _deleteConfirm(): void {\n    showConfirmationDialog(this, {\n      title: this.hass!.localize(\n        `ui.panel.lovelace.views.confirm_delete${\n          this._cards?.length ? `_existing_cards` : \"\"\n        }`\n      ),\n      text: this.hass!.localize(\n        `ui.panel.lovelace.views.confirm_delete${\n          this._cards?.length ? \"_existing_cards\" : \"\"\n        }_text`,\n        \"name\",\n        this._config?.title || \"Unnamed view\",\n        \"number\",\n        this._cards?.length || 0\n      ),\n      confirm: () => this._delete(),\n    });\n  }\n\n  private _handleTabSelected(ev: CustomEvent): void {\n    if (!ev.detail.value) {\n      return;\n    }\n    this._curTab = ev.detail.value.id;\n  }\n\n  private async _save(): Promise<void> {\n    if (!this._params || !this._config) {\n      return;\n    }\n    if (!this._isConfigChanged()) {\n      this.closeDialog();\n      return;\n    }\n\n    this._saving = true;\n\n    const viewConf: LovelaceViewConfig = {\n      ...this._config,\n      badges: this._badges,\n      cards: this._cards,\n    };\n\n    const lovelace = this._params.lovelace!;\n\n    try {\n      await lovelace.saveConfig(\n        this._creatingView\n          ? addView(lovelace.config, viewConf)\n          : replaceView(lovelace.config, this._params.viewIndex!, viewConf)\n      );\n      if (this._params.saveCallback) {\n        this._params.saveCallback(\n          this._params.viewIndex || lovelace.config.views.length,\n          viewConf\n        );\n      }\n      this.closeDialog();\n    } catch (err: any) {\n      showAlertDialog(this, {\n        text: `Saving failed: ${err.message}`,\n      });\n    } finally {\n      this._saving = false;\n    }\n  }\n\n  private _viewConfigChanged(ev: ViewEditEvent): void {\n    if (\n      ev.detail &&\n      ev.detail.config &&\n      !deepEqual(this._config, ev.detail.config)\n    ) {\n      this._config = ev.detail.config;\n      this._dirty = true;\n    }\n  }\n\n  private _viewVisibilityChanged(\n    ev: HASSDomEvent<ViewVisibilityChangeEvent>\n  ): void {\n    if (ev.detail.visible && this._config) {\n      this._config.visible = ev.detail.visible;\n    }\n    this._dirty = true;\n  }\n\n  private _badgesChanged(ev: EntitiesEditorEvent): void {\n    if (!this._badges || !this.hass || !ev.detail || !ev.detail.entities) {\n      return;\n    }\n    this._badges = processEditorEntities(ev.detail.entities);\n    this._dirty = true;\n  }\n\n  private _viewYamlChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    if (!ev.detail.isValid) {\n      return;\n    }\n    const { badges = [], ...config } = ev.detail.value;\n    this._config = config;\n    this._badges = badges;\n    this._dirty = true;\n  }\n\n  private _isConfigChanged(): boolean {\n    return (\n      this._creatingView ||\n      JSON.stringify(this._config) !==\n        JSON.stringify(\n          this._params!.lovelace!.config.views[this._params!.viewIndex!]\n        )\n    );\n  }\n\n  private get _creatingView(): boolean {\n    return this._params!.viewIndex === undefined;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        ha-dialog.yaml-mode {\n          --dialog-content-padding: 0;\n        }\n        h2 {\n          display: block;\n          color: var(--primary-text-color);\n          line-height: normal;\n          -moz-osx-font-smoothing: grayscale;\n          -webkit-font-smoothing: antialiased;\n          font-family: Roboto, sans-serif;\n          font-family: var(\n            --mdc-typography-headline6-font-family,\n            var(--mdc-typography-font-family, Roboto, sans-serif)\n          );\n          font-size: 1.25rem;\n          font-size: var(--mdc-typography-headline6-font-size, 1.25rem);\n          line-height: 2rem;\n          line-height: var(--mdc-typography-headline6-line-height, 2rem);\n          font-weight: 500;\n          font-weight: var(--mdc-typography-headline6-font-weight, 500);\n          letter-spacing: 0.0125em;\n          letter-spacing: var(\n            --mdc-typography-headline6-letter-spacing,\n            0.0125em\n          );\n          text-decoration: inherit;\n          text-decoration: var(\n            --mdc-typography-headline6-text-decoration,\n            inherit\n          );\n          text-transform: inherit;\n          text-transform: var(\n            --mdc-typography-headline6-text-transform,\n            inherit\n          );\n          position: relative;\n          flex-shrink: 0;\n          box-sizing: border-box;\n          margin: 0;\n          padding: 20px 24px 9px;\n          border-bottom: 1px solid transparent;\n        }\n        paper-tabs {\n          --paper-tabs-selection-bar-color: var(--primary-color);\n          color: var(--primary-text-color);\n          text-transform: uppercase;\n          border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n          padding: 0 20px;\n        }\n        mwc-button.warning {\n          margin-right: auto;\n        }\n        ha-circular-progress {\n          display: none;\n        }\n        ha-circular-progress[active] {\n          display: block;\n        }\n        ha-button-menu {\n          color: var(--secondary-text-color);\n          position: absolute;\n          right: 16px;\n          top: 14px;\n          inset-inline-end: 16px;\n          inset-inline-start: initial;\n          direction: var(--direction);\n        }\n        ha-button-menu,\n        ha-icon-button {\n          --mdc-theme-text-primary-on-background: var(--primary-text-color);\n        }\n        .selected_menu_item {\n          color: var(--primary-color);\n        }\n        .hidden {\n          display: none;\n        }\n        .error {\n          color: var(--error-color);\n          border-bottom: 1px solid var(--error-color);\n        }\n        .preview-badges {\n          display: flex;\n          justify-content: center;\n          margin: 12px 16px;\n          flex-wrap: wrap;\n        }\n\n        @media all and (min-width: 600px) {\n          ha-dialog {\n            --mdc-dialog-min-width: 600px;\n          }\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-dialog-edit-view\": HuiDialogEditView;\n  }\n}\n"],"names":[],"sourceRoot":""}