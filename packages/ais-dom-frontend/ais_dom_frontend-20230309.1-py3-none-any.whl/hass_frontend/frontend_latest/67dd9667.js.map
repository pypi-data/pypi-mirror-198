{"version":3,"file":"67dd9667.js","mappings":";;;;AAoFA;;;;;AC1BA;;AC4FA;AAEA","sources":["webpack://home-assistant-frontend/./src/components/ha-chip.ts","webpack://home-assistant-frontend/./src/components/ha-list-item.ts","webpack://home-assistant-frontend/./src/components/ha-textfield.ts"],"sourcesContent":["// @ts-ignore\nimport chipStyles from \"@material/chips/dist/mdc.chips.min.css\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  TemplateResult,\n  unsafeCSS,\n} from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-chip\")\nexport class HaChip extends LitElement {\n  @property({ type: Boolean }) public hasIcon = false;\n\n  @property({ type: Boolean }) public hasTrailingIcon = false;\n\n  @property({ type: Boolean }) public noText = false;\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"mdc-chip ${this.noText ? \"no-text\" : \"\"}\">\n        ${this.hasIcon\n          ? html`<div class=\"mdc-chip__icon mdc-chip__icon--leading\">\n              <slot name=\"icon\"></slot>\n            </div>`\n          : null}\n        <div class=\"mdc-chip__ripple\"></div>\n        <span role=\"gridcell\">\n          <span role=\"button\" tabindex=\"0\" class=\"mdc-chip__primary-action\">\n            <span class=\"mdc-chip__text\"><slot></slot></span>\n          </span>\n        </span>\n        ${this.hasTrailingIcon\n          ? html`<div class=\"mdc-chip__icon mdc-chip__icon--trailing\">\n              <slot name=\"trailing-icon\"></slot>\n            </div>`\n          : null}\n      </div>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ${unsafeCSS(chipStyles)}\n      .mdc-chip {\n        background-color: var(\n          --ha-chip-background-color,\n          rgba(var(--rgb-primary-text-color), 0.15)\n        );\n        color: var(--ha-chip-text-color, var(--primary-text-color));\n      }\n\n      .mdc-chip.no-text {\n        padding: 0 10px;\n      }\n\n      .mdc-chip:hover {\n        color: var(--ha-chip-text-color, var(--primary-text-color));\n      }\n\n      .mdc-chip__icon--leading,\n      .mdc-chip__icon--trailing {\n        --mdc-icon-size: 18px;\n        line-height: 14px;\n        color: var(--ha-chip-icon-color, var(--ha-chip-text-color));\n      }\n      .mdc-chip.mdc-chip--selected .mdc-chip__checkmark,\n      .mdc-chip .mdc-chip__icon--leading:not(.mdc-chip__icon--leading-hidden) {\n        margin-right: -4px;\n        margin-inline-start: -4px;\n        margin-inline-end: 4px;\n        direction: var(--direction);\n      }\n\n      span[role=\"gridcell\"] {\n        line-height: 14px;\n      }\n\n      :host {\n        outline: none;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-chip\": HaChip;\n  }\n}\n","import { ListItemBase } from \"@material/mwc-list/mwc-list-item-base\";\nimport { styles } from \"@material/mwc-list/mwc-list-item.css\";\nimport { css, CSSResultGroup } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-list-item\")\nexport class HaListItem extends ListItemBase {\n  static get styles(): CSSResultGroup {\n    return [\n      styles,\n      css`\n        :host {\n          padding-left: var(--mdc-list-side-padding, 20px);\n          padding-right: var(--mdc-list-side-padding, 20px);\n        }\n        :host([graphic=\"avatar\"]:not([twoLine])),\n        :host([graphic=\"icon\"]:not([twoLine])) {\n          height: 48px;\n        }\n        span.material-icons:first-of-type {\n          margin-inline-start: 0px !important;\n          margin-inline-end: var(\n            --mdc-list-item-graphic-margin,\n            16px\n          ) !important;\n          direction: var(--direction);\n        }\n        span.material-icons:last-of-type {\n          margin-inline-start: auto !important;\n          margin-inline-end: 0px !important;\n          direction: var(--direction);\n        }\n        :host([multiline-secondary]) {\n          height: auto;\n        }\n        :host([multiline-secondary]) .mdc-deprecated-list-item__text {\n          padding: 8px 0;\n        }\n        :host([multiline-secondary]) .mdc-deprecated-list-item__secondary-text {\n          text-overflow: initial;\n          white-space: normal;\n          overflow: auto;\n          display: inline-block;\n          margin-top: 10px;\n        }\n        :host([multiline-secondary]) .mdc-deprecated-list-item__primary-text {\n          margin-top: 10px;\n        }\n        :host([multiline-secondary])\n          .mdc-deprecated-list-item__secondary-text::before {\n          display: none;\n        }\n        :host([multiline-secondary])\n          .mdc-deprecated-list-item__primary-text::before {\n          display: none;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-list-item\": HaListItem;\n  }\n}\n","import { TextFieldBase } from \"@material/mwc-textfield/mwc-textfield-base\";\nimport { styles } from \"@material/mwc-textfield/mwc-textfield.css\";\nimport { TemplateResult, html, PropertyValues, css } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\n\n@customElement(\"ha-textfield\")\nexport class HaTextField extends TextFieldBase {\n  @property({ type: Boolean }) public invalid?: boolean;\n\n  @property({ attribute: \"error-message\" }) public errorMessage?: string;\n\n  // @ts-ignore\n  @property({ type: Boolean }) public icon?: boolean;\n\n  // @ts-ignore\n  @property({ type: Boolean }) public iconTrailing?: boolean;\n\n  @property() public autocomplete?: string;\n\n  @query(\"input\") public formElement!: HTMLInputElement;\n\n  override updated(changedProperties: PropertyValues) {\n    super.updated(changedProperties);\n    if (\n      (changedProperties.has(\"invalid\") &&\n        (this.invalid || changedProperties.get(\"invalid\") !== undefined)) ||\n      changedProperties.has(\"errorMessage\")\n    ) {\n      this.setCustomValidity(\n        this.invalid ? this.errorMessage || \"Invalid\" : \"\"\n      );\n      this.reportValidity();\n    }\n    if (changedProperties.has(\"autocomplete\")) {\n      if (this.autocomplete) {\n        this.formElement.setAttribute(\"autocomplete\", this.autocomplete);\n      } else {\n        this.formElement.removeAttribute(\"autocomplete\");\n      }\n    }\n  }\n\n  protected override renderIcon(\n    _icon: string,\n    isTrailingIcon = false\n  ): TemplateResult {\n    const type = isTrailingIcon ? \"trailing\" : \"leading\";\n\n    return html`\n      <span\n        class=\"mdc-text-field__icon mdc-text-field__icon--${type}\"\n        tabindex=${isTrailingIcon ? 1 : -1}\n      >\n        <slot name=\"${type}Icon\"></slot>\n      </span>\n    `;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-text-field__input {\n        width: var(--ha-textfield-input-width, 100%);\n      }\n      .mdc-text-field:not(.mdc-text-field--with-leading-icon) {\n        padding: var(--text-field-padding, 0px 16px);\n      }\n      .mdc-text-field__affix--suffix {\n        padding-left: var(--text-field-suffix-padding-left, 12px);\n        padding-right: var(--text-field-suffix-padding-right, 0px);\n        padding-inline-start: var(--text-field-suffix-padding-left, 12px);\n        padding-inline-end: var(--text-field-suffix-padding-right, 0px);\n        direction: var(--direction);\n      }\n      .mdc-text-field--with-leading-icon {\n        padding-inline-start: var(--text-field-suffix-padding-left, 0px);\n        padding-inline-end: var(--text-field-suffix-padding-right, 16px);\n        direction: var(--direction);\n      }\n\n      .mdc-text-field:not(.mdc-text-field--disabled)\n        .mdc-text-field__affix--suffix {\n        color: var(--secondary-text-color);\n      }\n\n      .mdc-text-field__icon {\n        color: var(--secondary-text-color);\n      }\n\n      .mdc-text-field__icon--leading {\n        margin-inline-start: 16px;\n        margin-inline-end: 8px;\n        direction: var(--direction);\n      }\n\n      .mdc-floating-label:not(.mdc-floating-label--float-above) {\n        text-overflow: ellipsis;\n        width: inherit;\n        padding-right: 30px;\n        padding-inline-end: 30px;\n        padding-inline-start: initial;\n        box-sizing: border-box;\n        direction: var(--direction);\n      }\n\n      input {\n        text-align: var(--text-field-text-align, start);\n      }\n\n      /* Chrome, Safari, Edge, Opera */\n      :host([no-spinner]) input::-webkit-outer-spin-button,\n      :host([no-spinner]) input::-webkit-inner-spin-button {\n        -webkit-appearance: none;\n        margin: 0;\n      }\n\n      /* Firefox */\n      :host([no-spinner]) input[type=\"number\"] {\n        -moz-appearance: textfield;\n      }\n\n      .mdc-text-field__ripple {\n        overflow: hidden;\n      }\n\n      .mdc-text-field {\n        overflow: var(--text-field-overflow);\n      }\n\n      .mdc-floating-label {\n        inset-inline-start: 16px !important;\n        inset-inline-end: initial !important;\n        transform-origin: var(--float-start);\n        direction: var(--direction);\n        text-align: var(--float-start);\n      }\n\n      .mdc-text-field--with-leading-icon.mdc-text-field--filled\n        .mdc-floating-label {\n        max-width: calc(100% - 48px);\n        inset-inline-start: 48px !important;\n        inset-inline-end: initial !important;\n        direction: var(--direction);\n      }\n\n      .mdc-text-field__input[type=\"number\"] {\n        direction: var(--direction);\n      }\n    `,\n    // safari workaround - must be explicit\n    document.dir === \"rtl\"\n      ? css`\n          .mdc-text-field__affix--suffix,\n          .mdc-text-field--with-leading-icon,\n          .mdc-text-field__icon--leading,\n          .mdc-floating-label,\n          .mdc-text-field--with-leading-icon.mdc-text-field--filled\n            .mdc-floating-label,\n          .mdc-text-field__input[type=\"number\"] {\n            direction: rtl;\n          }\n        `\n      : css``,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-textfield\": HaTextField;\n  }\n}\n"],"names":[],"sourceRoot":""}