r"""
    This code was generated by
   ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
    |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
    |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \

    Twilio - Media
    This is the public Twilio REST API.

    NOTE: This class is auto generated by OpenAPI Generator.
    https://openapi-generator.tech
    Do not edit the class manually.
"""


from typing import Optional
from twilio.base import deserialize, values
from twilio.base.instance_context import InstanceContext
from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
from twilio.base.version import Version
from twilio.base.page import Page
from twilio.rest.media.v1.player_streamer.playback_grant import PlaybackGrantList


class PlayerStreamerInstance(InstanceResource):
    class EndedReason(object):
        ENDED_VIA_API = "ended-via-api"
        MAX_DURATION_EXCEEDED = "max-duration-exceeded"
        STREAM_DISCONNECTED_BY_SOURCE = "stream-disconnected-by-source"
        UNEXPECTED_FAILURE = "unexpected-failure"

    class Order(object):
        ASC = "asc"
        DESC = "desc"

    class Status(object):
        CREATED = "created"
        STARTED = "started"
        ENDED = "ended"
        FAILED = "failed"

    def __init__(self, version, payload, sid: Optional[str] = None):
        """
        Initialize the PlayerStreamerInstance

        :returns: twilio.rest.media.v1.player_streamer.PlayerStreamerInstance
        :rtype: twilio.rest.media.v1.player_streamer.PlayerStreamerInstance
        """
        super().__init__(version)

        self._properties = {
            "account_sid": payload.get("account_sid"),
            "date_created": deserialize.iso8601_datetime(payload.get("date_created")),
            "date_updated": deserialize.iso8601_datetime(payload.get("date_updated")),
            "video": payload.get("video"),
            "links": payload.get("links"),
            "sid": payload.get("sid"),
            "status": payload.get("status"),
            "url": payload.get("url"),
            "status_callback": payload.get("status_callback"),
            "status_callback_method": payload.get("status_callback_method"),
            "ended_reason": payload.get("ended_reason"),
            "max_duration": deserialize.integer(payload.get("max_duration")),
        }

        self._solution = {
            "sid": sid or self._properties["sid"],
        }
        self._context: Optional[PlayerStreamerContext] = None

    @property
    def _proxy(self):
        """
        Generate an instance context for the instance, the context is capable of
        performing various actions. All instance actions are proxied to the context

        :returns: PlayerStreamerContext for this PlayerStreamerInstance
        :rtype: twilio.rest.media.v1.player_streamer.PlayerStreamerContext
        """
        if self._context is None:
            self._context = PlayerStreamerContext(
                self._version,
                sid=self._solution["sid"],
            )
        return self._context

    @property
    def account_sid(self):
        """
        :returns: The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the PlayerStreamer resource.
        :rtype: str
        """
        return self._properties["account_sid"]

    @property
    def date_created(self):
        """
        :returns: The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
        :rtype: datetime
        """
        return self._properties["date_created"]

    @property
    def date_updated(self):
        """
        :returns: The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
        :rtype: datetime
        """
        return self._properties["date_updated"]

    @property
    def video(self):
        """
        :returns: Specifies whether the PlayerStreamer is configured to stream video. Defaults to `true`.
        :rtype: bool
        """
        return self._properties["video"]

    @property
    def links(self):
        """
        :returns: The URLs of related resources.
        :rtype: dict
        """
        return self._properties["links"]

    @property
    def sid(self):
        """
        :returns: The unique string generated to identify the PlayerStreamer resource.
        :rtype: str
        """
        return self._properties["sid"]

    @property
    def status(self):
        """
        :returns:
        :rtype: PlayerStreamerInstance.Status
        """
        return self._properties["status"]

    @property
    def url(self):
        """
        :returns: The absolute URL of the resource.
        :rtype: str
        """
        return self._properties["url"]

    @property
    def status_callback(self):
        """
        :returns: The URL to which Twilio will send asynchronous webhook requests for every PlayerStreamer event. See [Status Callbacks](/docs/live/status-callbacks) for more details.
        :rtype: str
        """
        return self._properties["status_callback"]

    @property
    def status_callback_method(self):
        """
        :returns: The HTTP method Twilio should use to call the `status_callback` URL. Can be `POST` or `GET` and the default is `POST`.
        :rtype: str
        """
        return self._properties["status_callback_method"]

    @property
    def ended_reason(self):
        """
        :returns:
        :rtype: PlayerStreamerInstance.EndedReason
        """
        return self._properties["ended_reason"]

    @property
    def max_duration(self):
        """
        :returns: The maximum time, in seconds, that the PlayerStreamer is active (`created` or `started`) before automatically ends. The default value is 300 seconds, and the maximum value is 90000 seconds. Once this maximum duration is reached, Twilio will end the PlayerStreamer, regardless of whether media is still streaming.
        :rtype: int
        """
        return self._properties["max_duration"]

    def fetch(self):
        """
        Fetch the PlayerStreamerInstance


        :returns: The fetched PlayerStreamerInstance
        :rtype: twilio.rest.media.v1.player_streamer.PlayerStreamerInstance
        """
        return self._proxy.fetch()

    async def fetch_async(self):
        """
        Asynchronous coroutine to fetch the PlayerStreamerInstance


        :returns: The fetched PlayerStreamerInstance
        :rtype: twilio.rest.media.v1.player_streamer.PlayerStreamerInstance
        """
        return await self._proxy.fetch_async()

    def update(self, status):
        """
        Update the PlayerStreamerInstance

        :param PlayerStreamerInstance.UpdateStatus status:

        :returns: The updated PlayerStreamerInstance
        :rtype: twilio.rest.media.v1.player_streamer.PlayerStreamerInstance
        """
        return self._proxy.update(
            status=status,
        )

    async def update_async(self, status):
        """
        Asynchronous coroutine to update the PlayerStreamerInstance

        :param PlayerStreamerInstance.UpdateStatus status:

        :returns: The updated PlayerStreamerInstance
        :rtype: twilio.rest.media.v1.player_streamer.PlayerStreamerInstance
        """
        return await self._proxy.update_async(
            status=status,
        )

    @property
    def playback_grant(self):
        """
        Access the playback_grant

        :returns: twilio.rest.media.v1.player_streamer.PlaybackGrantList
        :rtype: twilio.rest.media.v1.player_streamer.PlaybackGrantList
        """
        return self._proxy.playback_grant

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        context = " ".join("{}={}".format(k, v) for k, v in self._solution.items())
        return "<Twilio.Media.V1.PlayerStreamerInstance {}>".format(context)


class PlayerStreamerContext(InstanceContext):
    def __init__(self, version: Version, sid: str):
        """
        Initialize the PlayerStreamerContext

        :param Version version: Version that contains the resource
        :param sid: The SID of the PlayerStreamer resource to update.

        :returns: twilio.rest.media.v1.player_streamer.PlayerStreamerContext
        :rtype: twilio.rest.media.v1.player_streamer.PlayerStreamerContext
        """
        super().__init__(version)

        # Path Solution
        self._solution = {
            "sid": sid,
        }
        self._uri = "/PlayerStreamers/{sid}".format(**self._solution)

        self._playback_grant: Optional[PlaybackGrantList] = None

    def fetch(self):
        """
        Fetch the PlayerStreamerInstance


        :returns: The fetched PlayerStreamerInstance
        :rtype: twilio.rest.media.v1.player_streamer.PlayerStreamerInstance
        """

        payload = self._version.fetch(
            method="GET",
            uri=self._uri,
        )

        return PlayerStreamerInstance(
            self._version,
            payload,
            sid=self._solution["sid"],
        )

    async def fetch_async(self):
        """
        Asynchronous coroutine to fetch the PlayerStreamerInstance


        :returns: The fetched PlayerStreamerInstance
        :rtype: twilio.rest.media.v1.player_streamer.PlayerStreamerInstance
        """

        payload = await self._version.fetch_async(
            method="GET",
            uri=self._uri,
        )

        return PlayerStreamerInstance(
            self._version,
            payload,
            sid=self._solution["sid"],
        )

    def update(self, status):
        """
        Update the PlayerStreamerInstance

        :param PlayerStreamerInstance.UpdateStatus status:

        :returns: The updated PlayerStreamerInstance
        :rtype: twilio.rest.media.v1.player_streamer.PlayerStreamerInstance
        """
        data = values.of(
            {
                "Status": status,
            }
        )

        payload = self._version.update(
            method="POST",
            uri=self._uri,
            data=data,
        )

        return PlayerStreamerInstance(self._version, payload, sid=self._solution["sid"])

    async def update_async(self, status):
        """
        Asynchronous coroutine to update the PlayerStreamerInstance

        :param PlayerStreamerInstance.UpdateStatus status:

        :returns: The updated PlayerStreamerInstance
        :rtype: twilio.rest.media.v1.player_streamer.PlayerStreamerInstance
        """
        data = values.of(
            {
                "Status": status,
            }
        )

        payload = await self._version.update_async(
            method="POST",
            uri=self._uri,
            data=data,
        )

        return PlayerStreamerInstance(self._version, payload, sid=self._solution["sid"])

    @property
    def playback_grant(self):
        """
        Access the playback_grant

        :returns: twilio.rest.media.v1.player_streamer.PlaybackGrantList
        :rtype: twilio.rest.media.v1.player_streamer.PlaybackGrantList
        """
        if self._playback_grant is None:
            self._playback_grant = PlaybackGrantList(
                self._version,
                self._solution["sid"],
            )
        return self._playback_grant

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        context = " ".join("{}={}".format(k, v) for k, v in self._solution.items())
        return "<Twilio.Media.V1.PlayerStreamerContext {}>".format(context)


class PlayerStreamerPage(Page):
    def get_instance(self, payload):
        """
        Build an instance of PlayerStreamerInstance

        :param dict payload: Payload response from the API

        :returns: twilio.rest.media.v1.player_streamer.PlayerStreamerInstance
        :rtype: twilio.rest.media.v1.player_streamer.PlayerStreamerInstance
        """
        return PlayerStreamerInstance(self._version, payload)

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        return "<Twilio.Media.V1.PlayerStreamerPage>"


class PlayerStreamerList(ListResource):
    def __init__(self, version: Version):
        """
        Initialize the PlayerStreamerList

        :param Version version: Version that contains the resource

        :returns: twilio.rest.media.v1.player_streamer.PlayerStreamerList
        :rtype: twilio.rest.media.v1.player_streamer.PlayerStreamerList
        """
        super().__init__(version)

        self._uri = "/PlayerStreamers"

    def create(
        self,
        video=values.unset,
        status_callback=values.unset,
        status_callback_method=values.unset,
        max_duration=values.unset,
    ):
        """
        Create the PlayerStreamerInstance

        :param bool video: Specifies whether the PlayerStreamer is configured to stream video. Defaults to `true`.
        :param str status_callback: The URL to which Twilio will send asynchronous webhook requests for every PlayerStreamer event. See [Status Callbacks](/docs/live/status-callbacks) for more details.
        :param str status_callback_method: The HTTP method Twilio should use to call the `status_callback` URL. Can be `POST` or `GET` and the default is `POST`.
        :param int max_duration: The maximum time, in seconds, that the PlayerStreamer is active (`created` or `started`) before automatically ends. The default value is 300 seconds, and the maximum value is 90000 seconds. Once this maximum duration is reached, Twilio will end the PlayerStreamer, regardless of whether media is still streaming.

        :returns: The created PlayerStreamerInstance
        :rtype: twilio.rest.media.v1.player_streamer.PlayerStreamerInstance
        """
        data = values.of(
            {
                "Video": video,
                "StatusCallback": status_callback,
                "StatusCallbackMethod": status_callback_method,
                "MaxDuration": max_duration,
            }
        )

        payload = self._version.create(
            method="POST",
            uri=self._uri,
            data=data,
        )

        return PlayerStreamerInstance(self._version, payload)

    async def create_async(
        self,
        video=values.unset,
        status_callback=values.unset,
        status_callback_method=values.unset,
        max_duration=values.unset,
    ):
        """
        Asynchronously create the PlayerStreamerInstance

        :param bool video: Specifies whether the PlayerStreamer is configured to stream video. Defaults to `true`.
        :param str status_callback: The URL to which Twilio will send asynchronous webhook requests for every PlayerStreamer event. See [Status Callbacks](/docs/live/status-callbacks) for more details.
        :param str status_callback_method: The HTTP method Twilio should use to call the `status_callback` URL. Can be `POST` or `GET` and the default is `POST`.
        :param int max_duration: The maximum time, in seconds, that the PlayerStreamer is active (`created` or `started`) before automatically ends. The default value is 300 seconds, and the maximum value is 90000 seconds. Once this maximum duration is reached, Twilio will end the PlayerStreamer, regardless of whether media is still streaming.

        :returns: The created PlayerStreamerInstance
        :rtype: twilio.rest.media.v1.player_streamer.PlayerStreamerInstance
        """
        data = values.of(
            {
                "Video": video,
                "StatusCallback": status_callback,
                "StatusCallbackMethod": status_callback_method,
                "MaxDuration": max_duration,
            }
        )

        payload = await self._version.create_async(
            method="POST",
            uri=self._uri,
            data=data,
        )

        return PlayerStreamerInstance(self._version, payload)

    def stream(
        self, order=values.unset, status=values.unset, limit=None, page_size=None
    ):
        """
        Streams PlayerStreamerInstance records from the API as a generator stream.
        This operation lazily loads records as efficiently as possible until the limit
        is reached.
        The results are returned as a generator, so this operation is memory efficient.

        :param PlayerStreamerInstance.Order order: The sort order of the list by `date_created`. Can be: `asc` (ascending) or `desc` (descending) with `desc` as the default.
        :param PlayerStreamerInstance.Status status: Status to filter by, with possible values `created`, `started`, `ended`, or `failed`.
        :param int limit: Upper limit for the number of records to return. stream()
                          guarantees to never return more than limit.  Default is no limit
        :param int page_size: Number of records to fetch per request, when not set will use
                              the default value of 50 records.  If no page_size is defined
                              but a limit is defined, stream() will attempt to read the
                              limit with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        :rtype: list[twilio.rest.media.v1.player_streamer.PlayerStreamerInstance]
        """
        limits = self._version.read_limits(limit, page_size)
        page = self.page(order=order, status=status, page_size=limits["page_size"])

        return self._version.stream(page, limits["limit"])

    async def stream_async(
        self, order=values.unset, status=values.unset, limit=None, page_size=None
    ):
        """
        Asynchronously streams PlayerStreamerInstance records from the API as a generator stream.
        This operation lazily loads records as efficiently as possible until the limit
        is reached.
        The results are returned as a generator, so this operation is memory efficient.

        :param PlayerStreamerInstance.Order order: The sort order of the list by `date_created`. Can be: `asc` (ascending) or `desc` (descending) with `desc` as the default.
        :param PlayerStreamerInstance.Status status: Status to filter by, with possible values `created`, `started`, `ended`, or `failed`.
        :param int limit: Upper limit for the number of records to return. stream()
                          guarantees to never return more than limit.  Default is no limit
        :param int page_size: Number of records to fetch per request, when not set will use
                              the default value of 50 records.  If no page_size is defined
                              but a limit is defined, stream() will attempt to read the
                              limit with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        :rtype: list[twilio.rest.media.v1.player_streamer.PlayerStreamerInstance]
        """
        limits = self._version.read_limits(limit, page_size)
        page = await self.page_async(
            order=order, status=status, page_size=limits["page_size"]
        )

        return await self._version.stream_async(page, limits["limit"])

    def list(self, order=values.unset, status=values.unset, limit=None, page_size=None):
        """
        Lists PlayerStreamerInstance records from the API as a list.
        Unlike stream(), this operation is eager and will load `limit` records into
        memory before returning.

        :param PlayerStreamerInstance.Order order: The sort order of the list by `date_created`. Can be: `asc` (ascending) or `desc` (descending) with `desc` as the default.
        :param PlayerStreamerInstance.Status status: Status to filter by, with possible values `created`, `started`, `ended`, or `failed`.
        :param int limit: Upper limit for the number of records to return. list() guarantees
                          never to return more than limit.  Default is no limit
        :param int page_size: Number of records to fetch per request, when not set will use
                              the default value of 50 records.  If no page_size is defined
                              but a limit is defined, list() will attempt to read the limit
                              with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        :rtype: list[twilio.rest.media.v1.player_streamer.PlayerStreamerInstance]
        """
        return list(
            self.stream(
                order=order,
                status=status,
                limit=limit,
                page_size=page_size,
            )
        )

    async def list_async(
        self, order=values.unset, status=values.unset, limit=None, page_size=None
    ):
        """
        Asynchronously lists PlayerStreamerInstance records from the API as a list.
        Unlike stream(), this operation is eager and will load `limit` records into
        memory before returning.

        :param PlayerStreamerInstance.Order order: The sort order of the list by `date_created`. Can be: `asc` (ascending) or `desc` (descending) with `desc` as the default.
        :param PlayerStreamerInstance.Status status: Status to filter by, with possible values `created`, `started`, `ended`, or `failed`.
        :param int limit: Upper limit for the number of records to return. list() guarantees
                          never to return more than limit.  Default is no limit
        :param int page_size: Number of records to fetch per request, when not set will use
                              the default value of 50 records.  If no page_size is defined
                              but a limit is defined, list() will attempt to read the limit
                              with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        :rtype: list[twilio.rest.media.v1.player_streamer.PlayerStreamerInstance]
        """
        return list(
            await self.stream_async(
                order=order,
                status=status,
                limit=limit,
                page_size=page_size,
            )
        )

    def page(
        self,
        order=values.unset,
        status=values.unset,
        page_token=values.unset,
        page_number=values.unset,
        page_size=values.unset,
    ):
        """
        Retrieve a single page of PlayerStreamerInstance records from the API.
        Request is executed immediately

        :param PlayerStreamerInstance.Order order: The sort order of the list by `date_created`. Can be: `asc` (ascending) or `desc` (descending) with `desc` as the default.
        :param PlayerStreamerInstance.Status status: Status to filter by, with possible values `created`, `started`, `ended`, or `failed`.
        :param str page_token: PageToken provided by the API
        :param int page_number: Page Number, this value is simply for client state
        :param int page_size: Number of records to return, defaults to 50

        :returns: Page of PlayerStreamerInstance
        :rtype: twilio.rest.media.v1.player_streamer.PlayerStreamerPage
        """
        data = values.of(
            {
                "Order": order,
                "Status": status,
                "PageToken": page_token,
                "Page": page_number,
                "PageSize": page_size,
            }
        )

        response = self._version.page(method="GET", uri=self._uri, params=data)
        return PlayerStreamerPage(self._version, response)

    async def page_async(
        self,
        order=values.unset,
        status=values.unset,
        page_token=values.unset,
        page_number=values.unset,
        page_size=values.unset,
    ):
        """
        Asynchronously retrieve a single page of PlayerStreamerInstance records from the API.
        Request is executed immediately

        :param PlayerStreamerInstance.Order order: The sort order of the list by `date_created`. Can be: `asc` (ascending) or `desc` (descending) with `desc` as the default.
        :param PlayerStreamerInstance.Status status: Status to filter by, with possible values `created`, `started`, `ended`, or `failed`.
        :param str page_token: PageToken provided by the API
        :param int page_number: Page Number, this value is simply for client state
        :param int page_size: Number of records to return, defaults to 50

        :returns: Page of PlayerStreamerInstance
        :rtype: twilio.rest.media.v1.player_streamer.PlayerStreamerPage
        """
        data = values.of(
            {
                "Order": order,
                "Status": status,
                "PageToken": page_token,
                "Page": page_number,
                "PageSize": page_size,
            }
        )

        response = await self._version.page_async(
            method="GET", uri=self._uri, params=data
        )
        return PlayerStreamerPage(self._version, response)

    def get_page(self, target_url):
        """
        Retrieve a specific page of PlayerStreamerInstance records from the API.
        Request is executed immediately

        :param str target_url: API-generated URL for the requested results page

        :returns: Page of PlayerStreamerInstance
        :rtype: twilio.rest.media.v1.player_streamer.PlayerStreamerPage
        """
        response = self._version.domain.twilio.request("GET", target_url)
        return PlayerStreamerPage(self._version, response)

    async def get_page_async(self, target_url):
        """
        Asynchronously retrieve a specific page of PlayerStreamerInstance records from the API.
        Request is executed immediately

        :param str target_url: API-generated URL for the requested results page

        :returns: Page of PlayerStreamerInstance
        :rtype: twilio.rest.media.v1.player_streamer.PlayerStreamerPage
        """
        response = await self._version.domain.twilio.request_async("GET", target_url)
        return PlayerStreamerPage(self._version, response)

    def get(self, sid):
        """
        Constructs a PlayerStreamerContext

        :param sid: The SID of the PlayerStreamer resource to update.

        :returns: twilio.rest.media.v1.player_streamer.PlayerStreamerContext
        :rtype: twilio.rest.media.v1.player_streamer.PlayerStreamerContext
        """
        return PlayerStreamerContext(self._version, sid=sid)

    def __call__(self, sid):
        """
        Constructs a PlayerStreamerContext

        :param sid: The SID of the PlayerStreamer resource to update.

        :returns: twilio.rest.media.v1.player_streamer.PlayerStreamerContext
        :rtype: twilio.rest.media.v1.player_streamer.PlayerStreamerContext
        """
        return PlayerStreamerContext(self._version, sid=sid)

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        return "<Twilio.Media.V1.PlayerStreamerList>"
