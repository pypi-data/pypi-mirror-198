r"""
    This code was generated by
   ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
    |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
    |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \

    Twilio - Taskrouter
    This is the public Twilio REST API.

    NOTE: This class is auto generated by OpenAPI Generator.
    https://openapi-generator.tech
    Do not edit the class manually.
"""


from typing import Optional
from twilio.base import deserialize, values
from twilio.base.instance_context import InstanceContext
from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
from twilio.base.version import Version
from twilio.base.page import Page
from twilio.rest.taskrouter.v1.workspace.activity import ActivityList
from twilio.rest.taskrouter.v1.workspace.event import EventList
from twilio.rest.taskrouter.v1.workspace.task import TaskList
from twilio.rest.taskrouter.v1.workspace.task_channel import TaskChannelList
from twilio.rest.taskrouter.v1.workspace.task_queue import TaskQueueList
from twilio.rest.taskrouter.v1.workspace.worker import WorkerList
from twilio.rest.taskrouter.v1.workspace.workflow import WorkflowList
from twilio.rest.taskrouter.v1.workspace.workspace_cumulative_statistics import (
    WorkspaceCumulativeStatisticsList,
)
from twilio.rest.taskrouter.v1.workspace.workspace_real_time_statistics import (
    WorkspaceRealTimeStatisticsList,
)
from twilio.rest.taskrouter.v1.workspace.workspace_statistics import (
    WorkspaceStatisticsList,
)


class WorkspaceInstance(InstanceResource):
    class QueueOrder(object):
        FIFO = "FIFO"
        LIFO = "LIFO"

    def __init__(self, version, payload, sid: Optional[str] = None):
        """
        Initialize the WorkspaceInstance

        :returns: twilio.rest.taskrouter.v1.workspace.WorkspaceInstance
        :rtype: twilio.rest.taskrouter.v1.workspace.WorkspaceInstance
        """
        super().__init__(version)

        self._properties = {
            "account_sid": payload.get("account_sid"),
            "date_created": deserialize.iso8601_datetime(payload.get("date_created")),
            "date_updated": deserialize.iso8601_datetime(payload.get("date_updated")),
            "default_activity_name": payload.get("default_activity_name"),
            "default_activity_sid": payload.get("default_activity_sid"),
            "event_callback_url": payload.get("event_callback_url"),
            "events_filter": payload.get("events_filter"),
            "friendly_name": payload.get("friendly_name"),
            "multi_task_enabled": payload.get("multi_task_enabled"),
            "sid": payload.get("sid"),
            "timeout_activity_name": payload.get("timeout_activity_name"),
            "timeout_activity_sid": payload.get("timeout_activity_sid"),
            "prioritize_queue_order": payload.get("prioritize_queue_order"),
            "url": payload.get("url"),
            "links": payload.get("links"),
        }

        self._solution = {
            "sid": sid or self._properties["sid"],
        }
        self._context: Optional[WorkspaceContext] = None

    @property
    def _proxy(self):
        """
        Generate an instance context for the instance, the context is capable of
        performing various actions. All instance actions are proxied to the context

        :returns: WorkspaceContext for this WorkspaceInstance
        :rtype: twilio.rest.taskrouter.v1.workspace.WorkspaceContext
        """
        if self._context is None:
            self._context = WorkspaceContext(
                self._version,
                sid=self._solution["sid"],
            )
        return self._context

    @property
    def account_sid(self):
        """
        :returns: The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Workspace resource.
        :rtype: str
        """
        return self._properties["account_sid"]

    @property
    def date_created(self):
        """
        :returns: The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
        :rtype: datetime
        """
        return self._properties["date_created"]

    @property
    def date_updated(self):
        """
        :returns: The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
        :rtype: datetime
        """
        return self._properties["date_updated"]

    @property
    def default_activity_name(self):
        """
        :returns: The name of the default activity.
        :rtype: str
        """
        return self._properties["default_activity_name"]

    @property
    def default_activity_sid(self):
        """
        :returns: The SID of the Activity that will be used when new Workers are created in the Workspace.
        :rtype: str
        """
        return self._properties["default_activity_sid"]

    @property
    def event_callback_url(self):
        """
        :returns: The URL we call when an event occurs. If provided, the Workspace will publish events to this URL, for example, to collect data for reporting. See [Workspace Events](https://www.twilio.com/docs/taskrouter/api/event) for more information. This parameter supports Twilio's [Webhooks (HTTP callbacks) Connection Overrides](https://www.twilio.com/docs/usage/webhooks/webhooks-connection-overrides).
        :rtype: str
        """
        return self._properties["event_callback_url"]

    @property
    def events_filter(self):
        """
        :returns: The list of Workspace events for which to call `event_callback_url`. For example, if `EventsFilter=task.created, task.canceled, worker.activity.update`, then TaskRouter will call event_callback_url only when a task is created, canceled, or a Worker activity is updated.
        :rtype: str
        """
        return self._properties["events_filter"]

    @property
    def friendly_name(self):
        """
        :returns: The string that you assigned to describe the Workspace resource. For example `Customer Support` or `2014 Election Campaign`.
        :rtype: str
        """
        return self._properties["friendly_name"]

    @property
    def multi_task_enabled(self):
        """
        :returns: Whether multi-tasking is enabled. The default is `true`, which enables multi-tasking. Multi-tasking allows Workers to handle multiple Tasks simultaneously. When enabled (`true`), each Worker can receive parallel reservations up to the per-channel maximums defined in the Workers section. In single-tasking each Worker would only receive a new reservation when the previous task is completed. Learn more at [Multitasking](https://www.twilio.com/docs/taskrouter/multitasking).
        :rtype: bool
        """
        return self._properties["multi_task_enabled"]

    @property
    def sid(self):
        """
        :returns: The unique string that we created to identify the Workspace resource.
        :rtype: str
        """
        return self._properties["sid"]

    @property
    def timeout_activity_name(self):
        """
        :returns: The name of the timeout activity.
        :rtype: str
        """
        return self._properties["timeout_activity_name"]

    @property
    def timeout_activity_sid(self):
        """
        :returns: The SID of the Activity that will be assigned to a Worker when a Task reservation times out without a response.
        :rtype: str
        """
        return self._properties["timeout_activity_sid"]

    @property
    def prioritize_queue_order(self):
        """
        :returns:
        :rtype: WorkspaceInstance.QueueOrder
        """
        return self._properties["prioritize_queue_order"]

    @property
    def url(self):
        """
        :returns: The absolute URL of the Workspace resource.
        :rtype: str
        """
        return self._properties["url"]

    @property
    def links(self):
        """
        :returns: The URLs of related resources.
        :rtype: dict
        """
        return self._properties["links"]

    def delete(self):
        """
        Deletes the WorkspaceInstance


        :returns: True if delete succeeds, False otherwise
        :rtype: bool
        """
        return self._proxy.delete()

    async def delete_async(self):
        """
        Asynchronous coroutine that deletes the WorkspaceInstance


        :returns: True if delete succeeds, False otherwise
        :rtype: bool
        """
        return await self._proxy.delete_async()

    def fetch(self):
        """
        Fetch the WorkspaceInstance


        :returns: The fetched WorkspaceInstance
        :rtype: twilio.rest.taskrouter.v1.workspace.WorkspaceInstance
        """
        return self._proxy.fetch()

    async def fetch_async(self):
        """
        Asynchronous coroutine to fetch the WorkspaceInstance


        :returns: The fetched WorkspaceInstance
        :rtype: twilio.rest.taskrouter.v1.workspace.WorkspaceInstance
        """
        return await self._proxy.fetch_async()

    def update(
        self,
        default_activity_sid=values.unset,
        event_callback_url=values.unset,
        events_filter=values.unset,
        friendly_name=values.unset,
        multi_task_enabled=values.unset,
        timeout_activity_sid=values.unset,
        prioritize_queue_order=values.unset,
    ):
        """
        Update the WorkspaceInstance

        :param str default_activity_sid: The SID of the Activity that will be used when new Workers are created in the Workspace.
        :param str event_callback_url: The URL we should call when an event occurs. See [Workspace Events](https://www.twilio.com/docs/taskrouter/api/event) for more information. This parameter supports Twilio's [Webhooks (HTTP callbacks) Connection Overrides](https://www.twilio.com/docs/usage/webhooks/webhooks-connection-overrides).
        :param str events_filter: The list of Workspace events for which to call event_callback_url. For example if `EventsFilter=task.created,task.canceled,worker.activity.update`, then TaskRouter will call event_callback_url only when a task is created, canceled, or a Worker activity is updated.
        :param str friendly_name: A descriptive string that you create to describe the Workspace resource. For example: `Sales Call Center` or `Customer Support Team`.
        :param bool multi_task_enabled: Whether to enable multi-tasking. Can be: `true` to enable multi-tasking, or `false` to disable it. However, all workspaces should be maintained as multi-tasking. There is no default when omitting this parameter. A multi-tasking Workspace can't be updated to single-tasking unless it is not a Flex Project and another (legacy) single-tasking Workspace exists. Multi-tasking allows Workers to handle multiple Tasks simultaneously. In multi-tasking mode, each Worker can receive parallel reservations up to the per-channel maximums defined in the Workers section. In single-tasking mode (legacy mode), each Worker will only receive a new reservation when the previous task is completed. Learn more at [Multitasking](https://www.twilio.com/docs/taskrouter/multitasking).
        :param str timeout_activity_sid: The SID of the Activity that will be assigned to a Worker when a Task reservation times out without a response.
        :param WorkspaceInstance.QueueOrder prioritize_queue_order:

        :returns: The updated WorkspaceInstance
        :rtype: twilio.rest.taskrouter.v1.workspace.WorkspaceInstance
        """
        return self._proxy.update(
            default_activity_sid=default_activity_sid,
            event_callback_url=event_callback_url,
            events_filter=events_filter,
            friendly_name=friendly_name,
            multi_task_enabled=multi_task_enabled,
            timeout_activity_sid=timeout_activity_sid,
            prioritize_queue_order=prioritize_queue_order,
        )

    async def update_async(
        self,
        default_activity_sid=values.unset,
        event_callback_url=values.unset,
        events_filter=values.unset,
        friendly_name=values.unset,
        multi_task_enabled=values.unset,
        timeout_activity_sid=values.unset,
        prioritize_queue_order=values.unset,
    ):
        """
        Asynchronous coroutine to update the WorkspaceInstance

        :param str default_activity_sid: The SID of the Activity that will be used when new Workers are created in the Workspace.
        :param str event_callback_url: The URL we should call when an event occurs. See [Workspace Events](https://www.twilio.com/docs/taskrouter/api/event) for more information. This parameter supports Twilio's [Webhooks (HTTP callbacks) Connection Overrides](https://www.twilio.com/docs/usage/webhooks/webhooks-connection-overrides).
        :param str events_filter: The list of Workspace events for which to call event_callback_url. For example if `EventsFilter=task.created,task.canceled,worker.activity.update`, then TaskRouter will call event_callback_url only when a task is created, canceled, or a Worker activity is updated.
        :param str friendly_name: A descriptive string that you create to describe the Workspace resource. For example: `Sales Call Center` or `Customer Support Team`.
        :param bool multi_task_enabled: Whether to enable multi-tasking. Can be: `true` to enable multi-tasking, or `false` to disable it. However, all workspaces should be maintained as multi-tasking. There is no default when omitting this parameter. A multi-tasking Workspace can't be updated to single-tasking unless it is not a Flex Project and another (legacy) single-tasking Workspace exists. Multi-tasking allows Workers to handle multiple Tasks simultaneously. In multi-tasking mode, each Worker can receive parallel reservations up to the per-channel maximums defined in the Workers section. In single-tasking mode (legacy mode), each Worker will only receive a new reservation when the previous task is completed. Learn more at [Multitasking](https://www.twilio.com/docs/taskrouter/multitasking).
        :param str timeout_activity_sid: The SID of the Activity that will be assigned to a Worker when a Task reservation times out without a response.
        :param WorkspaceInstance.QueueOrder prioritize_queue_order:

        :returns: The updated WorkspaceInstance
        :rtype: twilio.rest.taskrouter.v1.workspace.WorkspaceInstance
        """
        return await self._proxy.update_async(
            default_activity_sid=default_activity_sid,
            event_callback_url=event_callback_url,
            events_filter=events_filter,
            friendly_name=friendly_name,
            multi_task_enabled=multi_task_enabled,
            timeout_activity_sid=timeout_activity_sid,
            prioritize_queue_order=prioritize_queue_order,
        )

    @property
    def activities(self):
        """
        Access the activities

        :returns: twilio.rest.taskrouter.v1.workspace.ActivityList
        :rtype: twilio.rest.taskrouter.v1.workspace.ActivityList
        """
        return self._proxy.activities

    @property
    def events(self):
        """
        Access the events

        :returns: twilio.rest.taskrouter.v1.workspace.EventList
        :rtype: twilio.rest.taskrouter.v1.workspace.EventList
        """
        return self._proxy.events

    @property
    def tasks(self):
        """
        Access the tasks

        :returns: twilio.rest.taskrouter.v1.workspace.TaskList
        :rtype: twilio.rest.taskrouter.v1.workspace.TaskList
        """
        return self._proxy.tasks

    @property
    def task_channels(self):
        """
        Access the task_channels

        :returns: twilio.rest.taskrouter.v1.workspace.TaskChannelList
        :rtype: twilio.rest.taskrouter.v1.workspace.TaskChannelList
        """
        return self._proxy.task_channels

    @property
    def task_queues(self):
        """
        Access the task_queues

        :returns: twilio.rest.taskrouter.v1.workspace.TaskQueueList
        :rtype: twilio.rest.taskrouter.v1.workspace.TaskQueueList
        """
        return self._proxy.task_queues

    @property
    def workers(self):
        """
        Access the workers

        :returns: twilio.rest.taskrouter.v1.workspace.WorkerList
        :rtype: twilio.rest.taskrouter.v1.workspace.WorkerList
        """
        return self._proxy.workers

    @property
    def workflows(self):
        """
        Access the workflows

        :returns: twilio.rest.taskrouter.v1.workspace.WorkflowList
        :rtype: twilio.rest.taskrouter.v1.workspace.WorkflowList
        """
        return self._proxy.workflows

    @property
    def cumulative_statistics(self):
        """
        Access the cumulative_statistics

        :returns: twilio.rest.taskrouter.v1.workspace.WorkspaceCumulativeStatisticsList
        :rtype: twilio.rest.taskrouter.v1.workspace.WorkspaceCumulativeStatisticsList
        """
        return self._proxy.cumulative_statistics

    @property
    def real_time_statistics(self):
        """
        Access the real_time_statistics

        :returns: twilio.rest.taskrouter.v1.workspace.WorkspaceRealTimeStatisticsList
        :rtype: twilio.rest.taskrouter.v1.workspace.WorkspaceRealTimeStatisticsList
        """
        return self._proxy.real_time_statistics

    @property
    def statistics(self):
        """
        Access the statistics

        :returns: twilio.rest.taskrouter.v1.workspace.WorkspaceStatisticsList
        :rtype: twilio.rest.taskrouter.v1.workspace.WorkspaceStatisticsList
        """
        return self._proxy.statistics

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        context = " ".join("{}={}".format(k, v) for k, v in self._solution.items())
        return "<Twilio.Taskrouter.V1.WorkspaceInstance {}>".format(context)


class WorkspaceContext(InstanceContext):
    def __init__(self, version: Version, sid: str):
        """
        Initialize the WorkspaceContext

        :param Version version: Version that contains the resource
        :param sid: The SID of the Workspace resource to update.

        :returns: twilio.rest.taskrouter.v1.workspace.WorkspaceContext
        :rtype: twilio.rest.taskrouter.v1.workspace.WorkspaceContext
        """
        super().__init__(version)

        # Path Solution
        self._solution = {
            "sid": sid,
        }
        self._uri = "/Workspaces/{sid}".format(**self._solution)

        self._activities: Optional[ActivityList] = None
        self._events: Optional[EventList] = None
        self._tasks: Optional[TaskList] = None
        self._task_channels: Optional[TaskChannelList] = None
        self._task_queues: Optional[TaskQueueList] = None
        self._workers: Optional[WorkerList] = None
        self._workflows: Optional[WorkflowList] = None
        self._cumulative_statistics: Optional[WorkspaceCumulativeStatisticsList] = None
        self._real_time_statistics: Optional[WorkspaceRealTimeStatisticsList] = None
        self._statistics: Optional[WorkspaceStatisticsList] = None

    def delete(self):
        """
        Deletes the WorkspaceInstance


        :returns: True if delete succeeds, False otherwise
        :rtype: bool
        """
        return self._version.delete(
            method="DELETE",
            uri=self._uri,
        )

    async def delete_async(self):
        """
        Asynchronous coroutine that deletes the WorkspaceInstance


        :returns: True if delete succeeds, False otherwise
        :rtype: bool
        """
        return await self._version.delete_async(
            method="DELETE",
            uri=self._uri,
        )

    def fetch(self):
        """
        Fetch the WorkspaceInstance


        :returns: The fetched WorkspaceInstance
        :rtype: twilio.rest.taskrouter.v1.workspace.WorkspaceInstance
        """

        payload = self._version.fetch(
            method="GET",
            uri=self._uri,
        )

        return WorkspaceInstance(
            self._version,
            payload,
            sid=self._solution["sid"],
        )

    async def fetch_async(self):
        """
        Asynchronous coroutine to fetch the WorkspaceInstance


        :returns: The fetched WorkspaceInstance
        :rtype: twilio.rest.taskrouter.v1.workspace.WorkspaceInstance
        """

        payload = await self._version.fetch_async(
            method="GET",
            uri=self._uri,
        )

        return WorkspaceInstance(
            self._version,
            payload,
            sid=self._solution["sid"],
        )

    def update(
        self,
        default_activity_sid=values.unset,
        event_callback_url=values.unset,
        events_filter=values.unset,
        friendly_name=values.unset,
        multi_task_enabled=values.unset,
        timeout_activity_sid=values.unset,
        prioritize_queue_order=values.unset,
    ):
        """
        Update the WorkspaceInstance

        :param str default_activity_sid: The SID of the Activity that will be used when new Workers are created in the Workspace.
        :param str event_callback_url: The URL we should call when an event occurs. See [Workspace Events](https://www.twilio.com/docs/taskrouter/api/event) for more information. This parameter supports Twilio's [Webhooks (HTTP callbacks) Connection Overrides](https://www.twilio.com/docs/usage/webhooks/webhooks-connection-overrides).
        :param str events_filter: The list of Workspace events for which to call event_callback_url. For example if `EventsFilter=task.created,task.canceled,worker.activity.update`, then TaskRouter will call event_callback_url only when a task is created, canceled, or a Worker activity is updated.
        :param str friendly_name: A descriptive string that you create to describe the Workspace resource. For example: `Sales Call Center` or `Customer Support Team`.
        :param bool multi_task_enabled: Whether to enable multi-tasking. Can be: `true` to enable multi-tasking, or `false` to disable it. However, all workspaces should be maintained as multi-tasking. There is no default when omitting this parameter. A multi-tasking Workspace can't be updated to single-tasking unless it is not a Flex Project and another (legacy) single-tasking Workspace exists. Multi-tasking allows Workers to handle multiple Tasks simultaneously. In multi-tasking mode, each Worker can receive parallel reservations up to the per-channel maximums defined in the Workers section. In single-tasking mode (legacy mode), each Worker will only receive a new reservation when the previous task is completed. Learn more at [Multitasking](https://www.twilio.com/docs/taskrouter/multitasking).
        :param str timeout_activity_sid: The SID of the Activity that will be assigned to a Worker when a Task reservation times out without a response.
        :param WorkspaceInstance.QueueOrder prioritize_queue_order:

        :returns: The updated WorkspaceInstance
        :rtype: twilio.rest.taskrouter.v1.workspace.WorkspaceInstance
        """
        data = values.of(
            {
                "DefaultActivitySid": default_activity_sid,
                "EventCallbackUrl": event_callback_url,
                "EventsFilter": events_filter,
                "FriendlyName": friendly_name,
                "MultiTaskEnabled": multi_task_enabled,
                "TimeoutActivitySid": timeout_activity_sid,
                "PrioritizeQueueOrder": prioritize_queue_order,
            }
        )

        payload = self._version.update(
            method="POST",
            uri=self._uri,
            data=data,
        )

        return WorkspaceInstance(self._version, payload, sid=self._solution["sid"])

    async def update_async(
        self,
        default_activity_sid=values.unset,
        event_callback_url=values.unset,
        events_filter=values.unset,
        friendly_name=values.unset,
        multi_task_enabled=values.unset,
        timeout_activity_sid=values.unset,
        prioritize_queue_order=values.unset,
    ):
        """
        Asynchronous coroutine to update the WorkspaceInstance

        :param str default_activity_sid: The SID of the Activity that will be used when new Workers are created in the Workspace.
        :param str event_callback_url: The URL we should call when an event occurs. See [Workspace Events](https://www.twilio.com/docs/taskrouter/api/event) for more information. This parameter supports Twilio's [Webhooks (HTTP callbacks) Connection Overrides](https://www.twilio.com/docs/usage/webhooks/webhooks-connection-overrides).
        :param str events_filter: The list of Workspace events for which to call event_callback_url. For example if `EventsFilter=task.created,task.canceled,worker.activity.update`, then TaskRouter will call event_callback_url only when a task is created, canceled, or a Worker activity is updated.
        :param str friendly_name: A descriptive string that you create to describe the Workspace resource. For example: `Sales Call Center` or `Customer Support Team`.
        :param bool multi_task_enabled: Whether to enable multi-tasking. Can be: `true` to enable multi-tasking, or `false` to disable it. However, all workspaces should be maintained as multi-tasking. There is no default when omitting this parameter. A multi-tasking Workspace can't be updated to single-tasking unless it is not a Flex Project and another (legacy) single-tasking Workspace exists. Multi-tasking allows Workers to handle multiple Tasks simultaneously. In multi-tasking mode, each Worker can receive parallel reservations up to the per-channel maximums defined in the Workers section. In single-tasking mode (legacy mode), each Worker will only receive a new reservation when the previous task is completed. Learn more at [Multitasking](https://www.twilio.com/docs/taskrouter/multitasking).
        :param str timeout_activity_sid: The SID of the Activity that will be assigned to a Worker when a Task reservation times out without a response.
        :param WorkspaceInstance.QueueOrder prioritize_queue_order:

        :returns: The updated WorkspaceInstance
        :rtype: twilio.rest.taskrouter.v1.workspace.WorkspaceInstance
        """
        data = values.of(
            {
                "DefaultActivitySid": default_activity_sid,
                "EventCallbackUrl": event_callback_url,
                "EventsFilter": events_filter,
                "FriendlyName": friendly_name,
                "MultiTaskEnabled": multi_task_enabled,
                "TimeoutActivitySid": timeout_activity_sid,
                "PrioritizeQueueOrder": prioritize_queue_order,
            }
        )

        payload = await self._version.update_async(
            method="POST",
            uri=self._uri,
            data=data,
        )

        return WorkspaceInstance(self._version, payload, sid=self._solution["sid"])

    @property
    def activities(self):
        """
        Access the activities

        :returns: twilio.rest.taskrouter.v1.workspace.ActivityList
        :rtype: twilio.rest.taskrouter.v1.workspace.ActivityList
        """
        if self._activities is None:
            self._activities = ActivityList(
                self._version,
                self._solution["sid"],
            )
        return self._activities

    @property
    def events(self):
        """
        Access the events

        :returns: twilio.rest.taskrouter.v1.workspace.EventList
        :rtype: twilio.rest.taskrouter.v1.workspace.EventList
        """
        if self._events is None:
            self._events = EventList(
                self._version,
                self._solution["sid"],
            )
        return self._events

    @property
    def tasks(self):
        """
        Access the tasks

        :returns: twilio.rest.taskrouter.v1.workspace.TaskList
        :rtype: twilio.rest.taskrouter.v1.workspace.TaskList
        """
        if self._tasks is None:
            self._tasks = TaskList(
                self._version,
                self._solution["sid"],
            )
        return self._tasks

    @property
    def task_channels(self):
        """
        Access the task_channels

        :returns: twilio.rest.taskrouter.v1.workspace.TaskChannelList
        :rtype: twilio.rest.taskrouter.v1.workspace.TaskChannelList
        """
        if self._task_channels is None:
            self._task_channels = TaskChannelList(
                self._version,
                self._solution["sid"],
            )
        return self._task_channels

    @property
    def task_queues(self):
        """
        Access the task_queues

        :returns: twilio.rest.taskrouter.v1.workspace.TaskQueueList
        :rtype: twilio.rest.taskrouter.v1.workspace.TaskQueueList
        """
        if self._task_queues is None:
            self._task_queues = TaskQueueList(
                self._version,
                self._solution["sid"],
            )
        return self._task_queues

    @property
    def workers(self):
        """
        Access the workers

        :returns: twilio.rest.taskrouter.v1.workspace.WorkerList
        :rtype: twilio.rest.taskrouter.v1.workspace.WorkerList
        """
        if self._workers is None:
            self._workers = WorkerList(
                self._version,
                self._solution["sid"],
            )
        return self._workers

    @property
    def workflows(self):
        """
        Access the workflows

        :returns: twilio.rest.taskrouter.v1.workspace.WorkflowList
        :rtype: twilio.rest.taskrouter.v1.workspace.WorkflowList
        """
        if self._workflows is None:
            self._workflows = WorkflowList(
                self._version,
                self._solution["sid"],
            )
        return self._workflows

    @property
    def cumulative_statistics(self):
        """
        Access the cumulative_statistics

        :returns: twilio.rest.taskrouter.v1.workspace.WorkspaceCumulativeStatisticsList
        :rtype: twilio.rest.taskrouter.v1.workspace.WorkspaceCumulativeStatisticsList
        """
        if self._cumulative_statistics is None:
            self._cumulative_statistics = WorkspaceCumulativeStatisticsList(
                self._version,
                self._solution["sid"],
            )
        return self._cumulative_statistics

    @property
    def real_time_statistics(self):
        """
        Access the real_time_statistics

        :returns: twilio.rest.taskrouter.v1.workspace.WorkspaceRealTimeStatisticsList
        :rtype: twilio.rest.taskrouter.v1.workspace.WorkspaceRealTimeStatisticsList
        """
        if self._real_time_statistics is None:
            self._real_time_statistics = WorkspaceRealTimeStatisticsList(
                self._version,
                self._solution["sid"],
            )
        return self._real_time_statistics

    @property
    def statistics(self):
        """
        Access the statistics

        :returns: twilio.rest.taskrouter.v1.workspace.WorkspaceStatisticsList
        :rtype: twilio.rest.taskrouter.v1.workspace.WorkspaceStatisticsList
        """
        if self._statistics is None:
            self._statistics = WorkspaceStatisticsList(
                self._version,
                self._solution["sid"],
            )
        return self._statistics

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        context = " ".join("{}={}".format(k, v) for k, v in self._solution.items())
        return "<Twilio.Taskrouter.V1.WorkspaceContext {}>".format(context)


class WorkspacePage(Page):
    def get_instance(self, payload):
        """
        Build an instance of WorkspaceInstance

        :param dict payload: Payload response from the API

        :returns: twilio.rest.taskrouter.v1.workspace.WorkspaceInstance
        :rtype: twilio.rest.taskrouter.v1.workspace.WorkspaceInstance
        """
        return WorkspaceInstance(self._version, payload)

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        return "<Twilio.Taskrouter.V1.WorkspacePage>"


class WorkspaceList(ListResource):
    def __init__(self, version: Version):
        """
        Initialize the WorkspaceList

        :param Version version: Version that contains the resource

        :returns: twilio.rest.taskrouter.v1.workspace.WorkspaceList
        :rtype: twilio.rest.taskrouter.v1.workspace.WorkspaceList
        """
        super().__init__(version)

        self._uri = "/Workspaces"

    def create(
        self,
        friendly_name,
        event_callback_url=values.unset,
        events_filter=values.unset,
        multi_task_enabled=values.unset,
        template=values.unset,
        prioritize_queue_order=values.unset,
    ):
        """
        Create the WorkspaceInstance

        :param str friendly_name: A descriptive string that you create to describe the Workspace resource. It can be up to 64 characters long. For example: `Customer Support` or `2014 Election Campaign`.
        :param str event_callback_url: The URL we should call when an event occurs. If provided, the Workspace will publish events to this URL, for example, to collect data for reporting. See [Workspace Events](https://www.twilio.com/docs/taskrouter/api/event) for more information. This parameter supports Twilio's [Webhooks (HTTP callbacks) Connection Overrides](https://www.twilio.com/docs/usage/webhooks/webhooks-connection-overrides).
        :param str events_filter: The list of Workspace events for which to call event_callback_url. For example, if `EventsFilter=task.created, task.canceled, worker.activity.update`, then TaskRouter will call event_callback_url only when a task is created, canceled, or a Worker activity is updated.
        :param bool multi_task_enabled: Whether to enable multi-tasking. Can be: `true` to enable multi-tasking, or `false` to disable it. However, all workspaces should be created as multi-tasking. The default is `true`. Multi-tasking allows Workers to handle multiple Tasks simultaneously. When enabled (`true`), each Worker can receive parallel reservations up to the per-channel maximums defined in the Workers section. In single-tasking mode (legacy mode), each Worker will only receive a new reservation when the previous task is completed. Learn more at [Multitasking](https://www.twilio.com/docs/taskrouter/multitasking).
        :param str template: An available template name. Can be: `NONE` or `FIFO` and the default is `NONE`. Pre-configures the Workspace with the Workflow and Activities specified in the template. `NONE` will create a Workspace with only a set of default activities. `FIFO` will configure TaskRouter with a set of default activities and a single TaskQueue for first-in, first-out distribution, which can be useful when you are getting started with TaskRouter.
        :param WorkspaceInstance.QueueOrder prioritize_queue_order:

        :returns: The created WorkspaceInstance
        :rtype: twilio.rest.taskrouter.v1.workspace.WorkspaceInstance
        """
        data = values.of(
            {
                "FriendlyName": friendly_name,
                "EventCallbackUrl": event_callback_url,
                "EventsFilter": events_filter,
                "MultiTaskEnabled": multi_task_enabled,
                "Template": template,
                "PrioritizeQueueOrder": prioritize_queue_order,
            }
        )

        payload = self._version.create(
            method="POST",
            uri=self._uri,
            data=data,
        )

        return WorkspaceInstance(self._version, payload)

    async def create_async(
        self,
        friendly_name,
        event_callback_url=values.unset,
        events_filter=values.unset,
        multi_task_enabled=values.unset,
        template=values.unset,
        prioritize_queue_order=values.unset,
    ):
        """
        Asynchronously create the WorkspaceInstance

        :param str friendly_name: A descriptive string that you create to describe the Workspace resource. It can be up to 64 characters long. For example: `Customer Support` or `2014 Election Campaign`.
        :param str event_callback_url: The URL we should call when an event occurs. If provided, the Workspace will publish events to this URL, for example, to collect data for reporting. See [Workspace Events](https://www.twilio.com/docs/taskrouter/api/event) for more information. This parameter supports Twilio's [Webhooks (HTTP callbacks) Connection Overrides](https://www.twilio.com/docs/usage/webhooks/webhooks-connection-overrides).
        :param str events_filter: The list of Workspace events for which to call event_callback_url. For example, if `EventsFilter=task.created, task.canceled, worker.activity.update`, then TaskRouter will call event_callback_url only when a task is created, canceled, or a Worker activity is updated.
        :param bool multi_task_enabled: Whether to enable multi-tasking. Can be: `true` to enable multi-tasking, or `false` to disable it. However, all workspaces should be created as multi-tasking. The default is `true`. Multi-tasking allows Workers to handle multiple Tasks simultaneously. When enabled (`true`), each Worker can receive parallel reservations up to the per-channel maximums defined in the Workers section. In single-tasking mode (legacy mode), each Worker will only receive a new reservation when the previous task is completed. Learn more at [Multitasking](https://www.twilio.com/docs/taskrouter/multitasking).
        :param str template: An available template name. Can be: `NONE` or `FIFO` and the default is `NONE`. Pre-configures the Workspace with the Workflow and Activities specified in the template. `NONE` will create a Workspace with only a set of default activities. `FIFO` will configure TaskRouter with a set of default activities and a single TaskQueue for first-in, first-out distribution, which can be useful when you are getting started with TaskRouter.
        :param WorkspaceInstance.QueueOrder prioritize_queue_order:

        :returns: The created WorkspaceInstance
        :rtype: twilio.rest.taskrouter.v1.workspace.WorkspaceInstance
        """
        data = values.of(
            {
                "FriendlyName": friendly_name,
                "EventCallbackUrl": event_callback_url,
                "EventsFilter": events_filter,
                "MultiTaskEnabled": multi_task_enabled,
                "Template": template,
                "PrioritizeQueueOrder": prioritize_queue_order,
            }
        )

        payload = await self._version.create_async(
            method="POST",
            uri=self._uri,
            data=data,
        )

        return WorkspaceInstance(self._version, payload)

    def stream(self, friendly_name=values.unset, limit=None, page_size=None):
        """
        Streams WorkspaceInstance records from the API as a generator stream.
        This operation lazily loads records as efficiently as possible until the limit
        is reached.
        The results are returned as a generator, so this operation is memory efficient.

        :param str friendly_name: The `friendly_name` of the Workspace resources to read. For example `Customer Support` or `2014 Election Campaign`.
        :param int limit: Upper limit for the number of records to return. stream()
                          guarantees to never return more than limit.  Default is no limit
        :param int page_size: Number of records to fetch per request, when not set will use
                              the default value of 50 records.  If no page_size is defined
                              but a limit is defined, stream() will attempt to read the
                              limit with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        :rtype: list[twilio.rest.taskrouter.v1.workspace.WorkspaceInstance]
        """
        limits = self._version.read_limits(limit, page_size)
        page = self.page(friendly_name=friendly_name, page_size=limits["page_size"])

        return self._version.stream(page, limits["limit"])

    async def stream_async(
        self, friendly_name=values.unset, limit=None, page_size=None
    ):
        """
        Asynchronously streams WorkspaceInstance records from the API as a generator stream.
        This operation lazily loads records as efficiently as possible until the limit
        is reached.
        The results are returned as a generator, so this operation is memory efficient.

        :param str friendly_name: The `friendly_name` of the Workspace resources to read. For example `Customer Support` or `2014 Election Campaign`.
        :param int limit: Upper limit for the number of records to return. stream()
                          guarantees to never return more than limit.  Default is no limit
        :param int page_size: Number of records to fetch per request, when not set will use
                              the default value of 50 records.  If no page_size is defined
                              but a limit is defined, stream() will attempt to read the
                              limit with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        :rtype: list[twilio.rest.taskrouter.v1.workspace.WorkspaceInstance]
        """
        limits = self._version.read_limits(limit, page_size)
        page = await self.page_async(
            friendly_name=friendly_name, page_size=limits["page_size"]
        )

        return await self._version.stream_async(page, limits["limit"])

    def list(self, friendly_name=values.unset, limit=None, page_size=None):
        """
        Lists WorkspaceInstance records from the API as a list.
        Unlike stream(), this operation is eager and will load `limit` records into
        memory before returning.

        :param str friendly_name: The `friendly_name` of the Workspace resources to read. For example `Customer Support` or `2014 Election Campaign`.
        :param int limit: Upper limit for the number of records to return. list() guarantees
                          never to return more than limit.  Default is no limit
        :param int page_size: Number of records to fetch per request, when not set will use
                              the default value of 50 records.  If no page_size is defined
                              but a limit is defined, list() will attempt to read the limit
                              with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        :rtype: list[twilio.rest.taskrouter.v1.workspace.WorkspaceInstance]
        """
        return list(
            self.stream(
                friendly_name=friendly_name,
                limit=limit,
                page_size=page_size,
            )
        )

    async def list_async(self, friendly_name=values.unset, limit=None, page_size=None):
        """
        Asynchronously lists WorkspaceInstance records from the API as a list.
        Unlike stream(), this operation is eager and will load `limit` records into
        memory before returning.

        :param str friendly_name: The `friendly_name` of the Workspace resources to read. For example `Customer Support` or `2014 Election Campaign`.
        :param int limit: Upper limit for the number of records to return. list() guarantees
                          never to return more than limit.  Default is no limit
        :param int page_size: Number of records to fetch per request, when not set will use
                              the default value of 50 records.  If no page_size is defined
                              but a limit is defined, list() will attempt to read the limit
                              with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        :rtype: list[twilio.rest.taskrouter.v1.workspace.WorkspaceInstance]
        """
        return list(
            await self.stream_async(
                friendly_name=friendly_name,
                limit=limit,
                page_size=page_size,
            )
        )

    def page(
        self,
        friendly_name=values.unset,
        page_token=values.unset,
        page_number=values.unset,
        page_size=values.unset,
    ):
        """
        Retrieve a single page of WorkspaceInstance records from the API.
        Request is executed immediately

        :param str friendly_name: The `friendly_name` of the Workspace resources to read. For example `Customer Support` or `2014 Election Campaign`.
        :param str page_token: PageToken provided by the API
        :param int page_number: Page Number, this value is simply for client state
        :param int page_size: Number of records to return, defaults to 50

        :returns: Page of WorkspaceInstance
        :rtype: twilio.rest.taskrouter.v1.workspace.WorkspacePage
        """
        data = values.of(
            {
                "FriendlyName": friendly_name,
                "PageToken": page_token,
                "Page": page_number,
                "PageSize": page_size,
            }
        )

        response = self._version.page(method="GET", uri=self._uri, params=data)
        return WorkspacePage(self._version, response)

    async def page_async(
        self,
        friendly_name=values.unset,
        page_token=values.unset,
        page_number=values.unset,
        page_size=values.unset,
    ):
        """
        Asynchronously retrieve a single page of WorkspaceInstance records from the API.
        Request is executed immediately

        :param str friendly_name: The `friendly_name` of the Workspace resources to read. For example `Customer Support` or `2014 Election Campaign`.
        :param str page_token: PageToken provided by the API
        :param int page_number: Page Number, this value is simply for client state
        :param int page_size: Number of records to return, defaults to 50

        :returns: Page of WorkspaceInstance
        :rtype: twilio.rest.taskrouter.v1.workspace.WorkspacePage
        """
        data = values.of(
            {
                "FriendlyName": friendly_name,
                "PageToken": page_token,
                "Page": page_number,
                "PageSize": page_size,
            }
        )

        response = await self._version.page_async(
            method="GET", uri=self._uri, params=data
        )
        return WorkspacePage(self._version, response)

    def get_page(self, target_url):
        """
        Retrieve a specific page of WorkspaceInstance records from the API.
        Request is executed immediately

        :param str target_url: API-generated URL for the requested results page

        :returns: Page of WorkspaceInstance
        :rtype: twilio.rest.taskrouter.v1.workspace.WorkspacePage
        """
        response = self._version.domain.twilio.request("GET", target_url)
        return WorkspacePage(self._version, response)

    async def get_page_async(self, target_url):
        """
        Asynchronously retrieve a specific page of WorkspaceInstance records from the API.
        Request is executed immediately

        :param str target_url: API-generated URL for the requested results page

        :returns: Page of WorkspaceInstance
        :rtype: twilio.rest.taskrouter.v1.workspace.WorkspacePage
        """
        response = await self._version.domain.twilio.request_async("GET", target_url)
        return WorkspacePage(self._version, response)

    def get(self, sid):
        """
        Constructs a WorkspaceContext

        :param sid: The SID of the Workspace resource to update.

        :returns: twilio.rest.taskrouter.v1.workspace.WorkspaceContext
        :rtype: twilio.rest.taskrouter.v1.workspace.WorkspaceContext
        """
        return WorkspaceContext(self._version, sid=sid)

    def __call__(self, sid):
        """
        Constructs a WorkspaceContext

        :param sid: The SID of the Workspace resource to update.

        :returns: twilio.rest.taskrouter.v1.workspace.WorkspaceContext
        :rtype: twilio.rest.taskrouter.v1.workspace.WorkspaceContext
        """
        return WorkspaceContext(self._version, sid=sid)

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        return "<Twilio.Taskrouter.V1.WorkspaceList>"
