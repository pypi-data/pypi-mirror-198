r"""
    This code was generated by
   ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
    |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
    |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \

    Twilio - Bulkexports
    This is the public Twilio REST API.

    NOTE: This class is auto generated by OpenAPI Generator.
    https://openapi-generator.tech
    Do not edit the class manually.
"""


from typing import Optional
from twilio.base.instance_context import InstanceContext
from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
from twilio.base.version import Version

from twilio.rest.bulkexports.v1.export.day import DayList
from twilio.rest.bulkexports.v1.export.export_custom_job import ExportCustomJobList
from twilio.rest.bulkexports.v1.export.job import JobList


class ExportInstance(InstanceResource):
    def __init__(self, version, payload, resource_type: Optional[str] = None):
        """
        Initialize the ExportInstance

        :returns: twilio.rest.bulkexports.v1.export.ExportInstance
        :rtype: twilio.rest.bulkexports.v1.export.ExportInstance
        """
        super().__init__(version)

        self._properties = {
            "resource_type": payload.get("resource_type"),
            "url": payload.get("url"),
            "links": payload.get("links"),
        }

        self._solution = {
            "resource_type": resource_type or self._properties["resource_type"],
        }
        self._context: Optional[ExportContext] = None

    @property
    def _proxy(self):
        """
        Generate an instance context for the instance, the context is capable of
        performing various actions. All instance actions are proxied to the context

        :returns: ExportContext for this ExportInstance
        :rtype: twilio.rest.bulkexports.v1.export.ExportContext
        """
        if self._context is None:
            self._context = ExportContext(
                self._version,
                resource_type=self._solution["resource_type"],
            )
        return self._context

    @property
    def resource_type(self):
        """
        :returns: The type of communication – Messages, Calls, Conferences, and Participants
        :rtype: str
        """
        return self._properties["resource_type"]

    @property
    def url(self):
        """
        :returns: The URL of this resource.
        :rtype: str
        """
        return self._properties["url"]

    @property
    def links(self):
        """
        :returns: Contains a dictionary of URL links to nested resources of this Export.
        :rtype: dict
        """
        return self._properties["links"]

    def fetch(self):
        """
        Fetch the ExportInstance


        :returns: The fetched ExportInstance
        :rtype: twilio.rest.bulkexports.v1.export.ExportInstance
        """
        return self._proxy.fetch()

    async def fetch_async(self):
        """
        Asynchronous coroutine to fetch the ExportInstance


        :returns: The fetched ExportInstance
        :rtype: twilio.rest.bulkexports.v1.export.ExportInstance
        """
        return await self._proxy.fetch_async()

    @property
    def days(self):
        """
        Access the days

        :returns: twilio.rest.bulkexports.v1.export.DayList
        :rtype: twilio.rest.bulkexports.v1.export.DayList
        """
        return self._proxy.days

    @property
    def export_custom_jobs(self):
        """
        Access the export_custom_jobs

        :returns: twilio.rest.bulkexports.v1.export.ExportCustomJobList
        :rtype: twilio.rest.bulkexports.v1.export.ExportCustomJobList
        """
        return self._proxy.export_custom_jobs

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        context = " ".join("{}={}".format(k, v) for k, v in self._solution.items())
        return "<Twilio.Bulkexports.V1.ExportInstance {}>".format(context)


class ExportContext(InstanceContext):
    def __init__(self, version: Version, resource_type: str):
        """
        Initialize the ExportContext

        :param Version version: Version that contains the resource
        :param resource_type: The type of communication – Messages, Calls, Conferences, and Participants

        :returns: twilio.rest.bulkexports.v1.export.ExportContext
        :rtype: twilio.rest.bulkexports.v1.export.ExportContext
        """
        super().__init__(version)

        # Path Solution
        self._solution = {
            "resource_type": resource_type,
        }
        self._uri = "/Exports/{resource_type}".format(**self._solution)

        self._days: Optional[DayList] = None
        self._export_custom_jobs: Optional[ExportCustomJobList] = None

    def fetch(self):
        """
        Fetch the ExportInstance


        :returns: The fetched ExportInstance
        :rtype: twilio.rest.bulkexports.v1.export.ExportInstance
        """

        payload = self._version.fetch(
            method="GET",
            uri=self._uri,
        )

        return ExportInstance(
            self._version,
            payload,
            resource_type=self._solution["resource_type"],
        )

    async def fetch_async(self):
        """
        Asynchronous coroutine to fetch the ExportInstance


        :returns: The fetched ExportInstance
        :rtype: twilio.rest.bulkexports.v1.export.ExportInstance
        """

        payload = await self._version.fetch_async(
            method="GET",
            uri=self._uri,
        )

        return ExportInstance(
            self._version,
            payload,
            resource_type=self._solution["resource_type"],
        )

    @property
    def days(self):
        """
        Access the days

        :returns: twilio.rest.bulkexports.v1.export.DayList
        :rtype: twilio.rest.bulkexports.v1.export.DayList
        """
        if self._days is None:
            self._days = DayList(
                self._version,
                self._solution["resource_type"],
            )
        return self._days

    @property
    def export_custom_jobs(self):
        """
        Access the export_custom_jobs

        :returns: twilio.rest.bulkexports.v1.export.ExportCustomJobList
        :rtype: twilio.rest.bulkexports.v1.export.ExportCustomJobList
        """
        if self._export_custom_jobs is None:
            self._export_custom_jobs = ExportCustomJobList(
                self._version,
                self._solution["resource_type"],
            )
        return self._export_custom_jobs

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        context = " ".join("{}={}".format(k, v) for k, v in self._solution.items())
        return "<Twilio.Bulkexports.V1.ExportContext {}>".format(context)


class ExportList(ListResource):
    def __init__(self, version: Version):
        """
        Initialize the ExportList

        :param Version version: Version that contains the resource

        :returns: twilio.rest.bulkexports.v1.export.ExportList
        :rtype: twilio.rest.bulkexports.v1.export.ExportList
        """
        super().__init__(version)

        self._uri = "/Exports"

        self._jobs: Optional[JobList] = None

    @property
    def jobs(self):
        """
        Access the jobs

        :returns: twilio.rest.bulkexports.v1.export.JobList
        :rtype: twilio.rest.bulkexports.v1.export.JobList
        """
        if self._jobs is None:
            self._jobs = JobList(self._version)
        return self._jobs

    def get(self, resource_type):
        """
        Constructs a ExportContext

        :param resource_type: The type of communication – Messages, Calls, Conferences, and Participants

        :returns: twilio.rest.bulkexports.v1.export.ExportContext
        :rtype: twilio.rest.bulkexports.v1.export.ExportContext
        """
        return ExportContext(self._version, resource_type=resource_type)

    def __call__(self, resource_type):
        """
        Constructs a ExportContext

        :param resource_type: The type of communication – Messages, Calls, Conferences, and Participants

        :returns: twilio.rest.bulkexports.v1.export.ExportContext
        :rtype: twilio.rest.bulkexports.v1.export.ExportContext
        """
        return ExportContext(self._version, resource_type=resource_type)

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        return "<Twilio.Bulkexports.V1.ExportList>"
