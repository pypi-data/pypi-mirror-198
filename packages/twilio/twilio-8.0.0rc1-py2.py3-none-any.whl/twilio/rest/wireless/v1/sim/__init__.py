r"""
    This code was generated by
   ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
    |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
    |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \

    Twilio - Wireless
    This is the public Twilio REST API.

    NOTE: This class is auto generated by OpenAPI Generator.
    https://openapi-generator.tech
    Do not edit the class manually.
"""


from typing import Optional
from twilio.base import deserialize, values
from twilio.base.instance_context import InstanceContext
from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
from twilio.base.version import Version
from twilio.base.page import Page
from twilio.rest.wireless.v1.sim.data_session import DataSessionList
from twilio.rest.wireless.v1.sim.usage_record import UsageRecordList


class SimInstance(InstanceResource):
    class ResetStatus(object):
        RESETTING = "resetting"

    class Status(object):
        NEW = "new"
        READY = "ready"
        ACTIVE = "active"
        SUSPENDED = "suspended"
        DEACTIVATED = "deactivated"
        CANCELED = "canceled"
        SCHEDULED = "scheduled"
        UPDATING = "updating"

    def __init__(self, version, payload, sid: Optional[str] = None):
        """
        Initialize the SimInstance

        :returns: twilio.rest.wireless.v1.sim.SimInstance
        :rtype: twilio.rest.wireless.v1.sim.SimInstance
        """
        super().__init__(version)

        self._properties = {
            "sid": payload.get("sid"),
            "unique_name": payload.get("unique_name"),
            "account_sid": payload.get("account_sid"),
            "rate_plan_sid": payload.get("rate_plan_sid"),
            "friendly_name": payload.get("friendly_name"),
            "iccid": payload.get("iccid"),
            "e_id": payload.get("e_id"),
            "status": payload.get("status"),
            "reset_status": payload.get("reset_status"),
            "commands_callback_url": payload.get("commands_callback_url"),
            "commands_callback_method": payload.get("commands_callback_method"),
            "sms_fallback_method": payload.get("sms_fallback_method"),
            "sms_fallback_url": payload.get("sms_fallback_url"),
            "sms_method": payload.get("sms_method"),
            "sms_url": payload.get("sms_url"),
            "voice_fallback_method": payload.get("voice_fallback_method"),
            "voice_fallback_url": payload.get("voice_fallback_url"),
            "voice_method": payload.get("voice_method"),
            "voice_url": payload.get("voice_url"),
            "date_created": deserialize.iso8601_datetime(payload.get("date_created")),
            "date_updated": deserialize.iso8601_datetime(payload.get("date_updated")),
            "url": payload.get("url"),
            "links": payload.get("links"),
            "ip_address": payload.get("ip_address"),
        }

        self._solution = {
            "sid": sid or self._properties["sid"],
        }
        self._context: Optional[SimContext] = None

    @property
    def _proxy(self):
        """
        Generate an instance context for the instance, the context is capable of
        performing various actions. All instance actions are proxied to the context

        :returns: SimContext for this SimInstance
        :rtype: twilio.rest.wireless.v1.sim.SimContext
        """
        if self._context is None:
            self._context = SimContext(
                self._version,
                sid=self._solution["sid"],
            )
        return self._context

    @property
    def sid(self):
        """
        :returns: The unique string that we created to identify the Sim resource.
        :rtype: str
        """
        return self._properties["sid"]

    @property
    def unique_name(self):
        """
        :returns: An application-defined string that uniquely identifies the resource. It can be used in place of the resource's `sid` in the URL to address the resource.
        :rtype: str
        """
        return self._properties["unique_name"]

    @property
    def account_sid(self):
        """
        :returns: The SID of the [Account](https://www.twilio.com/docs/iam/api/account) to which the Sim resource belongs.
        :rtype: str
        """
        return self._properties["account_sid"]

    @property
    def rate_plan_sid(self):
        """
        :returns: The SID of the [RatePlan resource](https://www.twilio.com/docs/wireless/api/rateplan-resource) to which the Sim resource is assigned.
        :rtype: str
        """
        return self._properties["rate_plan_sid"]

    @property
    def friendly_name(self):
        """
        :returns: The string that you assigned to describe the Sim resource.
        :rtype: str
        """
        return self._properties["friendly_name"]

    @property
    def iccid(self):
        """
        :returns: The [ICCID](https://en.wikipedia.org/wiki/SIM_card#ICCID) associated with the SIM.
        :rtype: str
        """
        return self._properties["iccid"]

    @property
    def e_id(self):
        """
        :returns: Deprecated.
        :rtype: str
        """
        return self._properties["e_id"]

    @property
    def status(self):
        """
        :returns:
        :rtype: SimInstance.Status
        """
        return self._properties["status"]

    @property
    def reset_status(self):
        """
        :returns:
        :rtype: SimInstance.ResetStatus
        """
        return self._properties["reset_status"]

    @property
    def commands_callback_url(self):
        """
        :returns: The URL we call using the `commands_callback_method` when the SIM originates a machine-to-machine [Command](https://www.twilio.com/docs/wireless/api/command-resource). Your server should respond with an HTTP status code in the 200 range; any response body will be ignored.
        :rtype: str
        """
        return self._properties["commands_callback_url"]

    @property
    def commands_callback_method(self):
        """
        :returns: The HTTP method we use to call `commands_callback_url`.  Can be: `POST` or `GET`. Default is `POST`.
        :rtype: str
        """
        return self._properties["commands_callback_method"]

    @property
    def sms_fallback_method(self):
        """
        :returns: Deprecated.
        :rtype: str
        """
        return self._properties["sms_fallback_method"]

    @property
    def sms_fallback_url(self):
        """
        :returns: Deprecated.
        :rtype: str
        """
        return self._properties["sms_fallback_url"]

    @property
    def sms_method(self):
        """
        :returns: Deprecated.
        :rtype: str
        """
        return self._properties["sms_method"]

    @property
    def sms_url(self):
        """
        :returns: Deprecated.
        :rtype: str
        """
        return self._properties["sms_url"]

    @property
    def voice_fallback_method(self):
        """
        :returns: Deprecated. The HTTP method we use to call `voice_fallback_url`. Can be: `GET` or `POST`. Default is `POST`.
        :rtype: str
        """
        return self._properties["voice_fallback_method"]

    @property
    def voice_fallback_url(self):
        """
        :returns: Deprecated. The URL we call using the `voice_fallback_method` when an error occurs while retrieving or executing the TwiML requested from `voice_url`.
        :rtype: str
        """
        return self._properties["voice_fallback_url"]

    @property
    def voice_method(self):
        """
        :returns: Deprecated. The HTTP method we use to call `voice_url`. Can be: `GET` or `POST`. Default is `POST`.
        :rtype: str
        """
        return self._properties["voice_method"]

    @property
    def voice_url(self):
        """
        :returns: Deprecated. The URL we call using the `voice_method` when the SIM-connected device makes a voice call.
        :rtype: str
        """
        return self._properties["voice_url"]

    @property
    def date_created(self):
        """
        :returns: The date and time in GMT when the resource was created specified in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format.
        :rtype: datetime
        """
        return self._properties["date_created"]

    @property
    def date_updated(self):
        """
        :returns: The date and time in GMT when the Sim resource was last updated specified in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format.
        :rtype: datetime
        """
        return self._properties["date_updated"]

    @property
    def url(self):
        """
        :returns: The absolute URL of the resource.
        :rtype: str
        """
        return self._properties["url"]

    @property
    def links(self):
        """
        :returns: The URLs of related subresources.
        :rtype: dict
        """
        return self._properties["links"]

    @property
    def ip_address(self):
        """
        :returns: Deprecated.
        :rtype: str
        """
        return self._properties["ip_address"]

    def delete(self):
        """
        Deletes the SimInstance


        :returns: True if delete succeeds, False otherwise
        :rtype: bool
        """
        return self._proxy.delete()

    async def delete_async(self):
        """
        Asynchronous coroutine that deletes the SimInstance


        :returns: True if delete succeeds, False otherwise
        :rtype: bool
        """
        return await self._proxy.delete_async()

    def fetch(self):
        """
        Fetch the SimInstance


        :returns: The fetched SimInstance
        :rtype: twilio.rest.wireless.v1.sim.SimInstance
        """
        return self._proxy.fetch()

    async def fetch_async(self):
        """
        Asynchronous coroutine to fetch the SimInstance


        :returns: The fetched SimInstance
        :rtype: twilio.rest.wireless.v1.sim.SimInstance
        """
        return await self._proxy.fetch_async()

    def update(
        self,
        unique_name=values.unset,
        callback_method=values.unset,
        callback_url=values.unset,
        friendly_name=values.unset,
        rate_plan=values.unset,
        status=values.unset,
        commands_callback_method=values.unset,
        commands_callback_url=values.unset,
        sms_fallback_method=values.unset,
        sms_fallback_url=values.unset,
        sms_method=values.unset,
        sms_url=values.unset,
        voice_fallback_method=values.unset,
        voice_fallback_url=values.unset,
        voice_method=values.unset,
        voice_url=values.unset,
        reset_status=values.unset,
        account_sid=values.unset,
    ):
        """
        Update the SimInstance

        :param str unique_name: An application-defined string that uniquely identifies the resource. It can be used in place of the `sid` in the URL path to address the resource.
        :param str callback_method: The HTTP method we should use to call `callback_url`. Can be: `POST` or `GET`. The default is `POST`.
        :param str callback_url: The URL we should call using the `callback_url` when the SIM has finished updating. When the SIM transitions from `new` to `ready` or from any status to `deactivated`, we call this URL when the status changes to an intermediate status (`ready` or `deactivated`) and again when the status changes to its final status (`active` or `canceled`).
        :param str friendly_name: A descriptive string that you create to describe the Sim resource. It does not need to be unique.
        :param str rate_plan: The SID or unique name of the [RatePlan resource](https://www.twilio.com/docs/wireless/api/rateplan-resource) to which the Sim resource should be assigned.
        :param SimInstance.Status status:
        :param str commands_callback_method: The HTTP method we should use to call `commands_callback_url`. Can be: `POST` or `GET`. The default is `POST`.
        :param str commands_callback_url: The URL we should call using the `commands_callback_method` when the SIM sends a [Command](https://www.twilio.com/docs/wireless/api/command-resource). Your server should respond with an HTTP status code in the 200 range; any response body is ignored.
        :param str sms_fallback_method: The HTTP method we should use to call `sms_fallback_url`. Can be: `GET` or `POST`. Default is `POST`.
        :param str sms_fallback_url: The URL we should call using the `sms_fallback_method` when an error occurs while retrieving or executing the TwiML requested from `sms_url`.
        :param str sms_method: The HTTP method we should use to call `sms_url`. Can be: `GET` or `POST`. Default is `POST`.
        :param str sms_url: The URL we should call using the `sms_method` when the SIM-connected device sends an SMS message that is not a [Command](https://www.twilio.com/docs/wireless/api/command-resource).
        :param str voice_fallback_method: Deprecated.
        :param str voice_fallback_url: Deprecated.
        :param str voice_method: Deprecated.
        :param str voice_url: Deprecated.
        :param SimInstance.ResetStatus reset_status:
        :param str account_sid: The SID of the [Account](https://www.twilio.com/docs/iam/api/account) to which the Sim resource should belong. The Account SID can only be that of the requesting Account or that of a [Subaccount](https://www.twilio.com/docs/iam/api/subaccounts) of the requesting Account. Only valid when the Sim resource's status is `new`. For more information, see the [Move SIMs between Subaccounts documentation](https://www.twilio.com/docs/wireless/api/sim-resource#move-sims-between-subaccounts).

        :returns: The updated SimInstance
        :rtype: twilio.rest.wireless.v1.sim.SimInstance
        """
        return self._proxy.update(
            unique_name=unique_name,
            callback_method=callback_method,
            callback_url=callback_url,
            friendly_name=friendly_name,
            rate_plan=rate_plan,
            status=status,
            commands_callback_method=commands_callback_method,
            commands_callback_url=commands_callback_url,
            sms_fallback_method=sms_fallback_method,
            sms_fallback_url=sms_fallback_url,
            sms_method=sms_method,
            sms_url=sms_url,
            voice_fallback_method=voice_fallback_method,
            voice_fallback_url=voice_fallback_url,
            voice_method=voice_method,
            voice_url=voice_url,
            reset_status=reset_status,
            account_sid=account_sid,
        )

    async def update_async(
        self,
        unique_name=values.unset,
        callback_method=values.unset,
        callback_url=values.unset,
        friendly_name=values.unset,
        rate_plan=values.unset,
        status=values.unset,
        commands_callback_method=values.unset,
        commands_callback_url=values.unset,
        sms_fallback_method=values.unset,
        sms_fallback_url=values.unset,
        sms_method=values.unset,
        sms_url=values.unset,
        voice_fallback_method=values.unset,
        voice_fallback_url=values.unset,
        voice_method=values.unset,
        voice_url=values.unset,
        reset_status=values.unset,
        account_sid=values.unset,
    ):
        """
        Asynchronous coroutine to update the SimInstance

        :param str unique_name: An application-defined string that uniquely identifies the resource. It can be used in place of the `sid` in the URL path to address the resource.
        :param str callback_method: The HTTP method we should use to call `callback_url`. Can be: `POST` or `GET`. The default is `POST`.
        :param str callback_url: The URL we should call using the `callback_url` when the SIM has finished updating. When the SIM transitions from `new` to `ready` or from any status to `deactivated`, we call this URL when the status changes to an intermediate status (`ready` or `deactivated`) and again when the status changes to its final status (`active` or `canceled`).
        :param str friendly_name: A descriptive string that you create to describe the Sim resource. It does not need to be unique.
        :param str rate_plan: The SID or unique name of the [RatePlan resource](https://www.twilio.com/docs/wireless/api/rateplan-resource) to which the Sim resource should be assigned.
        :param SimInstance.Status status:
        :param str commands_callback_method: The HTTP method we should use to call `commands_callback_url`. Can be: `POST` or `GET`. The default is `POST`.
        :param str commands_callback_url: The URL we should call using the `commands_callback_method` when the SIM sends a [Command](https://www.twilio.com/docs/wireless/api/command-resource). Your server should respond with an HTTP status code in the 200 range; any response body is ignored.
        :param str sms_fallback_method: The HTTP method we should use to call `sms_fallback_url`. Can be: `GET` or `POST`. Default is `POST`.
        :param str sms_fallback_url: The URL we should call using the `sms_fallback_method` when an error occurs while retrieving or executing the TwiML requested from `sms_url`.
        :param str sms_method: The HTTP method we should use to call `sms_url`. Can be: `GET` or `POST`. Default is `POST`.
        :param str sms_url: The URL we should call using the `sms_method` when the SIM-connected device sends an SMS message that is not a [Command](https://www.twilio.com/docs/wireless/api/command-resource).
        :param str voice_fallback_method: Deprecated.
        :param str voice_fallback_url: Deprecated.
        :param str voice_method: Deprecated.
        :param str voice_url: Deprecated.
        :param SimInstance.ResetStatus reset_status:
        :param str account_sid: The SID of the [Account](https://www.twilio.com/docs/iam/api/account) to which the Sim resource should belong. The Account SID can only be that of the requesting Account or that of a [Subaccount](https://www.twilio.com/docs/iam/api/subaccounts) of the requesting Account. Only valid when the Sim resource's status is `new`. For more information, see the [Move SIMs between Subaccounts documentation](https://www.twilio.com/docs/wireless/api/sim-resource#move-sims-between-subaccounts).

        :returns: The updated SimInstance
        :rtype: twilio.rest.wireless.v1.sim.SimInstance
        """
        return await self._proxy.update_async(
            unique_name=unique_name,
            callback_method=callback_method,
            callback_url=callback_url,
            friendly_name=friendly_name,
            rate_plan=rate_plan,
            status=status,
            commands_callback_method=commands_callback_method,
            commands_callback_url=commands_callback_url,
            sms_fallback_method=sms_fallback_method,
            sms_fallback_url=sms_fallback_url,
            sms_method=sms_method,
            sms_url=sms_url,
            voice_fallback_method=voice_fallback_method,
            voice_fallback_url=voice_fallback_url,
            voice_method=voice_method,
            voice_url=voice_url,
            reset_status=reset_status,
            account_sid=account_sid,
        )

    @property
    def data_sessions(self):
        """
        Access the data_sessions

        :returns: twilio.rest.wireless.v1.sim.DataSessionList
        :rtype: twilio.rest.wireless.v1.sim.DataSessionList
        """
        return self._proxy.data_sessions

    @property
    def usage_records(self):
        """
        Access the usage_records

        :returns: twilio.rest.wireless.v1.sim.UsageRecordList
        :rtype: twilio.rest.wireless.v1.sim.UsageRecordList
        """
        return self._proxy.usage_records

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        context = " ".join("{}={}".format(k, v) for k, v in self._solution.items())
        return "<Twilio.Wireless.V1.SimInstance {}>".format(context)


class SimContext(InstanceContext):
    def __init__(self, version: Version, sid: str):
        """
        Initialize the SimContext

        :param Version version: Version that contains the resource
        :param sid: The SID or the `unique_name` of the Sim resource to update.

        :returns: twilio.rest.wireless.v1.sim.SimContext
        :rtype: twilio.rest.wireless.v1.sim.SimContext
        """
        super().__init__(version)

        # Path Solution
        self._solution = {
            "sid": sid,
        }
        self._uri = "/Sims/{sid}".format(**self._solution)

        self._data_sessions: Optional[DataSessionList] = None
        self._usage_records: Optional[UsageRecordList] = None

    def delete(self):
        """
        Deletes the SimInstance


        :returns: True if delete succeeds, False otherwise
        :rtype: bool
        """
        return self._version.delete(
            method="DELETE",
            uri=self._uri,
        )

    async def delete_async(self):
        """
        Asynchronous coroutine that deletes the SimInstance


        :returns: True if delete succeeds, False otherwise
        :rtype: bool
        """
        return await self._version.delete_async(
            method="DELETE",
            uri=self._uri,
        )

    def fetch(self):
        """
        Fetch the SimInstance


        :returns: The fetched SimInstance
        :rtype: twilio.rest.wireless.v1.sim.SimInstance
        """

        payload = self._version.fetch(
            method="GET",
            uri=self._uri,
        )

        return SimInstance(
            self._version,
            payload,
            sid=self._solution["sid"],
        )

    async def fetch_async(self):
        """
        Asynchronous coroutine to fetch the SimInstance


        :returns: The fetched SimInstance
        :rtype: twilio.rest.wireless.v1.sim.SimInstance
        """

        payload = await self._version.fetch_async(
            method="GET",
            uri=self._uri,
        )

        return SimInstance(
            self._version,
            payload,
            sid=self._solution["sid"],
        )

    def update(
        self,
        unique_name=values.unset,
        callback_method=values.unset,
        callback_url=values.unset,
        friendly_name=values.unset,
        rate_plan=values.unset,
        status=values.unset,
        commands_callback_method=values.unset,
        commands_callback_url=values.unset,
        sms_fallback_method=values.unset,
        sms_fallback_url=values.unset,
        sms_method=values.unset,
        sms_url=values.unset,
        voice_fallback_method=values.unset,
        voice_fallback_url=values.unset,
        voice_method=values.unset,
        voice_url=values.unset,
        reset_status=values.unset,
        account_sid=values.unset,
    ):
        """
        Update the SimInstance

        :param str unique_name: An application-defined string that uniquely identifies the resource. It can be used in place of the `sid` in the URL path to address the resource.
        :param str callback_method: The HTTP method we should use to call `callback_url`. Can be: `POST` or `GET`. The default is `POST`.
        :param str callback_url: The URL we should call using the `callback_url` when the SIM has finished updating. When the SIM transitions from `new` to `ready` or from any status to `deactivated`, we call this URL when the status changes to an intermediate status (`ready` or `deactivated`) and again when the status changes to its final status (`active` or `canceled`).
        :param str friendly_name: A descriptive string that you create to describe the Sim resource. It does not need to be unique.
        :param str rate_plan: The SID or unique name of the [RatePlan resource](https://www.twilio.com/docs/wireless/api/rateplan-resource) to which the Sim resource should be assigned.
        :param SimInstance.Status status:
        :param str commands_callback_method: The HTTP method we should use to call `commands_callback_url`. Can be: `POST` or `GET`. The default is `POST`.
        :param str commands_callback_url: The URL we should call using the `commands_callback_method` when the SIM sends a [Command](https://www.twilio.com/docs/wireless/api/command-resource). Your server should respond with an HTTP status code in the 200 range; any response body is ignored.
        :param str sms_fallback_method: The HTTP method we should use to call `sms_fallback_url`. Can be: `GET` or `POST`. Default is `POST`.
        :param str sms_fallback_url: The URL we should call using the `sms_fallback_method` when an error occurs while retrieving or executing the TwiML requested from `sms_url`.
        :param str sms_method: The HTTP method we should use to call `sms_url`. Can be: `GET` or `POST`. Default is `POST`.
        :param str sms_url: The URL we should call using the `sms_method` when the SIM-connected device sends an SMS message that is not a [Command](https://www.twilio.com/docs/wireless/api/command-resource).
        :param str voice_fallback_method: Deprecated.
        :param str voice_fallback_url: Deprecated.
        :param str voice_method: Deprecated.
        :param str voice_url: Deprecated.
        :param SimInstance.ResetStatus reset_status:
        :param str account_sid: The SID of the [Account](https://www.twilio.com/docs/iam/api/account) to which the Sim resource should belong. The Account SID can only be that of the requesting Account or that of a [Subaccount](https://www.twilio.com/docs/iam/api/subaccounts) of the requesting Account. Only valid when the Sim resource's status is `new`. For more information, see the [Move SIMs between Subaccounts documentation](https://www.twilio.com/docs/wireless/api/sim-resource#move-sims-between-subaccounts).

        :returns: The updated SimInstance
        :rtype: twilio.rest.wireless.v1.sim.SimInstance
        """
        data = values.of(
            {
                "UniqueName": unique_name,
                "CallbackMethod": callback_method,
                "CallbackUrl": callback_url,
                "FriendlyName": friendly_name,
                "RatePlan": rate_plan,
                "Status": status,
                "CommandsCallbackMethod": commands_callback_method,
                "CommandsCallbackUrl": commands_callback_url,
                "SmsFallbackMethod": sms_fallback_method,
                "SmsFallbackUrl": sms_fallback_url,
                "SmsMethod": sms_method,
                "SmsUrl": sms_url,
                "VoiceFallbackMethod": voice_fallback_method,
                "VoiceFallbackUrl": voice_fallback_url,
                "VoiceMethod": voice_method,
                "VoiceUrl": voice_url,
                "ResetStatus": reset_status,
                "AccountSid": account_sid,
            }
        )

        payload = self._version.update(
            method="POST",
            uri=self._uri,
            data=data,
        )

        return SimInstance(self._version, payload, sid=self._solution["sid"])

    async def update_async(
        self,
        unique_name=values.unset,
        callback_method=values.unset,
        callback_url=values.unset,
        friendly_name=values.unset,
        rate_plan=values.unset,
        status=values.unset,
        commands_callback_method=values.unset,
        commands_callback_url=values.unset,
        sms_fallback_method=values.unset,
        sms_fallback_url=values.unset,
        sms_method=values.unset,
        sms_url=values.unset,
        voice_fallback_method=values.unset,
        voice_fallback_url=values.unset,
        voice_method=values.unset,
        voice_url=values.unset,
        reset_status=values.unset,
        account_sid=values.unset,
    ):
        """
        Asynchronous coroutine to update the SimInstance

        :param str unique_name: An application-defined string that uniquely identifies the resource. It can be used in place of the `sid` in the URL path to address the resource.
        :param str callback_method: The HTTP method we should use to call `callback_url`. Can be: `POST` or `GET`. The default is `POST`.
        :param str callback_url: The URL we should call using the `callback_url` when the SIM has finished updating. When the SIM transitions from `new` to `ready` or from any status to `deactivated`, we call this URL when the status changes to an intermediate status (`ready` or `deactivated`) and again when the status changes to its final status (`active` or `canceled`).
        :param str friendly_name: A descriptive string that you create to describe the Sim resource. It does not need to be unique.
        :param str rate_plan: The SID or unique name of the [RatePlan resource](https://www.twilio.com/docs/wireless/api/rateplan-resource) to which the Sim resource should be assigned.
        :param SimInstance.Status status:
        :param str commands_callback_method: The HTTP method we should use to call `commands_callback_url`. Can be: `POST` or `GET`. The default is `POST`.
        :param str commands_callback_url: The URL we should call using the `commands_callback_method` when the SIM sends a [Command](https://www.twilio.com/docs/wireless/api/command-resource). Your server should respond with an HTTP status code in the 200 range; any response body is ignored.
        :param str sms_fallback_method: The HTTP method we should use to call `sms_fallback_url`. Can be: `GET` or `POST`. Default is `POST`.
        :param str sms_fallback_url: The URL we should call using the `sms_fallback_method` when an error occurs while retrieving or executing the TwiML requested from `sms_url`.
        :param str sms_method: The HTTP method we should use to call `sms_url`. Can be: `GET` or `POST`. Default is `POST`.
        :param str sms_url: The URL we should call using the `sms_method` when the SIM-connected device sends an SMS message that is not a [Command](https://www.twilio.com/docs/wireless/api/command-resource).
        :param str voice_fallback_method: Deprecated.
        :param str voice_fallback_url: Deprecated.
        :param str voice_method: Deprecated.
        :param str voice_url: Deprecated.
        :param SimInstance.ResetStatus reset_status:
        :param str account_sid: The SID of the [Account](https://www.twilio.com/docs/iam/api/account) to which the Sim resource should belong. The Account SID can only be that of the requesting Account or that of a [Subaccount](https://www.twilio.com/docs/iam/api/subaccounts) of the requesting Account. Only valid when the Sim resource's status is `new`. For more information, see the [Move SIMs between Subaccounts documentation](https://www.twilio.com/docs/wireless/api/sim-resource#move-sims-between-subaccounts).

        :returns: The updated SimInstance
        :rtype: twilio.rest.wireless.v1.sim.SimInstance
        """
        data = values.of(
            {
                "UniqueName": unique_name,
                "CallbackMethod": callback_method,
                "CallbackUrl": callback_url,
                "FriendlyName": friendly_name,
                "RatePlan": rate_plan,
                "Status": status,
                "CommandsCallbackMethod": commands_callback_method,
                "CommandsCallbackUrl": commands_callback_url,
                "SmsFallbackMethod": sms_fallback_method,
                "SmsFallbackUrl": sms_fallback_url,
                "SmsMethod": sms_method,
                "SmsUrl": sms_url,
                "VoiceFallbackMethod": voice_fallback_method,
                "VoiceFallbackUrl": voice_fallback_url,
                "VoiceMethod": voice_method,
                "VoiceUrl": voice_url,
                "ResetStatus": reset_status,
                "AccountSid": account_sid,
            }
        )

        payload = await self._version.update_async(
            method="POST",
            uri=self._uri,
            data=data,
        )

        return SimInstance(self._version, payload, sid=self._solution["sid"])

    @property
    def data_sessions(self):
        """
        Access the data_sessions

        :returns: twilio.rest.wireless.v1.sim.DataSessionList
        :rtype: twilio.rest.wireless.v1.sim.DataSessionList
        """
        if self._data_sessions is None:
            self._data_sessions = DataSessionList(
                self._version,
                self._solution["sid"],
            )
        return self._data_sessions

    @property
    def usage_records(self):
        """
        Access the usage_records

        :returns: twilio.rest.wireless.v1.sim.UsageRecordList
        :rtype: twilio.rest.wireless.v1.sim.UsageRecordList
        """
        if self._usage_records is None:
            self._usage_records = UsageRecordList(
                self._version,
                self._solution["sid"],
            )
        return self._usage_records

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        context = " ".join("{}={}".format(k, v) for k, v in self._solution.items())
        return "<Twilio.Wireless.V1.SimContext {}>".format(context)


class SimPage(Page):
    def get_instance(self, payload):
        """
        Build an instance of SimInstance

        :param dict payload: Payload response from the API

        :returns: twilio.rest.wireless.v1.sim.SimInstance
        :rtype: twilio.rest.wireless.v1.sim.SimInstance
        """
        return SimInstance(self._version, payload)

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        return "<Twilio.Wireless.V1.SimPage>"


class SimList(ListResource):
    def __init__(self, version: Version):
        """
        Initialize the SimList

        :param Version version: Version that contains the resource

        :returns: twilio.rest.wireless.v1.sim.SimList
        :rtype: twilio.rest.wireless.v1.sim.SimList
        """
        super().__init__(version)

        self._uri = "/Sims"

    def stream(
        self,
        status=values.unset,
        iccid=values.unset,
        rate_plan=values.unset,
        e_id=values.unset,
        sim_registration_code=values.unset,
        limit=None,
        page_size=None,
    ):
        """
        Streams SimInstance records from the API as a generator stream.
        This operation lazily loads records as efficiently as possible until the limit
        is reached.
        The results are returned as a generator, so this operation is memory efficient.

        :param SimInstance.Status status: Only return Sim resources with this status.
        :param str iccid: Only return Sim resources with this ICCID. This will return a list with a maximum size of 1.
        :param str rate_plan: The SID or unique name of a [RatePlan resource](https://www.twilio.com/docs/wireless/api/rateplan-resource). Only return Sim resources assigned to this RatePlan resource.
        :param str e_id: Deprecated.
        :param str sim_registration_code: Only return Sim resources with this registration code. This will return a list with a maximum size of 1.
        :param int limit: Upper limit for the number of records to return. stream()
                          guarantees to never return more than limit.  Default is no limit
        :param int page_size: Number of records to fetch per request, when not set will use
                              the default value of 50 records.  If no page_size is defined
                              but a limit is defined, stream() will attempt to read the
                              limit with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        :rtype: list[twilio.rest.wireless.v1.sim.SimInstance]
        """
        limits = self._version.read_limits(limit, page_size)
        page = self.page(
            status=status,
            iccid=iccid,
            rate_plan=rate_plan,
            e_id=e_id,
            sim_registration_code=sim_registration_code,
            page_size=limits["page_size"],
        )

        return self._version.stream(page, limits["limit"])

    async def stream_async(
        self,
        status=values.unset,
        iccid=values.unset,
        rate_plan=values.unset,
        e_id=values.unset,
        sim_registration_code=values.unset,
        limit=None,
        page_size=None,
    ):
        """
        Asynchronously streams SimInstance records from the API as a generator stream.
        This operation lazily loads records as efficiently as possible until the limit
        is reached.
        The results are returned as a generator, so this operation is memory efficient.

        :param SimInstance.Status status: Only return Sim resources with this status.
        :param str iccid: Only return Sim resources with this ICCID. This will return a list with a maximum size of 1.
        :param str rate_plan: The SID or unique name of a [RatePlan resource](https://www.twilio.com/docs/wireless/api/rateplan-resource). Only return Sim resources assigned to this RatePlan resource.
        :param str e_id: Deprecated.
        :param str sim_registration_code: Only return Sim resources with this registration code. This will return a list with a maximum size of 1.
        :param int limit: Upper limit for the number of records to return. stream()
                          guarantees to never return more than limit.  Default is no limit
        :param int page_size: Number of records to fetch per request, when not set will use
                              the default value of 50 records.  If no page_size is defined
                              but a limit is defined, stream() will attempt to read the
                              limit with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        :rtype: list[twilio.rest.wireless.v1.sim.SimInstance]
        """
        limits = self._version.read_limits(limit, page_size)
        page = await self.page_async(
            status=status,
            iccid=iccid,
            rate_plan=rate_plan,
            e_id=e_id,
            sim_registration_code=sim_registration_code,
            page_size=limits["page_size"],
        )

        return await self._version.stream_async(page, limits["limit"])

    def list(
        self,
        status=values.unset,
        iccid=values.unset,
        rate_plan=values.unset,
        e_id=values.unset,
        sim_registration_code=values.unset,
        limit=None,
        page_size=None,
    ):
        """
        Lists SimInstance records from the API as a list.
        Unlike stream(), this operation is eager and will load `limit` records into
        memory before returning.

        :param SimInstance.Status status: Only return Sim resources with this status.
        :param str iccid: Only return Sim resources with this ICCID. This will return a list with a maximum size of 1.
        :param str rate_plan: The SID or unique name of a [RatePlan resource](https://www.twilio.com/docs/wireless/api/rateplan-resource). Only return Sim resources assigned to this RatePlan resource.
        :param str e_id: Deprecated.
        :param str sim_registration_code: Only return Sim resources with this registration code. This will return a list with a maximum size of 1.
        :param int limit: Upper limit for the number of records to return. list() guarantees
                          never to return more than limit.  Default is no limit
        :param int page_size: Number of records to fetch per request, when not set will use
                              the default value of 50 records.  If no page_size is defined
                              but a limit is defined, list() will attempt to read the limit
                              with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        :rtype: list[twilio.rest.wireless.v1.sim.SimInstance]
        """
        return list(
            self.stream(
                status=status,
                iccid=iccid,
                rate_plan=rate_plan,
                e_id=e_id,
                sim_registration_code=sim_registration_code,
                limit=limit,
                page_size=page_size,
            )
        )

    async def list_async(
        self,
        status=values.unset,
        iccid=values.unset,
        rate_plan=values.unset,
        e_id=values.unset,
        sim_registration_code=values.unset,
        limit=None,
        page_size=None,
    ):
        """
        Asynchronously lists SimInstance records from the API as a list.
        Unlike stream(), this operation is eager and will load `limit` records into
        memory before returning.

        :param SimInstance.Status status: Only return Sim resources with this status.
        :param str iccid: Only return Sim resources with this ICCID. This will return a list with a maximum size of 1.
        :param str rate_plan: The SID or unique name of a [RatePlan resource](https://www.twilio.com/docs/wireless/api/rateplan-resource). Only return Sim resources assigned to this RatePlan resource.
        :param str e_id: Deprecated.
        :param str sim_registration_code: Only return Sim resources with this registration code. This will return a list with a maximum size of 1.
        :param int limit: Upper limit for the number of records to return. list() guarantees
                          never to return more than limit.  Default is no limit
        :param int page_size: Number of records to fetch per request, when not set will use
                              the default value of 50 records.  If no page_size is defined
                              but a limit is defined, list() will attempt to read the limit
                              with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        :rtype: list[twilio.rest.wireless.v1.sim.SimInstance]
        """
        return list(
            await self.stream_async(
                status=status,
                iccid=iccid,
                rate_plan=rate_plan,
                e_id=e_id,
                sim_registration_code=sim_registration_code,
                limit=limit,
                page_size=page_size,
            )
        )

    def page(
        self,
        status=values.unset,
        iccid=values.unset,
        rate_plan=values.unset,
        e_id=values.unset,
        sim_registration_code=values.unset,
        page_token=values.unset,
        page_number=values.unset,
        page_size=values.unset,
    ):
        """
        Retrieve a single page of SimInstance records from the API.
        Request is executed immediately

        :param SimInstance.Status status: Only return Sim resources with this status.
        :param str iccid: Only return Sim resources with this ICCID. This will return a list with a maximum size of 1.
        :param str rate_plan: The SID or unique name of a [RatePlan resource](https://www.twilio.com/docs/wireless/api/rateplan-resource). Only return Sim resources assigned to this RatePlan resource.
        :param str e_id: Deprecated.
        :param str sim_registration_code: Only return Sim resources with this registration code. This will return a list with a maximum size of 1.
        :param str page_token: PageToken provided by the API
        :param int page_number: Page Number, this value is simply for client state
        :param int page_size: Number of records to return, defaults to 50

        :returns: Page of SimInstance
        :rtype: twilio.rest.wireless.v1.sim.SimPage
        """
        data = values.of(
            {
                "Status": status,
                "Iccid": iccid,
                "RatePlan": rate_plan,
                "EId": e_id,
                "SimRegistrationCode": sim_registration_code,
                "PageToken": page_token,
                "Page": page_number,
                "PageSize": page_size,
            }
        )

        response = self._version.page(method="GET", uri=self._uri, params=data)
        return SimPage(self._version, response)

    async def page_async(
        self,
        status=values.unset,
        iccid=values.unset,
        rate_plan=values.unset,
        e_id=values.unset,
        sim_registration_code=values.unset,
        page_token=values.unset,
        page_number=values.unset,
        page_size=values.unset,
    ):
        """
        Asynchronously retrieve a single page of SimInstance records from the API.
        Request is executed immediately

        :param SimInstance.Status status: Only return Sim resources with this status.
        :param str iccid: Only return Sim resources with this ICCID. This will return a list with a maximum size of 1.
        :param str rate_plan: The SID or unique name of a [RatePlan resource](https://www.twilio.com/docs/wireless/api/rateplan-resource). Only return Sim resources assigned to this RatePlan resource.
        :param str e_id: Deprecated.
        :param str sim_registration_code: Only return Sim resources with this registration code. This will return a list with a maximum size of 1.
        :param str page_token: PageToken provided by the API
        :param int page_number: Page Number, this value is simply for client state
        :param int page_size: Number of records to return, defaults to 50

        :returns: Page of SimInstance
        :rtype: twilio.rest.wireless.v1.sim.SimPage
        """
        data = values.of(
            {
                "Status": status,
                "Iccid": iccid,
                "RatePlan": rate_plan,
                "EId": e_id,
                "SimRegistrationCode": sim_registration_code,
                "PageToken": page_token,
                "Page": page_number,
                "PageSize": page_size,
            }
        )

        response = await self._version.page_async(
            method="GET", uri=self._uri, params=data
        )
        return SimPage(self._version, response)

    def get_page(self, target_url):
        """
        Retrieve a specific page of SimInstance records from the API.
        Request is executed immediately

        :param str target_url: API-generated URL for the requested results page

        :returns: Page of SimInstance
        :rtype: twilio.rest.wireless.v1.sim.SimPage
        """
        response = self._version.domain.twilio.request("GET", target_url)
        return SimPage(self._version, response)

    async def get_page_async(self, target_url):
        """
        Asynchronously retrieve a specific page of SimInstance records from the API.
        Request is executed immediately

        :param str target_url: API-generated URL for the requested results page

        :returns: Page of SimInstance
        :rtype: twilio.rest.wireless.v1.sim.SimPage
        """
        response = await self._version.domain.twilio.request_async("GET", target_url)
        return SimPage(self._version, response)

    def get(self, sid):
        """
        Constructs a SimContext

        :param sid: The SID or the `unique_name` of the Sim resource to update.

        :returns: twilio.rest.wireless.v1.sim.SimContext
        :rtype: twilio.rest.wireless.v1.sim.SimContext
        """
        return SimContext(self._version, sid=sid)

    def __call__(self, sid):
        """
        Constructs a SimContext

        :param sid: The SID or the `unique_name` of the Sim resource to update.

        :returns: twilio.rest.wireless.v1.sim.SimContext
        :rtype: twilio.rest.wireless.v1.sim.SimContext
        """
        return SimContext(self._version, sid=sid)

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        return "<Twilio.Wireless.V1.SimList>"
