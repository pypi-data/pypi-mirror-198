r"""
    This code was generated by
   ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
    |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
    |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \

    Twilio - Preview
    This is the public Twilio REST API.

    NOTE: This class is auto generated by OpenAPI Generator.
    https://openapi-generator.tech
    Do not edit the class manually.
"""


from typing import Optional
from twilio.base.instance_context import InstanceContext
from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
from twilio.base.version import Version


class DialogueInstance(InstanceResource):
    def __init__(self, version, payload, assistant_sid: str, sid: Optional[str] = None):
        """
        Initialize the DialogueInstance

        :returns: twilio.rest.preview.understand.assistant.dialogue.DialogueInstance
        :rtype: twilio.rest.preview.understand.assistant.dialogue.DialogueInstance
        """
        super().__init__(version)

        self._properties = {
            "account_sid": payload.get("account_sid"),
            "assistant_sid": payload.get("assistant_sid"),
            "sid": payload.get("sid"),
            "data": payload.get("data"),
            "url": payload.get("url"),
        }

        self._solution = {
            "assistant_sid": assistant_sid,
            "sid": sid or self._properties["sid"],
        }
        self._context: Optional[DialogueContext] = None

    @property
    def _proxy(self):
        """
        Generate an instance context for the instance, the context is capable of
        performing various actions. All instance actions are proxied to the context

        :returns: DialogueContext for this DialogueInstance
        :rtype: twilio.rest.preview.understand.assistant.dialogue.DialogueContext
        """
        if self._context is None:
            self._context = DialogueContext(
                self._version,
                assistant_sid=self._solution["assistant_sid"],
                sid=self._solution["sid"],
            )
        return self._context

    @property
    def account_sid(self):
        """
        :returns: The unique ID of the Account that created this Field.
        :rtype: str
        """
        return self._properties["account_sid"]

    @property
    def assistant_sid(self):
        """
        :returns: The unique ID of the parent Assistant.
        :rtype: str
        """
        return self._properties["assistant_sid"]

    @property
    def sid(self):
        """
        :returns: The unique ID of the Dialogue
        :rtype: str
        """
        return self._properties["sid"]

    @property
    def data(self):
        """
        :returns: The dialogue memory object as json
        :rtype: dict
        """
        return self._properties["data"]

    @property
    def url(self):
        """
        :returns:
        :rtype: str
        """
        return self._properties["url"]

    def fetch(self):
        """
        Fetch the DialogueInstance


        :returns: The fetched DialogueInstance
        :rtype: twilio.rest.preview.understand.assistant.dialogue.DialogueInstance
        """
        return self._proxy.fetch()

    async def fetch_async(self):
        """
        Asynchronous coroutine to fetch the DialogueInstance


        :returns: The fetched DialogueInstance
        :rtype: twilio.rest.preview.understand.assistant.dialogue.DialogueInstance
        """
        return await self._proxy.fetch_async()

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        context = " ".join("{}={}".format(k, v) for k, v in self._solution.items())
        return "<Twilio.Preview.Understand.DialogueInstance {}>".format(context)


class DialogueContext(InstanceContext):
    def __init__(self, version: Version, assistant_sid: str, sid: str):
        """
        Initialize the DialogueContext

        :param Version version: Version that contains the resource
        :param assistant_sid:
        :param sid:

        :returns: twilio.rest.preview.understand.assistant.dialogue.DialogueContext
        :rtype: twilio.rest.preview.understand.assistant.dialogue.DialogueContext
        """
        super().__init__(version)

        # Path Solution
        self._solution = {
            "assistant_sid": assistant_sid,
            "sid": sid,
        }
        self._uri = "/Assistants/{assistant_sid}/Dialogues/{sid}".format(
            **self._solution
        )

    def fetch(self):
        """
        Fetch the DialogueInstance


        :returns: The fetched DialogueInstance
        :rtype: twilio.rest.preview.understand.assistant.dialogue.DialogueInstance
        """

        payload = self._version.fetch(
            method="GET",
            uri=self._uri,
        )

        return DialogueInstance(
            self._version,
            payload,
            assistant_sid=self._solution["assistant_sid"],
            sid=self._solution["sid"],
        )

    async def fetch_async(self):
        """
        Asynchronous coroutine to fetch the DialogueInstance


        :returns: The fetched DialogueInstance
        :rtype: twilio.rest.preview.understand.assistant.dialogue.DialogueInstance
        """

        payload = await self._version.fetch_async(
            method="GET",
            uri=self._uri,
        )

        return DialogueInstance(
            self._version,
            payload,
            assistant_sid=self._solution["assistant_sid"],
            sid=self._solution["sid"],
        )

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        context = " ".join("{}={}".format(k, v) for k, v in self._solution.items())
        return "<Twilio.Preview.Understand.DialogueContext {}>".format(context)


class DialogueList(ListResource):
    def __init__(self, version: Version, assistant_sid: str):
        """
        Initialize the DialogueList

        :param Version version: Version that contains the resource
        :param assistant_sid:

        :returns: twilio.rest.preview.understand.assistant.dialogue.DialogueList
        :rtype: twilio.rest.preview.understand.assistant.dialogue.DialogueList
        """
        super().__init__(version)

        # Path Solution
        self._solution = {
            "assistant_sid": assistant_sid,
        }

    def get(self, sid):
        """
        Constructs a DialogueContext

        :param sid:

        :returns: twilio.rest.preview.understand.assistant.dialogue.DialogueContext
        :rtype: twilio.rest.preview.understand.assistant.dialogue.DialogueContext
        """
        return DialogueContext(
            self._version, assistant_sid=self._solution["assistant_sid"], sid=sid
        )

    def __call__(self, sid):
        """
        Constructs a DialogueContext

        :param sid:

        :returns: twilio.rest.preview.understand.assistant.dialogue.DialogueContext
        :rtype: twilio.rest.preview.understand.assistant.dialogue.DialogueContext
        """
        return DialogueContext(
            self._version, assistant_sid=self._solution["assistant_sid"], sid=sid
        )

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        return "<Twilio.Preview.Understand.DialogueList>"
