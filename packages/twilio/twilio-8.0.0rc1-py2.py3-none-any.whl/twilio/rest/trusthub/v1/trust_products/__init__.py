r"""
    This code was generated by
   ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
    |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
    |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \

    Twilio - Trusthub
    This is the public Twilio REST API.

    NOTE: This class is auto generated by OpenAPI Generator.
    https://openapi-generator.tech
    Do not edit the class manually.
"""


from typing import Optional
from twilio.base import deserialize, values
from twilio.base.instance_context import InstanceContext
from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
from twilio.base.version import Version
from twilio.base.page import Page
from twilio.rest.trusthub.v1.trust_products.trust_products_channel_endpoint_assignment import (
    TrustProductsChannelEndpointAssignmentList,
)
from twilio.rest.trusthub.v1.trust_products.trust_products_entity_assignments import (
    TrustProductsEntityAssignmentsList,
)
from twilio.rest.trusthub.v1.trust_products.trust_products_evaluations import (
    TrustProductsEvaluationsList,
)


class TrustProductsInstance(InstanceResource):
    class Status(object):
        DRAFT = "draft"
        PENDING_REVIEW = "pending-review"
        IN_REVIEW = "in-review"
        TWILIO_REJECTED = "twilio-rejected"
        TWILIO_APPROVED = "twilio-approved"

    def __init__(self, version, payload, sid: Optional[str] = None):
        """
        Initialize the TrustProductsInstance

        :returns: twilio.rest.trusthub.v1.trust_products.TrustProductsInstance
        :rtype: twilio.rest.trusthub.v1.trust_products.TrustProductsInstance
        """
        super().__init__(version)

        self._properties = {
            "sid": payload.get("sid"),
            "account_sid": payload.get("account_sid"),
            "policy_sid": payload.get("policy_sid"),
            "friendly_name": payload.get("friendly_name"),
            "status": payload.get("status"),
            "valid_until": deserialize.iso8601_datetime(payload.get("valid_until")),
            "email": payload.get("email"),
            "status_callback": payload.get("status_callback"),
            "date_created": deserialize.iso8601_datetime(payload.get("date_created")),
            "date_updated": deserialize.iso8601_datetime(payload.get("date_updated")),
            "url": payload.get("url"),
            "links": payload.get("links"),
        }

        self._solution = {
            "sid": sid or self._properties["sid"],
        }
        self._context: Optional[TrustProductsContext] = None

    @property
    def _proxy(self):
        """
        Generate an instance context for the instance, the context is capable of
        performing various actions. All instance actions are proxied to the context

        :returns: TrustProductsContext for this TrustProductsInstance
        :rtype: twilio.rest.trusthub.v1.trust_products.TrustProductsContext
        """
        if self._context is None:
            self._context = TrustProductsContext(
                self._version,
                sid=self._solution["sid"],
            )
        return self._context

    @property
    def sid(self):
        """
        :returns: The unique string that we created to identify the Customer-Profile resource.
        :rtype: str
        """
        return self._properties["sid"]

    @property
    def account_sid(self):
        """
        :returns: The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Customer-Profile resource.
        :rtype: str
        """
        return self._properties["account_sid"]

    @property
    def policy_sid(self):
        """
        :returns: The unique string of a policy that is associated to the Customer-Profile resource.
        :rtype: str
        """
        return self._properties["policy_sid"]

    @property
    def friendly_name(self):
        """
        :returns: The string that you assigned to describe the resource.
        :rtype: str
        """
        return self._properties["friendly_name"]

    @property
    def status(self):
        """
        :returns:
        :rtype: TrustProductsInstance.Status
        """
        return self._properties["status"]

    @property
    def valid_until(self):
        """
        :returns: The date and time in GMT in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format when the resource will be valid until.
        :rtype: datetime
        """
        return self._properties["valid_until"]

    @property
    def email(self):
        """
        :returns: The email address that will receive updates when the Customer-Profile resource changes status.
        :rtype: str
        """
        return self._properties["email"]

    @property
    def status_callback(self):
        """
        :returns: The URL we call to inform your application of status changes.
        :rtype: str
        """
        return self._properties["status_callback"]

    @property
    def date_created(self):
        """
        :returns: The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
        :rtype: datetime
        """
        return self._properties["date_created"]

    @property
    def date_updated(self):
        """
        :returns: The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
        :rtype: datetime
        """
        return self._properties["date_updated"]

    @property
    def url(self):
        """
        :returns: The absolute URL of the Customer-Profile resource.
        :rtype: str
        """
        return self._properties["url"]

    @property
    def links(self):
        """
        :returns: The URLs of the Assigned Items of the Customer-Profile resource.
        :rtype: dict
        """
        return self._properties["links"]

    def delete(self):
        """
        Deletes the TrustProductsInstance


        :returns: True if delete succeeds, False otherwise
        :rtype: bool
        """
        return self._proxy.delete()

    async def delete_async(self):
        """
        Asynchronous coroutine that deletes the TrustProductsInstance


        :returns: True if delete succeeds, False otherwise
        :rtype: bool
        """
        return await self._proxy.delete_async()

    def fetch(self):
        """
        Fetch the TrustProductsInstance


        :returns: The fetched TrustProductsInstance
        :rtype: twilio.rest.trusthub.v1.trust_products.TrustProductsInstance
        """
        return self._proxy.fetch()

    async def fetch_async(self):
        """
        Asynchronous coroutine to fetch the TrustProductsInstance


        :returns: The fetched TrustProductsInstance
        :rtype: twilio.rest.trusthub.v1.trust_products.TrustProductsInstance
        """
        return await self._proxy.fetch_async()

    def update(
        self,
        status=values.unset,
        status_callback=values.unset,
        friendly_name=values.unset,
        email=values.unset,
    ):
        """
        Update the TrustProductsInstance

        :param TrustProductsInstance.Status status:
        :param str status_callback: The URL we call to inform your application of status changes.
        :param str friendly_name: The string that you assigned to describe the resource.
        :param str email: The email address that will receive updates when the Customer-Profile resource changes status.

        :returns: The updated TrustProductsInstance
        :rtype: twilio.rest.trusthub.v1.trust_products.TrustProductsInstance
        """
        return self._proxy.update(
            status=status,
            status_callback=status_callback,
            friendly_name=friendly_name,
            email=email,
        )

    async def update_async(
        self,
        status=values.unset,
        status_callback=values.unset,
        friendly_name=values.unset,
        email=values.unset,
    ):
        """
        Asynchronous coroutine to update the TrustProductsInstance

        :param TrustProductsInstance.Status status:
        :param str status_callback: The URL we call to inform your application of status changes.
        :param str friendly_name: The string that you assigned to describe the resource.
        :param str email: The email address that will receive updates when the Customer-Profile resource changes status.

        :returns: The updated TrustProductsInstance
        :rtype: twilio.rest.trusthub.v1.trust_products.TrustProductsInstance
        """
        return await self._proxy.update_async(
            status=status,
            status_callback=status_callback,
            friendly_name=friendly_name,
            email=email,
        )

    @property
    def trust_products_channel_endpoint_assignment(self):
        """
        Access the trust_products_channel_endpoint_assignment

        :returns: twilio.rest.trusthub.v1.trust_products.TrustProductsChannelEndpointAssignmentList
        :rtype: twilio.rest.trusthub.v1.trust_products.TrustProductsChannelEndpointAssignmentList
        """
        return self._proxy.trust_products_channel_endpoint_assignment

    @property
    def trust_products_entity_assignments(self):
        """
        Access the trust_products_entity_assignments

        :returns: twilio.rest.trusthub.v1.trust_products.TrustProductsEntityAssignmentsList
        :rtype: twilio.rest.trusthub.v1.trust_products.TrustProductsEntityAssignmentsList
        """
        return self._proxy.trust_products_entity_assignments

    @property
    def trust_products_evaluations(self):
        """
        Access the trust_products_evaluations

        :returns: twilio.rest.trusthub.v1.trust_products.TrustProductsEvaluationsList
        :rtype: twilio.rest.trusthub.v1.trust_products.TrustProductsEvaluationsList
        """
        return self._proxy.trust_products_evaluations

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        context = " ".join("{}={}".format(k, v) for k, v in self._solution.items())
        return "<Twilio.Trusthub.V1.TrustProductsInstance {}>".format(context)


class TrustProductsContext(InstanceContext):
    def __init__(self, version: Version, sid: str):
        """
        Initialize the TrustProductsContext

        :param Version version: Version that contains the resource
        :param sid: The unique string that we created to identify the Customer-Profile resource.

        :returns: twilio.rest.trusthub.v1.trust_products.TrustProductsContext
        :rtype: twilio.rest.trusthub.v1.trust_products.TrustProductsContext
        """
        super().__init__(version)

        # Path Solution
        self._solution = {
            "sid": sid,
        }
        self._uri = "/TrustProducts/{sid}".format(**self._solution)

        self._trust_products_channel_endpoint_assignment: Optional[
            TrustProductsChannelEndpointAssignmentList
        ] = None
        self._trust_products_entity_assignments: Optional[
            TrustProductsEntityAssignmentsList
        ] = None
        self._trust_products_evaluations: Optional[TrustProductsEvaluationsList] = None

    def delete(self):
        """
        Deletes the TrustProductsInstance


        :returns: True if delete succeeds, False otherwise
        :rtype: bool
        """
        return self._version.delete(
            method="DELETE",
            uri=self._uri,
        )

    async def delete_async(self):
        """
        Asynchronous coroutine that deletes the TrustProductsInstance


        :returns: True if delete succeeds, False otherwise
        :rtype: bool
        """
        return await self._version.delete_async(
            method="DELETE",
            uri=self._uri,
        )

    def fetch(self):
        """
        Fetch the TrustProductsInstance


        :returns: The fetched TrustProductsInstance
        :rtype: twilio.rest.trusthub.v1.trust_products.TrustProductsInstance
        """

        payload = self._version.fetch(
            method="GET",
            uri=self._uri,
        )

        return TrustProductsInstance(
            self._version,
            payload,
            sid=self._solution["sid"],
        )

    async def fetch_async(self):
        """
        Asynchronous coroutine to fetch the TrustProductsInstance


        :returns: The fetched TrustProductsInstance
        :rtype: twilio.rest.trusthub.v1.trust_products.TrustProductsInstance
        """

        payload = await self._version.fetch_async(
            method="GET",
            uri=self._uri,
        )

        return TrustProductsInstance(
            self._version,
            payload,
            sid=self._solution["sid"],
        )

    def update(
        self,
        status=values.unset,
        status_callback=values.unset,
        friendly_name=values.unset,
        email=values.unset,
    ):
        """
        Update the TrustProductsInstance

        :param TrustProductsInstance.Status status:
        :param str status_callback: The URL we call to inform your application of status changes.
        :param str friendly_name: The string that you assigned to describe the resource.
        :param str email: The email address that will receive updates when the Customer-Profile resource changes status.

        :returns: The updated TrustProductsInstance
        :rtype: twilio.rest.trusthub.v1.trust_products.TrustProductsInstance
        """
        data = values.of(
            {
                "Status": status,
                "StatusCallback": status_callback,
                "FriendlyName": friendly_name,
                "Email": email,
            }
        )

        payload = self._version.update(
            method="POST",
            uri=self._uri,
            data=data,
        )

        return TrustProductsInstance(self._version, payload, sid=self._solution["sid"])

    async def update_async(
        self,
        status=values.unset,
        status_callback=values.unset,
        friendly_name=values.unset,
        email=values.unset,
    ):
        """
        Asynchronous coroutine to update the TrustProductsInstance

        :param TrustProductsInstance.Status status:
        :param str status_callback: The URL we call to inform your application of status changes.
        :param str friendly_name: The string that you assigned to describe the resource.
        :param str email: The email address that will receive updates when the Customer-Profile resource changes status.

        :returns: The updated TrustProductsInstance
        :rtype: twilio.rest.trusthub.v1.trust_products.TrustProductsInstance
        """
        data = values.of(
            {
                "Status": status,
                "StatusCallback": status_callback,
                "FriendlyName": friendly_name,
                "Email": email,
            }
        )

        payload = await self._version.update_async(
            method="POST",
            uri=self._uri,
            data=data,
        )

        return TrustProductsInstance(self._version, payload, sid=self._solution["sid"])

    @property
    def trust_products_channel_endpoint_assignment(self):
        """
        Access the trust_products_channel_endpoint_assignment

        :returns: twilio.rest.trusthub.v1.trust_products.TrustProductsChannelEndpointAssignmentList
        :rtype: twilio.rest.trusthub.v1.trust_products.TrustProductsChannelEndpointAssignmentList
        """
        if self._trust_products_channel_endpoint_assignment is None:
            self._trust_products_channel_endpoint_assignment = (
                TrustProductsChannelEndpointAssignmentList(
                    self._version,
                    self._solution["sid"],
                )
            )
        return self._trust_products_channel_endpoint_assignment

    @property
    def trust_products_entity_assignments(self):
        """
        Access the trust_products_entity_assignments

        :returns: twilio.rest.trusthub.v1.trust_products.TrustProductsEntityAssignmentsList
        :rtype: twilio.rest.trusthub.v1.trust_products.TrustProductsEntityAssignmentsList
        """
        if self._trust_products_entity_assignments is None:
            self._trust_products_entity_assignments = (
                TrustProductsEntityAssignmentsList(
                    self._version,
                    self._solution["sid"],
                )
            )
        return self._trust_products_entity_assignments

    @property
    def trust_products_evaluations(self):
        """
        Access the trust_products_evaluations

        :returns: twilio.rest.trusthub.v1.trust_products.TrustProductsEvaluationsList
        :rtype: twilio.rest.trusthub.v1.trust_products.TrustProductsEvaluationsList
        """
        if self._trust_products_evaluations is None:
            self._trust_products_evaluations = TrustProductsEvaluationsList(
                self._version,
                self._solution["sid"],
            )
        return self._trust_products_evaluations

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        context = " ".join("{}={}".format(k, v) for k, v in self._solution.items())
        return "<Twilio.Trusthub.V1.TrustProductsContext {}>".format(context)


class TrustProductsPage(Page):
    def get_instance(self, payload):
        """
        Build an instance of TrustProductsInstance

        :param dict payload: Payload response from the API

        :returns: twilio.rest.trusthub.v1.trust_products.TrustProductsInstance
        :rtype: twilio.rest.trusthub.v1.trust_products.TrustProductsInstance
        """
        return TrustProductsInstance(self._version, payload)

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        return "<Twilio.Trusthub.V1.TrustProductsPage>"


class TrustProductsList(ListResource):
    def __init__(self, version: Version):
        """
        Initialize the TrustProductsList

        :param Version version: Version that contains the resource

        :returns: twilio.rest.trusthub.v1.trust_products.TrustProductsList
        :rtype: twilio.rest.trusthub.v1.trust_products.TrustProductsList
        """
        super().__init__(version)

        self._uri = "/TrustProducts"

    def create(self, friendly_name, email, policy_sid, status_callback=values.unset):
        """
        Create the TrustProductsInstance

        :param str friendly_name: The string that you assigned to describe the resource.
        :param str email: The email address that will receive updates when the Customer-Profile resource changes status.
        :param str policy_sid: The unique string of a policy that is associated to the Customer-Profile resource.
        :param str status_callback: The URL we call to inform your application of status changes.

        :returns: The created TrustProductsInstance
        :rtype: twilio.rest.trusthub.v1.trust_products.TrustProductsInstance
        """
        data = values.of(
            {
                "FriendlyName": friendly_name,
                "Email": email,
                "PolicySid": policy_sid,
                "StatusCallback": status_callback,
            }
        )

        payload = self._version.create(
            method="POST",
            uri=self._uri,
            data=data,
        )

        return TrustProductsInstance(self._version, payload)

    async def create_async(
        self, friendly_name, email, policy_sid, status_callback=values.unset
    ):
        """
        Asynchronously create the TrustProductsInstance

        :param str friendly_name: The string that you assigned to describe the resource.
        :param str email: The email address that will receive updates when the Customer-Profile resource changes status.
        :param str policy_sid: The unique string of a policy that is associated to the Customer-Profile resource.
        :param str status_callback: The URL we call to inform your application of status changes.

        :returns: The created TrustProductsInstance
        :rtype: twilio.rest.trusthub.v1.trust_products.TrustProductsInstance
        """
        data = values.of(
            {
                "FriendlyName": friendly_name,
                "Email": email,
                "PolicySid": policy_sid,
                "StatusCallback": status_callback,
            }
        )

        payload = await self._version.create_async(
            method="POST",
            uri=self._uri,
            data=data,
        )

        return TrustProductsInstance(self._version, payload)

    def stream(
        self,
        status=values.unset,
        friendly_name=values.unset,
        policy_sid=values.unset,
        limit=None,
        page_size=None,
    ):
        """
        Streams TrustProductsInstance records from the API as a generator stream.
        This operation lazily loads records as efficiently as possible until the limit
        is reached.
        The results are returned as a generator, so this operation is memory efficient.

        :param TrustProductsInstance.Status status: The verification status of the Customer-Profile resource.
        :param str friendly_name: The string that you assigned to describe the resource.
        :param str policy_sid: The unique string of a policy that is associated to the Customer-Profile resource.
        :param int limit: Upper limit for the number of records to return. stream()
                          guarantees to never return more than limit.  Default is no limit
        :param int page_size: Number of records to fetch per request, when not set will use
                              the default value of 50 records.  If no page_size is defined
                              but a limit is defined, stream() will attempt to read the
                              limit with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        :rtype: list[twilio.rest.trusthub.v1.trust_products.TrustProductsInstance]
        """
        limits = self._version.read_limits(limit, page_size)
        page = self.page(
            status=status,
            friendly_name=friendly_name,
            policy_sid=policy_sid,
            page_size=limits["page_size"],
        )

        return self._version.stream(page, limits["limit"])

    async def stream_async(
        self,
        status=values.unset,
        friendly_name=values.unset,
        policy_sid=values.unset,
        limit=None,
        page_size=None,
    ):
        """
        Asynchronously streams TrustProductsInstance records from the API as a generator stream.
        This operation lazily loads records as efficiently as possible until the limit
        is reached.
        The results are returned as a generator, so this operation is memory efficient.

        :param TrustProductsInstance.Status status: The verification status of the Customer-Profile resource.
        :param str friendly_name: The string that you assigned to describe the resource.
        :param str policy_sid: The unique string of a policy that is associated to the Customer-Profile resource.
        :param int limit: Upper limit for the number of records to return. stream()
                          guarantees to never return more than limit.  Default is no limit
        :param int page_size: Number of records to fetch per request, when not set will use
                              the default value of 50 records.  If no page_size is defined
                              but a limit is defined, stream() will attempt to read the
                              limit with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        :rtype: list[twilio.rest.trusthub.v1.trust_products.TrustProductsInstance]
        """
        limits = self._version.read_limits(limit, page_size)
        page = await self.page_async(
            status=status,
            friendly_name=friendly_name,
            policy_sid=policy_sid,
            page_size=limits["page_size"],
        )

        return await self._version.stream_async(page, limits["limit"])

    def list(
        self,
        status=values.unset,
        friendly_name=values.unset,
        policy_sid=values.unset,
        limit=None,
        page_size=None,
    ):
        """
        Lists TrustProductsInstance records from the API as a list.
        Unlike stream(), this operation is eager and will load `limit` records into
        memory before returning.

        :param TrustProductsInstance.Status status: The verification status of the Customer-Profile resource.
        :param str friendly_name: The string that you assigned to describe the resource.
        :param str policy_sid: The unique string of a policy that is associated to the Customer-Profile resource.
        :param int limit: Upper limit for the number of records to return. list() guarantees
                          never to return more than limit.  Default is no limit
        :param int page_size: Number of records to fetch per request, when not set will use
                              the default value of 50 records.  If no page_size is defined
                              but a limit is defined, list() will attempt to read the limit
                              with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        :rtype: list[twilio.rest.trusthub.v1.trust_products.TrustProductsInstance]
        """
        return list(
            self.stream(
                status=status,
                friendly_name=friendly_name,
                policy_sid=policy_sid,
                limit=limit,
                page_size=page_size,
            )
        )

    async def list_async(
        self,
        status=values.unset,
        friendly_name=values.unset,
        policy_sid=values.unset,
        limit=None,
        page_size=None,
    ):
        """
        Asynchronously lists TrustProductsInstance records from the API as a list.
        Unlike stream(), this operation is eager and will load `limit` records into
        memory before returning.

        :param TrustProductsInstance.Status status: The verification status of the Customer-Profile resource.
        :param str friendly_name: The string that you assigned to describe the resource.
        :param str policy_sid: The unique string of a policy that is associated to the Customer-Profile resource.
        :param int limit: Upper limit for the number of records to return. list() guarantees
                          never to return more than limit.  Default is no limit
        :param int page_size: Number of records to fetch per request, when not set will use
                              the default value of 50 records.  If no page_size is defined
                              but a limit is defined, list() will attempt to read the limit
                              with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        :rtype: list[twilio.rest.trusthub.v1.trust_products.TrustProductsInstance]
        """
        return list(
            await self.stream_async(
                status=status,
                friendly_name=friendly_name,
                policy_sid=policy_sid,
                limit=limit,
                page_size=page_size,
            )
        )

    def page(
        self,
        status=values.unset,
        friendly_name=values.unset,
        policy_sid=values.unset,
        page_token=values.unset,
        page_number=values.unset,
        page_size=values.unset,
    ):
        """
        Retrieve a single page of TrustProductsInstance records from the API.
        Request is executed immediately

        :param TrustProductsInstance.Status status: The verification status of the Customer-Profile resource.
        :param str friendly_name: The string that you assigned to describe the resource.
        :param str policy_sid: The unique string of a policy that is associated to the Customer-Profile resource.
        :param str page_token: PageToken provided by the API
        :param int page_number: Page Number, this value is simply for client state
        :param int page_size: Number of records to return, defaults to 50

        :returns: Page of TrustProductsInstance
        :rtype: twilio.rest.trusthub.v1.trust_products.TrustProductsPage
        """
        data = values.of(
            {
                "Status": status,
                "FriendlyName": friendly_name,
                "PolicySid": policy_sid,
                "PageToken": page_token,
                "Page": page_number,
                "PageSize": page_size,
            }
        )

        response = self._version.page(method="GET", uri=self._uri, params=data)
        return TrustProductsPage(self._version, response)

    async def page_async(
        self,
        status=values.unset,
        friendly_name=values.unset,
        policy_sid=values.unset,
        page_token=values.unset,
        page_number=values.unset,
        page_size=values.unset,
    ):
        """
        Asynchronously retrieve a single page of TrustProductsInstance records from the API.
        Request is executed immediately

        :param TrustProductsInstance.Status status: The verification status of the Customer-Profile resource.
        :param str friendly_name: The string that you assigned to describe the resource.
        :param str policy_sid: The unique string of a policy that is associated to the Customer-Profile resource.
        :param str page_token: PageToken provided by the API
        :param int page_number: Page Number, this value is simply for client state
        :param int page_size: Number of records to return, defaults to 50

        :returns: Page of TrustProductsInstance
        :rtype: twilio.rest.trusthub.v1.trust_products.TrustProductsPage
        """
        data = values.of(
            {
                "Status": status,
                "FriendlyName": friendly_name,
                "PolicySid": policy_sid,
                "PageToken": page_token,
                "Page": page_number,
                "PageSize": page_size,
            }
        )

        response = await self._version.page_async(
            method="GET", uri=self._uri, params=data
        )
        return TrustProductsPage(self._version, response)

    def get_page(self, target_url):
        """
        Retrieve a specific page of TrustProductsInstance records from the API.
        Request is executed immediately

        :param str target_url: API-generated URL for the requested results page

        :returns: Page of TrustProductsInstance
        :rtype: twilio.rest.trusthub.v1.trust_products.TrustProductsPage
        """
        response = self._version.domain.twilio.request("GET", target_url)
        return TrustProductsPage(self._version, response)

    async def get_page_async(self, target_url):
        """
        Asynchronously retrieve a specific page of TrustProductsInstance records from the API.
        Request is executed immediately

        :param str target_url: API-generated URL for the requested results page

        :returns: Page of TrustProductsInstance
        :rtype: twilio.rest.trusthub.v1.trust_products.TrustProductsPage
        """
        response = await self._version.domain.twilio.request_async("GET", target_url)
        return TrustProductsPage(self._version, response)

    def get(self, sid):
        """
        Constructs a TrustProductsContext

        :param sid: The unique string that we created to identify the Customer-Profile resource.

        :returns: twilio.rest.trusthub.v1.trust_products.TrustProductsContext
        :rtype: twilio.rest.trusthub.v1.trust_products.TrustProductsContext
        """
        return TrustProductsContext(self._version, sid=sid)

    def __call__(self, sid):
        """
        Constructs a TrustProductsContext

        :param sid: The unique string that we created to identify the Customer-Profile resource.

        :returns: twilio.rest.trusthub.v1.trust_products.TrustProductsContext
        :rtype: twilio.rest.trusthub.v1.trust_products.TrustProductsContext
        """
        return TrustProductsContext(self._version, sid=sid)

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        return "<Twilio.Trusthub.V1.TrustProductsList>"
