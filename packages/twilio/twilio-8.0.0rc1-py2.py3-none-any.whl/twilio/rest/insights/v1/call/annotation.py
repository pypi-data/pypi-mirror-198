r"""
    This code was generated by
   ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
    |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
    |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \

    Twilio - Insights
    This is the public Twilio REST API.

    NOTE: This class is auto generated by OpenAPI Generator.
    https://openapi-generator.tech
    Do not edit the class manually.
"""


from typing import Optional
from twilio.base import deserialize, values
from twilio.base.instance_context import InstanceContext
from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
from twilio.base.version import Version


class AnnotationInstance(InstanceResource):
    class AnsweredBy(object):
        UNKNOWN_ANSWERED_BY = "unknown_answered_by"
        HUMAN = "human"
        MACHINE = "machine"

    class ConnectivityIssue(object):
        UNKNOWN_CONNECTIVITY_ISSUE = "unknown_connectivity_issue"
        NO_CONNECTIVITY_ISSUE = "no_connectivity_issue"
        INVALID_NUMBER = "invalid_number"
        CALLER_ID = "caller_id"
        DROPPED_CALL = "dropped_call"
        NUMBER_REACHABILITY = "number_reachability"

    def __init__(self, version, payload, call_sid: str):
        """
        Initialize the AnnotationInstance

        :returns: twilio.rest.insights.v1.call.annotation.AnnotationInstance
        :rtype: twilio.rest.insights.v1.call.annotation.AnnotationInstance
        """
        super().__init__(version)

        self._properties = {
            "call_sid": payload.get("call_sid"),
            "account_sid": payload.get("account_sid"),
            "answered_by": payload.get("answered_by"),
            "connectivity_issue": payload.get("connectivity_issue"),
            "quality_issues": payload.get("quality_issues"),
            "spam": payload.get("spam"),
            "call_score": deserialize.integer(payload.get("call_score")),
            "comment": payload.get("comment"),
            "incident": payload.get("incident"),
            "url": payload.get("url"),
        }

        self._solution = {
            "call_sid": call_sid,
        }
        self._context: Optional[AnnotationContext] = None

    @property
    def _proxy(self):
        """
        Generate an instance context for the instance, the context is capable of
        performing various actions. All instance actions are proxied to the context

        :returns: AnnotationContext for this AnnotationInstance
        :rtype: twilio.rest.insights.v1.call.annotation.AnnotationContext
        """
        if self._context is None:
            self._context = AnnotationContext(
                self._version,
                call_sid=self._solution["call_sid"],
            )
        return self._context

    @property
    def call_sid(self):
        """
        :returns: The unique SID identifier of the Call.
        :rtype: str
        """
        return self._properties["call_sid"]

    @property
    def account_sid(self):
        """
        :returns: The unique SID identifier of the Account.
        :rtype: str
        """
        return self._properties["account_sid"]

    @property
    def answered_by(self):
        """
        :returns:
        :rtype: AnnotationInstance.AnsweredBy
        """
        return self._properties["answered_by"]

    @property
    def connectivity_issue(self):
        """
        :returns:
        :rtype: AnnotationInstance.ConnectivityIssue
        """
        return self._properties["connectivity_issue"]

    @property
    def quality_issues(self):
        """
        :returns: Specify if the call had any subjective quality issues. Possible values, one or more of:  no_quality_issue, low_volume, choppy_robotic, echo, dtmf, latency, owa, static_noise. Use comma separated values to indicate multiple quality issues for the same call
        :rtype: list[str]
        """
        return self._properties["quality_issues"]

    @property
    def spam(self):
        """
        :returns: Specify if the call was a spam call. Use this to provide feedback on whether calls placed from your account were marked as spam, or if inbound calls received by your account were unwanted spam. Is of type Boolean: true, false. Use true if the call was a spam call.
        :rtype: bool
        """
        return self._properties["spam"]

    @property
    def call_score(self):
        """
        :returns: Specify the call score. This is of type integer. Use a range of 1-5 to indicate the call experience score, with the following mapping as a reference for rating the call [5: Excellent, 4: Good, 3 : Fair, 2 : Poor, 1: Bad].
        :rtype: int
        """
        return self._properties["call_score"]

    @property
    def comment(self):
        """
        :returns: Specify any comments pertaining to the call. This of type string with a max limit of 100 characters. Twilio does not treat this field as PII, so don’t put any PII in here.
        :rtype: str
        """
        return self._properties["comment"]

    @property
    def incident(self):
        """
        :returns: Associate this call with an incident or support ticket. This is of type string with a max limit of 100 characters. Twilio does not treat this field as PII, so don’t put any PII in here.
        :rtype: str
        """
        return self._properties["incident"]

    @property
    def url(self):
        """
        :returns: The URL of this resource.
        :rtype: str
        """
        return self._properties["url"]

    def fetch(self):
        """
        Fetch the AnnotationInstance


        :returns: The fetched AnnotationInstance
        :rtype: twilio.rest.insights.v1.call.annotation.AnnotationInstance
        """
        return self._proxy.fetch()

    async def fetch_async(self):
        """
        Asynchronous coroutine to fetch the AnnotationInstance


        :returns: The fetched AnnotationInstance
        :rtype: twilio.rest.insights.v1.call.annotation.AnnotationInstance
        """
        return await self._proxy.fetch_async()

    def update(
        self,
        answered_by=values.unset,
        connectivity_issue=values.unset,
        quality_issues=values.unset,
        spam=values.unset,
        call_score=values.unset,
        comment=values.unset,
        incident=values.unset,
    ):
        """
        Update the AnnotationInstance

        :param AnnotationInstance.AnsweredBy answered_by:
        :param AnnotationInstance.ConnectivityIssue connectivity_issue:
        :param str quality_issues: Specify if the call had any subjective quality issues. Possible values, one or more of:  no_quality_issue, low_volume, choppy_robotic, echo, dtmf, latency, owa, static_noise. Use comma separated values to indicate multiple quality issues for the same call
        :param bool spam: Specify if the call was a spam call. Use this to provide feedback on whether calls placed from your account were marked as spam, or if inbound calls received by your account were unwanted spam. Is of type Boolean: true, false. Use true if the call was a spam call.
        :param int call_score: Specify the call score. This is of type integer. Use a range of 1-5 to indicate the call experience score, with the following mapping as a reference for rating the call [5: Excellent, 4: Good, 3 : Fair, 2 : Poor, 1: Bad].
        :param str comment: Specify any comments pertaining to the call. This of type string with a max limit of 100 characters. Twilio does not treat this field as PII, so don’t put any PII in here.
        :param str incident: Associate this call with an incident or support ticket. This is of type string with a max limit of 100 characters. Twilio does not treat this field as PII, so don’t put any PII in here.

        :returns: The updated AnnotationInstance
        :rtype: twilio.rest.insights.v1.call.annotation.AnnotationInstance
        """
        return self._proxy.update(
            answered_by=answered_by,
            connectivity_issue=connectivity_issue,
            quality_issues=quality_issues,
            spam=spam,
            call_score=call_score,
            comment=comment,
            incident=incident,
        )

    async def update_async(
        self,
        answered_by=values.unset,
        connectivity_issue=values.unset,
        quality_issues=values.unset,
        spam=values.unset,
        call_score=values.unset,
        comment=values.unset,
        incident=values.unset,
    ):
        """
        Asynchronous coroutine to update the AnnotationInstance

        :param AnnotationInstance.AnsweredBy answered_by:
        :param AnnotationInstance.ConnectivityIssue connectivity_issue:
        :param str quality_issues: Specify if the call had any subjective quality issues. Possible values, one or more of:  no_quality_issue, low_volume, choppy_robotic, echo, dtmf, latency, owa, static_noise. Use comma separated values to indicate multiple quality issues for the same call
        :param bool spam: Specify if the call was a spam call. Use this to provide feedback on whether calls placed from your account were marked as spam, or if inbound calls received by your account were unwanted spam. Is of type Boolean: true, false. Use true if the call was a spam call.
        :param int call_score: Specify the call score. This is of type integer. Use a range of 1-5 to indicate the call experience score, with the following mapping as a reference for rating the call [5: Excellent, 4: Good, 3 : Fair, 2 : Poor, 1: Bad].
        :param str comment: Specify any comments pertaining to the call. This of type string with a max limit of 100 characters. Twilio does not treat this field as PII, so don’t put any PII in here.
        :param str incident: Associate this call with an incident or support ticket. This is of type string with a max limit of 100 characters. Twilio does not treat this field as PII, so don’t put any PII in here.

        :returns: The updated AnnotationInstance
        :rtype: twilio.rest.insights.v1.call.annotation.AnnotationInstance
        """
        return await self._proxy.update_async(
            answered_by=answered_by,
            connectivity_issue=connectivity_issue,
            quality_issues=quality_issues,
            spam=spam,
            call_score=call_score,
            comment=comment,
            incident=incident,
        )

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        context = " ".join("{}={}".format(k, v) for k, v in self._solution.items())
        return "<Twilio.Insights.V1.AnnotationInstance {}>".format(context)


class AnnotationContext(InstanceContext):
    def __init__(self, version: Version, call_sid: str):
        """
        Initialize the AnnotationContext

        :param Version version: Version that contains the resource
        :param call_sid: The unique string that Twilio created to identify this Call resource. It always starts with a CA.

        :returns: twilio.rest.insights.v1.call.annotation.AnnotationContext
        :rtype: twilio.rest.insights.v1.call.annotation.AnnotationContext
        """
        super().__init__(version)

        # Path Solution
        self._solution = {
            "call_sid": call_sid,
        }
        self._uri = "/Voice/{call_sid}/Annotation".format(**self._solution)

    def fetch(self):
        """
        Fetch the AnnotationInstance


        :returns: The fetched AnnotationInstance
        :rtype: twilio.rest.insights.v1.call.annotation.AnnotationInstance
        """

        payload = self._version.fetch(
            method="GET",
            uri=self._uri,
        )

        return AnnotationInstance(
            self._version,
            payload,
            call_sid=self._solution["call_sid"],
        )

    async def fetch_async(self):
        """
        Asynchronous coroutine to fetch the AnnotationInstance


        :returns: The fetched AnnotationInstance
        :rtype: twilio.rest.insights.v1.call.annotation.AnnotationInstance
        """

        payload = await self._version.fetch_async(
            method="GET",
            uri=self._uri,
        )

        return AnnotationInstance(
            self._version,
            payload,
            call_sid=self._solution["call_sid"],
        )

    def update(
        self,
        answered_by=values.unset,
        connectivity_issue=values.unset,
        quality_issues=values.unset,
        spam=values.unset,
        call_score=values.unset,
        comment=values.unset,
        incident=values.unset,
    ):
        """
        Update the AnnotationInstance

        :param AnnotationInstance.AnsweredBy answered_by:
        :param AnnotationInstance.ConnectivityIssue connectivity_issue:
        :param str quality_issues: Specify if the call had any subjective quality issues. Possible values, one or more of:  no_quality_issue, low_volume, choppy_robotic, echo, dtmf, latency, owa, static_noise. Use comma separated values to indicate multiple quality issues for the same call
        :param bool spam: Specify if the call was a spam call. Use this to provide feedback on whether calls placed from your account were marked as spam, or if inbound calls received by your account were unwanted spam. Is of type Boolean: true, false. Use true if the call was a spam call.
        :param int call_score: Specify the call score. This is of type integer. Use a range of 1-5 to indicate the call experience score, with the following mapping as a reference for rating the call [5: Excellent, 4: Good, 3 : Fair, 2 : Poor, 1: Bad].
        :param str comment: Specify any comments pertaining to the call. This of type string with a max limit of 100 characters. Twilio does not treat this field as PII, so don’t put any PII in here.
        :param str incident: Associate this call with an incident or support ticket. This is of type string with a max limit of 100 characters. Twilio does not treat this field as PII, so don’t put any PII in here.

        :returns: The updated AnnotationInstance
        :rtype: twilio.rest.insights.v1.call.annotation.AnnotationInstance
        """
        data = values.of(
            {
                "AnsweredBy": answered_by,
                "ConnectivityIssue": connectivity_issue,
                "QualityIssues": quality_issues,
                "Spam": spam,
                "CallScore": call_score,
                "Comment": comment,
                "Incident": incident,
            }
        )

        payload = self._version.update(
            method="POST",
            uri=self._uri,
            data=data,
        )

        return AnnotationInstance(
            self._version, payload, call_sid=self._solution["call_sid"]
        )

    async def update_async(
        self,
        answered_by=values.unset,
        connectivity_issue=values.unset,
        quality_issues=values.unset,
        spam=values.unset,
        call_score=values.unset,
        comment=values.unset,
        incident=values.unset,
    ):
        """
        Asynchronous coroutine to update the AnnotationInstance

        :param AnnotationInstance.AnsweredBy answered_by:
        :param AnnotationInstance.ConnectivityIssue connectivity_issue:
        :param str quality_issues: Specify if the call had any subjective quality issues. Possible values, one or more of:  no_quality_issue, low_volume, choppy_robotic, echo, dtmf, latency, owa, static_noise. Use comma separated values to indicate multiple quality issues for the same call
        :param bool spam: Specify if the call was a spam call. Use this to provide feedback on whether calls placed from your account were marked as spam, or if inbound calls received by your account were unwanted spam. Is of type Boolean: true, false. Use true if the call was a spam call.
        :param int call_score: Specify the call score. This is of type integer. Use a range of 1-5 to indicate the call experience score, with the following mapping as a reference for rating the call [5: Excellent, 4: Good, 3 : Fair, 2 : Poor, 1: Bad].
        :param str comment: Specify any comments pertaining to the call. This of type string with a max limit of 100 characters. Twilio does not treat this field as PII, so don’t put any PII in here.
        :param str incident: Associate this call with an incident or support ticket. This is of type string with a max limit of 100 characters. Twilio does not treat this field as PII, so don’t put any PII in here.

        :returns: The updated AnnotationInstance
        :rtype: twilio.rest.insights.v1.call.annotation.AnnotationInstance
        """
        data = values.of(
            {
                "AnsweredBy": answered_by,
                "ConnectivityIssue": connectivity_issue,
                "QualityIssues": quality_issues,
                "Spam": spam,
                "CallScore": call_score,
                "Comment": comment,
                "Incident": incident,
            }
        )

        payload = await self._version.update_async(
            method="POST",
            uri=self._uri,
            data=data,
        )

        return AnnotationInstance(
            self._version, payload, call_sid=self._solution["call_sid"]
        )

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        context = " ".join("{}={}".format(k, v) for k, v in self._solution.items())
        return "<Twilio.Insights.V1.AnnotationContext {}>".format(context)


class AnnotationList(ListResource):
    def __init__(self, version: Version, call_sid: str):
        """
        Initialize the AnnotationList

        :param Version version: Version that contains the resource
        :param call_sid: The unique SID identifier of the Call.

        :returns: twilio.rest.insights.v1.call.annotation.AnnotationList
        :rtype: twilio.rest.insights.v1.call.annotation.AnnotationList
        """
        super().__init__(version)

        # Path Solution
        self._solution = {
            "call_sid": call_sid,
        }

    def get(self):
        """
        Constructs a AnnotationContext


        :returns: twilio.rest.insights.v1.call.annotation.AnnotationContext
        :rtype: twilio.rest.insights.v1.call.annotation.AnnotationContext
        """
        return AnnotationContext(self._version, call_sid=self._solution["call_sid"])

    def __call__(self):
        """
        Constructs a AnnotationContext


        :returns: twilio.rest.insights.v1.call.annotation.AnnotationContext
        :rtype: twilio.rest.insights.v1.call.annotation.AnnotationContext
        """
        return AnnotationContext(self._version, call_sid=self._solution["call_sid"])

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        return "<Twilio.Insights.V1.AnnotationList>"
