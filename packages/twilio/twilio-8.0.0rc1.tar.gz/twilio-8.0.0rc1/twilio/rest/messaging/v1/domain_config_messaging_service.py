r"""
    This code was generated by
   ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
    |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
    |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \

    Twilio - Messaging
    This is the public Twilio REST API.

    NOTE: This class is auto generated by OpenAPI Generator.
    https://openapi-generator.tech
    Do not edit the class manually.
"""


from typing import Optional
from twilio.base import deserialize
from twilio.base.instance_context import InstanceContext
from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
from twilio.base.version import Version


class DomainConfigMessagingServiceInstance(InstanceResource):
    def __init__(self, version, payload, messaging_service_sid: Optional[str] = None):
        """
        Initialize the DomainConfigMessagingServiceInstance

        :returns: twilio.rest.messaging.v1.domain_config_messaging_service.DomainConfigMessagingServiceInstance
        :rtype: twilio.rest.messaging.v1.domain_config_messaging_service.DomainConfigMessagingServiceInstance
        """
        super().__init__(version)

        self._properties = {
            "domain_sid": payload.get("domain_sid"),
            "config_sid": payload.get("config_sid"),
            "messaging_service_sid": payload.get("messaging_service_sid"),
            "fallback_url": payload.get("fallback_url"),
            "callback_url": payload.get("callback_url"),
            "date_created": deserialize.iso8601_datetime(payload.get("date_created")),
            "date_updated": deserialize.iso8601_datetime(payload.get("date_updated")),
            "url": payload.get("url"),
        }

        self._solution = {
            "messaging_service_sid": messaging_service_sid
            or self._properties["messaging_service_sid"],
        }
        self._context: Optional[DomainConfigMessagingServiceContext] = None

    @property
    def _proxy(self):
        """
        Generate an instance context for the instance, the context is capable of
        performing various actions. All instance actions are proxied to the context

        :returns: DomainConfigMessagingServiceContext for this DomainConfigMessagingServiceInstance
        :rtype: twilio.rest.messaging.v1.domain_config_messaging_service.DomainConfigMessagingServiceContext
        """
        if self._context is None:
            self._context = DomainConfigMessagingServiceContext(
                self._version,
                messaging_service_sid=self._solution["messaging_service_sid"],
            )
        return self._context

    @property
    def domain_sid(self):
        """
        :returns: The unique string that we created to identify the Domain resource.
        :rtype: str
        """
        return self._properties["domain_sid"]

    @property
    def config_sid(self):
        """
        :returns: The unique string that we created to identify the Domain config (prefix ZK).
        :rtype: str
        """
        return self._properties["config_sid"]

    @property
    def messaging_service_sid(self):
        """
        :returns: The unique string that identifies the messaging service
        :rtype: str
        """
        return self._properties["messaging_service_sid"]

    @property
    def fallback_url(self):
        """
        :returns: Any requests we receive to this domain that do not match an existing shortened message will be redirected to the fallback url. These will likely be either expired messages, random misdirected traffic, or intentional scraping.
        :rtype: str
        """
        return self._properties["fallback_url"]

    @property
    def callback_url(self):
        """
        :returns: URL to receive click events to your webhook whenever the recipients click on the shortened links.
        :rtype: str
        """
        return self._properties["callback_url"]

    @property
    def date_created(self):
        """
        :returns: Date this Domain Config was created.
        :rtype: datetime
        """
        return self._properties["date_created"]

    @property
    def date_updated(self):
        """
        :returns: Date that this Domain Config was last updated.
        :rtype: datetime
        """
        return self._properties["date_updated"]

    @property
    def url(self):
        """
        :returns:
        :rtype: str
        """
        return self._properties["url"]

    def fetch(self):
        """
        Fetch the DomainConfigMessagingServiceInstance


        :returns: The fetched DomainConfigMessagingServiceInstance
        :rtype: twilio.rest.messaging.v1.domain_config_messaging_service.DomainConfigMessagingServiceInstance
        """
        return self._proxy.fetch()

    async def fetch_async(self):
        """
        Asynchronous coroutine to fetch the DomainConfigMessagingServiceInstance


        :returns: The fetched DomainConfigMessagingServiceInstance
        :rtype: twilio.rest.messaging.v1.domain_config_messaging_service.DomainConfigMessagingServiceInstance
        """
        return await self._proxy.fetch_async()

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        context = " ".join("{}={}".format(k, v) for k, v in self._solution.items())
        return "<Twilio.Messaging.V1.DomainConfigMessagingServiceInstance {}>".format(
            context
        )


class DomainConfigMessagingServiceContext(InstanceContext):
    def __init__(self, version: Version, messaging_service_sid: str):
        """
        Initialize the DomainConfigMessagingServiceContext

        :param Version version: Version that contains the resource
        :param messaging_service_sid: Unique string used to identify the Messaging service that this domain should be associated with.

        :returns: twilio.rest.messaging.v1.domain_config_messaging_service.DomainConfigMessagingServiceContext
        :rtype: twilio.rest.messaging.v1.domain_config_messaging_service.DomainConfigMessagingServiceContext
        """
        super().__init__(version)

        # Path Solution
        self._solution = {
            "messaging_service_sid": messaging_service_sid,
        }
        self._uri = "/LinkShortening/MessagingService/{messaging_service_sid}/DomainConfig".format(
            **self._solution
        )

    def fetch(self):
        """
        Fetch the DomainConfigMessagingServiceInstance


        :returns: The fetched DomainConfigMessagingServiceInstance
        :rtype: twilio.rest.messaging.v1.domain_config_messaging_service.DomainConfigMessagingServiceInstance
        """

        payload = self._version.fetch(
            method="GET",
            uri=self._uri,
        )

        return DomainConfigMessagingServiceInstance(
            self._version,
            payload,
            messaging_service_sid=self._solution["messaging_service_sid"],
        )

    async def fetch_async(self):
        """
        Asynchronous coroutine to fetch the DomainConfigMessagingServiceInstance


        :returns: The fetched DomainConfigMessagingServiceInstance
        :rtype: twilio.rest.messaging.v1.domain_config_messaging_service.DomainConfigMessagingServiceInstance
        """

        payload = await self._version.fetch_async(
            method="GET",
            uri=self._uri,
        )

        return DomainConfigMessagingServiceInstance(
            self._version,
            payload,
            messaging_service_sid=self._solution["messaging_service_sid"],
        )

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        context = " ".join("{}={}".format(k, v) for k, v in self._solution.items())
        return "<Twilio.Messaging.V1.DomainConfigMessagingServiceContext {}>".format(
            context
        )


class DomainConfigMessagingServiceList(ListResource):
    def __init__(self, version: Version):
        """
        Initialize the DomainConfigMessagingServiceList

        :param Version version: Version that contains the resource

        :returns: twilio.rest.messaging.v1.domain_config_messaging_service.DomainConfigMessagingServiceList
        :rtype: twilio.rest.messaging.v1.domain_config_messaging_service.DomainConfigMessagingServiceList
        """
        super().__init__(version)

    def get(self, messaging_service_sid):
        """
        Constructs a DomainConfigMessagingServiceContext

        :param messaging_service_sid: Unique string used to identify the Messaging service that this domain should be associated with.

        :returns: twilio.rest.messaging.v1.domain_config_messaging_service.DomainConfigMessagingServiceContext
        :rtype: twilio.rest.messaging.v1.domain_config_messaging_service.DomainConfigMessagingServiceContext
        """
        return DomainConfigMessagingServiceContext(
            self._version, messaging_service_sid=messaging_service_sid
        )

    def __call__(self, messaging_service_sid):
        """
        Constructs a DomainConfigMessagingServiceContext

        :param messaging_service_sid: Unique string used to identify the Messaging service that this domain should be associated with.

        :returns: twilio.rest.messaging.v1.domain_config_messaging_service.DomainConfigMessagingServiceContext
        :rtype: twilio.rest.messaging.v1.domain_config_messaging_service.DomainConfigMessagingServiceContext
        """
        return DomainConfigMessagingServiceContext(
            self._version, messaging_service_sid=messaging_service_sid
        )

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        return "<Twilio.Messaging.V1.DomainConfigMessagingServiceList>"
