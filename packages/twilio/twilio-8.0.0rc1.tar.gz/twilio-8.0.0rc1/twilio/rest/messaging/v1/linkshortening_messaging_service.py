r"""
    This code was generated by
   ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
    |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
    |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \

    Twilio - Messaging
    This is the public Twilio REST API.

    NOTE: This class is auto generated by OpenAPI Generator.
    https://openapi-generator.tech
    Do not edit the class manually.
"""


from typing import Optional
from twilio.base import values
from twilio.base.instance_context import InstanceContext
from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
from twilio.base.version import Version


class LinkshorteningMessagingServiceInstance(InstanceResource):
    def __init__(
        self,
        version,
        payload,
        domain_sid: Optional[str] = None,
        messaging_service_sid: Optional[str] = None,
    ):
        """
        Initialize the LinkshorteningMessagingServiceInstance

        :returns: twilio.rest.messaging.v1.linkshortening_messaging_service.LinkshorteningMessagingServiceInstance
        :rtype: twilio.rest.messaging.v1.linkshortening_messaging_service.LinkshorteningMessagingServiceInstance
        """
        super().__init__(version)

        self._properties = {
            "domain_sid": payload.get("domain_sid"),
            "messaging_service_sid": payload.get("messaging_service_sid"),
            "url": payload.get("url"),
        }

        self._solution = {
            "domain_sid": domain_sid or self._properties["domain_sid"],
            "messaging_service_sid": messaging_service_sid
            or self._properties["messaging_service_sid"],
        }
        self._context: Optional[LinkshorteningMessagingServiceContext] = None

    @property
    def _proxy(self):
        """
        Generate an instance context for the instance, the context is capable of
        performing various actions. All instance actions are proxied to the context

        :returns: LinkshorteningMessagingServiceContext for this LinkshorteningMessagingServiceInstance
        :rtype: twilio.rest.messaging.v1.linkshortening_messaging_service.LinkshorteningMessagingServiceContext
        """
        if self._context is None:
            self._context = LinkshorteningMessagingServiceContext(
                self._version,
                domain_sid=self._solution["domain_sid"],
                messaging_service_sid=self._solution["messaging_service_sid"],
            )
        return self._context

    @property
    def domain_sid(self):
        """
        :returns: The unique string identifies the domain resource
        :rtype: str
        """
        return self._properties["domain_sid"]

    @property
    def messaging_service_sid(self):
        """
        :returns: The unique string that identifies the messaging service
        :rtype: str
        """
        return self._properties["messaging_service_sid"]

    @property
    def url(self):
        """
        :returns:
        :rtype: str
        """
        return self._properties["url"]

    def create(self):
        """
        Create the LinkshorteningMessagingServiceInstance


        :returns: The created LinkshorteningMessagingServiceInstance
        :rtype: twilio.rest.messaging.v1.linkshortening_messaging_service.LinkshorteningMessagingServiceInstance
        """
        return self._proxy.create()

    async def create_async(self):
        """
        Asynchronous coroutine to create the LinkshorteningMessagingServiceInstance


        :returns: The created LinkshorteningMessagingServiceInstance
        :rtype: twilio.rest.messaging.v1.linkshortening_messaging_service.LinkshorteningMessagingServiceInstance
        """
        return await self._proxy.create_async()

    def delete(self):
        """
        Deletes the LinkshorteningMessagingServiceInstance


        :returns: True if delete succeeds, False otherwise
        :rtype: bool
        """
        return self._proxy.delete()

    async def delete_async(self):
        """
        Asynchronous coroutine that deletes the LinkshorteningMessagingServiceInstance


        :returns: True if delete succeeds, False otherwise
        :rtype: bool
        """
        return await self._proxy.delete_async()

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        context = " ".join("{}={}".format(k, v) for k, v in self._solution.items())
        return "<Twilio.Messaging.V1.LinkshorteningMessagingServiceInstance {}>".format(
            context
        )


class LinkshorteningMessagingServiceContext(InstanceContext):
    def __init__(self, version: Version, domain_sid: str, messaging_service_sid: str):
        """
        Initialize the LinkshorteningMessagingServiceContext

        :param Version version: Version that contains the resource
        :param domain_sid: The domain SID to dissociate from a messaging service. With URL shortening enabled, links in messages sent with the associated messaging service will be shortened to the provided domain
        :param messaging_service_sid: A messaging service SID to dissociate from a domain. With URL shortening enabled, links in messages sent with the provided messaging service will be shortened to the associated domain

        :returns: twilio.rest.messaging.v1.linkshortening_messaging_service.LinkshorteningMessagingServiceContext
        :rtype: twilio.rest.messaging.v1.linkshortening_messaging_service.LinkshorteningMessagingServiceContext
        """
        super().__init__(version)

        # Path Solution
        self._solution = {
            "domain_sid": domain_sid,
            "messaging_service_sid": messaging_service_sid,
        }
        self._uri = "/LinkShortening/Domains/{domain_sid}/MessagingServices/{messaging_service_sid}".format(
            **self._solution
        )

    def create(self):
        """
        Create the LinkshorteningMessagingServiceInstance


        :returns: The created LinkshorteningMessagingServiceInstance
        :rtype: twilio.rest.messaging.v1.linkshortening_messaging_service.LinkshorteningMessagingServiceInstance
        """
        data = values.of({})

        payload = self._version.create(method="POST", uri=self._uri, data=data)

        return LinkshorteningMessagingServiceInstance(
            self._version,
            payload,
            domain_sid=self._solution["domain_sid"],
            messaging_service_sid=self._solution["messaging_service_sid"],
        )

    async def create_async(self):
        """
        Asynchronous coroutine to create the LinkshorteningMessagingServiceInstance


        :returns: The created LinkshorteningMessagingServiceInstance
        :rtype: twilio.rest.messaging.v1.linkshortening_messaging_service.LinkshorteningMessagingServiceInstance
        """
        data = values.of({})

        payload = await self._version.create_async(
            method="POST", uri=self._uri, data=data
        )

        return LinkshorteningMessagingServiceInstance(
            self._version,
            payload,
            domain_sid=self._solution["domain_sid"],
            messaging_service_sid=self._solution["messaging_service_sid"],
        )

    def delete(self):
        """
        Deletes the LinkshorteningMessagingServiceInstance


        :returns: True if delete succeeds, False otherwise
        :rtype: bool
        """
        return self._version.delete(
            method="DELETE",
            uri=self._uri,
        )

    async def delete_async(self):
        """
        Asynchronous coroutine that deletes the LinkshorteningMessagingServiceInstance


        :returns: True if delete succeeds, False otherwise
        :rtype: bool
        """
        return await self._version.delete_async(
            method="DELETE",
            uri=self._uri,
        )

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        context = " ".join("{}={}".format(k, v) for k, v in self._solution.items())
        return "<Twilio.Messaging.V1.LinkshorteningMessagingServiceContext {}>".format(
            context
        )


class LinkshorteningMessagingServiceList(ListResource):
    def __init__(self, version: Version):
        """
        Initialize the LinkshorteningMessagingServiceList

        :param Version version: Version that contains the resource

        :returns: twilio.rest.messaging.v1.linkshortening_messaging_service.LinkshorteningMessagingServiceList
        :rtype: twilio.rest.messaging.v1.linkshortening_messaging_service.LinkshorteningMessagingServiceList
        """
        super().__init__(version)

    def get(self, domain_sid, messaging_service_sid):
        """
        Constructs a LinkshorteningMessagingServiceContext

        :param domain_sid: The domain SID to dissociate from a messaging service. With URL shortening enabled, links in messages sent with the associated messaging service will be shortened to the provided domain
        :param messaging_service_sid: A messaging service SID to dissociate from a domain. With URL shortening enabled, links in messages sent with the provided messaging service will be shortened to the associated domain

        :returns: twilio.rest.messaging.v1.linkshortening_messaging_service.LinkshorteningMessagingServiceContext
        :rtype: twilio.rest.messaging.v1.linkshortening_messaging_service.LinkshorteningMessagingServiceContext
        """
        return LinkshorteningMessagingServiceContext(
            self._version,
            domain_sid=domain_sid,
            messaging_service_sid=messaging_service_sid,
        )

    def __call__(self, domain_sid, messaging_service_sid):
        """
        Constructs a LinkshorteningMessagingServiceContext

        :param domain_sid: The domain SID to dissociate from a messaging service. With URL shortening enabled, links in messages sent with the associated messaging service will be shortened to the provided domain
        :param messaging_service_sid: A messaging service SID to dissociate from a domain. With URL shortening enabled, links in messages sent with the provided messaging service will be shortened to the associated domain

        :returns: twilio.rest.messaging.v1.linkshortening_messaging_service.LinkshorteningMessagingServiceContext
        :rtype: twilio.rest.messaging.v1.linkshortening_messaging_service.LinkshorteningMessagingServiceContext
        """
        return LinkshorteningMessagingServiceContext(
            self._version,
            domain_sid=domain_sid,
            messaging_service_sid=messaging_service_sid,
        )

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        return "<Twilio.Messaging.V1.LinkshorteningMessagingServiceList>"
