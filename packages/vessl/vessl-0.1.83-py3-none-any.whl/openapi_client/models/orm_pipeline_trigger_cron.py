# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class OrmPipelineTriggerCron(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cron_expression': 'str',
        'edges': 'OrmPipelineTriggerCronEdges',
        'id': 'int',
        'is_enabled': 'bool',
        'pipeline_id': 'int'
    }

    attribute_map = {
        'cron_expression': 'cron_expression',
        'edges': 'edges',
        'id': 'id',
        'is_enabled': 'is_enabled',
        'pipeline_id': 'pipeline_id'
    }

    def __init__(self, cron_expression=None, edges=None, id=None, is_enabled=None, pipeline_id=None, local_vars_configuration=None):  # noqa: E501
        """OrmPipelineTriggerCron - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._cron_expression = None
        self._edges = None
        self._id = None
        self._is_enabled = None
        self._pipeline_id = None
        self.discriminator = None

        if cron_expression is not None:
            self.cron_expression = cron_expression
        if edges is not None:
            self.edges = edges
        if id is not None:
            self.id = id
        if is_enabled is not None:
            self.is_enabled = is_enabled
        if pipeline_id is not None:
            self.pipeline_id = pipeline_id

    @property
    def cron_expression(self):
        """Gets the cron_expression of this OrmPipelineTriggerCron.  # noqa: E501


        :return: The cron_expression of this OrmPipelineTriggerCron.  # noqa: E501
        :rtype: str
        """
        return self._cron_expression

    @cron_expression.setter
    def cron_expression(self, cron_expression):
        """Sets the cron_expression of this OrmPipelineTriggerCron.


        :param cron_expression: The cron_expression of this OrmPipelineTriggerCron.  # noqa: E501
        :type cron_expression: str
        """

        self._cron_expression = cron_expression

    @property
    def edges(self):
        """Gets the edges of this OrmPipelineTriggerCron.  # noqa: E501


        :return: The edges of this OrmPipelineTriggerCron.  # noqa: E501
        :rtype: OrmPipelineTriggerCronEdges
        """
        return self._edges

    @edges.setter
    def edges(self, edges):
        """Sets the edges of this OrmPipelineTriggerCron.


        :param edges: The edges of this OrmPipelineTriggerCron.  # noqa: E501
        :type edges: OrmPipelineTriggerCronEdges
        """

        self._edges = edges

    @property
    def id(self):
        """Gets the id of this OrmPipelineTriggerCron.  # noqa: E501


        :return: The id of this OrmPipelineTriggerCron.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrmPipelineTriggerCron.


        :param id: The id of this OrmPipelineTriggerCron.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def is_enabled(self):
        """Gets the is_enabled of this OrmPipelineTriggerCron.  # noqa: E501


        :return: The is_enabled of this OrmPipelineTriggerCron.  # noqa: E501
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this OrmPipelineTriggerCron.


        :param is_enabled: The is_enabled of this OrmPipelineTriggerCron.  # noqa: E501
        :type is_enabled: bool
        """

        self._is_enabled = is_enabled

    @property
    def pipeline_id(self):
        """Gets the pipeline_id of this OrmPipelineTriggerCron.  # noqa: E501


        :return: The pipeline_id of this OrmPipelineTriggerCron.  # noqa: E501
        :rtype: int
        """
        return self._pipeline_id

    @pipeline_id.setter
    def pipeline_id(self, pipeline_id):
        """Sets the pipeline_id of this OrmPipelineTriggerCron.


        :param pipeline_id: The pipeline_id of this OrmPipelineTriggerCron.  # noqa: E501
        :type pipeline_id: int
        """

        self._pipeline_id = pipeline_id

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrmPipelineTriggerCron):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrmPipelineTriggerCron):
            return True

        return self.to_dict() != other.to_dict()
