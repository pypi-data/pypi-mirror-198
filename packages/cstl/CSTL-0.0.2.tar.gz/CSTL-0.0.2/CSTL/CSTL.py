# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _CSTL
else:
    import _CSTL

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CSTL.delete_SwigPyIterator

    def value(self) -> "PyObject *":
        return _CSTL.SwigPyIterator_value(self)

    def incr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _CSTL.SwigPyIterator_incr(self, n)

    def decr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _CSTL.SwigPyIterator_decr(self, n)

    def distance(self, x: "SwigPyIterator") -> "ptrdiff_t":
        return _CSTL.SwigPyIterator_distance(self, x)

    def equal(self, x: "SwigPyIterator") -> "bool":
        return _CSTL.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _CSTL.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _CSTL.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _CSTL.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _CSTL.SwigPyIterator_previous(self)

    def advance(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _CSTL.SwigPyIterator_advance(self, n)

    def __eq__(self, x: "SwigPyIterator") -> "bool":
        return _CSTL.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: "SwigPyIterator") -> "bool":
        return _CSTL.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _CSTL.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _CSTL.SwigPyIterator___isub__(self, n)

    def __add__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _CSTL.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _CSTL.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _CSTL:
_CSTL.SwigPyIterator_swigregister(SwigPyIterator)

class VecInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.VecInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.VecInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.VecInt___bool__(self)

    def __len__(self) -> "std::vector< int >::size_type":
        return _CSTL.VecInt___len__(self)

    def __getslice__(self, i: "std::vector< int >::difference_type", j: "std::vector< int >::difference_type") -> "std::vector< int,std::allocator< int > > *":
        return _CSTL.VecInt___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _CSTL.VecInt___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< int >::difference_type", j: "std::vector< int >::difference_type") -> "void":
        return _CSTL.VecInt___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _CSTL.VecInt___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< int >::value_type const &":
        return _CSTL.VecInt___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _CSTL.VecInt___setitem__(self, *args)

    def pop(self) -> "std::vector< int >::value_type":
        return _CSTL.VecInt_pop(self)

    def append(self, x: "std::vector< int >::value_type const &") -> "void":
        return _CSTL.VecInt_append(self, x)

    def empty(self) -> "bool":
        return _CSTL.VecInt_empty(self)

    def size(self) -> "std::vector< int >::size_type":
        return _CSTL.VecInt_size(self)

    def swap(self, v: "VecInt") -> "void":
        return _CSTL.VecInt_swap(self, v)

    def begin(self) -> "std::vector< int >::iterator":
        return _CSTL.VecInt_begin(self)

    def end(self) -> "std::vector< int >::iterator":
        return _CSTL.VecInt_end(self)

    def rbegin(self) -> "std::vector< int >::reverse_iterator":
        return _CSTL.VecInt_rbegin(self)

    def rend(self) -> "std::vector< int >::reverse_iterator":
        return _CSTL.VecInt_rend(self)

    def clear(self) -> "void":
        return _CSTL.VecInt_clear(self)

    def get_allocator(self) -> "std::vector< int >::allocator_type":
        return _CSTL.VecInt_get_allocator(self)

    def pop_back(self) -> "void":
        return _CSTL.VecInt_pop_back(self)

    def erase(self, *args) -> "std::vector< int >::iterator":
        return _CSTL.VecInt_erase(self, *args)

    def __init__(self, *args):
        _CSTL.VecInt_swiginit(self, _CSTL.new_VecInt(*args))

    def push_back(self, x: "std::vector< int >::value_type const &") -> "void":
        return _CSTL.VecInt_push_back(self, x)

    def front(self) -> "std::vector< int >::value_type const &":
        return _CSTL.VecInt_front(self)

    def back(self) -> "std::vector< int >::value_type const &":
        return _CSTL.VecInt_back(self)

    def assign(self, n: "std::vector< int >::size_type", x: "std::vector< int >::value_type const &") -> "void":
        return _CSTL.VecInt_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _CSTL.VecInt_resize(self, *args)

    def insert(self, *args) -> "void":
        return _CSTL.VecInt_insert(self, *args)

    def reserve(self, n: "std::vector< int >::size_type") -> "void":
        return _CSTL.VecInt_reserve(self, n)

    def capacity(self) -> "std::vector< int >::size_type":
        return _CSTL.VecInt_capacity(self)
    __swig_destroy__ = _CSTL.delete_VecInt

# Register VecInt in _CSTL:
_CSTL.VecInt_swigregister(VecInt)

class VecStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.VecStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.VecStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.VecStr___bool__(self)

    def __len__(self) -> "std::vector< std::string >::size_type":
        return _CSTL.VecStr___len__(self)

    def __getslice__(self, i: "std::vector< std::string >::difference_type", j: "std::vector< std::string >::difference_type") -> "std::vector< std::string,std::allocator< std::string > > *":
        return _CSTL.VecStr___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _CSTL.VecStr___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::string >::difference_type", j: "std::vector< std::string >::difference_type") -> "void":
        return _CSTL.VecStr___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _CSTL.VecStr___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::string >::value_type const &":
        return _CSTL.VecStr___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _CSTL.VecStr___setitem__(self, *args)

    def pop(self) -> "std::vector< std::string >::value_type":
        return _CSTL.VecStr_pop(self)

    def append(self, x: "std::vector< std::string >::value_type const &") -> "void":
        return _CSTL.VecStr_append(self, x)

    def empty(self) -> "bool":
        return _CSTL.VecStr_empty(self)

    def size(self) -> "std::vector< std::string >::size_type":
        return _CSTL.VecStr_size(self)

    def swap(self, v: "VecStr") -> "void":
        return _CSTL.VecStr_swap(self, v)

    def begin(self) -> "std::vector< std::string >::iterator":
        return _CSTL.VecStr_begin(self)

    def end(self) -> "std::vector< std::string >::iterator":
        return _CSTL.VecStr_end(self)

    def rbegin(self) -> "std::vector< std::string >::reverse_iterator":
        return _CSTL.VecStr_rbegin(self)

    def rend(self) -> "std::vector< std::string >::reverse_iterator":
        return _CSTL.VecStr_rend(self)

    def clear(self) -> "void":
        return _CSTL.VecStr_clear(self)

    def get_allocator(self) -> "std::vector< std::string >::allocator_type":
        return _CSTL.VecStr_get_allocator(self)

    def pop_back(self) -> "void":
        return _CSTL.VecStr_pop_back(self)

    def erase(self, *args) -> "std::vector< std::string >::iterator":
        return _CSTL.VecStr_erase(self, *args)

    def __init__(self, *args):
        _CSTL.VecStr_swiginit(self, _CSTL.new_VecStr(*args))

    def push_back(self, x: "std::vector< std::string >::value_type const &") -> "void":
        return _CSTL.VecStr_push_back(self, x)

    def front(self) -> "std::vector< std::string >::value_type const &":
        return _CSTL.VecStr_front(self)

    def back(self) -> "std::vector< std::string >::value_type const &":
        return _CSTL.VecStr_back(self)

    def assign(self, n: "std::vector< std::string >::size_type", x: "std::vector< std::string >::value_type const &") -> "void":
        return _CSTL.VecStr_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _CSTL.VecStr_resize(self, *args)

    def insert(self, *args) -> "void":
        return _CSTL.VecStr_insert(self, *args)

    def reserve(self, n: "std::vector< std::string >::size_type") -> "void":
        return _CSTL.VecStr_reserve(self, n)

    def capacity(self) -> "std::vector< std::string >::size_type":
        return _CSTL.VecStr_capacity(self)
    __swig_destroy__ = _CSTL.delete_VecStr

# Register VecStr in _CSTL:
_CSTL.VecStr_swigregister(VecStr)

class VecFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.VecFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.VecFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.VecFloat___bool__(self)

    def __len__(self) -> "std::vector< float >::size_type":
        return _CSTL.VecFloat___len__(self)

    def __getslice__(self, i: "std::vector< float >::difference_type", j: "std::vector< float >::difference_type") -> "std::vector< float,std::allocator< float > > *":
        return _CSTL.VecFloat___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _CSTL.VecFloat___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< float >::difference_type", j: "std::vector< float >::difference_type") -> "void":
        return _CSTL.VecFloat___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _CSTL.VecFloat___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< float >::value_type const &":
        return _CSTL.VecFloat___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _CSTL.VecFloat___setitem__(self, *args)

    def pop(self) -> "std::vector< float >::value_type":
        return _CSTL.VecFloat_pop(self)

    def append(self, x: "std::vector< float >::value_type const &") -> "void":
        return _CSTL.VecFloat_append(self, x)

    def empty(self) -> "bool":
        return _CSTL.VecFloat_empty(self)

    def size(self) -> "std::vector< float >::size_type":
        return _CSTL.VecFloat_size(self)

    def swap(self, v: "VecFloat") -> "void":
        return _CSTL.VecFloat_swap(self, v)

    def begin(self) -> "std::vector< float >::iterator":
        return _CSTL.VecFloat_begin(self)

    def end(self) -> "std::vector< float >::iterator":
        return _CSTL.VecFloat_end(self)

    def rbegin(self) -> "std::vector< float >::reverse_iterator":
        return _CSTL.VecFloat_rbegin(self)

    def rend(self) -> "std::vector< float >::reverse_iterator":
        return _CSTL.VecFloat_rend(self)

    def clear(self) -> "void":
        return _CSTL.VecFloat_clear(self)

    def get_allocator(self) -> "std::vector< float >::allocator_type":
        return _CSTL.VecFloat_get_allocator(self)

    def pop_back(self) -> "void":
        return _CSTL.VecFloat_pop_back(self)

    def erase(self, *args) -> "std::vector< float >::iterator":
        return _CSTL.VecFloat_erase(self, *args)

    def __init__(self, *args):
        _CSTL.VecFloat_swiginit(self, _CSTL.new_VecFloat(*args))

    def push_back(self, x: "std::vector< float >::value_type const &") -> "void":
        return _CSTL.VecFloat_push_back(self, x)

    def front(self) -> "std::vector< float >::value_type const &":
        return _CSTL.VecFloat_front(self)

    def back(self) -> "std::vector< float >::value_type const &":
        return _CSTL.VecFloat_back(self)

    def assign(self, n: "std::vector< float >::size_type", x: "std::vector< float >::value_type const &") -> "void":
        return _CSTL.VecFloat_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _CSTL.VecFloat_resize(self, *args)

    def insert(self, *args) -> "void":
        return _CSTL.VecFloat_insert(self, *args)

    def reserve(self, n: "std::vector< float >::size_type") -> "void":
        return _CSTL.VecFloat_reserve(self, n)

    def capacity(self) -> "std::vector< float >::size_type":
        return _CSTL.VecFloat_capacity(self)
    __swig_destroy__ = _CSTL.delete_VecFloat

# Register VecFloat in _CSTL:
_CSTL.VecFloat_swigregister(VecFloat)

class VecDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.VecDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.VecDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.VecDouble___bool__(self)

    def __len__(self) -> "std::vector< double >::size_type":
        return _CSTL.VecDouble___len__(self)

    def __getslice__(self, i: "std::vector< double >::difference_type", j: "std::vector< double >::difference_type") -> "std::vector< double,std::allocator< double > > *":
        return _CSTL.VecDouble___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _CSTL.VecDouble___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< double >::difference_type", j: "std::vector< double >::difference_type") -> "void":
        return _CSTL.VecDouble___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _CSTL.VecDouble___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< double >::value_type const &":
        return _CSTL.VecDouble___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _CSTL.VecDouble___setitem__(self, *args)

    def pop(self) -> "std::vector< double >::value_type":
        return _CSTL.VecDouble_pop(self)

    def append(self, x: "std::vector< double >::value_type const &") -> "void":
        return _CSTL.VecDouble_append(self, x)

    def empty(self) -> "bool":
        return _CSTL.VecDouble_empty(self)

    def size(self) -> "std::vector< double >::size_type":
        return _CSTL.VecDouble_size(self)

    def swap(self, v: "VecDouble") -> "void":
        return _CSTL.VecDouble_swap(self, v)

    def begin(self) -> "std::vector< double >::iterator":
        return _CSTL.VecDouble_begin(self)

    def end(self) -> "std::vector< double >::iterator":
        return _CSTL.VecDouble_end(self)

    def rbegin(self) -> "std::vector< double >::reverse_iterator":
        return _CSTL.VecDouble_rbegin(self)

    def rend(self) -> "std::vector< double >::reverse_iterator":
        return _CSTL.VecDouble_rend(self)

    def clear(self) -> "void":
        return _CSTL.VecDouble_clear(self)

    def get_allocator(self) -> "std::vector< double >::allocator_type":
        return _CSTL.VecDouble_get_allocator(self)

    def pop_back(self) -> "void":
        return _CSTL.VecDouble_pop_back(self)

    def erase(self, *args) -> "std::vector< double >::iterator":
        return _CSTL.VecDouble_erase(self, *args)

    def __init__(self, *args):
        _CSTL.VecDouble_swiginit(self, _CSTL.new_VecDouble(*args))

    def push_back(self, x: "std::vector< double >::value_type const &") -> "void":
        return _CSTL.VecDouble_push_back(self, x)

    def front(self) -> "std::vector< double >::value_type const &":
        return _CSTL.VecDouble_front(self)

    def back(self) -> "std::vector< double >::value_type const &":
        return _CSTL.VecDouble_back(self)

    def assign(self, n: "std::vector< double >::size_type", x: "std::vector< double >::value_type const &") -> "void":
        return _CSTL.VecDouble_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _CSTL.VecDouble_resize(self, *args)

    def insert(self, *args) -> "void":
        return _CSTL.VecDouble_insert(self, *args)

    def reserve(self, n: "std::vector< double >::size_type") -> "void":
        return _CSTL.VecDouble_reserve(self, n)

    def capacity(self) -> "std::vector< double >::size_type":
        return _CSTL.VecDouble_capacity(self)
    __swig_destroy__ = _CSTL.delete_VecDouble

# Register VecDouble in _CSTL:
_CSTL.VecDouble_swigregister(VecDouble)

class VecBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.VecBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.VecBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.VecBool___bool__(self)

    def __len__(self) -> "std::vector< bool >::size_type":
        return _CSTL.VecBool___len__(self)

    def __getslice__(self, i: "std::vector< bool >::difference_type", j: "std::vector< bool >::difference_type") -> "std::vector< bool,std::allocator< bool > > *":
        return _CSTL.VecBool___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _CSTL.VecBool___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< bool >::difference_type", j: "std::vector< bool >::difference_type") -> "void":
        return _CSTL.VecBool___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _CSTL.VecBool___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< bool >::value_type":
        return _CSTL.VecBool___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _CSTL.VecBool___setitem__(self, *args)

    def pop(self) -> "std::vector< bool >::value_type":
        return _CSTL.VecBool_pop(self)

    def append(self, x: "std::vector< bool >::value_type") -> "void":
        return _CSTL.VecBool_append(self, x)

    def empty(self) -> "bool":
        return _CSTL.VecBool_empty(self)

    def size(self) -> "std::vector< bool >::size_type":
        return _CSTL.VecBool_size(self)

    def swap(self, v: "VecBool") -> "void":
        return _CSTL.VecBool_swap(self, v)

    def begin(self) -> "std::vector< bool >::iterator":
        return _CSTL.VecBool_begin(self)

    def end(self) -> "std::vector< bool >::iterator":
        return _CSTL.VecBool_end(self)

    def rbegin(self) -> "std::vector< bool >::reverse_iterator":
        return _CSTL.VecBool_rbegin(self)

    def rend(self) -> "std::vector< bool >::reverse_iterator":
        return _CSTL.VecBool_rend(self)

    def clear(self) -> "void":
        return _CSTL.VecBool_clear(self)

    def get_allocator(self) -> "std::vector< bool >::allocator_type":
        return _CSTL.VecBool_get_allocator(self)

    def pop_back(self) -> "void":
        return _CSTL.VecBool_pop_back(self)

    def erase(self, *args) -> "std::vector< bool >::iterator":
        return _CSTL.VecBool_erase(self, *args)

    def __init__(self, *args):
        _CSTL.VecBool_swiginit(self, _CSTL.new_VecBool(*args))

    def push_back(self, x: "std::vector< bool >::value_type") -> "void":
        return _CSTL.VecBool_push_back(self, x)

    def front(self) -> "std::vector< bool >::value_type":
        return _CSTL.VecBool_front(self)

    def back(self) -> "std::vector< bool >::value_type":
        return _CSTL.VecBool_back(self)

    def assign(self, n: "std::vector< bool >::size_type", x: "std::vector< bool >::value_type") -> "void":
        return _CSTL.VecBool_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _CSTL.VecBool_resize(self, *args)

    def insert(self, *args) -> "void":
        return _CSTL.VecBool_insert(self, *args)

    def reserve(self, n: "std::vector< bool >::size_type") -> "void":
        return _CSTL.VecBool_reserve(self, n)

    def capacity(self) -> "std::vector< bool >::size_type":
        return _CSTL.VecBool_capacity(self)
    __swig_destroy__ = _CSTL.delete_VecBool

# Register VecBool in _CSTL:
_CSTL.VecBool_swigregister(VecBool)

class VecLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.VecLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.VecLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.VecLong___bool__(self)

    def __len__(self) -> "std::vector< std::int64_t >::size_type":
        return _CSTL.VecLong___len__(self)

    def __getslice__(self, i: "std::vector< std::int64_t >::difference_type", j: "std::vector< std::int64_t >::difference_type") -> "std::vector< std::int64_t,std::allocator< std::int64_t > > *":
        return _CSTL.VecLong___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _CSTL.VecLong___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::int64_t >::difference_type", j: "std::vector< std::int64_t >::difference_type") -> "void":
        return _CSTL.VecLong___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _CSTL.VecLong___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::int64_t >::value_type const &":
        return _CSTL.VecLong___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _CSTL.VecLong___setitem__(self, *args)

    def pop(self) -> "std::vector< std::int64_t >::value_type":
        return _CSTL.VecLong_pop(self)

    def append(self, x: "std::vector< std::int64_t >::value_type const &") -> "void":
        return _CSTL.VecLong_append(self, x)

    def empty(self) -> "bool":
        return _CSTL.VecLong_empty(self)

    def size(self) -> "std::vector< std::int64_t >::size_type":
        return _CSTL.VecLong_size(self)

    def swap(self, v: "VecLong") -> "void":
        return _CSTL.VecLong_swap(self, v)

    def begin(self) -> "std::vector< std::int64_t >::iterator":
        return _CSTL.VecLong_begin(self)

    def end(self) -> "std::vector< std::int64_t >::iterator":
        return _CSTL.VecLong_end(self)

    def rbegin(self) -> "std::vector< std::int64_t >::reverse_iterator":
        return _CSTL.VecLong_rbegin(self)

    def rend(self) -> "std::vector< std::int64_t >::reverse_iterator":
        return _CSTL.VecLong_rend(self)

    def clear(self) -> "void":
        return _CSTL.VecLong_clear(self)

    def get_allocator(self) -> "std::vector< std::int64_t >::allocator_type":
        return _CSTL.VecLong_get_allocator(self)

    def pop_back(self) -> "void":
        return _CSTL.VecLong_pop_back(self)

    def erase(self, *args) -> "std::vector< std::int64_t >::iterator":
        return _CSTL.VecLong_erase(self, *args)

    def __init__(self, *args):
        _CSTL.VecLong_swiginit(self, _CSTL.new_VecLong(*args))

    def push_back(self, x: "std::vector< std::int64_t >::value_type const &") -> "void":
        return _CSTL.VecLong_push_back(self, x)

    def front(self) -> "std::vector< std::int64_t >::value_type const &":
        return _CSTL.VecLong_front(self)

    def back(self) -> "std::vector< std::int64_t >::value_type const &":
        return _CSTL.VecLong_back(self)

    def assign(self, n: "std::vector< std::int64_t >::size_type", x: "std::vector< std::int64_t >::value_type const &") -> "void":
        return _CSTL.VecLong_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _CSTL.VecLong_resize(self, *args)

    def insert(self, *args) -> "void":
        return _CSTL.VecLong_insert(self, *args)

    def reserve(self, n: "std::vector< std::int64_t >::size_type") -> "void":
        return _CSTL.VecLong_reserve(self, n)

    def capacity(self) -> "std::vector< std::int64_t >::size_type":
        return _CSTL.VecLong_capacity(self)
    __swig_destroy__ = _CSTL.delete_VecLong

# Register VecLong in _CSTL:
_CSTL.VecLong_swigregister(VecLong)

class SetInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.SetInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.SetInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.SetInt___bool__(self)

    def __len__(self) -> "std::unordered_set< int >::size_type":
        return _CSTL.SetInt___len__(self)

    def append(self, x: "std::unordered_set< int >::value_type") -> "void":
        return _CSTL.SetInt_append(self, x)

    def __contains__(self, x: "std::unordered_set< int >::value_type") -> "bool":
        return _CSTL.SetInt___contains__(self, x)

    def __getitem__(self, i: "std::unordered_set< int >::difference_type") -> "std::unordered_set< int >::value_type":
        return _CSTL.SetInt___getitem__(self, i)

    def __init__(self, *args):
        _CSTL.SetInt_swiginit(self, _CSTL.new_SetInt(*args))

    def empty(self) -> "bool":
        return _CSTL.SetInt_empty(self)

    def size(self) -> "std::unordered_set< int >::size_type":
        return _CSTL.SetInt_size(self)

    def clear(self) -> "void":
        return _CSTL.SetInt_clear(self)

    def swap(self, v: "SetInt") -> "void":
        return _CSTL.SetInt_swap(self, v)

    def count(self, x: "std::unordered_set< int >::key_type const &") -> "std::unordered_set< int >::size_type":
        return _CSTL.SetInt_count(self, x)

    def begin(self) -> "std::unordered_set< int >::iterator":
        return _CSTL.SetInt_begin(self)

    def end(self) -> "std::unordered_set< int >::iterator":
        return _CSTL.SetInt_end(self)

    def erase(self, *args) -> "void":
        return _CSTL.SetInt_erase(self, *args)

    def find(self, x: "std::unordered_set< int >::key_type const &") -> "std::unordered_set< int >::iterator":
        return _CSTL.SetInt_find(self, x)

    def equal_range(self, x: "std::unordered_set< int >::key_type const &") -> "std::pair< std::unordered_set< int >::iterator,std::unordered_set< int >::iterator >":
        return _CSTL.SetInt_equal_range(self, x)

    def insert(self, __x: "std::unordered_set< int >::value_type const &") -> "std::pair< std::unordered_set< int >::iterator,bool >":
        return _CSTL.SetInt_insert(self, __x)
    __swig_destroy__ = _CSTL.delete_SetInt

# Register SetInt in _CSTL:
_CSTL.SetInt_swigregister(SetInt)

class SetStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.SetStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.SetStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.SetStr___bool__(self)

    def __len__(self) -> "std::unordered_set< std::string >::size_type":
        return _CSTL.SetStr___len__(self)

    def append(self, x: "std::unordered_set< std::string >::value_type") -> "void":
        return _CSTL.SetStr_append(self, x)

    def __contains__(self, x: "std::unordered_set< std::string >::value_type") -> "bool":
        return _CSTL.SetStr___contains__(self, x)

    def __getitem__(self, i: "std::unordered_set< std::string >::difference_type") -> "std::unordered_set< std::string >::value_type":
        return _CSTL.SetStr___getitem__(self, i)

    def __init__(self, *args):
        _CSTL.SetStr_swiginit(self, _CSTL.new_SetStr(*args))

    def empty(self) -> "bool":
        return _CSTL.SetStr_empty(self)

    def size(self) -> "std::unordered_set< std::string >::size_type":
        return _CSTL.SetStr_size(self)

    def clear(self) -> "void":
        return _CSTL.SetStr_clear(self)

    def swap(self, v: "SetStr") -> "void":
        return _CSTL.SetStr_swap(self, v)

    def count(self, x: "std::unordered_set< std::string >::key_type const &") -> "std::unordered_set< std::string >::size_type":
        return _CSTL.SetStr_count(self, x)

    def begin(self) -> "std::unordered_set< std::string >::iterator":
        return _CSTL.SetStr_begin(self)

    def end(self) -> "std::unordered_set< std::string >::iterator":
        return _CSTL.SetStr_end(self)

    def erase(self, *args) -> "void":
        return _CSTL.SetStr_erase(self, *args)

    def find(self, x: "std::unordered_set< std::string >::key_type const &") -> "std::unordered_set< std::string >::iterator":
        return _CSTL.SetStr_find(self, x)

    def equal_range(self, x: "std::unordered_set< std::string >::key_type const &") -> "std::pair< std::unordered_set< std::string >::iterator,std::unordered_set< std::string >::iterator >":
        return _CSTL.SetStr_equal_range(self, x)

    def insert(self, __x: "std::unordered_set< std::string >::value_type const &") -> "std::pair< std::unordered_set< std::string >::iterator,bool >":
        return _CSTL.SetStr_insert(self, __x)
    __swig_destroy__ = _CSTL.delete_SetStr

# Register SetStr in _CSTL:
_CSTL.SetStr_swigregister(SetStr)

class SetLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.SetLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.SetLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.SetLong___bool__(self)

    def __len__(self) -> "std::unordered_set< std::int64_t >::size_type":
        return _CSTL.SetLong___len__(self)

    def append(self, x: "std::unordered_set< std::int64_t >::value_type") -> "void":
        return _CSTL.SetLong_append(self, x)

    def __contains__(self, x: "std::unordered_set< std::int64_t >::value_type") -> "bool":
        return _CSTL.SetLong___contains__(self, x)

    def __getitem__(self, i: "std::unordered_set< std::int64_t >::difference_type") -> "std::unordered_set< std::int64_t >::value_type":
        return _CSTL.SetLong___getitem__(self, i)

    def __init__(self, *args):
        _CSTL.SetLong_swiginit(self, _CSTL.new_SetLong(*args))

    def empty(self) -> "bool":
        return _CSTL.SetLong_empty(self)

    def size(self) -> "std::unordered_set< std::int64_t >::size_type":
        return _CSTL.SetLong_size(self)

    def clear(self) -> "void":
        return _CSTL.SetLong_clear(self)

    def swap(self, v: "SetLong") -> "void":
        return _CSTL.SetLong_swap(self, v)

    def count(self, x: "std::unordered_set< std::int64_t >::key_type const &") -> "std::unordered_set< std::int64_t >::size_type":
        return _CSTL.SetLong_count(self, x)

    def begin(self) -> "std::unordered_set< std::int64_t >::iterator":
        return _CSTL.SetLong_begin(self)

    def end(self) -> "std::unordered_set< std::int64_t >::iterator":
        return _CSTL.SetLong_end(self)

    def erase(self, *args) -> "void":
        return _CSTL.SetLong_erase(self, *args)

    def find(self, x: "std::unordered_set< std::int64_t >::key_type const &") -> "std::unordered_set< std::int64_t >::iterator":
        return _CSTL.SetLong_find(self, x)

    def equal_range(self, x: "std::unordered_set< std::int64_t >::key_type const &") -> "std::pair< std::unordered_set< std::int64_t >::iterator,std::unordered_set< std::int64_t >::iterator >":
        return _CSTL.SetLong_equal_range(self, x)

    def insert(self, __x: "std::unordered_set< std::int64_t >::value_type const &") -> "std::pair< std::unordered_set< std::int64_t >::iterator,bool >":
        return _CSTL.SetLong_insert(self, __x)
    __swig_destroy__ = _CSTL.delete_SetLong

# Register SetLong in _CSTL:
_CSTL.SetLong_swigregister(SetLong)

class MapIntInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapIntInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapIntInt___bool__(self)

    def __len__(self) -> "std::unordered_map< int,int >::size_type":
        return _CSTL.MapIntInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,int >::key_type const &") -> "std::unordered_map< int,int >::mapped_type const &":
        return _CSTL.MapIntInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,int >::key_type const &") -> "void":
        return _CSTL.MapIntInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,int >::key_type const &") -> "bool":
        return _CSTL.MapIntInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapIntInt_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapIntInt_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapIntInt_items(self)

    def __contains__(self, key: "std::unordered_map< int,int >::key_type const &") -> "bool":
        return _CSTL.MapIntInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapIntInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapIntInt_asdict(self)

    def __init__(self, *args):
        _CSTL.MapIntInt_swiginit(self, _CSTL.new_MapIntInt(*args))

    def empty(self) -> "bool":
        return _CSTL.MapIntInt_empty(self)

    def size(self) -> "std::unordered_map< int,int >::size_type":
        return _CSTL.MapIntInt_size(self)

    def swap(self, v: "MapIntInt") -> "void":
        return _CSTL.MapIntInt_swap(self, v)

    def begin(self) -> "std::unordered_map< int,int >::iterator":
        return _CSTL.MapIntInt_begin(self)

    def end(self) -> "std::unordered_map< int,int >::iterator":
        return _CSTL.MapIntInt_end(self)

    def clear(self) -> "void":
        return _CSTL.MapIntInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,int >::allocator_type":
        return _CSTL.MapIntInt_get_allocator(self)

    def count(self, x: "std::unordered_map< int,int >::key_type const &") -> "std::unordered_map< int,int >::size_type":
        return _CSTL.MapIntInt_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapIntInt_erase(self, *args)

    def find(self, x: "std::unordered_map< int,int >::key_type const &") -> "std::unordered_map< int,int >::iterator":
        return _CSTL.MapIntInt_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapIntInt

# Register MapIntInt in _CSTL:
_CSTL.MapIntInt_swigregister(MapIntInt)

class MapIntStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapIntStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapIntStr___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::string >::size_type":
        return _CSTL.MapIntStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::string >::key_type const &") -> "std::unordered_map< int,std::string >::mapped_type const &":
        return _CSTL.MapIntStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::string >::key_type const &") -> "void":
        return _CSTL.MapIntStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::string >::key_type const &") -> "bool":
        return _CSTL.MapIntStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapIntStr_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapIntStr_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapIntStr_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::string >::key_type const &") -> "bool":
        return _CSTL.MapIntStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapIntStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapIntStr_asdict(self)

    def __init__(self, *args):
        _CSTL.MapIntStr_swiginit(self, _CSTL.new_MapIntStr(*args))

    def empty(self) -> "bool":
        return _CSTL.MapIntStr_empty(self)

    def size(self) -> "std::unordered_map< int,std::string >::size_type":
        return _CSTL.MapIntStr_size(self)

    def swap(self, v: "MapIntStr") -> "void":
        return _CSTL.MapIntStr_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::string >::iterator":
        return _CSTL.MapIntStr_begin(self)

    def end(self) -> "std::unordered_map< int,std::string >::iterator":
        return _CSTL.MapIntStr_end(self)

    def clear(self) -> "void":
        return _CSTL.MapIntStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::string >::allocator_type":
        return _CSTL.MapIntStr_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::string >::key_type const &") -> "std::unordered_map< int,std::string >::size_type":
        return _CSTL.MapIntStr_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapIntStr_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::string >::key_type const &") -> "std::unordered_map< int,std::string >::iterator":
        return _CSTL.MapIntStr_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapIntStr

# Register MapIntStr in _CSTL:
_CSTL.MapIntStr_swigregister(MapIntStr)

class MapIntFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapIntFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapIntFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< int,float >::size_type":
        return _CSTL.MapIntFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,float >::key_type const &") -> "std::unordered_map< int,float >::mapped_type const &":
        return _CSTL.MapIntFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,float >::key_type const &") -> "void":
        return _CSTL.MapIntFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,float >::key_type const &") -> "bool":
        return _CSTL.MapIntFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapIntFloat_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapIntFloat_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapIntFloat_items(self)

    def __contains__(self, key: "std::unordered_map< int,float >::key_type const &") -> "bool":
        return _CSTL.MapIntFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapIntFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapIntFloat_asdict(self)

    def __init__(self, *args):
        _CSTL.MapIntFloat_swiginit(self, _CSTL.new_MapIntFloat(*args))

    def empty(self) -> "bool":
        return _CSTL.MapIntFloat_empty(self)

    def size(self) -> "std::unordered_map< int,float >::size_type":
        return _CSTL.MapIntFloat_size(self)

    def swap(self, v: "MapIntFloat") -> "void":
        return _CSTL.MapIntFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< int,float >::iterator":
        return _CSTL.MapIntFloat_begin(self)

    def end(self) -> "std::unordered_map< int,float >::iterator":
        return _CSTL.MapIntFloat_end(self)

    def clear(self) -> "void":
        return _CSTL.MapIntFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,float >::allocator_type":
        return _CSTL.MapIntFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< int,float >::key_type const &") -> "std::unordered_map< int,float >::size_type":
        return _CSTL.MapIntFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapIntFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< int,float >::key_type const &") -> "std::unordered_map< int,float >::iterator":
        return _CSTL.MapIntFloat_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapIntFloat

# Register MapIntFloat in _CSTL:
_CSTL.MapIntFloat_swigregister(MapIntFloat)

class MapIntDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapIntDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapIntDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< int,double >::size_type":
        return _CSTL.MapIntDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,double >::key_type const &") -> "std::unordered_map< int,double >::mapped_type const &":
        return _CSTL.MapIntDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,double >::key_type const &") -> "void":
        return _CSTL.MapIntDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,double >::key_type const &") -> "bool":
        return _CSTL.MapIntDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapIntDouble_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapIntDouble_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapIntDouble_items(self)

    def __contains__(self, key: "std::unordered_map< int,double >::key_type const &") -> "bool":
        return _CSTL.MapIntDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapIntDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapIntDouble_asdict(self)

    def __init__(self, *args):
        _CSTL.MapIntDouble_swiginit(self, _CSTL.new_MapIntDouble(*args))

    def empty(self) -> "bool":
        return _CSTL.MapIntDouble_empty(self)

    def size(self) -> "std::unordered_map< int,double >::size_type":
        return _CSTL.MapIntDouble_size(self)

    def swap(self, v: "MapIntDouble") -> "void":
        return _CSTL.MapIntDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< int,double >::iterator":
        return _CSTL.MapIntDouble_begin(self)

    def end(self) -> "std::unordered_map< int,double >::iterator":
        return _CSTL.MapIntDouble_end(self)

    def clear(self) -> "void":
        return _CSTL.MapIntDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,double >::allocator_type":
        return _CSTL.MapIntDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< int,double >::key_type const &") -> "std::unordered_map< int,double >::size_type":
        return _CSTL.MapIntDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapIntDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< int,double >::key_type const &") -> "std::unordered_map< int,double >::iterator":
        return _CSTL.MapIntDouble_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapIntDouble

# Register MapIntDouble in _CSTL:
_CSTL.MapIntDouble_swigregister(MapIntDouble)

class MapIntBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapIntBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapIntBool___bool__(self)

    def __len__(self) -> "std::unordered_map< int,bool >::size_type":
        return _CSTL.MapIntBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,bool >::key_type const &") -> "std::unordered_map< int,bool >::mapped_type const &":
        return _CSTL.MapIntBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,bool >::key_type const &") -> "void":
        return _CSTL.MapIntBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,bool >::key_type const &") -> "bool":
        return _CSTL.MapIntBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapIntBool_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapIntBool_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapIntBool_items(self)

    def __contains__(self, key: "std::unordered_map< int,bool >::key_type const &") -> "bool":
        return _CSTL.MapIntBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapIntBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapIntBool_asdict(self)

    def __init__(self, *args):
        _CSTL.MapIntBool_swiginit(self, _CSTL.new_MapIntBool(*args))

    def empty(self) -> "bool":
        return _CSTL.MapIntBool_empty(self)

    def size(self) -> "std::unordered_map< int,bool >::size_type":
        return _CSTL.MapIntBool_size(self)

    def swap(self, v: "MapIntBool") -> "void":
        return _CSTL.MapIntBool_swap(self, v)

    def begin(self) -> "std::unordered_map< int,bool >::iterator":
        return _CSTL.MapIntBool_begin(self)

    def end(self) -> "std::unordered_map< int,bool >::iterator":
        return _CSTL.MapIntBool_end(self)

    def clear(self) -> "void":
        return _CSTL.MapIntBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,bool >::allocator_type":
        return _CSTL.MapIntBool_get_allocator(self)

    def count(self, x: "std::unordered_map< int,bool >::key_type const &") -> "std::unordered_map< int,bool >::size_type":
        return _CSTL.MapIntBool_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapIntBool_erase(self, *args)

    def find(self, x: "std::unordered_map< int,bool >::key_type const &") -> "std::unordered_map< int,bool >::iterator":
        return _CSTL.MapIntBool_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapIntBool

# Register MapIntBool in _CSTL:
_CSTL.MapIntBool_swigregister(MapIntBool)

class MapIntLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapIntLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapIntLong___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::int64_t >::size_type":
        return _CSTL.MapIntLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::int64_t >::key_type const &") -> "std::unordered_map< int,std::int64_t >::mapped_type const &":
        return _CSTL.MapIntLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::int64_t >::key_type const &") -> "void":
        return _CSTL.MapIntLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::int64_t >::key_type const &") -> "bool":
        return _CSTL.MapIntLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapIntLong_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapIntLong_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapIntLong_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::int64_t >::key_type const &") -> "bool":
        return _CSTL.MapIntLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapIntLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapIntLong_asdict(self)

    def __init__(self, *args):
        _CSTL.MapIntLong_swiginit(self, _CSTL.new_MapIntLong(*args))

    def empty(self) -> "bool":
        return _CSTL.MapIntLong_empty(self)

    def size(self) -> "std::unordered_map< int,std::int64_t >::size_type":
        return _CSTL.MapIntLong_size(self)

    def swap(self, v: "MapIntLong") -> "void":
        return _CSTL.MapIntLong_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::int64_t >::iterator":
        return _CSTL.MapIntLong_begin(self)

    def end(self) -> "std::unordered_map< int,std::int64_t >::iterator":
        return _CSTL.MapIntLong_end(self)

    def clear(self) -> "void":
        return _CSTL.MapIntLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::int64_t >::allocator_type":
        return _CSTL.MapIntLong_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::int64_t >::key_type const &") -> "std::unordered_map< int,std::int64_t >::size_type":
        return _CSTL.MapIntLong_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapIntLong_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::int64_t >::key_type const &") -> "std::unordered_map< int,std::int64_t >::iterator":
        return _CSTL.MapIntLong_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapIntLong

# Register MapIntLong in _CSTL:
_CSTL.MapIntLong_swigregister(MapIntLong)

class MapStrInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapStrInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapStrInt___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,int >::size_type":
        return _CSTL.MapStrInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,int >::key_type const &") -> "std::unordered_map< std::string,int >::mapped_type const &":
        return _CSTL.MapStrInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,int >::key_type const &") -> "void":
        return _CSTL.MapStrInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,int >::key_type const &") -> "bool":
        return _CSTL.MapStrInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapStrInt_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapStrInt_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapStrInt_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,int >::key_type const &") -> "bool":
        return _CSTL.MapStrInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapStrInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapStrInt_asdict(self)

    def __init__(self, *args):
        _CSTL.MapStrInt_swiginit(self, _CSTL.new_MapStrInt(*args))

    def empty(self) -> "bool":
        return _CSTL.MapStrInt_empty(self)

    def size(self) -> "std::unordered_map< std::string,int >::size_type":
        return _CSTL.MapStrInt_size(self)

    def swap(self, v: "MapStrInt") -> "void":
        return _CSTL.MapStrInt_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,int >::iterator":
        return _CSTL.MapStrInt_begin(self)

    def end(self) -> "std::unordered_map< std::string,int >::iterator":
        return _CSTL.MapStrInt_end(self)

    def clear(self) -> "void":
        return _CSTL.MapStrInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,int >::allocator_type":
        return _CSTL.MapStrInt_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,int >::key_type const &") -> "std::unordered_map< std::string,int >::size_type":
        return _CSTL.MapStrInt_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapStrInt_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,int >::key_type const &") -> "std::unordered_map< std::string,int >::iterator":
        return _CSTL.MapStrInt_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapStrInt

# Register MapStrInt in _CSTL:
_CSTL.MapStrInt_swigregister(MapStrInt)

class MapStrStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapStrStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapStrStr___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::string >::size_type":
        return _CSTL.MapStrStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::string >::key_type const &") -> "std::unordered_map< std::string,std::string >::mapped_type const &":
        return _CSTL.MapStrStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::string >::key_type const &") -> "void":
        return _CSTL.MapStrStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::string >::key_type const &") -> "bool":
        return _CSTL.MapStrStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapStrStr_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapStrStr_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapStrStr_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::string >::key_type const &") -> "bool":
        return _CSTL.MapStrStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapStrStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapStrStr_asdict(self)

    def __init__(self, *args):
        _CSTL.MapStrStr_swiginit(self, _CSTL.new_MapStrStr(*args))

    def empty(self) -> "bool":
        return _CSTL.MapStrStr_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::string >::size_type":
        return _CSTL.MapStrStr_size(self)

    def swap(self, v: "MapStrStr") -> "void":
        return _CSTL.MapStrStr_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::string >::iterator":
        return _CSTL.MapStrStr_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::string >::iterator":
        return _CSTL.MapStrStr_end(self)

    def clear(self) -> "void":
        return _CSTL.MapStrStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::string >::allocator_type":
        return _CSTL.MapStrStr_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::string >::key_type const &") -> "std::unordered_map< std::string,std::string >::size_type":
        return _CSTL.MapStrStr_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapStrStr_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::string >::key_type const &") -> "std::unordered_map< std::string,std::string >::iterator":
        return _CSTL.MapStrStr_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapStrStr

# Register MapStrStr in _CSTL:
_CSTL.MapStrStr_swigregister(MapStrStr)

class MapStrFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapStrFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapStrFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,float >::size_type":
        return _CSTL.MapStrFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,float >::key_type const &") -> "std::unordered_map< std::string,float >::mapped_type const &":
        return _CSTL.MapStrFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,float >::key_type const &") -> "void":
        return _CSTL.MapStrFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,float >::key_type const &") -> "bool":
        return _CSTL.MapStrFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapStrFloat_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapStrFloat_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapStrFloat_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,float >::key_type const &") -> "bool":
        return _CSTL.MapStrFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapStrFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapStrFloat_asdict(self)

    def __init__(self, *args):
        _CSTL.MapStrFloat_swiginit(self, _CSTL.new_MapStrFloat(*args))

    def empty(self) -> "bool":
        return _CSTL.MapStrFloat_empty(self)

    def size(self) -> "std::unordered_map< std::string,float >::size_type":
        return _CSTL.MapStrFloat_size(self)

    def swap(self, v: "MapStrFloat") -> "void":
        return _CSTL.MapStrFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,float >::iterator":
        return _CSTL.MapStrFloat_begin(self)

    def end(self) -> "std::unordered_map< std::string,float >::iterator":
        return _CSTL.MapStrFloat_end(self)

    def clear(self) -> "void":
        return _CSTL.MapStrFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,float >::allocator_type":
        return _CSTL.MapStrFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,float >::key_type const &") -> "std::unordered_map< std::string,float >::size_type":
        return _CSTL.MapStrFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapStrFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,float >::key_type const &") -> "std::unordered_map< std::string,float >::iterator":
        return _CSTL.MapStrFloat_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapStrFloat

# Register MapStrFloat in _CSTL:
_CSTL.MapStrFloat_swigregister(MapStrFloat)

class MapStrDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapStrDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapStrDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,double >::size_type":
        return _CSTL.MapStrDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,double >::key_type const &") -> "std::unordered_map< std::string,double >::mapped_type const &":
        return _CSTL.MapStrDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,double >::key_type const &") -> "void":
        return _CSTL.MapStrDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,double >::key_type const &") -> "bool":
        return _CSTL.MapStrDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapStrDouble_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapStrDouble_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapStrDouble_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,double >::key_type const &") -> "bool":
        return _CSTL.MapStrDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapStrDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapStrDouble_asdict(self)

    def __init__(self, *args):
        _CSTL.MapStrDouble_swiginit(self, _CSTL.new_MapStrDouble(*args))

    def empty(self) -> "bool":
        return _CSTL.MapStrDouble_empty(self)

    def size(self) -> "std::unordered_map< std::string,double >::size_type":
        return _CSTL.MapStrDouble_size(self)

    def swap(self, v: "MapStrDouble") -> "void":
        return _CSTL.MapStrDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,double >::iterator":
        return _CSTL.MapStrDouble_begin(self)

    def end(self) -> "std::unordered_map< std::string,double >::iterator":
        return _CSTL.MapStrDouble_end(self)

    def clear(self) -> "void":
        return _CSTL.MapStrDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,double >::allocator_type":
        return _CSTL.MapStrDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,double >::key_type const &") -> "std::unordered_map< std::string,double >::size_type":
        return _CSTL.MapStrDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapStrDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,double >::key_type const &") -> "std::unordered_map< std::string,double >::iterator":
        return _CSTL.MapStrDouble_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapStrDouble

# Register MapStrDouble in _CSTL:
_CSTL.MapStrDouble_swigregister(MapStrDouble)

class MapStrBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapStrBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapStrBool___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,bool >::size_type":
        return _CSTL.MapStrBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,bool >::key_type const &") -> "std::unordered_map< std::string,bool >::mapped_type const &":
        return _CSTL.MapStrBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,bool >::key_type const &") -> "void":
        return _CSTL.MapStrBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,bool >::key_type const &") -> "bool":
        return _CSTL.MapStrBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapStrBool_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapStrBool_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapStrBool_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,bool >::key_type const &") -> "bool":
        return _CSTL.MapStrBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapStrBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapStrBool_asdict(self)

    def __init__(self, *args):
        _CSTL.MapStrBool_swiginit(self, _CSTL.new_MapStrBool(*args))

    def empty(self) -> "bool":
        return _CSTL.MapStrBool_empty(self)

    def size(self) -> "std::unordered_map< std::string,bool >::size_type":
        return _CSTL.MapStrBool_size(self)

    def swap(self, v: "MapStrBool") -> "void":
        return _CSTL.MapStrBool_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,bool >::iterator":
        return _CSTL.MapStrBool_begin(self)

    def end(self) -> "std::unordered_map< std::string,bool >::iterator":
        return _CSTL.MapStrBool_end(self)

    def clear(self) -> "void":
        return _CSTL.MapStrBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,bool >::allocator_type":
        return _CSTL.MapStrBool_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,bool >::key_type const &") -> "std::unordered_map< std::string,bool >::size_type":
        return _CSTL.MapStrBool_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapStrBool_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,bool >::key_type const &") -> "std::unordered_map< std::string,bool >::iterator":
        return _CSTL.MapStrBool_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapStrBool

# Register MapStrBool in _CSTL:
_CSTL.MapStrBool_swigregister(MapStrBool)

class MapStrLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapStrLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapStrLong___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::int64_t >::size_type":
        return _CSTL.MapStrLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::int64_t >::key_type const &") -> "std::unordered_map< std::string,std::int64_t >::mapped_type const &":
        return _CSTL.MapStrLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::int64_t >::key_type const &") -> "void":
        return _CSTL.MapStrLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::int64_t >::key_type const &") -> "bool":
        return _CSTL.MapStrLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapStrLong_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapStrLong_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapStrLong_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::int64_t >::key_type const &") -> "bool":
        return _CSTL.MapStrLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapStrLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapStrLong_asdict(self)

    def __init__(self, *args):
        _CSTL.MapStrLong_swiginit(self, _CSTL.new_MapStrLong(*args))

    def empty(self) -> "bool":
        return _CSTL.MapStrLong_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::int64_t >::size_type":
        return _CSTL.MapStrLong_size(self)

    def swap(self, v: "MapStrLong") -> "void":
        return _CSTL.MapStrLong_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::int64_t >::iterator":
        return _CSTL.MapStrLong_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::int64_t >::iterator":
        return _CSTL.MapStrLong_end(self)

    def clear(self) -> "void":
        return _CSTL.MapStrLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::int64_t >::allocator_type":
        return _CSTL.MapStrLong_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::int64_t >::key_type const &") -> "std::unordered_map< std::string,std::int64_t >::size_type":
        return _CSTL.MapStrLong_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapStrLong_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::int64_t >::key_type const &") -> "std::unordered_map< std::string,std::int64_t >::iterator":
        return _CSTL.MapStrLong_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapStrLong

# Register MapStrLong in _CSTL:
_CSTL.MapStrLong_swigregister(MapStrLong)

class MapLongInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapLongInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapLongInt___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,int >::size_type":
        return _CSTL.MapLongInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,int >::key_type const &") -> "std::unordered_map< std::int64_t,int >::mapped_type const &":
        return _CSTL.MapLongInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,int >::key_type const &") -> "void":
        return _CSTL.MapLongInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,int >::key_type const &") -> "bool":
        return _CSTL.MapLongInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapLongInt_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapLongInt_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapLongInt_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,int >::key_type const &") -> "bool":
        return _CSTL.MapLongInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapLongInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapLongInt_asdict(self)

    def __init__(self, *args):
        _CSTL.MapLongInt_swiginit(self, _CSTL.new_MapLongInt(*args))

    def empty(self) -> "bool":
        return _CSTL.MapLongInt_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,int >::size_type":
        return _CSTL.MapLongInt_size(self)

    def swap(self, v: "MapLongInt") -> "void":
        return _CSTL.MapLongInt_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,int >::iterator":
        return _CSTL.MapLongInt_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,int >::iterator":
        return _CSTL.MapLongInt_end(self)

    def clear(self) -> "void":
        return _CSTL.MapLongInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,int >::allocator_type":
        return _CSTL.MapLongInt_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,int >::key_type const &") -> "std::unordered_map< std::int64_t,int >::size_type":
        return _CSTL.MapLongInt_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapLongInt_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,int >::key_type const &") -> "std::unordered_map< std::int64_t,int >::iterator":
        return _CSTL.MapLongInt_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapLongInt

# Register MapLongInt in _CSTL:
_CSTL.MapLongInt_swigregister(MapLongInt)

class MapLongStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapLongStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapLongStr___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::string >::size_type":
        return _CSTL.MapLongStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::string >::key_type const &") -> "std::unordered_map< std::int64_t,std::string >::mapped_type const &":
        return _CSTL.MapLongStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::string >::key_type const &") -> "void":
        return _CSTL.MapLongStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::string >::key_type const &") -> "bool":
        return _CSTL.MapLongStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapLongStr_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapLongStr_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapLongStr_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::string >::key_type const &") -> "bool":
        return _CSTL.MapLongStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapLongStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapLongStr_asdict(self)

    def __init__(self, *args):
        _CSTL.MapLongStr_swiginit(self, _CSTL.new_MapLongStr(*args))

    def empty(self) -> "bool":
        return _CSTL.MapLongStr_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::string >::size_type":
        return _CSTL.MapLongStr_size(self)

    def swap(self, v: "MapLongStr") -> "void":
        return _CSTL.MapLongStr_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::string >::iterator":
        return _CSTL.MapLongStr_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::string >::iterator":
        return _CSTL.MapLongStr_end(self)

    def clear(self) -> "void":
        return _CSTL.MapLongStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::string >::allocator_type":
        return _CSTL.MapLongStr_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::string >::key_type const &") -> "std::unordered_map< std::int64_t,std::string >::size_type":
        return _CSTL.MapLongStr_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapLongStr_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::string >::key_type const &") -> "std::unordered_map< std::int64_t,std::string >::iterator":
        return _CSTL.MapLongStr_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapLongStr

# Register MapLongStr in _CSTL:
_CSTL.MapLongStr_swigregister(MapLongStr)

class MapLongFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapLongFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapLongFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,float >::size_type":
        return _CSTL.MapLongFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,float >::key_type const &") -> "std::unordered_map< std::int64_t,float >::mapped_type const &":
        return _CSTL.MapLongFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,float >::key_type const &") -> "void":
        return _CSTL.MapLongFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,float >::key_type const &") -> "bool":
        return _CSTL.MapLongFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapLongFloat_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapLongFloat_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapLongFloat_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,float >::key_type const &") -> "bool":
        return _CSTL.MapLongFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapLongFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapLongFloat_asdict(self)

    def __init__(self, *args):
        _CSTL.MapLongFloat_swiginit(self, _CSTL.new_MapLongFloat(*args))

    def empty(self) -> "bool":
        return _CSTL.MapLongFloat_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,float >::size_type":
        return _CSTL.MapLongFloat_size(self)

    def swap(self, v: "MapLongFloat") -> "void":
        return _CSTL.MapLongFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,float >::iterator":
        return _CSTL.MapLongFloat_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,float >::iterator":
        return _CSTL.MapLongFloat_end(self)

    def clear(self) -> "void":
        return _CSTL.MapLongFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,float >::allocator_type":
        return _CSTL.MapLongFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,float >::key_type const &") -> "std::unordered_map< std::int64_t,float >::size_type":
        return _CSTL.MapLongFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapLongFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,float >::key_type const &") -> "std::unordered_map< std::int64_t,float >::iterator":
        return _CSTL.MapLongFloat_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapLongFloat

# Register MapLongFloat in _CSTL:
_CSTL.MapLongFloat_swigregister(MapLongFloat)

class MapLongDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapLongDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapLongDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,double >::size_type":
        return _CSTL.MapLongDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,double >::key_type const &") -> "std::unordered_map< std::int64_t,double >::mapped_type const &":
        return _CSTL.MapLongDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,double >::key_type const &") -> "void":
        return _CSTL.MapLongDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,double >::key_type const &") -> "bool":
        return _CSTL.MapLongDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapLongDouble_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapLongDouble_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapLongDouble_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,double >::key_type const &") -> "bool":
        return _CSTL.MapLongDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapLongDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapLongDouble_asdict(self)

    def __init__(self, *args):
        _CSTL.MapLongDouble_swiginit(self, _CSTL.new_MapLongDouble(*args))

    def empty(self) -> "bool":
        return _CSTL.MapLongDouble_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,double >::size_type":
        return _CSTL.MapLongDouble_size(self)

    def swap(self, v: "MapLongDouble") -> "void":
        return _CSTL.MapLongDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,double >::iterator":
        return _CSTL.MapLongDouble_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,double >::iterator":
        return _CSTL.MapLongDouble_end(self)

    def clear(self) -> "void":
        return _CSTL.MapLongDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,double >::allocator_type":
        return _CSTL.MapLongDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,double >::key_type const &") -> "std::unordered_map< std::int64_t,double >::size_type":
        return _CSTL.MapLongDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapLongDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,double >::key_type const &") -> "std::unordered_map< std::int64_t,double >::iterator":
        return _CSTL.MapLongDouble_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapLongDouble

# Register MapLongDouble in _CSTL:
_CSTL.MapLongDouble_swigregister(MapLongDouble)

class MapLongBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapLongBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapLongBool___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,bool >::size_type":
        return _CSTL.MapLongBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,bool >::key_type const &") -> "std::unordered_map< std::int64_t,bool >::mapped_type const &":
        return _CSTL.MapLongBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,bool >::key_type const &") -> "void":
        return _CSTL.MapLongBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,bool >::key_type const &") -> "bool":
        return _CSTL.MapLongBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapLongBool_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapLongBool_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapLongBool_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,bool >::key_type const &") -> "bool":
        return _CSTL.MapLongBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapLongBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapLongBool_asdict(self)

    def __init__(self, *args):
        _CSTL.MapLongBool_swiginit(self, _CSTL.new_MapLongBool(*args))

    def empty(self) -> "bool":
        return _CSTL.MapLongBool_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,bool >::size_type":
        return _CSTL.MapLongBool_size(self)

    def swap(self, v: "MapLongBool") -> "void":
        return _CSTL.MapLongBool_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,bool >::iterator":
        return _CSTL.MapLongBool_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,bool >::iterator":
        return _CSTL.MapLongBool_end(self)

    def clear(self) -> "void":
        return _CSTL.MapLongBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,bool >::allocator_type":
        return _CSTL.MapLongBool_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,bool >::key_type const &") -> "std::unordered_map< std::int64_t,bool >::size_type":
        return _CSTL.MapLongBool_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapLongBool_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,bool >::key_type const &") -> "std::unordered_map< std::int64_t,bool >::iterator":
        return _CSTL.MapLongBool_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapLongBool

# Register MapLongBool in _CSTL:
_CSTL.MapLongBool_swigregister(MapLongBool)

class MapLongLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapLongLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapLongLong___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::int64_t >::size_type":
        return _CSTL.MapLongLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::int64_t >::key_type const &") -> "std::unordered_map< std::int64_t,std::int64_t >::mapped_type const &":
        return _CSTL.MapLongLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::int64_t >::key_type const &") -> "void":
        return _CSTL.MapLongLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::int64_t >::key_type const &") -> "bool":
        return _CSTL.MapLongLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapLongLong_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapLongLong_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapLongLong_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::int64_t >::key_type const &") -> "bool":
        return _CSTL.MapLongLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapLongLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapLongLong_asdict(self)

    def __init__(self, *args):
        _CSTL.MapLongLong_swiginit(self, _CSTL.new_MapLongLong(*args))

    def empty(self) -> "bool":
        return _CSTL.MapLongLong_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::int64_t >::size_type":
        return _CSTL.MapLongLong_size(self)

    def swap(self, v: "MapLongLong") -> "void":
        return _CSTL.MapLongLong_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::int64_t >::iterator":
        return _CSTL.MapLongLong_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::int64_t >::iterator":
        return _CSTL.MapLongLong_end(self)

    def clear(self) -> "void":
        return _CSTL.MapLongLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::int64_t >::allocator_type":
        return _CSTL.MapLongLong_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::int64_t >::key_type const &") -> "std::unordered_map< std::int64_t,std::int64_t >::size_type":
        return _CSTL.MapLongLong_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapLongLong_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::int64_t >::key_type const &") -> "std::unordered_map< std::int64_t,std::int64_t >::iterator":
        return _CSTL.MapLongLong_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapLongLong

# Register MapLongLong in _CSTL:
_CSTL.MapLongLong_swigregister(MapLongLong)

class VecVecInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.VecVecInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.VecVecInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.VecVecInt___bool__(self)

    def __len__(self) -> "std::vector< std::vector< int > >::size_type":
        return _CSTL.VecVecInt___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< int > >::difference_type", j: "std::vector< std::vector< int > >::difference_type") -> "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *":
        return _CSTL.VecVecInt___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _CSTL.VecVecInt___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< int > >::difference_type", j: "std::vector< std::vector< int > >::difference_type") -> "void":
        return _CSTL.VecVecInt___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _CSTL.VecVecInt___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< int > >::value_type const &":
        return _CSTL.VecVecInt___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _CSTL.VecVecInt___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< int > >::value_type":
        return _CSTL.VecVecInt_pop(self)

    def append(self, x: "VecInt") -> "void":
        return _CSTL.VecVecInt_append(self, x)

    def empty(self) -> "bool":
        return _CSTL.VecVecInt_empty(self)

    def size(self) -> "std::vector< std::vector< int > >::size_type":
        return _CSTL.VecVecInt_size(self)

    def swap(self, v: "VecVecInt") -> "void":
        return _CSTL.VecVecInt_swap(self, v)

    def begin(self) -> "std::vector< std::vector< int > >::iterator":
        return _CSTL.VecVecInt_begin(self)

    def end(self) -> "std::vector< std::vector< int > >::iterator":
        return _CSTL.VecVecInt_end(self)

    def rbegin(self) -> "std::vector< std::vector< int > >::reverse_iterator":
        return _CSTL.VecVecInt_rbegin(self)

    def rend(self) -> "std::vector< std::vector< int > >::reverse_iterator":
        return _CSTL.VecVecInt_rend(self)

    def clear(self) -> "void":
        return _CSTL.VecVecInt_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< int > >::allocator_type":
        return _CSTL.VecVecInt_get_allocator(self)

    def pop_back(self) -> "void":
        return _CSTL.VecVecInt_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< int > >::iterator":
        return _CSTL.VecVecInt_erase(self, *args)

    def __init__(self, *args):
        _CSTL.VecVecInt_swiginit(self, _CSTL.new_VecVecInt(*args))

    def push_back(self, x: "VecInt") -> "void":
        return _CSTL.VecVecInt_push_back(self, x)

    def front(self) -> "std::vector< std::vector< int > >::value_type const &":
        return _CSTL.VecVecInt_front(self)

    def back(self) -> "std::vector< std::vector< int > >::value_type const &":
        return _CSTL.VecVecInt_back(self)

    def assign(self, n: "std::vector< std::vector< int > >::size_type", x: "VecInt") -> "void":
        return _CSTL.VecVecInt_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _CSTL.VecVecInt_resize(self, *args)

    def insert(self, *args) -> "void":
        return _CSTL.VecVecInt_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< int > >::size_type") -> "void":
        return _CSTL.VecVecInt_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< int > >::size_type":
        return _CSTL.VecVecInt_capacity(self)
    __swig_destroy__ = _CSTL.delete_VecVecInt

# Register VecVecInt in _CSTL:
_CSTL.VecVecInt_swigregister(VecVecInt)

class VecVecStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.VecVecStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.VecVecStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.VecVecStr___bool__(self)

    def __len__(self) -> "std::vector< std::vector< std::string > >::size_type":
        return _CSTL.VecVecStr___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< std::string > >::difference_type", j: "std::vector< std::vector< std::string > >::difference_type") -> "std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > > *":
        return _CSTL.VecVecStr___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _CSTL.VecVecStr___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< std::string > >::difference_type", j: "std::vector< std::vector< std::string > >::difference_type") -> "void":
        return _CSTL.VecVecStr___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _CSTL.VecVecStr___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< std::string > >::value_type const &":
        return _CSTL.VecVecStr___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _CSTL.VecVecStr___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< std::string > >::value_type":
        return _CSTL.VecVecStr_pop(self)

    def append(self, x: "VecStr") -> "void":
        return _CSTL.VecVecStr_append(self, x)

    def empty(self) -> "bool":
        return _CSTL.VecVecStr_empty(self)

    def size(self) -> "std::vector< std::vector< std::string > >::size_type":
        return _CSTL.VecVecStr_size(self)

    def swap(self, v: "VecVecStr") -> "void":
        return _CSTL.VecVecStr_swap(self, v)

    def begin(self) -> "std::vector< std::vector< std::string > >::iterator":
        return _CSTL.VecVecStr_begin(self)

    def end(self) -> "std::vector< std::vector< std::string > >::iterator":
        return _CSTL.VecVecStr_end(self)

    def rbegin(self) -> "std::vector< std::vector< std::string > >::reverse_iterator":
        return _CSTL.VecVecStr_rbegin(self)

    def rend(self) -> "std::vector< std::vector< std::string > >::reverse_iterator":
        return _CSTL.VecVecStr_rend(self)

    def clear(self) -> "void":
        return _CSTL.VecVecStr_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< std::string > >::allocator_type":
        return _CSTL.VecVecStr_get_allocator(self)

    def pop_back(self) -> "void":
        return _CSTL.VecVecStr_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< std::string > >::iterator":
        return _CSTL.VecVecStr_erase(self, *args)

    def __init__(self, *args):
        _CSTL.VecVecStr_swiginit(self, _CSTL.new_VecVecStr(*args))

    def push_back(self, x: "VecStr") -> "void":
        return _CSTL.VecVecStr_push_back(self, x)

    def front(self) -> "std::vector< std::vector< std::string > >::value_type const &":
        return _CSTL.VecVecStr_front(self)

    def back(self) -> "std::vector< std::vector< std::string > >::value_type const &":
        return _CSTL.VecVecStr_back(self)

    def assign(self, n: "std::vector< std::vector< std::string > >::size_type", x: "VecStr") -> "void":
        return _CSTL.VecVecStr_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _CSTL.VecVecStr_resize(self, *args)

    def insert(self, *args) -> "void":
        return _CSTL.VecVecStr_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< std::string > >::size_type") -> "void":
        return _CSTL.VecVecStr_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< std::string > >::size_type":
        return _CSTL.VecVecStr_capacity(self)
    __swig_destroy__ = _CSTL.delete_VecVecStr

# Register VecVecStr in _CSTL:
_CSTL.VecVecStr_swigregister(VecVecStr)

class VecVecFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.VecVecFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.VecVecFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.VecVecFloat___bool__(self)

    def __len__(self) -> "std::vector< std::vector< float > >::size_type":
        return _CSTL.VecVecFloat___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< float > >::difference_type", j: "std::vector< std::vector< float > >::difference_type") -> "std::vector< std::vector< float,std::allocator< float > >,std::allocator< std::vector< float,std::allocator< float > > > > *":
        return _CSTL.VecVecFloat___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _CSTL.VecVecFloat___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< float > >::difference_type", j: "std::vector< std::vector< float > >::difference_type") -> "void":
        return _CSTL.VecVecFloat___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _CSTL.VecVecFloat___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< float > >::value_type const &":
        return _CSTL.VecVecFloat___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _CSTL.VecVecFloat___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< float > >::value_type":
        return _CSTL.VecVecFloat_pop(self)

    def append(self, x: "VecFloat") -> "void":
        return _CSTL.VecVecFloat_append(self, x)

    def empty(self) -> "bool":
        return _CSTL.VecVecFloat_empty(self)

    def size(self) -> "std::vector< std::vector< float > >::size_type":
        return _CSTL.VecVecFloat_size(self)

    def swap(self, v: "VecVecFloat") -> "void":
        return _CSTL.VecVecFloat_swap(self, v)

    def begin(self) -> "std::vector< std::vector< float > >::iterator":
        return _CSTL.VecVecFloat_begin(self)

    def end(self) -> "std::vector< std::vector< float > >::iterator":
        return _CSTL.VecVecFloat_end(self)

    def rbegin(self) -> "std::vector< std::vector< float > >::reverse_iterator":
        return _CSTL.VecVecFloat_rbegin(self)

    def rend(self) -> "std::vector< std::vector< float > >::reverse_iterator":
        return _CSTL.VecVecFloat_rend(self)

    def clear(self) -> "void":
        return _CSTL.VecVecFloat_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< float > >::allocator_type":
        return _CSTL.VecVecFloat_get_allocator(self)

    def pop_back(self) -> "void":
        return _CSTL.VecVecFloat_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< float > >::iterator":
        return _CSTL.VecVecFloat_erase(self, *args)

    def __init__(self, *args):
        _CSTL.VecVecFloat_swiginit(self, _CSTL.new_VecVecFloat(*args))

    def push_back(self, x: "VecFloat") -> "void":
        return _CSTL.VecVecFloat_push_back(self, x)

    def front(self) -> "std::vector< std::vector< float > >::value_type const &":
        return _CSTL.VecVecFloat_front(self)

    def back(self) -> "std::vector< std::vector< float > >::value_type const &":
        return _CSTL.VecVecFloat_back(self)

    def assign(self, n: "std::vector< std::vector< float > >::size_type", x: "VecFloat") -> "void":
        return _CSTL.VecVecFloat_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _CSTL.VecVecFloat_resize(self, *args)

    def insert(self, *args) -> "void":
        return _CSTL.VecVecFloat_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< float > >::size_type") -> "void":
        return _CSTL.VecVecFloat_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< float > >::size_type":
        return _CSTL.VecVecFloat_capacity(self)
    __swig_destroy__ = _CSTL.delete_VecVecFloat

# Register VecVecFloat in _CSTL:
_CSTL.VecVecFloat_swigregister(VecVecFloat)

class VecVecDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.VecVecDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.VecVecDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.VecVecDouble___bool__(self)

    def __len__(self) -> "std::vector< std::vector< double > >::size_type":
        return _CSTL.VecVecDouble___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< double > >::difference_type", j: "std::vector< std::vector< double > >::difference_type") -> "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *":
        return _CSTL.VecVecDouble___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _CSTL.VecVecDouble___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< double > >::difference_type", j: "std::vector< std::vector< double > >::difference_type") -> "void":
        return _CSTL.VecVecDouble___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _CSTL.VecVecDouble___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< double > >::value_type const &":
        return _CSTL.VecVecDouble___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _CSTL.VecVecDouble___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< double > >::value_type":
        return _CSTL.VecVecDouble_pop(self)

    def append(self, x: "VecDouble") -> "void":
        return _CSTL.VecVecDouble_append(self, x)

    def empty(self) -> "bool":
        return _CSTL.VecVecDouble_empty(self)

    def size(self) -> "std::vector< std::vector< double > >::size_type":
        return _CSTL.VecVecDouble_size(self)

    def swap(self, v: "VecVecDouble") -> "void":
        return _CSTL.VecVecDouble_swap(self, v)

    def begin(self) -> "std::vector< std::vector< double > >::iterator":
        return _CSTL.VecVecDouble_begin(self)

    def end(self) -> "std::vector< std::vector< double > >::iterator":
        return _CSTL.VecVecDouble_end(self)

    def rbegin(self) -> "std::vector< std::vector< double > >::reverse_iterator":
        return _CSTL.VecVecDouble_rbegin(self)

    def rend(self) -> "std::vector< std::vector< double > >::reverse_iterator":
        return _CSTL.VecVecDouble_rend(self)

    def clear(self) -> "void":
        return _CSTL.VecVecDouble_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< double > >::allocator_type":
        return _CSTL.VecVecDouble_get_allocator(self)

    def pop_back(self) -> "void":
        return _CSTL.VecVecDouble_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< double > >::iterator":
        return _CSTL.VecVecDouble_erase(self, *args)

    def __init__(self, *args):
        _CSTL.VecVecDouble_swiginit(self, _CSTL.new_VecVecDouble(*args))

    def push_back(self, x: "VecDouble") -> "void":
        return _CSTL.VecVecDouble_push_back(self, x)

    def front(self) -> "std::vector< std::vector< double > >::value_type const &":
        return _CSTL.VecVecDouble_front(self)

    def back(self) -> "std::vector< std::vector< double > >::value_type const &":
        return _CSTL.VecVecDouble_back(self)

    def assign(self, n: "std::vector< std::vector< double > >::size_type", x: "VecDouble") -> "void":
        return _CSTL.VecVecDouble_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _CSTL.VecVecDouble_resize(self, *args)

    def insert(self, *args) -> "void":
        return _CSTL.VecVecDouble_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< double > >::size_type") -> "void":
        return _CSTL.VecVecDouble_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< double > >::size_type":
        return _CSTL.VecVecDouble_capacity(self)
    __swig_destroy__ = _CSTL.delete_VecVecDouble

# Register VecVecDouble in _CSTL:
_CSTL.VecVecDouble_swigregister(VecVecDouble)

class VecVecBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.VecVecBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.VecVecBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.VecVecBool___bool__(self)

    def __len__(self) -> "std::vector< std::vector< bool > >::size_type":
        return _CSTL.VecVecBool___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< bool > >::difference_type", j: "std::vector< std::vector< bool > >::difference_type") -> "std::vector< std::vector< bool,std::allocator< bool > >,std::allocator< std::vector< bool,std::allocator< bool > > > > *":
        return _CSTL.VecVecBool___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _CSTL.VecVecBool___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< bool > >::difference_type", j: "std::vector< std::vector< bool > >::difference_type") -> "void":
        return _CSTL.VecVecBool___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _CSTL.VecVecBool___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< bool > >::value_type const &":
        return _CSTL.VecVecBool___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _CSTL.VecVecBool___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< bool > >::value_type":
        return _CSTL.VecVecBool_pop(self)

    def append(self, x: "VecBool") -> "void":
        return _CSTL.VecVecBool_append(self, x)

    def empty(self) -> "bool":
        return _CSTL.VecVecBool_empty(self)

    def size(self) -> "std::vector< std::vector< bool > >::size_type":
        return _CSTL.VecVecBool_size(self)

    def swap(self, v: "VecVecBool") -> "void":
        return _CSTL.VecVecBool_swap(self, v)

    def begin(self) -> "std::vector< std::vector< bool > >::iterator":
        return _CSTL.VecVecBool_begin(self)

    def end(self) -> "std::vector< std::vector< bool > >::iterator":
        return _CSTL.VecVecBool_end(self)

    def rbegin(self) -> "std::vector< std::vector< bool > >::reverse_iterator":
        return _CSTL.VecVecBool_rbegin(self)

    def rend(self) -> "std::vector< std::vector< bool > >::reverse_iterator":
        return _CSTL.VecVecBool_rend(self)

    def clear(self) -> "void":
        return _CSTL.VecVecBool_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< bool > >::allocator_type":
        return _CSTL.VecVecBool_get_allocator(self)

    def pop_back(self) -> "void":
        return _CSTL.VecVecBool_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< bool > >::iterator":
        return _CSTL.VecVecBool_erase(self, *args)

    def __init__(self, *args):
        _CSTL.VecVecBool_swiginit(self, _CSTL.new_VecVecBool(*args))

    def push_back(self, x: "VecBool") -> "void":
        return _CSTL.VecVecBool_push_back(self, x)

    def front(self) -> "std::vector< std::vector< bool > >::value_type const &":
        return _CSTL.VecVecBool_front(self)

    def back(self) -> "std::vector< std::vector< bool > >::value_type const &":
        return _CSTL.VecVecBool_back(self)

    def assign(self, n: "std::vector< std::vector< bool > >::size_type", x: "VecBool") -> "void":
        return _CSTL.VecVecBool_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _CSTL.VecVecBool_resize(self, *args)

    def insert(self, *args) -> "void":
        return _CSTL.VecVecBool_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< bool > >::size_type") -> "void":
        return _CSTL.VecVecBool_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< bool > >::size_type":
        return _CSTL.VecVecBool_capacity(self)
    __swig_destroy__ = _CSTL.delete_VecVecBool

# Register VecVecBool in _CSTL:
_CSTL.VecVecBool_swigregister(VecVecBool)

class VecVecLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.VecVecLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.VecVecLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.VecVecLong___bool__(self)

    def __len__(self) -> "std::vector< std::vector< std::int64_t > >::size_type":
        return _CSTL.VecVecLong___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< std::int64_t > >::difference_type", j: "std::vector< std::vector< std::int64_t > >::difference_type") -> "std::vector< std::vector< std::int64_t,std::allocator< std::int64_t > >,std::allocator< std::vector< std::int64_t,std::allocator< std::int64_t > > > > *":
        return _CSTL.VecVecLong___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _CSTL.VecVecLong___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< std::int64_t > >::difference_type", j: "std::vector< std::vector< std::int64_t > >::difference_type") -> "void":
        return _CSTL.VecVecLong___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _CSTL.VecVecLong___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< std::int64_t > >::value_type const &":
        return _CSTL.VecVecLong___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _CSTL.VecVecLong___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< std::int64_t > >::value_type":
        return _CSTL.VecVecLong_pop(self)

    def append(self, x: "VecLong") -> "void":
        return _CSTL.VecVecLong_append(self, x)

    def empty(self) -> "bool":
        return _CSTL.VecVecLong_empty(self)

    def size(self) -> "std::vector< std::vector< std::int64_t > >::size_type":
        return _CSTL.VecVecLong_size(self)

    def swap(self, v: "VecVecLong") -> "void":
        return _CSTL.VecVecLong_swap(self, v)

    def begin(self) -> "std::vector< std::vector< std::int64_t > >::iterator":
        return _CSTL.VecVecLong_begin(self)

    def end(self) -> "std::vector< std::vector< std::int64_t > >::iterator":
        return _CSTL.VecVecLong_end(self)

    def rbegin(self) -> "std::vector< std::vector< std::int64_t > >::reverse_iterator":
        return _CSTL.VecVecLong_rbegin(self)

    def rend(self) -> "std::vector< std::vector< std::int64_t > >::reverse_iterator":
        return _CSTL.VecVecLong_rend(self)

    def clear(self) -> "void":
        return _CSTL.VecVecLong_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< std::int64_t > >::allocator_type":
        return _CSTL.VecVecLong_get_allocator(self)

    def pop_back(self) -> "void":
        return _CSTL.VecVecLong_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< std::int64_t > >::iterator":
        return _CSTL.VecVecLong_erase(self, *args)

    def __init__(self, *args):
        _CSTL.VecVecLong_swiginit(self, _CSTL.new_VecVecLong(*args))

    def push_back(self, x: "VecLong") -> "void":
        return _CSTL.VecVecLong_push_back(self, x)

    def front(self) -> "std::vector< std::vector< std::int64_t > >::value_type const &":
        return _CSTL.VecVecLong_front(self)

    def back(self) -> "std::vector< std::vector< std::int64_t > >::value_type const &":
        return _CSTL.VecVecLong_back(self)

    def assign(self, n: "std::vector< std::vector< std::int64_t > >::size_type", x: "VecLong") -> "void":
        return _CSTL.VecVecLong_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _CSTL.VecVecLong_resize(self, *args)

    def insert(self, *args) -> "void":
        return _CSTL.VecVecLong_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< std::int64_t > >::size_type") -> "void":
        return _CSTL.VecVecLong_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< std::int64_t > >::size_type":
        return _CSTL.VecVecLong_capacity(self)
    __swig_destroy__ = _CSTL.delete_VecVecLong

# Register VecVecLong in _CSTL:
_CSTL.VecVecLong_swigregister(VecVecLong)

class VecSetInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.VecSetInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.VecSetInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.VecSetInt___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_set< int > >::size_type":
        return _CSTL.VecSetInt___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_set< int > >::difference_type", j: "std::vector< std::unordered_set< int > >::difference_type") -> "std::vector< std::unordered_set< int,std::hash< int >,std::equal_to< int >,std::allocator< int > >,std::allocator< std::unordered_set< int,std::hash< int >,std::equal_to< int >,std::allocator< int > > > > *":
        return _CSTL.VecSetInt___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _CSTL.VecSetInt___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_set< int > >::difference_type", j: "std::vector< std::unordered_set< int > >::difference_type") -> "void":
        return _CSTL.VecSetInt___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _CSTL.VecSetInt___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_set< int > >::value_type const &":
        return _CSTL.VecSetInt___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _CSTL.VecSetInt___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_set< int > >::value_type":
        return _CSTL.VecSetInt_pop(self)

    def append(self, x: "SetInt") -> "void":
        return _CSTL.VecSetInt_append(self, x)

    def empty(self) -> "bool":
        return _CSTL.VecSetInt_empty(self)

    def size(self) -> "std::vector< std::unordered_set< int > >::size_type":
        return _CSTL.VecSetInt_size(self)

    def swap(self, v: "VecSetInt") -> "void":
        return _CSTL.VecSetInt_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_set< int > >::iterator":
        return _CSTL.VecSetInt_begin(self)

    def end(self) -> "std::vector< std::unordered_set< int > >::iterator":
        return _CSTL.VecSetInt_end(self)

    def rbegin(self) -> "std::vector< std::unordered_set< int > >::reverse_iterator":
        return _CSTL.VecSetInt_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_set< int > >::reverse_iterator":
        return _CSTL.VecSetInt_rend(self)

    def clear(self) -> "void":
        return _CSTL.VecSetInt_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_set< int > >::allocator_type":
        return _CSTL.VecSetInt_get_allocator(self)

    def pop_back(self) -> "void":
        return _CSTL.VecSetInt_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_set< int > >::iterator":
        return _CSTL.VecSetInt_erase(self, *args)

    def __init__(self, *args):
        _CSTL.VecSetInt_swiginit(self, _CSTL.new_VecSetInt(*args))

    def push_back(self, x: "SetInt") -> "void":
        return _CSTL.VecSetInt_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_set< int > >::value_type const &":
        return _CSTL.VecSetInt_front(self)

    def back(self) -> "std::vector< std::unordered_set< int > >::value_type const &":
        return _CSTL.VecSetInt_back(self)

    def assign(self, n: "std::vector< std::unordered_set< int > >::size_type", x: "SetInt") -> "void":
        return _CSTL.VecSetInt_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _CSTL.VecSetInt_resize(self, *args)

    def insert(self, *args) -> "void":
        return _CSTL.VecSetInt_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_set< int > >::size_type") -> "void":
        return _CSTL.VecSetInt_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_set< int > >::size_type":
        return _CSTL.VecSetInt_capacity(self)
    __swig_destroy__ = _CSTL.delete_VecSetInt

# Register VecSetInt in _CSTL:
_CSTL.VecSetInt_swigregister(VecSetInt)

class VecSetStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.VecSetStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.VecSetStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.VecSetStr___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_set< std::string > >::size_type":
        return _CSTL.VecSetStr___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_set< std::string > >::difference_type", j: "std::vector< std::unordered_set< std::string > >::difference_type") -> "std::vector< std::unordered_set< std::string,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::string > >,std::allocator< std::unordered_set< std::string,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::string > > > > *":
        return _CSTL.VecSetStr___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _CSTL.VecSetStr___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_set< std::string > >::difference_type", j: "std::vector< std::unordered_set< std::string > >::difference_type") -> "void":
        return _CSTL.VecSetStr___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _CSTL.VecSetStr___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_set< std::string > >::value_type const &":
        return _CSTL.VecSetStr___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _CSTL.VecSetStr___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_set< std::string > >::value_type":
        return _CSTL.VecSetStr_pop(self)

    def append(self, x: "SetStr") -> "void":
        return _CSTL.VecSetStr_append(self, x)

    def empty(self) -> "bool":
        return _CSTL.VecSetStr_empty(self)

    def size(self) -> "std::vector< std::unordered_set< std::string > >::size_type":
        return _CSTL.VecSetStr_size(self)

    def swap(self, v: "VecSetStr") -> "void":
        return _CSTL.VecSetStr_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_set< std::string > >::iterator":
        return _CSTL.VecSetStr_begin(self)

    def end(self) -> "std::vector< std::unordered_set< std::string > >::iterator":
        return _CSTL.VecSetStr_end(self)

    def rbegin(self) -> "std::vector< std::unordered_set< std::string > >::reverse_iterator":
        return _CSTL.VecSetStr_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_set< std::string > >::reverse_iterator":
        return _CSTL.VecSetStr_rend(self)

    def clear(self) -> "void":
        return _CSTL.VecSetStr_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_set< std::string > >::allocator_type":
        return _CSTL.VecSetStr_get_allocator(self)

    def pop_back(self) -> "void":
        return _CSTL.VecSetStr_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_set< std::string > >::iterator":
        return _CSTL.VecSetStr_erase(self, *args)

    def __init__(self, *args):
        _CSTL.VecSetStr_swiginit(self, _CSTL.new_VecSetStr(*args))

    def push_back(self, x: "SetStr") -> "void":
        return _CSTL.VecSetStr_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_set< std::string > >::value_type const &":
        return _CSTL.VecSetStr_front(self)

    def back(self) -> "std::vector< std::unordered_set< std::string > >::value_type const &":
        return _CSTL.VecSetStr_back(self)

    def assign(self, n: "std::vector< std::unordered_set< std::string > >::size_type", x: "SetStr") -> "void":
        return _CSTL.VecSetStr_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _CSTL.VecSetStr_resize(self, *args)

    def insert(self, *args) -> "void":
        return _CSTL.VecSetStr_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_set< std::string > >::size_type") -> "void":
        return _CSTL.VecSetStr_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_set< std::string > >::size_type":
        return _CSTL.VecSetStr_capacity(self)
    __swig_destroy__ = _CSTL.delete_VecSetStr

# Register VecSetStr in _CSTL:
_CSTL.VecSetStr_swigregister(VecSetStr)

class VecSetLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.VecSetLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.VecSetLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.VecSetLong___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_set< std::int64_t > >::size_type":
        return _CSTL.VecSetLong___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_set< std::int64_t > >::difference_type", j: "std::vector< std::unordered_set< std::int64_t > >::difference_type") -> "std::vector< std::unordered_set< std::int64_t,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::int64_t > >,std::allocator< std::unordered_set< std::int64_t,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::int64_t > > > > *":
        return _CSTL.VecSetLong___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _CSTL.VecSetLong___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_set< std::int64_t > >::difference_type", j: "std::vector< std::unordered_set< std::int64_t > >::difference_type") -> "void":
        return _CSTL.VecSetLong___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _CSTL.VecSetLong___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_set< std::int64_t > >::value_type const &":
        return _CSTL.VecSetLong___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _CSTL.VecSetLong___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_set< std::int64_t > >::value_type":
        return _CSTL.VecSetLong_pop(self)

    def append(self, x: "SetLong") -> "void":
        return _CSTL.VecSetLong_append(self, x)

    def empty(self) -> "bool":
        return _CSTL.VecSetLong_empty(self)

    def size(self) -> "std::vector< std::unordered_set< std::int64_t > >::size_type":
        return _CSTL.VecSetLong_size(self)

    def swap(self, v: "VecSetLong") -> "void":
        return _CSTL.VecSetLong_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_set< std::int64_t > >::iterator":
        return _CSTL.VecSetLong_begin(self)

    def end(self) -> "std::vector< std::unordered_set< std::int64_t > >::iterator":
        return _CSTL.VecSetLong_end(self)

    def rbegin(self) -> "std::vector< std::unordered_set< std::int64_t > >::reverse_iterator":
        return _CSTL.VecSetLong_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_set< std::int64_t > >::reverse_iterator":
        return _CSTL.VecSetLong_rend(self)

    def clear(self) -> "void":
        return _CSTL.VecSetLong_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_set< std::int64_t > >::allocator_type":
        return _CSTL.VecSetLong_get_allocator(self)

    def pop_back(self) -> "void":
        return _CSTL.VecSetLong_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_set< std::int64_t > >::iterator":
        return _CSTL.VecSetLong_erase(self, *args)

    def __init__(self, *args):
        _CSTL.VecSetLong_swiginit(self, _CSTL.new_VecSetLong(*args))

    def push_back(self, x: "SetLong") -> "void":
        return _CSTL.VecSetLong_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_set< std::int64_t > >::value_type const &":
        return _CSTL.VecSetLong_front(self)

    def back(self) -> "std::vector< std::unordered_set< std::int64_t > >::value_type const &":
        return _CSTL.VecSetLong_back(self)

    def assign(self, n: "std::vector< std::unordered_set< std::int64_t > >::size_type", x: "SetLong") -> "void":
        return _CSTL.VecSetLong_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _CSTL.VecSetLong_resize(self, *args)

    def insert(self, *args) -> "void":
        return _CSTL.VecSetLong_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_set< std::int64_t > >::size_type") -> "void":
        return _CSTL.VecSetLong_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_set< std::int64_t > >::size_type":
        return _CSTL.VecSetLong_capacity(self)
    __swig_destroy__ = _CSTL.delete_VecSetLong

# Register VecSetLong in _CSTL:
_CSTL.VecSetLong_swigregister(VecSetLong)

class VecMapIntInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.VecMapIntInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.VecMapIntInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.VecMapIntInt___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< int,int > >::size_type":
        return _CSTL.VecMapIntInt___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< int,int > >::difference_type", j: "std::vector< std::unordered_map< int,int > >::difference_type") -> "std::vector< std::unordered_map< int,int,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,int > > >,std::allocator< std::unordered_map< int,int,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,int > > > > > *":
        return _CSTL.VecMapIntInt___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _CSTL.VecMapIntInt___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< int,int > >::difference_type", j: "std::vector< std::unordered_map< int,int > >::difference_type") -> "void":
        return _CSTL.VecMapIntInt___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _CSTL.VecMapIntInt___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< int,int > >::value_type const &":
        return _CSTL.VecMapIntInt___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _CSTL.VecMapIntInt___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< int,int > >::value_type":
        return _CSTL.VecMapIntInt_pop(self)

    def append(self, x: "MapIntInt") -> "void":
        return _CSTL.VecMapIntInt_append(self, x)

    def empty(self) -> "bool":
        return _CSTL.VecMapIntInt_empty(self)

    def size(self) -> "std::vector< std::unordered_map< int,int > >::size_type":
        return _CSTL.VecMapIntInt_size(self)

    def swap(self, v: "VecMapIntInt") -> "void":
        return _CSTL.VecMapIntInt_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< int,int > >::iterator":
        return _CSTL.VecMapIntInt_begin(self)

    def end(self) -> "std::vector< std::unordered_map< int,int > >::iterator":
        return _CSTL.VecMapIntInt_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< int,int > >::reverse_iterator":
        return _CSTL.VecMapIntInt_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< int,int > >::reverse_iterator":
        return _CSTL.VecMapIntInt_rend(self)

    def clear(self) -> "void":
        return _CSTL.VecMapIntInt_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< int,int > >::allocator_type":
        return _CSTL.VecMapIntInt_get_allocator(self)

    def pop_back(self) -> "void":
        return _CSTL.VecMapIntInt_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< int,int > >::iterator":
        return _CSTL.VecMapIntInt_erase(self, *args)

    def __init__(self, *args):
        _CSTL.VecMapIntInt_swiginit(self, _CSTL.new_VecMapIntInt(*args))

    def push_back(self, x: "MapIntInt") -> "void":
        return _CSTL.VecMapIntInt_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< int,int > >::value_type const &":
        return _CSTL.VecMapIntInt_front(self)

    def back(self) -> "std::vector< std::unordered_map< int,int > >::value_type const &":
        return _CSTL.VecMapIntInt_back(self)

    def assign(self, n: "std::vector< std::unordered_map< int,int > >::size_type", x: "MapIntInt") -> "void":
        return _CSTL.VecMapIntInt_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _CSTL.VecMapIntInt_resize(self, *args)

    def insert(self, *args) -> "void":
        return _CSTL.VecMapIntInt_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< int,int > >::size_type") -> "void":
        return _CSTL.VecMapIntInt_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< int,int > >::size_type":
        return _CSTL.VecMapIntInt_capacity(self)
    __swig_destroy__ = _CSTL.delete_VecMapIntInt

# Register VecMapIntInt in _CSTL:
_CSTL.VecMapIntInt_swigregister(VecMapIntInt)

class VecMapIntStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.VecMapIntStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.VecMapIntStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.VecMapIntStr___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< int,std::string > >::size_type":
        return _CSTL.VecMapIntStr___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< int,std::string > >::difference_type", j: "std::vector< std::unordered_map< int,std::string > >::difference_type") -> "std::vector< std::unordered_map< int,std::string,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::string > > >,std::allocator< std::unordered_map< int,std::string,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::string > > > > > *":
        return _CSTL.VecMapIntStr___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _CSTL.VecMapIntStr___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< int,std::string > >::difference_type", j: "std::vector< std::unordered_map< int,std::string > >::difference_type") -> "void":
        return _CSTL.VecMapIntStr___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _CSTL.VecMapIntStr___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< int,std::string > >::value_type const &":
        return _CSTL.VecMapIntStr___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _CSTL.VecMapIntStr___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< int,std::string > >::value_type":
        return _CSTL.VecMapIntStr_pop(self)

    def append(self, x: "MapIntStr") -> "void":
        return _CSTL.VecMapIntStr_append(self, x)

    def empty(self) -> "bool":
        return _CSTL.VecMapIntStr_empty(self)

    def size(self) -> "std::vector< std::unordered_map< int,std::string > >::size_type":
        return _CSTL.VecMapIntStr_size(self)

    def swap(self, v: "VecMapIntStr") -> "void":
        return _CSTL.VecMapIntStr_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< int,std::string > >::iterator":
        return _CSTL.VecMapIntStr_begin(self)

    def end(self) -> "std::vector< std::unordered_map< int,std::string > >::iterator":
        return _CSTL.VecMapIntStr_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< int,std::string > >::reverse_iterator":
        return _CSTL.VecMapIntStr_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< int,std::string > >::reverse_iterator":
        return _CSTL.VecMapIntStr_rend(self)

    def clear(self) -> "void":
        return _CSTL.VecMapIntStr_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< int,std::string > >::allocator_type":
        return _CSTL.VecMapIntStr_get_allocator(self)

    def pop_back(self) -> "void":
        return _CSTL.VecMapIntStr_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< int,std::string > >::iterator":
        return _CSTL.VecMapIntStr_erase(self, *args)

    def __init__(self, *args):
        _CSTL.VecMapIntStr_swiginit(self, _CSTL.new_VecMapIntStr(*args))

    def push_back(self, x: "MapIntStr") -> "void":
        return _CSTL.VecMapIntStr_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< int,std::string > >::value_type const &":
        return _CSTL.VecMapIntStr_front(self)

    def back(self) -> "std::vector< std::unordered_map< int,std::string > >::value_type const &":
        return _CSTL.VecMapIntStr_back(self)

    def assign(self, n: "std::vector< std::unordered_map< int,std::string > >::size_type", x: "MapIntStr") -> "void":
        return _CSTL.VecMapIntStr_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _CSTL.VecMapIntStr_resize(self, *args)

    def insert(self, *args) -> "void":
        return _CSTL.VecMapIntStr_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< int,std::string > >::size_type") -> "void":
        return _CSTL.VecMapIntStr_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< int,std::string > >::size_type":
        return _CSTL.VecMapIntStr_capacity(self)
    __swig_destroy__ = _CSTL.delete_VecMapIntStr

# Register VecMapIntStr in _CSTL:
_CSTL.VecMapIntStr_swigregister(VecMapIntStr)

class VecMapIntFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.VecMapIntFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.VecMapIntFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.VecMapIntFloat___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< int,float > >::size_type":
        return _CSTL.VecMapIntFloat___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< int,float > >::difference_type", j: "std::vector< std::unordered_map< int,float > >::difference_type") -> "std::vector< std::unordered_map< int,float,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,float > > >,std::allocator< std::unordered_map< int,float,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,float > > > > > *":
        return _CSTL.VecMapIntFloat___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _CSTL.VecMapIntFloat___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< int,float > >::difference_type", j: "std::vector< std::unordered_map< int,float > >::difference_type") -> "void":
        return _CSTL.VecMapIntFloat___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _CSTL.VecMapIntFloat___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< int,float > >::value_type const &":
        return _CSTL.VecMapIntFloat___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _CSTL.VecMapIntFloat___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< int,float > >::value_type":
        return _CSTL.VecMapIntFloat_pop(self)

    def append(self, x: "MapIntFloat") -> "void":
        return _CSTL.VecMapIntFloat_append(self, x)

    def empty(self) -> "bool":
        return _CSTL.VecMapIntFloat_empty(self)

    def size(self) -> "std::vector< std::unordered_map< int,float > >::size_type":
        return _CSTL.VecMapIntFloat_size(self)

    def swap(self, v: "VecMapIntFloat") -> "void":
        return _CSTL.VecMapIntFloat_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< int,float > >::iterator":
        return _CSTL.VecMapIntFloat_begin(self)

    def end(self) -> "std::vector< std::unordered_map< int,float > >::iterator":
        return _CSTL.VecMapIntFloat_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< int,float > >::reverse_iterator":
        return _CSTL.VecMapIntFloat_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< int,float > >::reverse_iterator":
        return _CSTL.VecMapIntFloat_rend(self)

    def clear(self) -> "void":
        return _CSTL.VecMapIntFloat_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< int,float > >::allocator_type":
        return _CSTL.VecMapIntFloat_get_allocator(self)

    def pop_back(self) -> "void":
        return _CSTL.VecMapIntFloat_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< int,float > >::iterator":
        return _CSTL.VecMapIntFloat_erase(self, *args)

    def __init__(self, *args):
        _CSTL.VecMapIntFloat_swiginit(self, _CSTL.new_VecMapIntFloat(*args))

    def push_back(self, x: "MapIntFloat") -> "void":
        return _CSTL.VecMapIntFloat_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< int,float > >::value_type const &":
        return _CSTL.VecMapIntFloat_front(self)

    def back(self) -> "std::vector< std::unordered_map< int,float > >::value_type const &":
        return _CSTL.VecMapIntFloat_back(self)

    def assign(self, n: "std::vector< std::unordered_map< int,float > >::size_type", x: "MapIntFloat") -> "void":
        return _CSTL.VecMapIntFloat_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _CSTL.VecMapIntFloat_resize(self, *args)

    def insert(self, *args) -> "void":
        return _CSTL.VecMapIntFloat_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< int,float > >::size_type") -> "void":
        return _CSTL.VecMapIntFloat_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< int,float > >::size_type":
        return _CSTL.VecMapIntFloat_capacity(self)
    __swig_destroy__ = _CSTL.delete_VecMapIntFloat

# Register VecMapIntFloat in _CSTL:
_CSTL.VecMapIntFloat_swigregister(VecMapIntFloat)

class VecMapIntDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.VecMapIntDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.VecMapIntDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.VecMapIntDouble___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< int,double > >::size_type":
        return _CSTL.VecMapIntDouble___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< int,double > >::difference_type", j: "std::vector< std::unordered_map< int,double > >::difference_type") -> "std::vector< std::unordered_map< int,double,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,double > > >,std::allocator< std::unordered_map< int,double,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,double > > > > > *":
        return _CSTL.VecMapIntDouble___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _CSTL.VecMapIntDouble___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< int,double > >::difference_type", j: "std::vector< std::unordered_map< int,double > >::difference_type") -> "void":
        return _CSTL.VecMapIntDouble___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _CSTL.VecMapIntDouble___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< int,double > >::value_type const &":
        return _CSTL.VecMapIntDouble___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _CSTL.VecMapIntDouble___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< int,double > >::value_type":
        return _CSTL.VecMapIntDouble_pop(self)

    def append(self, x: "MapIntDouble") -> "void":
        return _CSTL.VecMapIntDouble_append(self, x)

    def empty(self) -> "bool":
        return _CSTL.VecMapIntDouble_empty(self)

    def size(self) -> "std::vector< std::unordered_map< int,double > >::size_type":
        return _CSTL.VecMapIntDouble_size(self)

    def swap(self, v: "VecMapIntDouble") -> "void":
        return _CSTL.VecMapIntDouble_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< int,double > >::iterator":
        return _CSTL.VecMapIntDouble_begin(self)

    def end(self) -> "std::vector< std::unordered_map< int,double > >::iterator":
        return _CSTL.VecMapIntDouble_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< int,double > >::reverse_iterator":
        return _CSTL.VecMapIntDouble_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< int,double > >::reverse_iterator":
        return _CSTL.VecMapIntDouble_rend(self)

    def clear(self) -> "void":
        return _CSTL.VecMapIntDouble_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< int,double > >::allocator_type":
        return _CSTL.VecMapIntDouble_get_allocator(self)

    def pop_back(self) -> "void":
        return _CSTL.VecMapIntDouble_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< int,double > >::iterator":
        return _CSTL.VecMapIntDouble_erase(self, *args)

    def __init__(self, *args):
        _CSTL.VecMapIntDouble_swiginit(self, _CSTL.new_VecMapIntDouble(*args))

    def push_back(self, x: "MapIntDouble") -> "void":
        return _CSTL.VecMapIntDouble_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< int,double > >::value_type const &":
        return _CSTL.VecMapIntDouble_front(self)

    def back(self) -> "std::vector< std::unordered_map< int,double > >::value_type const &":
        return _CSTL.VecMapIntDouble_back(self)

    def assign(self, n: "std::vector< std::unordered_map< int,double > >::size_type", x: "MapIntDouble") -> "void":
        return _CSTL.VecMapIntDouble_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _CSTL.VecMapIntDouble_resize(self, *args)

    def insert(self, *args) -> "void":
        return _CSTL.VecMapIntDouble_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< int,double > >::size_type") -> "void":
        return _CSTL.VecMapIntDouble_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< int,double > >::size_type":
        return _CSTL.VecMapIntDouble_capacity(self)
    __swig_destroy__ = _CSTL.delete_VecMapIntDouble

# Register VecMapIntDouble in _CSTL:
_CSTL.VecMapIntDouble_swigregister(VecMapIntDouble)

class VecMapIntBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.VecMapIntBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.VecMapIntBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.VecMapIntBool___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< int,bool > >::size_type":
        return _CSTL.VecMapIntBool___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< int,bool > >::difference_type", j: "std::vector< std::unordered_map< int,bool > >::difference_type") -> "std::vector< std::unordered_map< int,bool,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,bool > > >,std::allocator< std::unordered_map< int,bool,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,bool > > > > > *":
        return _CSTL.VecMapIntBool___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _CSTL.VecMapIntBool___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< int,bool > >::difference_type", j: "std::vector< std::unordered_map< int,bool > >::difference_type") -> "void":
        return _CSTL.VecMapIntBool___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _CSTL.VecMapIntBool___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< int,bool > >::value_type const &":
        return _CSTL.VecMapIntBool___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _CSTL.VecMapIntBool___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< int,bool > >::value_type":
        return _CSTL.VecMapIntBool_pop(self)

    def append(self, x: "MapIntBool") -> "void":
        return _CSTL.VecMapIntBool_append(self, x)

    def empty(self) -> "bool":
        return _CSTL.VecMapIntBool_empty(self)

    def size(self) -> "std::vector< std::unordered_map< int,bool > >::size_type":
        return _CSTL.VecMapIntBool_size(self)

    def swap(self, v: "VecMapIntBool") -> "void":
        return _CSTL.VecMapIntBool_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< int,bool > >::iterator":
        return _CSTL.VecMapIntBool_begin(self)

    def end(self) -> "std::vector< std::unordered_map< int,bool > >::iterator":
        return _CSTL.VecMapIntBool_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< int,bool > >::reverse_iterator":
        return _CSTL.VecMapIntBool_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< int,bool > >::reverse_iterator":
        return _CSTL.VecMapIntBool_rend(self)

    def clear(self) -> "void":
        return _CSTL.VecMapIntBool_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< int,bool > >::allocator_type":
        return _CSTL.VecMapIntBool_get_allocator(self)

    def pop_back(self) -> "void":
        return _CSTL.VecMapIntBool_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< int,bool > >::iterator":
        return _CSTL.VecMapIntBool_erase(self, *args)

    def __init__(self, *args):
        _CSTL.VecMapIntBool_swiginit(self, _CSTL.new_VecMapIntBool(*args))

    def push_back(self, x: "MapIntBool") -> "void":
        return _CSTL.VecMapIntBool_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< int,bool > >::value_type const &":
        return _CSTL.VecMapIntBool_front(self)

    def back(self) -> "std::vector< std::unordered_map< int,bool > >::value_type const &":
        return _CSTL.VecMapIntBool_back(self)

    def assign(self, n: "std::vector< std::unordered_map< int,bool > >::size_type", x: "MapIntBool") -> "void":
        return _CSTL.VecMapIntBool_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _CSTL.VecMapIntBool_resize(self, *args)

    def insert(self, *args) -> "void":
        return _CSTL.VecMapIntBool_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< int,bool > >::size_type") -> "void":
        return _CSTL.VecMapIntBool_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< int,bool > >::size_type":
        return _CSTL.VecMapIntBool_capacity(self)
    __swig_destroy__ = _CSTL.delete_VecMapIntBool

# Register VecMapIntBool in _CSTL:
_CSTL.VecMapIntBool_swigregister(VecMapIntBool)

class VecMapIntLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.VecMapIntLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.VecMapIntLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.VecMapIntLong___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< int,std::int64_t > >::size_type":
        return _CSTL.VecMapIntLong___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< int,std::int64_t > >::difference_type", j: "std::vector< std::unordered_map< int,std::int64_t > >::difference_type") -> "std::vector< std::unordered_map< int,std::int64_t,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::int64_t > > >,std::allocator< std::unordered_map< int,std::int64_t,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::int64_t > > > > > *":
        return _CSTL.VecMapIntLong___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _CSTL.VecMapIntLong___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< int,std::int64_t > >::difference_type", j: "std::vector< std::unordered_map< int,std::int64_t > >::difference_type") -> "void":
        return _CSTL.VecMapIntLong___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _CSTL.VecMapIntLong___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< int,std::int64_t > >::value_type const &":
        return _CSTL.VecMapIntLong___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _CSTL.VecMapIntLong___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< int,std::int64_t > >::value_type":
        return _CSTL.VecMapIntLong_pop(self)

    def append(self, x: "MapIntLong") -> "void":
        return _CSTL.VecMapIntLong_append(self, x)

    def empty(self) -> "bool":
        return _CSTL.VecMapIntLong_empty(self)

    def size(self) -> "std::vector< std::unordered_map< int,std::int64_t > >::size_type":
        return _CSTL.VecMapIntLong_size(self)

    def swap(self, v: "VecMapIntLong") -> "void":
        return _CSTL.VecMapIntLong_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< int,std::int64_t > >::iterator":
        return _CSTL.VecMapIntLong_begin(self)

    def end(self) -> "std::vector< std::unordered_map< int,std::int64_t > >::iterator":
        return _CSTL.VecMapIntLong_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< int,std::int64_t > >::reverse_iterator":
        return _CSTL.VecMapIntLong_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< int,std::int64_t > >::reverse_iterator":
        return _CSTL.VecMapIntLong_rend(self)

    def clear(self) -> "void":
        return _CSTL.VecMapIntLong_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< int,std::int64_t > >::allocator_type":
        return _CSTL.VecMapIntLong_get_allocator(self)

    def pop_back(self) -> "void":
        return _CSTL.VecMapIntLong_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< int,std::int64_t > >::iterator":
        return _CSTL.VecMapIntLong_erase(self, *args)

    def __init__(self, *args):
        _CSTL.VecMapIntLong_swiginit(self, _CSTL.new_VecMapIntLong(*args))

    def push_back(self, x: "MapIntLong") -> "void":
        return _CSTL.VecMapIntLong_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< int,std::int64_t > >::value_type const &":
        return _CSTL.VecMapIntLong_front(self)

    def back(self) -> "std::vector< std::unordered_map< int,std::int64_t > >::value_type const &":
        return _CSTL.VecMapIntLong_back(self)

    def assign(self, n: "std::vector< std::unordered_map< int,std::int64_t > >::size_type", x: "MapIntLong") -> "void":
        return _CSTL.VecMapIntLong_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _CSTL.VecMapIntLong_resize(self, *args)

    def insert(self, *args) -> "void":
        return _CSTL.VecMapIntLong_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< int,std::int64_t > >::size_type") -> "void":
        return _CSTL.VecMapIntLong_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< int,std::int64_t > >::size_type":
        return _CSTL.VecMapIntLong_capacity(self)
    __swig_destroy__ = _CSTL.delete_VecMapIntLong

# Register VecMapIntLong in _CSTL:
_CSTL.VecMapIntLong_swigregister(VecMapIntLong)

class VecMapStrInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.VecMapStrInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.VecMapStrInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.VecMapStrInt___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::string,int > >::size_type":
        return _CSTL.VecMapStrInt___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::string,int > >::difference_type", j: "std::vector< std::unordered_map< std::string,int > >::difference_type") -> "std::vector< std::unordered_map< std::string,int,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,int > > >,std::allocator< std::unordered_map< std::string,int,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,int > > > > > *":
        return _CSTL.VecMapStrInt___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _CSTL.VecMapStrInt___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::string,int > >::difference_type", j: "std::vector< std::unordered_map< std::string,int > >::difference_type") -> "void":
        return _CSTL.VecMapStrInt___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _CSTL.VecMapStrInt___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::string,int > >::value_type const &":
        return _CSTL.VecMapStrInt___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _CSTL.VecMapStrInt___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::string,int > >::value_type":
        return _CSTL.VecMapStrInt_pop(self)

    def append(self, x: "MapStrInt") -> "void":
        return _CSTL.VecMapStrInt_append(self, x)

    def empty(self) -> "bool":
        return _CSTL.VecMapStrInt_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::string,int > >::size_type":
        return _CSTL.VecMapStrInt_size(self)

    def swap(self, v: "VecMapStrInt") -> "void":
        return _CSTL.VecMapStrInt_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::string,int > >::iterator":
        return _CSTL.VecMapStrInt_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::string,int > >::iterator":
        return _CSTL.VecMapStrInt_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::string,int > >::reverse_iterator":
        return _CSTL.VecMapStrInt_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::string,int > >::reverse_iterator":
        return _CSTL.VecMapStrInt_rend(self)

    def clear(self) -> "void":
        return _CSTL.VecMapStrInt_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::string,int > >::allocator_type":
        return _CSTL.VecMapStrInt_get_allocator(self)

    def pop_back(self) -> "void":
        return _CSTL.VecMapStrInt_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::string,int > >::iterator":
        return _CSTL.VecMapStrInt_erase(self, *args)

    def __init__(self, *args):
        _CSTL.VecMapStrInt_swiginit(self, _CSTL.new_VecMapStrInt(*args))

    def push_back(self, x: "MapStrInt") -> "void":
        return _CSTL.VecMapStrInt_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::string,int > >::value_type const &":
        return _CSTL.VecMapStrInt_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::string,int > >::value_type const &":
        return _CSTL.VecMapStrInt_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::string,int > >::size_type", x: "MapStrInt") -> "void":
        return _CSTL.VecMapStrInt_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _CSTL.VecMapStrInt_resize(self, *args)

    def insert(self, *args) -> "void":
        return _CSTL.VecMapStrInt_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::string,int > >::size_type") -> "void":
        return _CSTL.VecMapStrInt_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::string,int > >::size_type":
        return _CSTL.VecMapStrInt_capacity(self)
    __swig_destroy__ = _CSTL.delete_VecMapStrInt

# Register VecMapStrInt in _CSTL:
_CSTL.VecMapStrInt_swigregister(VecMapStrInt)

class VecMapStrStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.VecMapStrStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.VecMapStrStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.VecMapStrStr___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::string,std::string > >::size_type":
        return _CSTL.VecMapStrStr___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::string,std::string > >::difference_type", j: "std::vector< std::unordered_map< std::string,std::string > >::difference_type") -> "std::vector< std::unordered_map< std::string,std::string,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::string > > >,std::allocator< std::unordered_map< std::string,std::string,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::string > > > > > *":
        return _CSTL.VecMapStrStr___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _CSTL.VecMapStrStr___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::string,std::string > >::difference_type", j: "std::vector< std::unordered_map< std::string,std::string > >::difference_type") -> "void":
        return _CSTL.VecMapStrStr___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _CSTL.VecMapStrStr___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::string,std::string > >::value_type const &":
        return _CSTL.VecMapStrStr___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _CSTL.VecMapStrStr___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::string,std::string > >::value_type":
        return _CSTL.VecMapStrStr_pop(self)

    def append(self, x: "MapStrStr") -> "void":
        return _CSTL.VecMapStrStr_append(self, x)

    def empty(self) -> "bool":
        return _CSTL.VecMapStrStr_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::string,std::string > >::size_type":
        return _CSTL.VecMapStrStr_size(self)

    def swap(self, v: "VecMapStrStr") -> "void":
        return _CSTL.VecMapStrStr_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::string,std::string > >::iterator":
        return _CSTL.VecMapStrStr_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::string,std::string > >::iterator":
        return _CSTL.VecMapStrStr_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::string,std::string > >::reverse_iterator":
        return _CSTL.VecMapStrStr_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::string,std::string > >::reverse_iterator":
        return _CSTL.VecMapStrStr_rend(self)

    def clear(self) -> "void":
        return _CSTL.VecMapStrStr_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::string,std::string > >::allocator_type":
        return _CSTL.VecMapStrStr_get_allocator(self)

    def pop_back(self) -> "void":
        return _CSTL.VecMapStrStr_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::string,std::string > >::iterator":
        return _CSTL.VecMapStrStr_erase(self, *args)

    def __init__(self, *args):
        _CSTL.VecMapStrStr_swiginit(self, _CSTL.new_VecMapStrStr(*args))

    def push_back(self, x: "MapStrStr") -> "void":
        return _CSTL.VecMapStrStr_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::string,std::string > >::value_type const &":
        return _CSTL.VecMapStrStr_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::string,std::string > >::value_type const &":
        return _CSTL.VecMapStrStr_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::string,std::string > >::size_type", x: "MapStrStr") -> "void":
        return _CSTL.VecMapStrStr_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _CSTL.VecMapStrStr_resize(self, *args)

    def insert(self, *args) -> "void":
        return _CSTL.VecMapStrStr_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::string,std::string > >::size_type") -> "void":
        return _CSTL.VecMapStrStr_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::string,std::string > >::size_type":
        return _CSTL.VecMapStrStr_capacity(self)
    __swig_destroy__ = _CSTL.delete_VecMapStrStr

# Register VecMapStrStr in _CSTL:
_CSTL.VecMapStrStr_swigregister(VecMapStrStr)

class VecMapStrFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.VecMapStrFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.VecMapStrFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.VecMapStrFloat___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::string,float > >::size_type":
        return _CSTL.VecMapStrFloat___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::string,float > >::difference_type", j: "std::vector< std::unordered_map< std::string,float > >::difference_type") -> "std::vector< std::unordered_map< std::string,float,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,float > > >,std::allocator< std::unordered_map< std::string,float,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,float > > > > > *":
        return _CSTL.VecMapStrFloat___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _CSTL.VecMapStrFloat___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::string,float > >::difference_type", j: "std::vector< std::unordered_map< std::string,float > >::difference_type") -> "void":
        return _CSTL.VecMapStrFloat___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _CSTL.VecMapStrFloat___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::string,float > >::value_type const &":
        return _CSTL.VecMapStrFloat___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _CSTL.VecMapStrFloat___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::string,float > >::value_type":
        return _CSTL.VecMapStrFloat_pop(self)

    def append(self, x: "MapStrFloat") -> "void":
        return _CSTL.VecMapStrFloat_append(self, x)

    def empty(self) -> "bool":
        return _CSTL.VecMapStrFloat_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::string,float > >::size_type":
        return _CSTL.VecMapStrFloat_size(self)

    def swap(self, v: "VecMapStrFloat") -> "void":
        return _CSTL.VecMapStrFloat_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::string,float > >::iterator":
        return _CSTL.VecMapStrFloat_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::string,float > >::iterator":
        return _CSTL.VecMapStrFloat_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::string,float > >::reverse_iterator":
        return _CSTL.VecMapStrFloat_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::string,float > >::reverse_iterator":
        return _CSTL.VecMapStrFloat_rend(self)

    def clear(self) -> "void":
        return _CSTL.VecMapStrFloat_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::string,float > >::allocator_type":
        return _CSTL.VecMapStrFloat_get_allocator(self)

    def pop_back(self) -> "void":
        return _CSTL.VecMapStrFloat_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::string,float > >::iterator":
        return _CSTL.VecMapStrFloat_erase(self, *args)

    def __init__(self, *args):
        _CSTL.VecMapStrFloat_swiginit(self, _CSTL.new_VecMapStrFloat(*args))

    def push_back(self, x: "MapStrFloat") -> "void":
        return _CSTL.VecMapStrFloat_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::string,float > >::value_type const &":
        return _CSTL.VecMapStrFloat_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::string,float > >::value_type const &":
        return _CSTL.VecMapStrFloat_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::string,float > >::size_type", x: "MapStrFloat") -> "void":
        return _CSTL.VecMapStrFloat_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _CSTL.VecMapStrFloat_resize(self, *args)

    def insert(self, *args) -> "void":
        return _CSTL.VecMapStrFloat_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::string,float > >::size_type") -> "void":
        return _CSTL.VecMapStrFloat_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::string,float > >::size_type":
        return _CSTL.VecMapStrFloat_capacity(self)
    __swig_destroy__ = _CSTL.delete_VecMapStrFloat

# Register VecMapStrFloat in _CSTL:
_CSTL.VecMapStrFloat_swigregister(VecMapStrFloat)

class VecMapStrDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.VecMapStrDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.VecMapStrDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.VecMapStrDouble___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::string,double > >::size_type":
        return _CSTL.VecMapStrDouble___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::string,double > >::difference_type", j: "std::vector< std::unordered_map< std::string,double > >::difference_type") -> "std::vector< std::unordered_map< std::string,double,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,double > > >,std::allocator< std::unordered_map< std::string,double,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,double > > > > > *":
        return _CSTL.VecMapStrDouble___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _CSTL.VecMapStrDouble___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::string,double > >::difference_type", j: "std::vector< std::unordered_map< std::string,double > >::difference_type") -> "void":
        return _CSTL.VecMapStrDouble___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _CSTL.VecMapStrDouble___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::string,double > >::value_type const &":
        return _CSTL.VecMapStrDouble___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _CSTL.VecMapStrDouble___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::string,double > >::value_type":
        return _CSTL.VecMapStrDouble_pop(self)

    def append(self, x: "MapStrDouble") -> "void":
        return _CSTL.VecMapStrDouble_append(self, x)

    def empty(self) -> "bool":
        return _CSTL.VecMapStrDouble_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::string,double > >::size_type":
        return _CSTL.VecMapStrDouble_size(self)

    def swap(self, v: "VecMapStrDouble") -> "void":
        return _CSTL.VecMapStrDouble_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::string,double > >::iterator":
        return _CSTL.VecMapStrDouble_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::string,double > >::iterator":
        return _CSTL.VecMapStrDouble_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::string,double > >::reverse_iterator":
        return _CSTL.VecMapStrDouble_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::string,double > >::reverse_iterator":
        return _CSTL.VecMapStrDouble_rend(self)

    def clear(self) -> "void":
        return _CSTL.VecMapStrDouble_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::string,double > >::allocator_type":
        return _CSTL.VecMapStrDouble_get_allocator(self)

    def pop_back(self) -> "void":
        return _CSTL.VecMapStrDouble_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::string,double > >::iterator":
        return _CSTL.VecMapStrDouble_erase(self, *args)

    def __init__(self, *args):
        _CSTL.VecMapStrDouble_swiginit(self, _CSTL.new_VecMapStrDouble(*args))

    def push_back(self, x: "MapStrDouble") -> "void":
        return _CSTL.VecMapStrDouble_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::string,double > >::value_type const &":
        return _CSTL.VecMapStrDouble_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::string,double > >::value_type const &":
        return _CSTL.VecMapStrDouble_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::string,double > >::size_type", x: "MapStrDouble") -> "void":
        return _CSTL.VecMapStrDouble_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _CSTL.VecMapStrDouble_resize(self, *args)

    def insert(self, *args) -> "void":
        return _CSTL.VecMapStrDouble_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::string,double > >::size_type") -> "void":
        return _CSTL.VecMapStrDouble_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::string,double > >::size_type":
        return _CSTL.VecMapStrDouble_capacity(self)
    __swig_destroy__ = _CSTL.delete_VecMapStrDouble

# Register VecMapStrDouble in _CSTL:
_CSTL.VecMapStrDouble_swigregister(VecMapStrDouble)

class VecMapStrBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.VecMapStrBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.VecMapStrBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.VecMapStrBool___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::string,bool > >::size_type":
        return _CSTL.VecMapStrBool___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::string,bool > >::difference_type", j: "std::vector< std::unordered_map< std::string,bool > >::difference_type") -> "std::vector< std::unordered_map< std::string,bool,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,bool > > >,std::allocator< std::unordered_map< std::string,bool,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,bool > > > > > *":
        return _CSTL.VecMapStrBool___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _CSTL.VecMapStrBool___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::string,bool > >::difference_type", j: "std::vector< std::unordered_map< std::string,bool > >::difference_type") -> "void":
        return _CSTL.VecMapStrBool___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _CSTL.VecMapStrBool___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::string,bool > >::value_type const &":
        return _CSTL.VecMapStrBool___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _CSTL.VecMapStrBool___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::string,bool > >::value_type":
        return _CSTL.VecMapStrBool_pop(self)

    def append(self, x: "MapStrBool") -> "void":
        return _CSTL.VecMapStrBool_append(self, x)

    def empty(self) -> "bool":
        return _CSTL.VecMapStrBool_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::string,bool > >::size_type":
        return _CSTL.VecMapStrBool_size(self)

    def swap(self, v: "VecMapStrBool") -> "void":
        return _CSTL.VecMapStrBool_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::string,bool > >::iterator":
        return _CSTL.VecMapStrBool_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::string,bool > >::iterator":
        return _CSTL.VecMapStrBool_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::string,bool > >::reverse_iterator":
        return _CSTL.VecMapStrBool_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::string,bool > >::reverse_iterator":
        return _CSTL.VecMapStrBool_rend(self)

    def clear(self) -> "void":
        return _CSTL.VecMapStrBool_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::string,bool > >::allocator_type":
        return _CSTL.VecMapStrBool_get_allocator(self)

    def pop_back(self) -> "void":
        return _CSTL.VecMapStrBool_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::string,bool > >::iterator":
        return _CSTL.VecMapStrBool_erase(self, *args)

    def __init__(self, *args):
        _CSTL.VecMapStrBool_swiginit(self, _CSTL.new_VecMapStrBool(*args))

    def push_back(self, x: "MapStrBool") -> "void":
        return _CSTL.VecMapStrBool_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::string,bool > >::value_type const &":
        return _CSTL.VecMapStrBool_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::string,bool > >::value_type const &":
        return _CSTL.VecMapStrBool_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::string,bool > >::size_type", x: "MapStrBool") -> "void":
        return _CSTL.VecMapStrBool_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _CSTL.VecMapStrBool_resize(self, *args)

    def insert(self, *args) -> "void":
        return _CSTL.VecMapStrBool_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::string,bool > >::size_type") -> "void":
        return _CSTL.VecMapStrBool_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::string,bool > >::size_type":
        return _CSTL.VecMapStrBool_capacity(self)
    __swig_destroy__ = _CSTL.delete_VecMapStrBool

# Register VecMapStrBool in _CSTL:
_CSTL.VecMapStrBool_swigregister(VecMapStrBool)

class VecMapStrLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.VecMapStrLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.VecMapStrLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.VecMapStrLong___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::string,std::int64_t > >::size_type":
        return _CSTL.VecMapStrLong___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::string,std::int64_t > >::difference_type", j: "std::vector< std::unordered_map< std::string,std::int64_t > >::difference_type") -> "std::vector< std::unordered_map< std::string,std::int64_t,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::int64_t > > >,std::allocator< std::unordered_map< std::string,std::int64_t,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::int64_t > > > > > *":
        return _CSTL.VecMapStrLong___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _CSTL.VecMapStrLong___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::string,std::int64_t > >::difference_type", j: "std::vector< std::unordered_map< std::string,std::int64_t > >::difference_type") -> "void":
        return _CSTL.VecMapStrLong___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _CSTL.VecMapStrLong___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::string,std::int64_t > >::value_type const &":
        return _CSTL.VecMapStrLong___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _CSTL.VecMapStrLong___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::string,std::int64_t > >::value_type":
        return _CSTL.VecMapStrLong_pop(self)

    def append(self, x: "MapStrLong") -> "void":
        return _CSTL.VecMapStrLong_append(self, x)

    def empty(self) -> "bool":
        return _CSTL.VecMapStrLong_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::string,std::int64_t > >::size_type":
        return _CSTL.VecMapStrLong_size(self)

    def swap(self, v: "VecMapStrLong") -> "void":
        return _CSTL.VecMapStrLong_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::string,std::int64_t > >::iterator":
        return _CSTL.VecMapStrLong_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::string,std::int64_t > >::iterator":
        return _CSTL.VecMapStrLong_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::string,std::int64_t > >::reverse_iterator":
        return _CSTL.VecMapStrLong_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::string,std::int64_t > >::reverse_iterator":
        return _CSTL.VecMapStrLong_rend(self)

    def clear(self) -> "void":
        return _CSTL.VecMapStrLong_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::string,std::int64_t > >::allocator_type":
        return _CSTL.VecMapStrLong_get_allocator(self)

    def pop_back(self) -> "void":
        return _CSTL.VecMapStrLong_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::string,std::int64_t > >::iterator":
        return _CSTL.VecMapStrLong_erase(self, *args)

    def __init__(self, *args):
        _CSTL.VecMapStrLong_swiginit(self, _CSTL.new_VecMapStrLong(*args))

    def push_back(self, x: "MapStrLong") -> "void":
        return _CSTL.VecMapStrLong_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::string,std::int64_t > >::value_type const &":
        return _CSTL.VecMapStrLong_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::string,std::int64_t > >::value_type const &":
        return _CSTL.VecMapStrLong_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::string,std::int64_t > >::size_type", x: "MapStrLong") -> "void":
        return _CSTL.VecMapStrLong_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _CSTL.VecMapStrLong_resize(self, *args)

    def insert(self, *args) -> "void":
        return _CSTL.VecMapStrLong_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::string,std::int64_t > >::size_type") -> "void":
        return _CSTL.VecMapStrLong_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::string,std::int64_t > >::size_type":
        return _CSTL.VecMapStrLong_capacity(self)
    __swig_destroy__ = _CSTL.delete_VecMapStrLong

# Register VecMapStrLong in _CSTL:
_CSTL.VecMapStrLong_swigregister(VecMapStrLong)

class VecMapLongInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.VecMapLongInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.VecMapLongInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.VecMapLongInt___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::int64_t,int > >::size_type":
        return _CSTL.VecMapLongInt___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::int64_t,int > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,int > >::difference_type") -> "std::vector< std::unordered_map< std::int64_t,int,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,int > > >,std::allocator< std::unordered_map< std::int64_t,int,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,int > > > > > *":
        return _CSTL.VecMapLongInt___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _CSTL.VecMapLongInt___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::int64_t,int > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,int > >::difference_type") -> "void":
        return _CSTL.VecMapLongInt___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _CSTL.VecMapLongInt___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::int64_t,int > >::value_type const &":
        return _CSTL.VecMapLongInt___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _CSTL.VecMapLongInt___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::int64_t,int > >::value_type":
        return _CSTL.VecMapLongInt_pop(self)

    def append(self, x: "MapLongInt") -> "void":
        return _CSTL.VecMapLongInt_append(self, x)

    def empty(self) -> "bool":
        return _CSTL.VecMapLongInt_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::int64_t,int > >::size_type":
        return _CSTL.VecMapLongInt_size(self)

    def swap(self, v: "VecMapLongInt") -> "void":
        return _CSTL.VecMapLongInt_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::int64_t,int > >::iterator":
        return _CSTL.VecMapLongInt_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::int64_t,int > >::iterator":
        return _CSTL.VecMapLongInt_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::int64_t,int > >::reverse_iterator":
        return _CSTL.VecMapLongInt_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::int64_t,int > >::reverse_iterator":
        return _CSTL.VecMapLongInt_rend(self)

    def clear(self) -> "void":
        return _CSTL.VecMapLongInt_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::int64_t,int > >::allocator_type":
        return _CSTL.VecMapLongInt_get_allocator(self)

    def pop_back(self) -> "void":
        return _CSTL.VecMapLongInt_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::int64_t,int > >::iterator":
        return _CSTL.VecMapLongInt_erase(self, *args)

    def __init__(self, *args):
        _CSTL.VecMapLongInt_swiginit(self, _CSTL.new_VecMapLongInt(*args))

    def push_back(self, x: "MapLongInt") -> "void":
        return _CSTL.VecMapLongInt_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::int64_t,int > >::value_type const &":
        return _CSTL.VecMapLongInt_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::int64_t,int > >::value_type const &":
        return _CSTL.VecMapLongInt_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::int64_t,int > >::size_type", x: "MapLongInt") -> "void":
        return _CSTL.VecMapLongInt_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _CSTL.VecMapLongInt_resize(self, *args)

    def insert(self, *args) -> "void":
        return _CSTL.VecMapLongInt_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::int64_t,int > >::size_type") -> "void":
        return _CSTL.VecMapLongInt_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::int64_t,int > >::size_type":
        return _CSTL.VecMapLongInt_capacity(self)
    __swig_destroy__ = _CSTL.delete_VecMapLongInt

# Register VecMapLongInt in _CSTL:
_CSTL.VecMapLongInt_swigregister(VecMapLongInt)

class VecMapLongStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.VecMapLongStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.VecMapLongStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.VecMapLongStr___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::int64_t,std::string > >::size_type":
        return _CSTL.VecMapLongStr___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::int64_t,std::string > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,std::string > >::difference_type") -> "std::vector< std::unordered_map< std::int64_t,std::string,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::string > > >,std::allocator< std::unordered_map< std::int64_t,std::string,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::string > > > > > *":
        return _CSTL.VecMapLongStr___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _CSTL.VecMapLongStr___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::int64_t,std::string > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,std::string > >::difference_type") -> "void":
        return _CSTL.VecMapLongStr___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _CSTL.VecMapLongStr___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::int64_t,std::string > >::value_type const &":
        return _CSTL.VecMapLongStr___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _CSTL.VecMapLongStr___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::int64_t,std::string > >::value_type":
        return _CSTL.VecMapLongStr_pop(self)

    def append(self, x: "MapLongStr") -> "void":
        return _CSTL.VecMapLongStr_append(self, x)

    def empty(self) -> "bool":
        return _CSTL.VecMapLongStr_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::int64_t,std::string > >::size_type":
        return _CSTL.VecMapLongStr_size(self)

    def swap(self, v: "VecMapLongStr") -> "void":
        return _CSTL.VecMapLongStr_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::int64_t,std::string > >::iterator":
        return _CSTL.VecMapLongStr_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::int64_t,std::string > >::iterator":
        return _CSTL.VecMapLongStr_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::int64_t,std::string > >::reverse_iterator":
        return _CSTL.VecMapLongStr_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::int64_t,std::string > >::reverse_iterator":
        return _CSTL.VecMapLongStr_rend(self)

    def clear(self) -> "void":
        return _CSTL.VecMapLongStr_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::int64_t,std::string > >::allocator_type":
        return _CSTL.VecMapLongStr_get_allocator(self)

    def pop_back(self) -> "void":
        return _CSTL.VecMapLongStr_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::int64_t,std::string > >::iterator":
        return _CSTL.VecMapLongStr_erase(self, *args)

    def __init__(self, *args):
        _CSTL.VecMapLongStr_swiginit(self, _CSTL.new_VecMapLongStr(*args))

    def push_back(self, x: "MapLongStr") -> "void":
        return _CSTL.VecMapLongStr_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::int64_t,std::string > >::value_type const &":
        return _CSTL.VecMapLongStr_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::int64_t,std::string > >::value_type const &":
        return _CSTL.VecMapLongStr_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::int64_t,std::string > >::size_type", x: "MapLongStr") -> "void":
        return _CSTL.VecMapLongStr_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _CSTL.VecMapLongStr_resize(self, *args)

    def insert(self, *args) -> "void":
        return _CSTL.VecMapLongStr_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::int64_t,std::string > >::size_type") -> "void":
        return _CSTL.VecMapLongStr_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::int64_t,std::string > >::size_type":
        return _CSTL.VecMapLongStr_capacity(self)
    __swig_destroy__ = _CSTL.delete_VecMapLongStr

# Register VecMapLongStr in _CSTL:
_CSTL.VecMapLongStr_swigregister(VecMapLongStr)

class VecMapLongFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.VecMapLongFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.VecMapLongFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.VecMapLongFloat___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::int64_t,float > >::size_type":
        return _CSTL.VecMapLongFloat___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::int64_t,float > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,float > >::difference_type") -> "std::vector< std::unordered_map< std::int64_t,float,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,float > > >,std::allocator< std::unordered_map< std::int64_t,float,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,float > > > > > *":
        return _CSTL.VecMapLongFloat___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _CSTL.VecMapLongFloat___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::int64_t,float > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,float > >::difference_type") -> "void":
        return _CSTL.VecMapLongFloat___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _CSTL.VecMapLongFloat___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::int64_t,float > >::value_type const &":
        return _CSTL.VecMapLongFloat___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _CSTL.VecMapLongFloat___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::int64_t,float > >::value_type":
        return _CSTL.VecMapLongFloat_pop(self)

    def append(self, x: "MapLongFloat") -> "void":
        return _CSTL.VecMapLongFloat_append(self, x)

    def empty(self) -> "bool":
        return _CSTL.VecMapLongFloat_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::int64_t,float > >::size_type":
        return _CSTL.VecMapLongFloat_size(self)

    def swap(self, v: "VecMapLongFloat") -> "void":
        return _CSTL.VecMapLongFloat_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::int64_t,float > >::iterator":
        return _CSTL.VecMapLongFloat_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::int64_t,float > >::iterator":
        return _CSTL.VecMapLongFloat_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::int64_t,float > >::reverse_iterator":
        return _CSTL.VecMapLongFloat_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::int64_t,float > >::reverse_iterator":
        return _CSTL.VecMapLongFloat_rend(self)

    def clear(self) -> "void":
        return _CSTL.VecMapLongFloat_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::int64_t,float > >::allocator_type":
        return _CSTL.VecMapLongFloat_get_allocator(self)

    def pop_back(self) -> "void":
        return _CSTL.VecMapLongFloat_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::int64_t,float > >::iterator":
        return _CSTL.VecMapLongFloat_erase(self, *args)

    def __init__(self, *args):
        _CSTL.VecMapLongFloat_swiginit(self, _CSTL.new_VecMapLongFloat(*args))

    def push_back(self, x: "MapLongFloat") -> "void":
        return _CSTL.VecMapLongFloat_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::int64_t,float > >::value_type const &":
        return _CSTL.VecMapLongFloat_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::int64_t,float > >::value_type const &":
        return _CSTL.VecMapLongFloat_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::int64_t,float > >::size_type", x: "MapLongFloat") -> "void":
        return _CSTL.VecMapLongFloat_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _CSTL.VecMapLongFloat_resize(self, *args)

    def insert(self, *args) -> "void":
        return _CSTL.VecMapLongFloat_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::int64_t,float > >::size_type") -> "void":
        return _CSTL.VecMapLongFloat_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::int64_t,float > >::size_type":
        return _CSTL.VecMapLongFloat_capacity(self)
    __swig_destroy__ = _CSTL.delete_VecMapLongFloat

# Register VecMapLongFloat in _CSTL:
_CSTL.VecMapLongFloat_swigregister(VecMapLongFloat)

class VecMapLongDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.VecMapLongDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.VecMapLongDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.VecMapLongDouble___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::int64_t,double > >::size_type":
        return _CSTL.VecMapLongDouble___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::int64_t,double > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,double > >::difference_type") -> "std::vector< std::unordered_map< std::int64_t,double,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,double > > >,std::allocator< std::unordered_map< std::int64_t,double,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,double > > > > > *":
        return _CSTL.VecMapLongDouble___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _CSTL.VecMapLongDouble___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::int64_t,double > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,double > >::difference_type") -> "void":
        return _CSTL.VecMapLongDouble___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _CSTL.VecMapLongDouble___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::int64_t,double > >::value_type const &":
        return _CSTL.VecMapLongDouble___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _CSTL.VecMapLongDouble___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::int64_t,double > >::value_type":
        return _CSTL.VecMapLongDouble_pop(self)

    def append(self, x: "MapLongDouble") -> "void":
        return _CSTL.VecMapLongDouble_append(self, x)

    def empty(self) -> "bool":
        return _CSTL.VecMapLongDouble_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::int64_t,double > >::size_type":
        return _CSTL.VecMapLongDouble_size(self)

    def swap(self, v: "VecMapLongDouble") -> "void":
        return _CSTL.VecMapLongDouble_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::int64_t,double > >::iterator":
        return _CSTL.VecMapLongDouble_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::int64_t,double > >::iterator":
        return _CSTL.VecMapLongDouble_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::int64_t,double > >::reverse_iterator":
        return _CSTL.VecMapLongDouble_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::int64_t,double > >::reverse_iterator":
        return _CSTL.VecMapLongDouble_rend(self)

    def clear(self) -> "void":
        return _CSTL.VecMapLongDouble_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::int64_t,double > >::allocator_type":
        return _CSTL.VecMapLongDouble_get_allocator(self)

    def pop_back(self) -> "void":
        return _CSTL.VecMapLongDouble_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::int64_t,double > >::iterator":
        return _CSTL.VecMapLongDouble_erase(self, *args)

    def __init__(self, *args):
        _CSTL.VecMapLongDouble_swiginit(self, _CSTL.new_VecMapLongDouble(*args))

    def push_back(self, x: "MapLongDouble") -> "void":
        return _CSTL.VecMapLongDouble_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::int64_t,double > >::value_type const &":
        return _CSTL.VecMapLongDouble_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::int64_t,double > >::value_type const &":
        return _CSTL.VecMapLongDouble_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::int64_t,double > >::size_type", x: "MapLongDouble") -> "void":
        return _CSTL.VecMapLongDouble_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _CSTL.VecMapLongDouble_resize(self, *args)

    def insert(self, *args) -> "void":
        return _CSTL.VecMapLongDouble_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::int64_t,double > >::size_type") -> "void":
        return _CSTL.VecMapLongDouble_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::int64_t,double > >::size_type":
        return _CSTL.VecMapLongDouble_capacity(self)
    __swig_destroy__ = _CSTL.delete_VecMapLongDouble

# Register VecMapLongDouble in _CSTL:
_CSTL.VecMapLongDouble_swigregister(VecMapLongDouble)

class VecMapLongBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.VecMapLongBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.VecMapLongBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.VecMapLongBool___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::int64_t,bool > >::size_type":
        return _CSTL.VecMapLongBool___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::int64_t,bool > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,bool > >::difference_type") -> "std::vector< std::unordered_map< std::int64_t,bool,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,bool > > >,std::allocator< std::unordered_map< std::int64_t,bool,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,bool > > > > > *":
        return _CSTL.VecMapLongBool___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _CSTL.VecMapLongBool___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::int64_t,bool > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,bool > >::difference_type") -> "void":
        return _CSTL.VecMapLongBool___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _CSTL.VecMapLongBool___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::int64_t,bool > >::value_type const &":
        return _CSTL.VecMapLongBool___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _CSTL.VecMapLongBool___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::int64_t,bool > >::value_type":
        return _CSTL.VecMapLongBool_pop(self)

    def append(self, x: "MapLongBool") -> "void":
        return _CSTL.VecMapLongBool_append(self, x)

    def empty(self) -> "bool":
        return _CSTL.VecMapLongBool_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::int64_t,bool > >::size_type":
        return _CSTL.VecMapLongBool_size(self)

    def swap(self, v: "VecMapLongBool") -> "void":
        return _CSTL.VecMapLongBool_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::int64_t,bool > >::iterator":
        return _CSTL.VecMapLongBool_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::int64_t,bool > >::iterator":
        return _CSTL.VecMapLongBool_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::int64_t,bool > >::reverse_iterator":
        return _CSTL.VecMapLongBool_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::int64_t,bool > >::reverse_iterator":
        return _CSTL.VecMapLongBool_rend(self)

    def clear(self) -> "void":
        return _CSTL.VecMapLongBool_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::int64_t,bool > >::allocator_type":
        return _CSTL.VecMapLongBool_get_allocator(self)

    def pop_back(self) -> "void":
        return _CSTL.VecMapLongBool_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::int64_t,bool > >::iterator":
        return _CSTL.VecMapLongBool_erase(self, *args)

    def __init__(self, *args):
        _CSTL.VecMapLongBool_swiginit(self, _CSTL.new_VecMapLongBool(*args))

    def push_back(self, x: "MapLongBool") -> "void":
        return _CSTL.VecMapLongBool_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::int64_t,bool > >::value_type const &":
        return _CSTL.VecMapLongBool_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::int64_t,bool > >::value_type const &":
        return _CSTL.VecMapLongBool_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::int64_t,bool > >::size_type", x: "MapLongBool") -> "void":
        return _CSTL.VecMapLongBool_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _CSTL.VecMapLongBool_resize(self, *args)

    def insert(self, *args) -> "void":
        return _CSTL.VecMapLongBool_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::int64_t,bool > >::size_type") -> "void":
        return _CSTL.VecMapLongBool_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::int64_t,bool > >::size_type":
        return _CSTL.VecMapLongBool_capacity(self)
    __swig_destroy__ = _CSTL.delete_VecMapLongBool

# Register VecMapLongBool in _CSTL:
_CSTL.VecMapLongBool_swigregister(VecMapLongBool)

class VecMapLongLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.VecMapLongLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.VecMapLongLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.VecMapLongLong___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::int64_t,std::int64_t > >::size_type":
        return _CSTL.VecMapLongLong___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::int64_t,std::int64_t > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,std::int64_t > >::difference_type") -> "std::vector< std::unordered_map< std::int64_t,std::int64_t,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::int64_t > > >,std::allocator< std::unordered_map< std::int64_t,std::int64_t,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::int64_t > > > > > *":
        return _CSTL.VecMapLongLong___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _CSTL.VecMapLongLong___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::int64_t,std::int64_t > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,std::int64_t > >::difference_type") -> "void":
        return _CSTL.VecMapLongLong___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _CSTL.VecMapLongLong___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::int64_t,std::int64_t > >::value_type const &":
        return _CSTL.VecMapLongLong___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _CSTL.VecMapLongLong___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::int64_t,std::int64_t > >::value_type":
        return _CSTL.VecMapLongLong_pop(self)

    def append(self, x: "MapLongLong") -> "void":
        return _CSTL.VecMapLongLong_append(self, x)

    def empty(self) -> "bool":
        return _CSTL.VecMapLongLong_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::int64_t,std::int64_t > >::size_type":
        return _CSTL.VecMapLongLong_size(self)

    def swap(self, v: "VecMapLongLong") -> "void":
        return _CSTL.VecMapLongLong_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::int64_t,std::int64_t > >::iterator":
        return _CSTL.VecMapLongLong_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::int64_t,std::int64_t > >::iterator":
        return _CSTL.VecMapLongLong_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::int64_t,std::int64_t > >::reverse_iterator":
        return _CSTL.VecMapLongLong_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::int64_t,std::int64_t > >::reverse_iterator":
        return _CSTL.VecMapLongLong_rend(self)

    def clear(self) -> "void":
        return _CSTL.VecMapLongLong_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::int64_t,std::int64_t > >::allocator_type":
        return _CSTL.VecMapLongLong_get_allocator(self)

    def pop_back(self) -> "void":
        return _CSTL.VecMapLongLong_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::int64_t,std::int64_t > >::iterator":
        return _CSTL.VecMapLongLong_erase(self, *args)

    def __init__(self, *args):
        _CSTL.VecMapLongLong_swiginit(self, _CSTL.new_VecMapLongLong(*args))

    def push_back(self, x: "MapLongLong") -> "void":
        return _CSTL.VecMapLongLong_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::int64_t,std::int64_t > >::value_type const &":
        return _CSTL.VecMapLongLong_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::int64_t,std::int64_t > >::value_type const &":
        return _CSTL.VecMapLongLong_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::int64_t,std::int64_t > >::size_type", x: "MapLongLong") -> "void":
        return _CSTL.VecMapLongLong_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _CSTL.VecMapLongLong_resize(self, *args)

    def insert(self, *args) -> "void":
        return _CSTL.VecMapLongLong_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::int64_t,std::int64_t > >::size_type") -> "void":
        return _CSTL.VecMapLongLong_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::int64_t,std::int64_t > >::size_type":
        return _CSTL.VecMapLongLong_capacity(self)
    __swig_destroy__ = _CSTL.delete_VecMapLongLong

# Register VecMapLongLong in _CSTL:
_CSTL.VecMapLongLong_swigregister(VecMapLongLong)

class MapIntVecInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntVecInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapIntVecInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapIntVecInt___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::vector< int > >::size_type":
        return _CSTL.MapIntVecInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::vector< int > >::key_type const &") -> "std::unordered_map< int,std::vector< int > >::mapped_type const &":
        return _CSTL.MapIntVecInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::vector< int > >::key_type const &") -> "void":
        return _CSTL.MapIntVecInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::vector< int > >::key_type const &") -> "bool":
        return _CSTL.MapIntVecInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapIntVecInt_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapIntVecInt_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapIntVecInt_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::vector< int > >::key_type const &") -> "bool":
        return _CSTL.MapIntVecInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntVecInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntVecInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapIntVecInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapIntVecInt_asdict(self)

    def __init__(self, *args):
        _CSTL.MapIntVecInt_swiginit(self, _CSTL.new_MapIntVecInt(*args))

    def empty(self) -> "bool":
        return _CSTL.MapIntVecInt_empty(self)

    def size(self) -> "std::unordered_map< int,std::vector< int > >::size_type":
        return _CSTL.MapIntVecInt_size(self)

    def swap(self, v: "MapIntVecInt") -> "void":
        return _CSTL.MapIntVecInt_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::vector< int > >::iterator":
        return _CSTL.MapIntVecInt_begin(self)

    def end(self) -> "std::unordered_map< int,std::vector< int > >::iterator":
        return _CSTL.MapIntVecInt_end(self)

    def clear(self) -> "void":
        return _CSTL.MapIntVecInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::vector< int > >::allocator_type":
        return _CSTL.MapIntVecInt_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::vector< int > >::key_type const &") -> "std::unordered_map< int,std::vector< int > >::size_type":
        return _CSTL.MapIntVecInt_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapIntVecInt_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::vector< int > >::key_type const &") -> "std::unordered_map< int,std::vector< int > >::iterator":
        return _CSTL.MapIntVecInt_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapIntVecInt

# Register MapIntVecInt in _CSTL:
_CSTL.MapIntVecInt_swigregister(MapIntVecInt)

class MapIntVecStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntVecStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapIntVecStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapIntVecStr___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::vector< std::string > >::size_type":
        return _CSTL.MapIntVecStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::vector< std::string > >::key_type const &") -> "std::unordered_map< int,std::vector< std::string > >::mapped_type const &":
        return _CSTL.MapIntVecStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::vector< std::string > >::key_type const &") -> "void":
        return _CSTL.MapIntVecStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::vector< std::string > >::key_type const &") -> "bool":
        return _CSTL.MapIntVecStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapIntVecStr_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapIntVecStr_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapIntVecStr_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::vector< std::string > >::key_type const &") -> "bool":
        return _CSTL.MapIntVecStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntVecStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntVecStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapIntVecStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapIntVecStr_asdict(self)

    def __init__(self, *args):
        _CSTL.MapIntVecStr_swiginit(self, _CSTL.new_MapIntVecStr(*args))

    def empty(self) -> "bool":
        return _CSTL.MapIntVecStr_empty(self)

    def size(self) -> "std::unordered_map< int,std::vector< std::string > >::size_type":
        return _CSTL.MapIntVecStr_size(self)

    def swap(self, v: "MapIntVecStr") -> "void":
        return _CSTL.MapIntVecStr_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::vector< std::string > >::iterator":
        return _CSTL.MapIntVecStr_begin(self)

    def end(self) -> "std::unordered_map< int,std::vector< std::string > >::iterator":
        return _CSTL.MapIntVecStr_end(self)

    def clear(self) -> "void":
        return _CSTL.MapIntVecStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::vector< std::string > >::allocator_type":
        return _CSTL.MapIntVecStr_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::vector< std::string > >::key_type const &") -> "std::unordered_map< int,std::vector< std::string > >::size_type":
        return _CSTL.MapIntVecStr_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapIntVecStr_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::vector< std::string > >::key_type const &") -> "std::unordered_map< int,std::vector< std::string > >::iterator":
        return _CSTL.MapIntVecStr_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapIntVecStr

# Register MapIntVecStr in _CSTL:
_CSTL.MapIntVecStr_swigregister(MapIntVecStr)

class MapIntVecFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntVecFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapIntVecFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapIntVecFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::vector< float > >::size_type":
        return _CSTL.MapIntVecFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::vector< float > >::key_type const &") -> "std::unordered_map< int,std::vector< float > >::mapped_type const &":
        return _CSTL.MapIntVecFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::vector< float > >::key_type const &") -> "void":
        return _CSTL.MapIntVecFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::vector< float > >::key_type const &") -> "bool":
        return _CSTL.MapIntVecFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapIntVecFloat_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapIntVecFloat_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapIntVecFloat_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::vector< float > >::key_type const &") -> "bool":
        return _CSTL.MapIntVecFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntVecFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntVecFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapIntVecFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapIntVecFloat_asdict(self)

    def __init__(self, *args):
        _CSTL.MapIntVecFloat_swiginit(self, _CSTL.new_MapIntVecFloat(*args))

    def empty(self) -> "bool":
        return _CSTL.MapIntVecFloat_empty(self)

    def size(self) -> "std::unordered_map< int,std::vector< float > >::size_type":
        return _CSTL.MapIntVecFloat_size(self)

    def swap(self, v: "MapIntVecFloat") -> "void":
        return _CSTL.MapIntVecFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::vector< float > >::iterator":
        return _CSTL.MapIntVecFloat_begin(self)

    def end(self) -> "std::unordered_map< int,std::vector< float > >::iterator":
        return _CSTL.MapIntVecFloat_end(self)

    def clear(self) -> "void":
        return _CSTL.MapIntVecFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::vector< float > >::allocator_type":
        return _CSTL.MapIntVecFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::vector< float > >::key_type const &") -> "std::unordered_map< int,std::vector< float > >::size_type":
        return _CSTL.MapIntVecFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapIntVecFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::vector< float > >::key_type const &") -> "std::unordered_map< int,std::vector< float > >::iterator":
        return _CSTL.MapIntVecFloat_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapIntVecFloat

# Register MapIntVecFloat in _CSTL:
_CSTL.MapIntVecFloat_swigregister(MapIntVecFloat)

class MapIntVecDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntVecDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapIntVecDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapIntVecDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::vector< double > >::size_type":
        return _CSTL.MapIntVecDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::vector< double > >::key_type const &") -> "std::unordered_map< int,std::vector< double > >::mapped_type const &":
        return _CSTL.MapIntVecDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::vector< double > >::key_type const &") -> "void":
        return _CSTL.MapIntVecDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::vector< double > >::key_type const &") -> "bool":
        return _CSTL.MapIntVecDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapIntVecDouble_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapIntVecDouble_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapIntVecDouble_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::vector< double > >::key_type const &") -> "bool":
        return _CSTL.MapIntVecDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntVecDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntVecDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapIntVecDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapIntVecDouble_asdict(self)

    def __init__(self, *args):
        _CSTL.MapIntVecDouble_swiginit(self, _CSTL.new_MapIntVecDouble(*args))

    def empty(self) -> "bool":
        return _CSTL.MapIntVecDouble_empty(self)

    def size(self) -> "std::unordered_map< int,std::vector< double > >::size_type":
        return _CSTL.MapIntVecDouble_size(self)

    def swap(self, v: "MapIntVecDouble") -> "void":
        return _CSTL.MapIntVecDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::vector< double > >::iterator":
        return _CSTL.MapIntVecDouble_begin(self)

    def end(self) -> "std::unordered_map< int,std::vector< double > >::iterator":
        return _CSTL.MapIntVecDouble_end(self)

    def clear(self) -> "void":
        return _CSTL.MapIntVecDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::vector< double > >::allocator_type":
        return _CSTL.MapIntVecDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::vector< double > >::key_type const &") -> "std::unordered_map< int,std::vector< double > >::size_type":
        return _CSTL.MapIntVecDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapIntVecDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::vector< double > >::key_type const &") -> "std::unordered_map< int,std::vector< double > >::iterator":
        return _CSTL.MapIntVecDouble_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapIntVecDouble

# Register MapIntVecDouble in _CSTL:
_CSTL.MapIntVecDouble_swigregister(MapIntVecDouble)

class MapIntVecBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntVecBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapIntVecBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapIntVecBool___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::vector< bool > >::size_type":
        return _CSTL.MapIntVecBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::vector< bool > >::key_type const &") -> "std::unordered_map< int,std::vector< bool > >::mapped_type const &":
        return _CSTL.MapIntVecBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::vector< bool > >::key_type const &") -> "void":
        return _CSTL.MapIntVecBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::vector< bool > >::key_type const &") -> "bool":
        return _CSTL.MapIntVecBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapIntVecBool_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapIntVecBool_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapIntVecBool_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::vector< bool > >::key_type const &") -> "bool":
        return _CSTL.MapIntVecBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntVecBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntVecBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapIntVecBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapIntVecBool_asdict(self)

    def __init__(self, *args):
        _CSTL.MapIntVecBool_swiginit(self, _CSTL.new_MapIntVecBool(*args))

    def empty(self) -> "bool":
        return _CSTL.MapIntVecBool_empty(self)

    def size(self) -> "std::unordered_map< int,std::vector< bool > >::size_type":
        return _CSTL.MapIntVecBool_size(self)

    def swap(self, v: "MapIntVecBool") -> "void":
        return _CSTL.MapIntVecBool_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::vector< bool > >::iterator":
        return _CSTL.MapIntVecBool_begin(self)

    def end(self) -> "std::unordered_map< int,std::vector< bool > >::iterator":
        return _CSTL.MapIntVecBool_end(self)

    def clear(self) -> "void":
        return _CSTL.MapIntVecBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::vector< bool > >::allocator_type":
        return _CSTL.MapIntVecBool_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::vector< bool > >::key_type const &") -> "std::unordered_map< int,std::vector< bool > >::size_type":
        return _CSTL.MapIntVecBool_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapIntVecBool_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::vector< bool > >::key_type const &") -> "std::unordered_map< int,std::vector< bool > >::iterator":
        return _CSTL.MapIntVecBool_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapIntVecBool

# Register MapIntVecBool in _CSTL:
_CSTL.MapIntVecBool_swigregister(MapIntVecBool)

class MapIntVecLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntVecLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapIntVecLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapIntVecLong___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::vector< std::int64_t > >::size_type":
        return _CSTL.MapIntVecLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::vector< std::int64_t > >::key_type const &") -> "std::unordered_map< int,std::vector< std::int64_t > >::mapped_type const &":
        return _CSTL.MapIntVecLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::vector< std::int64_t > >::key_type const &") -> "void":
        return _CSTL.MapIntVecLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::vector< std::int64_t > >::key_type const &") -> "bool":
        return _CSTL.MapIntVecLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapIntVecLong_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapIntVecLong_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapIntVecLong_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::vector< std::int64_t > >::key_type const &") -> "bool":
        return _CSTL.MapIntVecLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntVecLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntVecLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapIntVecLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapIntVecLong_asdict(self)

    def __init__(self, *args):
        _CSTL.MapIntVecLong_swiginit(self, _CSTL.new_MapIntVecLong(*args))

    def empty(self) -> "bool":
        return _CSTL.MapIntVecLong_empty(self)

    def size(self) -> "std::unordered_map< int,std::vector< std::int64_t > >::size_type":
        return _CSTL.MapIntVecLong_size(self)

    def swap(self, v: "MapIntVecLong") -> "void":
        return _CSTL.MapIntVecLong_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::vector< std::int64_t > >::iterator":
        return _CSTL.MapIntVecLong_begin(self)

    def end(self) -> "std::unordered_map< int,std::vector< std::int64_t > >::iterator":
        return _CSTL.MapIntVecLong_end(self)

    def clear(self) -> "void":
        return _CSTL.MapIntVecLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::vector< std::int64_t > >::allocator_type":
        return _CSTL.MapIntVecLong_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::vector< std::int64_t > >::key_type const &") -> "std::unordered_map< int,std::vector< std::int64_t > >::size_type":
        return _CSTL.MapIntVecLong_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapIntVecLong_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::vector< std::int64_t > >::key_type const &") -> "std::unordered_map< int,std::vector< std::int64_t > >::iterator":
        return _CSTL.MapIntVecLong_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapIntVecLong

# Register MapIntVecLong in _CSTL:
_CSTL.MapIntVecLong_swigregister(MapIntVecLong)

class MapIntSetInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntSetInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapIntSetInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapIntSetInt___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_set< int > >::size_type":
        return _CSTL.MapIntSetInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_set< int > >::key_type const &") -> "std::unordered_map< int,std::unordered_set< int > >::mapped_type const &":
        return _CSTL.MapIntSetInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_set< int > >::key_type const &") -> "void":
        return _CSTL.MapIntSetInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_set< int > >::key_type const &") -> "bool":
        return _CSTL.MapIntSetInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapIntSetInt_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapIntSetInt_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapIntSetInt_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_set< int > >::key_type const &") -> "bool":
        return _CSTL.MapIntSetInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntSetInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntSetInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapIntSetInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapIntSetInt_asdict(self)

    def __init__(self, *args):
        _CSTL.MapIntSetInt_swiginit(self, _CSTL.new_MapIntSetInt(*args))

    def empty(self) -> "bool":
        return _CSTL.MapIntSetInt_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_set< int > >::size_type":
        return _CSTL.MapIntSetInt_size(self)

    def swap(self, v: "MapIntSetInt") -> "void":
        return _CSTL.MapIntSetInt_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_set< int > >::iterator":
        return _CSTL.MapIntSetInt_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_set< int > >::iterator":
        return _CSTL.MapIntSetInt_end(self)

    def clear(self) -> "void":
        return _CSTL.MapIntSetInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_set< int > >::allocator_type":
        return _CSTL.MapIntSetInt_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_set< int > >::key_type const &") -> "std::unordered_map< int,std::unordered_set< int > >::size_type":
        return _CSTL.MapIntSetInt_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapIntSetInt_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_set< int > >::key_type const &") -> "std::unordered_map< int,std::unordered_set< int > >::iterator":
        return _CSTL.MapIntSetInt_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapIntSetInt

# Register MapIntSetInt in _CSTL:
_CSTL.MapIntSetInt_swigregister(MapIntSetInt)

class MapIntSetStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntSetStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapIntSetStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapIntSetStr___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_set< std::string > >::size_type":
        return _CSTL.MapIntSetStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_set< std::string > >::key_type const &") -> "std::unordered_map< int,std::unordered_set< std::string > >::mapped_type const &":
        return _CSTL.MapIntSetStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_set< std::string > >::key_type const &") -> "void":
        return _CSTL.MapIntSetStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_set< std::string > >::key_type const &") -> "bool":
        return _CSTL.MapIntSetStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapIntSetStr_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapIntSetStr_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapIntSetStr_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_set< std::string > >::key_type const &") -> "bool":
        return _CSTL.MapIntSetStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntSetStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntSetStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapIntSetStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapIntSetStr_asdict(self)

    def __init__(self, *args):
        _CSTL.MapIntSetStr_swiginit(self, _CSTL.new_MapIntSetStr(*args))

    def empty(self) -> "bool":
        return _CSTL.MapIntSetStr_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_set< std::string > >::size_type":
        return _CSTL.MapIntSetStr_size(self)

    def swap(self, v: "MapIntSetStr") -> "void":
        return _CSTL.MapIntSetStr_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_set< std::string > >::iterator":
        return _CSTL.MapIntSetStr_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_set< std::string > >::iterator":
        return _CSTL.MapIntSetStr_end(self)

    def clear(self) -> "void":
        return _CSTL.MapIntSetStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_set< std::string > >::allocator_type":
        return _CSTL.MapIntSetStr_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_set< std::string > >::key_type const &") -> "std::unordered_map< int,std::unordered_set< std::string > >::size_type":
        return _CSTL.MapIntSetStr_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapIntSetStr_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_set< std::string > >::key_type const &") -> "std::unordered_map< int,std::unordered_set< std::string > >::iterator":
        return _CSTL.MapIntSetStr_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapIntSetStr

# Register MapIntSetStr in _CSTL:
_CSTL.MapIntSetStr_swigregister(MapIntSetStr)

class MapIntSetLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntSetLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapIntSetLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapIntSetLong___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_set< std::int64_t > >::size_type":
        return _CSTL.MapIntSetLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_set< std::int64_t > >::key_type const &") -> "std::unordered_map< int,std::unordered_set< std::int64_t > >::mapped_type const &":
        return _CSTL.MapIntSetLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_set< std::int64_t > >::key_type const &") -> "void":
        return _CSTL.MapIntSetLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_set< std::int64_t > >::key_type const &") -> "bool":
        return _CSTL.MapIntSetLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapIntSetLong_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapIntSetLong_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapIntSetLong_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_set< std::int64_t > >::key_type const &") -> "bool":
        return _CSTL.MapIntSetLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntSetLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntSetLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapIntSetLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapIntSetLong_asdict(self)

    def __init__(self, *args):
        _CSTL.MapIntSetLong_swiginit(self, _CSTL.new_MapIntSetLong(*args))

    def empty(self) -> "bool":
        return _CSTL.MapIntSetLong_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_set< std::int64_t > >::size_type":
        return _CSTL.MapIntSetLong_size(self)

    def swap(self, v: "MapIntSetLong") -> "void":
        return _CSTL.MapIntSetLong_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_set< std::int64_t > >::iterator":
        return _CSTL.MapIntSetLong_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_set< std::int64_t > >::iterator":
        return _CSTL.MapIntSetLong_end(self)

    def clear(self) -> "void":
        return _CSTL.MapIntSetLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_set< std::int64_t > >::allocator_type":
        return _CSTL.MapIntSetLong_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_set< std::int64_t > >::key_type const &") -> "std::unordered_map< int,std::unordered_set< std::int64_t > >::size_type":
        return _CSTL.MapIntSetLong_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapIntSetLong_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_set< std::int64_t > >::key_type const &") -> "std::unordered_map< int,std::unordered_set< std::int64_t > >::iterator":
        return _CSTL.MapIntSetLong_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapIntSetLong

# Register MapIntSetLong in _CSTL:
_CSTL.MapIntSetLong_swigregister(MapIntSetLong)

class MapIntMapIntInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntMapIntInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapIntMapIntInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapIntMapIntInt___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< int,int > >::size_type":
        return _CSTL.MapIntMapIntInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< int,int > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,int > >::mapped_type const &":
        return _CSTL.MapIntMapIntInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< int,int > >::key_type const &") -> "void":
        return _CSTL.MapIntMapIntInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< int,int > >::key_type const &") -> "bool":
        return _CSTL.MapIntMapIntInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapIntMapIntInt_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapIntMapIntInt_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapIntMapIntInt_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< int,int > >::key_type const &") -> "bool":
        return _CSTL.MapIntMapIntInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntMapIntInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntMapIntInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapIntMapIntInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapIntMapIntInt_asdict(self)

    def __init__(self, *args):
        _CSTL.MapIntMapIntInt_swiginit(self, _CSTL.new_MapIntMapIntInt(*args))

    def empty(self) -> "bool":
        return _CSTL.MapIntMapIntInt_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< int,int > >::size_type":
        return _CSTL.MapIntMapIntInt_size(self)

    def swap(self, v: "MapIntMapIntInt") -> "void":
        return _CSTL.MapIntMapIntInt_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< int,int > >::iterator":
        return _CSTL.MapIntMapIntInt_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< int,int > >::iterator":
        return _CSTL.MapIntMapIntInt_end(self)

    def clear(self) -> "void":
        return _CSTL.MapIntMapIntInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< int,int > >::allocator_type":
        return _CSTL.MapIntMapIntInt_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< int,int > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,int > >::size_type":
        return _CSTL.MapIntMapIntInt_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapIntMapIntInt_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< int,int > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,int > >::iterator":
        return _CSTL.MapIntMapIntInt_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapIntMapIntInt

# Register MapIntMapIntInt in _CSTL:
_CSTL.MapIntMapIntInt_swigregister(MapIntMapIntInt)

class MapIntMapIntStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntMapIntStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapIntMapIntStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapIntMapIntStr___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< int,std::string > >::size_type":
        return _CSTL.MapIntMapIntStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< int,std::string > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::string > >::mapped_type const &":
        return _CSTL.MapIntMapIntStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< int,std::string > >::key_type const &") -> "void":
        return _CSTL.MapIntMapIntStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< int,std::string > >::key_type const &") -> "bool":
        return _CSTL.MapIntMapIntStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapIntMapIntStr_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapIntMapIntStr_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapIntMapIntStr_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< int,std::string > >::key_type const &") -> "bool":
        return _CSTL.MapIntMapIntStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntMapIntStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntMapIntStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapIntMapIntStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapIntMapIntStr_asdict(self)

    def __init__(self, *args):
        _CSTL.MapIntMapIntStr_swiginit(self, _CSTL.new_MapIntMapIntStr(*args))

    def empty(self) -> "bool":
        return _CSTL.MapIntMapIntStr_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< int,std::string > >::size_type":
        return _CSTL.MapIntMapIntStr_size(self)

    def swap(self, v: "MapIntMapIntStr") -> "void":
        return _CSTL.MapIntMapIntStr_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< int,std::string > >::iterator":
        return _CSTL.MapIntMapIntStr_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< int,std::string > >::iterator":
        return _CSTL.MapIntMapIntStr_end(self)

    def clear(self) -> "void":
        return _CSTL.MapIntMapIntStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< int,std::string > >::allocator_type":
        return _CSTL.MapIntMapIntStr_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< int,std::string > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::string > >::size_type":
        return _CSTL.MapIntMapIntStr_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapIntMapIntStr_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< int,std::string > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::string > >::iterator":
        return _CSTL.MapIntMapIntStr_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapIntMapIntStr

# Register MapIntMapIntStr in _CSTL:
_CSTL.MapIntMapIntStr_swigregister(MapIntMapIntStr)

class MapIntMapIntFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntMapIntFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapIntMapIntFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapIntMapIntFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< int,float > >::size_type":
        return _CSTL.MapIntMapIntFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< int,float > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,float > >::mapped_type const &":
        return _CSTL.MapIntMapIntFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< int,float > >::key_type const &") -> "void":
        return _CSTL.MapIntMapIntFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< int,float > >::key_type const &") -> "bool":
        return _CSTL.MapIntMapIntFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapIntMapIntFloat_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapIntMapIntFloat_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapIntMapIntFloat_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< int,float > >::key_type const &") -> "bool":
        return _CSTL.MapIntMapIntFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntMapIntFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntMapIntFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapIntMapIntFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapIntMapIntFloat_asdict(self)

    def __init__(self, *args):
        _CSTL.MapIntMapIntFloat_swiginit(self, _CSTL.new_MapIntMapIntFloat(*args))

    def empty(self) -> "bool":
        return _CSTL.MapIntMapIntFloat_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< int,float > >::size_type":
        return _CSTL.MapIntMapIntFloat_size(self)

    def swap(self, v: "MapIntMapIntFloat") -> "void":
        return _CSTL.MapIntMapIntFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< int,float > >::iterator":
        return _CSTL.MapIntMapIntFloat_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< int,float > >::iterator":
        return _CSTL.MapIntMapIntFloat_end(self)

    def clear(self) -> "void":
        return _CSTL.MapIntMapIntFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< int,float > >::allocator_type":
        return _CSTL.MapIntMapIntFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< int,float > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,float > >::size_type":
        return _CSTL.MapIntMapIntFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapIntMapIntFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< int,float > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,float > >::iterator":
        return _CSTL.MapIntMapIntFloat_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapIntMapIntFloat

# Register MapIntMapIntFloat in _CSTL:
_CSTL.MapIntMapIntFloat_swigregister(MapIntMapIntFloat)

class MapIntMapIntDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntMapIntDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapIntMapIntDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapIntMapIntDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< int,double > >::size_type":
        return _CSTL.MapIntMapIntDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< int,double > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,double > >::mapped_type const &":
        return _CSTL.MapIntMapIntDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< int,double > >::key_type const &") -> "void":
        return _CSTL.MapIntMapIntDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< int,double > >::key_type const &") -> "bool":
        return _CSTL.MapIntMapIntDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapIntMapIntDouble_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapIntMapIntDouble_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapIntMapIntDouble_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< int,double > >::key_type const &") -> "bool":
        return _CSTL.MapIntMapIntDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntMapIntDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntMapIntDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapIntMapIntDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapIntMapIntDouble_asdict(self)

    def __init__(self, *args):
        _CSTL.MapIntMapIntDouble_swiginit(self, _CSTL.new_MapIntMapIntDouble(*args))

    def empty(self) -> "bool":
        return _CSTL.MapIntMapIntDouble_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< int,double > >::size_type":
        return _CSTL.MapIntMapIntDouble_size(self)

    def swap(self, v: "MapIntMapIntDouble") -> "void":
        return _CSTL.MapIntMapIntDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< int,double > >::iterator":
        return _CSTL.MapIntMapIntDouble_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< int,double > >::iterator":
        return _CSTL.MapIntMapIntDouble_end(self)

    def clear(self) -> "void":
        return _CSTL.MapIntMapIntDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< int,double > >::allocator_type":
        return _CSTL.MapIntMapIntDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< int,double > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,double > >::size_type":
        return _CSTL.MapIntMapIntDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapIntMapIntDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< int,double > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,double > >::iterator":
        return _CSTL.MapIntMapIntDouble_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapIntMapIntDouble

# Register MapIntMapIntDouble in _CSTL:
_CSTL.MapIntMapIntDouble_swigregister(MapIntMapIntDouble)

class MapIntMapIntBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntMapIntBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapIntMapIntBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapIntMapIntBool___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< int,bool > >::size_type":
        return _CSTL.MapIntMapIntBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< int,bool > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,bool > >::mapped_type const &":
        return _CSTL.MapIntMapIntBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< int,bool > >::key_type const &") -> "void":
        return _CSTL.MapIntMapIntBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< int,bool > >::key_type const &") -> "bool":
        return _CSTL.MapIntMapIntBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapIntMapIntBool_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapIntMapIntBool_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapIntMapIntBool_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< int,bool > >::key_type const &") -> "bool":
        return _CSTL.MapIntMapIntBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntMapIntBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntMapIntBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapIntMapIntBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapIntMapIntBool_asdict(self)

    def __init__(self, *args):
        _CSTL.MapIntMapIntBool_swiginit(self, _CSTL.new_MapIntMapIntBool(*args))

    def empty(self) -> "bool":
        return _CSTL.MapIntMapIntBool_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< int,bool > >::size_type":
        return _CSTL.MapIntMapIntBool_size(self)

    def swap(self, v: "MapIntMapIntBool") -> "void":
        return _CSTL.MapIntMapIntBool_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< int,bool > >::iterator":
        return _CSTL.MapIntMapIntBool_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< int,bool > >::iterator":
        return _CSTL.MapIntMapIntBool_end(self)

    def clear(self) -> "void":
        return _CSTL.MapIntMapIntBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< int,bool > >::allocator_type":
        return _CSTL.MapIntMapIntBool_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< int,bool > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,bool > >::size_type":
        return _CSTL.MapIntMapIntBool_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapIntMapIntBool_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< int,bool > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,bool > >::iterator":
        return _CSTL.MapIntMapIntBool_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapIntMapIntBool

# Register MapIntMapIntBool in _CSTL:
_CSTL.MapIntMapIntBool_swigregister(MapIntMapIntBool)

class MapIntMapIntLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntMapIntLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapIntMapIntLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapIntMapIntLong___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< int,std::int64_t > >::size_type":
        return _CSTL.MapIntMapIntLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< int,std::int64_t > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::int64_t > >::mapped_type const &":
        return _CSTL.MapIntMapIntLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< int,std::int64_t > >::key_type const &") -> "void":
        return _CSTL.MapIntMapIntLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< int,std::int64_t > >::key_type const &") -> "bool":
        return _CSTL.MapIntMapIntLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapIntMapIntLong_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapIntMapIntLong_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapIntMapIntLong_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< int,std::int64_t > >::key_type const &") -> "bool":
        return _CSTL.MapIntMapIntLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntMapIntLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntMapIntLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapIntMapIntLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapIntMapIntLong_asdict(self)

    def __init__(self, *args):
        _CSTL.MapIntMapIntLong_swiginit(self, _CSTL.new_MapIntMapIntLong(*args))

    def empty(self) -> "bool":
        return _CSTL.MapIntMapIntLong_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< int,std::int64_t > >::size_type":
        return _CSTL.MapIntMapIntLong_size(self)

    def swap(self, v: "MapIntMapIntLong") -> "void":
        return _CSTL.MapIntMapIntLong_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< int,std::int64_t > >::iterator":
        return _CSTL.MapIntMapIntLong_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< int,std::int64_t > >::iterator":
        return _CSTL.MapIntMapIntLong_end(self)

    def clear(self) -> "void":
        return _CSTL.MapIntMapIntLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< int,std::int64_t > >::allocator_type":
        return _CSTL.MapIntMapIntLong_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< int,std::int64_t > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::int64_t > >::size_type":
        return _CSTL.MapIntMapIntLong_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapIntMapIntLong_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< int,std::int64_t > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::int64_t > >::iterator":
        return _CSTL.MapIntMapIntLong_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapIntMapIntLong

# Register MapIntMapIntLong in _CSTL:
_CSTL.MapIntMapIntLong_swigregister(MapIntMapIntLong)

class MapIntMapStrInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntMapStrInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapIntMapStrInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapIntMapStrInt___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::string,int > >::size_type":
        return _CSTL.MapIntMapStrInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,int > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,int > >::mapped_type const &":
        return _CSTL.MapIntMapStrInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,int > >::key_type const &") -> "void":
        return _CSTL.MapIntMapStrInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::string,int > >::key_type const &") -> "bool":
        return _CSTL.MapIntMapStrInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapIntMapStrInt_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapIntMapStrInt_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapIntMapStrInt_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::string,int > >::key_type const &") -> "bool":
        return _CSTL.MapIntMapStrInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntMapStrInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntMapStrInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapIntMapStrInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapIntMapStrInt_asdict(self)

    def __init__(self, *args):
        _CSTL.MapIntMapStrInt_swiginit(self, _CSTL.new_MapIntMapStrInt(*args))

    def empty(self) -> "bool":
        return _CSTL.MapIntMapStrInt_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::string,int > >::size_type":
        return _CSTL.MapIntMapStrInt_size(self)

    def swap(self, v: "MapIntMapStrInt") -> "void":
        return _CSTL.MapIntMapStrInt_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::string,int > >::iterator":
        return _CSTL.MapIntMapStrInt_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::string,int > >::iterator":
        return _CSTL.MapIntMapStrInt_end(self)

    def clear(self) -> "void":
        return _CSTL.MapIntMapStrInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::string,int > >::allocator_type":
        return _CSTL.MapIntMapStrInt_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::string,int > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,int > >::size_type":
        return _CSTL.MapIntMapStrInt_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapIntMapStrInt_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::string,int > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,int > >::iterator":
        return _CSTL.MapIntMapStrInt_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapIntMapStrInt

# Register MapIntMapStrInt in _CSTL:
_CSTL.MapIntMapStrInt_swigregister(MapIntMapStrInt)

class MapIntMapStrStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntMapStrStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapIntMapStrStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapIntMapStrStr___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::string > >::size_type":
        return _CSTL.MapIntMapStrStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::string > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::string > >::mapped_type const &":
        return _CSTL.MapIntMapStrStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::string > >::key_type const &") -> "void":
        return _CSTL.MapIntMapStrStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::string > >::key_type const &") -> "bool":
        return _CSTL.MapIntMapStrStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapIntMapStrStr_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapIntMapStrStr_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapIntMapStrStr_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::string > >::key_type const &") -> "bool":
        return _CSTL.MapIntMapStrStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntMapStrStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntMapStrStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapIntMapStrStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapIntMapStrStr_asdict(self)

    def __init__(self, *args):
        _CSTL.MapIntMapStrStr_swiginit(self, _CSTL.new_MapIntMapStrStr(*args))

    def empty(self) -> "bool":
        return _CSTL.MapIntMapStrStr_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::string > >::size_type":
        return _CSTL.MapIntMapStrStr_size(self)

    def swap(self, v: "MapIntMapStrStr") -> "void":
        return _CSTL.MapIntMapStrStr_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::string > >::iterator":
        return _CSTL.MapIntMapStrStr_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::string > >::iterator":
        return _CSTL.MapIntMapStrStr_end(self)

    def clear(self) -> "void":
        return _CSTL.MapIntMapStrStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::string > >::allocator_type":
        return _CSTL.MapIntMapStrStr_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::string,std::string > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::string > >::size_type":
        return _CSTL.MapIntMapStrStr_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapIntMapStrStr_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::string,std::string > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::string > >::iterator":
        return _CSTL.MapIntMapStrStr_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapIntMapStrStr

# Register MapIntMapStrStr in _CSTL:
_CSTL.MapIntMapStrStr_swigregister(MapIntMapStrStr)

class MapIntMapStrFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntMapStrFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapIntMapStrFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapIntMapStrFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::string,float > >::size_type":
        return _CSTL.MapIntMapStrFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,float > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,float > >::mapped_type const &":
        return _CSTL.MapIntMapStrFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,float > >::key_type const &") -> "void":
        return _CSTL.MapIntMapStrFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::string,float > >::key_type const &") -> "bool":
        return _CSTL.MapIntMapStrFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapIntMapStrFloat_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapIntMapStrFloat_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapIntMapStrFloat_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::string,float > >::key_type const &") -> "bool":
        return _CSTL.MapIntMapStrFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntMapStrFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntMapStrFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapIntMapStrFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapIntMapStrFloat_asdict(self)

    def __init__(self, *args):
        _CSTL.MapIntMapStrFloat_swiginit(self, _CSTL.new_MapIntMapStrFloat(*args))

    def empty(self) -> "bool":
        return _CSTL.MapIntMapStrFloat_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::string,float > >::size_type":
        return _CSTL.MapIntMapStrFloat_size(self)

    def swap(self, v: "MapIntMapStrFloat") -> "void":
        return _CSTL.MapIntMapStrFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::string,float > >::iterator":
        return _CSTL.MapIntMapStrFloat_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::string,float > >::iterator":
        return _CSTL.MapIntMapStrFloat_end(self)

    def clear(self) -> "void":
        return _CSTL.MapIntMapStrFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::string,float > >::allocator_type":
        return _CSTL.MapIntMapStrFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::string,float > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,float > >::size_type":
        return _CSTL.MapIntMapStrFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapIntMapStrFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::string,float > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,float > >::iterator":
        return _CSTL.MapIntMapStrFloat_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapIntMapStrFloat

# Register MapIntMapStrFloat in _CSTL:
_CSTL.MapIntMapStrFloat_swigregister(MapIntMapStrFloat)

class MapIntMapStrDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntMapStrDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapIntMapStrDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapIntMapStrDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::string,double > >::size_type":
        return _CSTL.MapIntMapStrDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,double > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,double > >::mapped_type const &":
        return _CSTL.MapIntMapStrDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,double > >::key_type const &") -> "void":
        return _CSTL.MapIntMapStrDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::string,double > >::key_type const &") -> "bool":
        return _CSTL.MapIntMapStrDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapIntMapStrDouble_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapIntMapStrDouble_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapIntMapStrDouble_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::string,double > >::key_type const &") -> "bool":
        return _CSTL.MapIntMapStrDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntMapStrDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntMapStrDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapIntMapStrDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapIntMapStrDouble_asdict(self)

    def __init__(self, *args):
        _CSTL.MapIntMapStrDouble_swiginit(self, _CSTL.new_MapIntMapStrDouble(*args))

    def empty(self) -> "bool":
        return _CSTL.MapIntMapStrDouble_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::string,double > >::size_type":
        return _CSTL.MapIntMapStrDouble_size(self)

    def swap(self, v: "MapIntMapStrDouble") -> "void":
        return _CSTL.MapIntMapStrDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::string,double > >::iterator":
        return _CSTL.MapIntMapStrDouble_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::string,double > >::iterator":
        return _CSTL.MapIntMapStrDouble_end(self)

    def clear(self) -> "void":
        return _CSTL.MapIntMapStrDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::string,double > >::allocator_type":
        return _CSTL.MapIntMapStrDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::string,double > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,double > >::size_type":
        return _CSTL.MapIntMapStrDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapIntMapStrDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::string,double > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,double > >::iterator":
        return _CSTL.MapIntMapStrDouble_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapIntMapStrDouble

# Register MapIntMapStrDouble in _CSTL:
_CSTL.MapIntMapStrDouble_swigregister(MapIntMapStrDouble)

class MapIntMapStrBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntMapStrBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapIntMapStrBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapIntMapStrBool___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::string,bool > >::size_type":
        return _CSTL.MapIntMapStrBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,bool > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,bool > >::mapped_type const &":
        return _CSTL.MapIntMapStrBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,bool > >::key_type const &") -> "void":
        return _CSTL.MapIntMapStrBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::string,bool > >::key_type const &") -> "bool":
        return _CSTL.MapIntMapStrBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapIntMapStrBool_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapIntMapStrBool_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapIntMapStrBool_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::string,bool > >::key_type const &") -> "bool":
        return _CSTL.MapIntMapStrBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntMapStrBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntMapStrBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapIntMapStrBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapIntMapStrBool_asdict(self)

    def __init__(self, *args):
        _CSTL.MapIntMapStrBool_swiginit(self, _CSTL.new_MapIntMapStrBool(*args))

    def empty(self) -> "bool":
        return _CSTL.MapIntMapStrBool_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::string,bool > >::size_type":
        return _CSTL.MapIntMapStrBool_size(self)

    def swap(self, v: "MapIntMapStrBool") -> "void":
        return _CSTL.MapIntMapStrBool_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::string,bool > >::iterator":
        return _CSTL.MapIntMapStrBool_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::string,bool > >::iterator":
        return _CSTL.MapIntMapStrBool_end(self)

    def clear(self) -> "void":
        return _CSTL.MapIntMapStrBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::string,bool > >::allocator_type":
        return _CSTL.MapIntMapStrBool_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::string,bool > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,bool > >::size_type":
        return _CSTL.MapIntMapStrBool_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapIntMapStrBool_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::string,bool > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,bool > >::iterator":
        return _CSTL.MapIntMapStrBool_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapIntMapStrBool

# Register MapIntMapStrBool in _CSTL:
_CSTL.MapIntMapStrBool_swigregister(MapIntMapStrBool)

class MapIntMapStrLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntMapStrLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapIntMapStrLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapIntMapStrLong___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::int64_t > >::size_type":
        return _CSTL.MapIntMapStrLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::int64_t > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::int64_t > >::mapped_type const &":
        return _CSTL.MapIntMapStrLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::int64_t > >::key_type const &") -> "void":
        return _CSTL.MapIntMapStrLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::int64_t > >::key_type const &") -> "bool":
        return _CSTL.MapIntMapStrLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapIntMapStrLong_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapIntMapStrLong_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapIntMapStrLong_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::int64_t > >::key_type const &") -> "bool":
        return _CSTL.MapIntMapStrLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntMapStrLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntMapStrLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapIntMapStrLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapIntMapStrLong_asdict(self)

    def __init__(self, *args):
        _CSTL.MapIntMapStrLong_swiginit(self, _CSTL.new_MapIntMapStrLong(*args))

    def empty(self) -> "bool":
        return _CSTL.MapIntMapStrLong_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::int64_t > >::size_type":
        return _CSTL.MapIntMapStrLong_size(self)

    def swap(self, v: "MapIntMapStrLong") -> "void":
        return _CSTL.MapIntMapStrLong_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::int64_t > >::iterator":
        return _CSTL.MapIntMapStrLong_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::int64_t > >::iterator":
        return _CSTL.MapIntMapStrLong_end(self)

    def clear(self) -> "void":
        return _CSTL.MapIntMapStrLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::int64_t > >::allocator_type":
        return _CSTL.MapIntMapStrLong_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::string,std::int64_t > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::int64_t > >::size_type":
        return _CSTL.MapIntMapStrLong_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapIntMapStrLong_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::string,std::int64_t > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::int64_t > >::iterator":
        return _CSTL.MapIntMapStrLong_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapIntMapStrLong

# Register MapIntMapStrLong in _CSTL:
_CSTL.MapIntMapStrLong_swigregister(MapIntMapStrLong)

class MapIntMapLongInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntMapLongInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapIntMapLongInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapIntMapLongInt___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,int > >::size_type":
        return _CSTL.MapIntMapLongInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,int > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,int > >::mapped_type const &":
        return _CSTL.MapIntMapLongInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,int > >::key_type const &") -> "void":
        return _CSTL.MapIntMapLongInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,int > >::key_type const &") -> "bool":
        return _CSTL.MapIntMapLongInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapIntMapLongInt_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapIntMapLongInt_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapIntMapLongInt_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,int > >::key_type const &") -> "bool":
        return _CSTL.MapIntMapLongInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntMapLongInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntMapLongInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapIntMapLongInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapIntMapLongInt_asdict(self)

    def __init__(self, *args):
        _CSTL.MapIntMapLongInt_swiginit(self, _CSTL.new_MapIntMapLongInt(*args))

    def empty(self) -> "bool":
        return _CSTL.MapIntMapLongInt_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,int > >::size_type":
        return _CSTL.MapIntMapLongInt_size(self)

    def swap(self, v: "MapIntMapLongInt") -> "void":
        return _CSTL.MapIntMapLongInt_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,int > >::iterator":
        return _CSTL.MapIntMapLongInt_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,int > >::iterator":
        return _CSTL.MapIntMapLongInt_end(self)

    def clear(self) -> "void":
        return _CSTL.MapIntMapLongInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,int > >::allocator_type":
        return _CSTL.MapIntMapLongInt_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,int > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,int > >::size_type":
        return _CSTL.MapIntMapLongInt_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapIntMapLongInt_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,int > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,int > >::iterator":
        return _CSTL.MapIntMapLongInt_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapIntMapLongInt

# Register MapIntMapLongInt in _CSTL:
_CSTL.MapIntMapLongInt_swigregister(MapIntMapLongInt)

class MapIntMapLongStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntMapLongStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapIntMapLongStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapIntMapLongStr___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::string > >::size_type":
        return _CSTL.MapIntMapLongStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::string > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::string > >::mapped_type const &":
        return _CSTL.MapIntMapLongStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::string > >::key_type const &") -> "void":
        return _CSTL.MapIntMapLongStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::string > >::key_type const &") -> "bool":
        return _CSTL.MapIntMapLongStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapIntMapLongStr_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapIntMapLongStr_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapIntMapLongStr_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::string > >::key_type const &") -> "bool":
        return _CSTL.MapIntMapLongStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntMapLongStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntMapLongStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapIntMapLongStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapIntMapLongStr_asdict(self)

    def __init__(self, *args):
        _CSTL.MapIntMapLongStr_swiginit(self, _CSTL.new_MapIntMapLongStr(*args))

    def empty(self) -> "bool":
        return _CSTL.MapIntMapLongStr_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::string > >::size_type":
        return _CSTL.MapIntMapLongStr_size(self)

    def swap(self, v: "MapIntMapLongStr") -> "void":
        return _CSTL.MapIntMapLongStr_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::string > >::iterator":
        return _CSTL.MapIntMapLongStr_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::string > >::iterator":
        return _CSTL.MapIntMapLongStr_end(self)

    def clear(self) -> "void":
        return _CSTL.MapIntMapLongStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::string > >::allocator_type":
        return _CSTL.MapIntMapLongStr_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,std::string > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::string > >::size_type":
        return _CSTL.MapIntMapLongStr_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapIntMapLongStr_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,std::string > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::string > >::iterator":
        return _CSTL.MapIntMapLongStr_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapIntMapLongStr

# Register MapIntMapLongStr in _CSTL:
_CSTL.MapIntMapLongStr_swigregister(MapIntMapLongStr)

class MapIntMapLongFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntMapLongFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapIntMapLongFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapIntMapLongFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,float > >::size_type":
        return _CSTL.MapIntMapLongFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,float > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,float > >::mapped_type const &":
        return _CSTL.MapIntMapLongFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,float > >::key_type const &") -> "void":
        return _CSTL.MapIntMapLongFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,float > >::key_type const &") -> "bool":
        return _CSTL.MapIntMapLongFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapIntMapLongFloat_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapIntMapLongFloat_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapIntMapLongFloat_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,float > >::key_type const &") -> "bool":
        return _CSTL.MapIntMapLongFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntMapLongFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntMapLongFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapIntMapLongFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapIntMapLongFloat_asdict(self)

    def __init__(self, *args):
        _CSTL.MapIntMapLongFloat_swiginit(self, _CSTL.new_MapIntMapLongFloat(*args))

    def empty(self) -> "bool":
        return _CSTL.MapIntMapLongFloat_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,float > >::size_type":
        return _CSTL.MapIntMapLongFloat_size(self)

    def swap(self, v: "MapIntMapLongFloat") -> "void":
        return _CSTL.MapIntMapLongFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,float > >::iterator":
        return _CSTL.MapIntMapLongFloat_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,float > >::iterator":
        return _CSTL.MapIntMapLongFloat_end(self)

    def clear(self) -> "void":
        return _CSTL.MapIntMapLongFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,float > >::allocator_type":
        return _CSTL.MapIntMapLongFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,float > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,float > >::size_type":
        return _CSTL.MapIntMapLongFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapIntMapLongFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,float > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,float > >::iterator":
        return _CSTL.MapIntMapLongFloat_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapIntMapLongFloat

# Register MapIntMapLongFloat in _CSTL:
_CSTL.MapIntMapLongFloat_swigregister(MapIntMapLongFloat)

class MapIntMapLongDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntMapLongDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapIntMapLongDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapIntMapLongDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,double > >::size_type":
        return _CSTL.MapIntMapLongDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,double > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,double > >::mapped_type const &":
        return _CSTL.MapIntMapLongDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,double > >::key_type const &") -> "void":
        return _CSTL.MapIntMapLongDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,double > >::key_type const &") -> "bool":
        return _CSTL.MapIntMapLongDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapIntMapLongDouble_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapIntMapLongDouble_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapIntMapLongDouble_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,double > >::key_type const &") -> "bool":
        return _CSTL.MapIntMapLongDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntMapLongDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntMapLongDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapIntMapLongDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapIntMapLongDouble_asdict(self)

    def __init__(self, *args):
        _CSTL.MapIntMapLongDouble_swiginit(self, _CSTL.new_MapIntMapLongDouble(*args))

    def empty(self) -> "bool":
        return _CSTL.MapIntMapLongDouble_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,double > >::size_type":
        return _CSTL.MapIntMapLongDouble_size(self)

    def swap(self, v: "MapIntMapLongDouble") -> "void":
        return _CSTL.MapIntMapLongDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,double > >::iterator":
        return _CSTL.MapIntMapLongDouble_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,double > >::iterator":
        return _CSTL.MapIntMapLongDouble_end(self)

    def clear(self) -> "void":
        return _CSTL.MapIntMapLongDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,double > >::allocator_type":
        return _CSTL.MapIntMapLongDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,double > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,double > >::size_type":
        return _CSTL.MapIntMapLongDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapIntMapLongDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,double > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,double > >::iterator":
        return _CSTL.MapIntMapLongDouble_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapIntMapLongDouble

# Register MapIntMapLongDouble in _CSTL:
_CSTL.MapIntMapLongDouble_swigregister(MapIntMapLongDouble)

class MapIntMapLongBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntMapLongBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapIntMapLongBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapIntMapLongBool___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,bool > >::size_type":
        return _CSTL.MapIntMapLongBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,bool > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,bool > >::mapped_type const &":
        return _CSTL.MapIntMapLongBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,bool > >::key_type const &") -> "void":
        return _CSTL.MapIntMapLongBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,bool > >::key_type const &") -> "bool":
        return _CSTL.MapIntMapLongBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapIntMapLongBool_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapIntMapLongBool_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapIntMapLongBool_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,bool > >::key_type const &") -> "bool":
        return _CSTL.MapIntMapLongBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntMapLongBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntMapLongBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapIntMapLongBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapIntMapLongBool_asdict(self)

    def __init__(self, *args):
        _CSTL.MapIntMapLongBool_swiginit(self, _CSTL.new_MapIntMapLongBool(*args))

    def empty(self) -> "bool":
        return _CSTL.MapIntMapLongBool_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,bool > >::size_type":
        return _CSTL.MapIntMapLongBool_size(self)

    def swap(self, v: "MapIntMapLongBool") -> "void":
        return _CSTL.MapIntMapLongBool_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,bool > >::iterator":
        return _CSTL.MapIntMapLongBool_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,bool > >::iterator":
        return _CSTL.MapIntMapLongBool_end(self)

    def clear(self) -> "void":
        return _CSTL.MapIntMapLongBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,bool > >::allocator_type":
        return _CSTL.MapIntMapLongBool_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,bool > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,bool > >::size_type":
        return _CSTL.MapIntMapLongBool_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapIntMapLongBool_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,bool > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,bool > >::iterator":
        return _CSTL.MapIntMapLongBool_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapIntMapLongBool

# Register MapIntMapLongBool in _CSTL:
_CSTL.MapIntMapLongBool_swigregister(MapIntMapLongBool)

class MapIntMapLongLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntMapLongLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapIntMapLongLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapIntMapLongLong___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > >::size_type":
        return _CSTL.MapIntMapLongLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > >::mapped_type const &":
        return _CSTL.MapIntMapLongLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > >::key_type const &") -> "void":
        return _CSTL.MapIntMapLongLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > >::key_type const &") -> "bool":
        return _CSTL.MapIntMapLongLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapIntMapLongLong_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapIntMapLongLong_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapIntMapLongLong_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > >::key_type const &") -> "bool":
        return _CSTL.MapIntMapLongLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntMapLongLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapIntMapLongLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapIntMapLongLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapIntMapLongLong_asdict(self)

    def __init__(self, *args):
        _CSTL.MapIntMapLongLong_swiginit(self, _CSTL.new_MapIntMapLongLong(*args))

    def empty(self) -> "bool":
        return _CSTL.MapIntMapLongLong_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > >::size_type":
        return _CSTL.MapIntMapLongLong_size(self)

    def swap(self, v: "MapIntMapLongLong") -> "void":
        return _CSTL.MapIntMapLongLong_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > >::iterator":
        return _CSTL.MapIntMapLongLong_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > >::iterator":
        return _CSTL.MapIntMapLongLong_end(self)

    def clear(self) -> "void":
        return _CSTL.MapIntMapLongLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > >::allocator_type":
        return _CSTL.MapIntMapLongLong_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > >::size_type":
        return _CSTL.MapIntMapLongLong_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapIntMapLongLong_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > >::iterator":
        return _CSTL.MapIntMapLongLong_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapIntMapLongLong

# Register MapIntMapLongLong in _CSTL:
_CSTL.MapIntMapLongLong_swigregister(MapIntMapLongLong)

class MapStrVecInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrVecInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapStrVecInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapStrVecInt___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::vector< int > >::size_type":
        return _CSTL.MapStrVecInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::vector< int > >::key_type const &") -> "std::unordered_map< std::string,std::vector< int > >::mapped_type const &":
        return _CSTL.MapStrVecInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::vector< int > >::key_type const &") -> "void":
        return _CSTL.MapStrVecInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::vector< int > >::key_type const &") -> "bool":
        return _CSTL.MapStrVecInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapStrVecInt_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapStrVecInt_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapStrVecInt_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::vector< int > >::key_type const &") -> "bool":
        return _CSTL.MapStrVecInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrVecInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrVecInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapStrVecInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapStrVecInt_asdict(self)

    def __init__(self, *args):
        _CSTL.MapStrVecInt_swiginit(self, _CSTL.new_MapStrVecInt(*args))

    def empty(self) -> "bool":
        return _CSTL.MapStrVecInt_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::vector< int > >::size_type":
        return _CSTL.MapStrVecInt_size(self)

    def swap(self, v: "MapStrVecInt") -> "void":
        return _CSTL.MapStrVecInt_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::vector< int > >::iterator":
        return _CSTL.MapStrVecInt_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::vector< int > >::iterator":
        return _CSTL.MapStrVecInt_end(self)

    def clear(self) -> "void":
        return _CSTL.MapStrVecInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::vector< int > >::allocator_type":
        return _CSTL.MapStrVecInt_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::vector< int > >::key_type const &") -> "std::unordered_map< std::string,std::vector< int > >::size_type":
        return _CSTL.MapStrVecInt_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapStrVecInt_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::vector< int > >::key_type const &") -> "std::unordered_map< std::string,std::vector< int > >::iterator":
        return _CSTL.MapStrVecInt_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapStrVecInt

# Register MapStrVecInt in _CSTL:
_CSTL.MapStrVecInt_swigregister(MapStrVecInt)

class MapStrVecStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrVecStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapStrVecStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapStrVecStr___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::vector< std::string > >::size_type":
        return _CSTL.MapStrVecStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::vector< std::string > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::string > >::mapped_type const &":
        return _CSTL.MapStrVecStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::vector< std::string > >::key_type const &") -> "void":
        return _CSTL.MapStrVecStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::vector< std::string > >::key_type const &") -> "bool":
        return _CSTL.MapStrVecStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapStrVecStr_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapStrVecStr_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapStrVecStr_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::vector< std::string > >::key_type const &") -> "bool":
        return _CSTL.MapStrVecStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrVecStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrVecStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapStrVecStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapStrVecStr_asdict(self)

    def __init__(self, *args):
        _CSTL.MapStrVecStr_swiginit(self, _CSTL.new_MapStrVecStr(*args))

    def empty(self) -> "bool":
        return _CSTL.MapStrVecStr_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::vector< std::string > >::size_type":
        return _CSTL.MapStrVecStr_size(self)

    def swap(self, v: "MapStrVecStr") -> "void":
        return _CSTL.MapStrVecStr_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::vector< std::string > >::iterator":
        return _CSTL.MapStrVecStr_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::vector< std::string > >::iterator":
        return _CSTL.MapStrVecStr_end(self)

    def clear(self) -> "void":
        return _CSTL.MapStrVecStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::vector< std::string > >::allocator_type":
        return _CSTL.MapStrVecStr_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::vector< std::string > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::string > >::size_type":
        return _CSTL.MapStrVecStr_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapStrVecStr_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::vector< std::string > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::string > >::iterator":
        return _CSTL.MapStrVecStr_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapStrVecStr

# Register MapStrVecStr in _CSTL:
_CSTL.MapStrVecStr_swigregister(MapStrVecStr)

class MapStrVecFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrVecFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapStrVecFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapStrVecFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::vector< float > >::size_type":
        return _CSTL.MapStrVecFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::vector< float > >::key_type const &") -> "std::unordered_map< std::string,std::vector< float > >::mapped_type const &":
        return _CSTL.MapStrVecFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::vector< float > >::key_type const &") -> "void":
        return _CSTL.MapStrVecFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::vector< float > >::key_type const &") -> "bool":
        return _CSTL.MapStrVecFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapStrVecFloat_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapStrVecFloat_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapStrVecFloat_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::vector< float > >::key_type const &") -> "bool":
        return _CSTL.MapStrVecFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrVecFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrVecFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapStrVecFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapStrVecFloat_asdict(self)

    def __init__(self, *args):
        _CSTL.MapStrVecFloat_swiginit(self, _CSTL.new_MapStrVecFloat(*args))

    def empty(self) -> "bool":
        return _CSTL.MapStrVecFloat_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::vector< float > >::size_type":
        return _CSTL.MapStrVecFloat_size(self)

    def swap(self, v: "MapStrVecFloat") -> "void":
        return _CSTL.MapStrVecFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::vector< float > >::iterator":
        return _CSTL.MapStrVecFloat_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::vector< float > >::iterator":
        return _CSTL.MapStrVecFloat_end(self)

    def clear(self) -> "void":
        return _CSTL.MapStrVecFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::vector< float > >::allocator_type":
        return _CSTL.MapStrVecFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::vector< float > >::key_type const &") -> "std::unordered_map< std::string,std::vector< float > >::size_type":
        return _CSTL.MapStrVecFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapStrVecFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::vector< float > >::key_type const &") -> "std::unordered_map< std::string,std::vector< float > >::iterator":
        return _CSTL.MapStrVecFloat_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapStrVecFloat

# Register MapStrVecFloat in _CSTL:
_CSTL.MapStrVecFloat_swigregister(MapStrVecFloat)

class MapStrVecDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrVecDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapStrVecDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapStrVecDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::vector< double > >::size_type":
        return _CSTL.MapStrVecDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::vector< double > >::key_type const &") -> "std::unordered_map< std::string,std::vector< double > >::mapped_type const &":
        return _CSTL.MapStrVecDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::vector< double > >::key_type const &") -> "void":
        return _CSTL.MapStrVecDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::vector< double > >::key_type const &") -> "bool":
        return _CSTL.MapStrVecDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapStrVecDouble_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapStrVecDouble_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapStrVecDouble_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::vector< double > >::key_type const &") -> "bool":
        return _CSTL.MapStrVecDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrVecDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrVecDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapStrVecDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapStrVecDouble_asdict(self)

    def __init__(self, *args):
        _CSTL.MapStrVecDouble_swiginit(self, _CSTL.new_MapStrVecDouble(*args))

    def empty(self) -> "bool":
        return _CSTL.MapStrVecDouble_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::vector< double > >::size_type":
        return _CSTL.MapStrVecDouble_size(self)

    def swap(self, v: "MapStrVecDouble") -> "void":
        return _CSTL.MapStrVecDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::vector< double > >::iterator":
        return _CSTL.MapStrVecDouble_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::vector< double > >::iterator":
        return _CSTL.MapStrVecDouble_end(self)

    def clear(self) -> "void":
        return _CSTL.MapStrVecDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::vector< double > >::allocator_type":
        return _CSTL.MapStrVecDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::vector< double > >::key_type const &") -> "std::unordered_map< std::string,std::vector< double > >::size_type":
        return _CSTL.MapStrVecDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapStrVecDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::vector< double > >::key_type const &") -> "std::unordered_map< std::string,std::vector< double > >::iterator":
        return _CSTL.MapStrVecDouble_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapStrVecDouble

# Register MapStrVecDouble in _CSTL:
_CSTL.MapStrVecDouble_swigregister(MapStrVecDouble)

class MapStrVecBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrVecBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapStrVecBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapStrVecBool___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::vector< bool > >::size_type":
        return _CSTL.MapStrVecBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::vector< bool > >::key_type const &") -> "std::unordered_map< std::string,std::vector< bool > >::mapped_type const &":
        return _CSTL.MapStrVecBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::vector< bool > >::key_type const &") -> "void":
        return _CSTL.MapStrVecBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::vector< bool > >::key_type const &") -> "bool":
        return _CSTL.MapStrVecBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapStrVecBool_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapStrVecBool_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapStrVecBool_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::vector< bool > >::key_type const &") -> "bool":
        return _CSTL.MapStrVecBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrVecBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrVecBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapStrVecBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapStrVecBool_asdict(self)

    def __init__(self, *args):
        _CSTL.MapStrVecBool_swiginit(self, _CSTL.new_MapStrVecBool(*args))

    def empty(self) -> "bool":
        return _CSTL.MapStrVecBool_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::vector< bool > >::size_type":
        return _CSTL.MapStrVecBool_size(self)

    def swap(self, v: "MapStrVecBool") -> "void":
        return _CSTL.MapStrVecBool_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::vector< bool > >::iterator":
        return _CSTL.MapStrVecBool_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::vector< bool > >::iterator":
        return _CSTL.MapStrVecBool_end(self)

    def clear(self) -> "void":
        return _CSTL.MapStrVecBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::vector< bool > >::allocator_type":
        return _CSTL.MapStrVecBool_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::vector< bool > >::key_type const &") -> "std::unordered_map< std::string,std::vector< bool > >::size_type":
        return _CSTL.MapStrVecBool_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapStrVecBool_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::vector< bool > >::key_type const &") -> "std::unordered_map< std::string,std::vector< bool > >::iterator":
        return _CSTL.MapStrVecBool_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapStrVecBool

# Register MapStrVecBool in _CSTL:
_CSTL.MapStrVecBool_swigregister(MapStrVecBool)

class MapStrVecLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrVecLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapStrVecLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapStrVecLong___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::vector< std::int64_t > >::size_type":
        return _CSTL.MapStrVecLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::vector< std::int64_t > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::int64_t > >::mapped_type const &":
        return _CSTL.MapStrVecLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::vector< std::int64_t > >::key_type const &") -> "void":
        return _CSTL.MapStrVecLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::vector< std::int64_t > >::key_type const &") -> "bool":
        return _CSTL.MapStrVecLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapStrVecLong_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapStrVecLong_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapStrVecLong_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::vector< std::int64_t > >::key_type const &") -> "bool":
        return _CSTL.MapStrVecLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrVecLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrVecLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapStrVecLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapStrVecLong_asdict(self)

    def __init__(self, *args):
        _CSTL.MapStrVecLong_swiginit(self, _CSTL.new_MapStrVecLong(*args))

    def empty(self) -> "bool":
        return _CSTL.MapStrVecLong_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::vector< std::int64_t > >::size_type":
        return _CSTL.MapStrVecLong_size(self)

    def swap(self, v: "MapStrVecLong") -> "void":
        return _CSTL.MapStrVecLong_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::vector< std::int64_t > >::iterator":
        return _CSTL.MapStrVecLong_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::vector< std::int64_t > >::iterator":
        return _CSTL.MapStrVecLong_end(self)

    def clear(self) -> "void":
        return _CSTL.MapStrVecLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::vector< std::int64_t > >::allocator_type":
        return _CSTL.MapStrVecLong_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::vector< std::int64_t > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::int64_t > >::size_type":
        return _CSTL.MapStrVecLong_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapStrVecLong_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::vector< std::int64_t > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::int64_t > >::iterator":
        return _CSTL.MapStrVecLong_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapStrVecLong

# Register MapStrVecLong in _CSTL:
_CSTL.MapStrVecLong_swigregister(MapStrVecLong)

class MapStrSetInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrSetInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapStrSetInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapStrSetInt___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_set< int > >::size_type":
        return _CSTL.MapStrSetInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_set< int > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_set< int > >::mapped_type const &":
        return _CSTL.MapStrSetInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_set< int > >::key_type const &") -> "void":
        return _CSTL.MapStrSetInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_set< int > >::key_type const &") -> "bool":
        return _CSTL.MapStrSetInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapStrSetInt_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapStrSetInt_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapStrSetInt_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_set< int > >::key_type const &") -> "bool":
        return _CSTL.MapStrSetInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrSetInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrSetInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapStrSetInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapStrSetInt_asdict(self)

    def __init__(self, *args):
        _CSTL.MapStrSetInt_swiginit(self, _CSTL.new_MapStrSetInt(*args))

    def empty(self) -> "bool":
        return _CSTL.MapStrSetInt_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_set< int > >::size_type":
        return _CSTL.MapStrSetInt_size(self)

    def swap(self, v: "MapStrSetInt") -> "void":
        return _CSTL.MapStrSetInt_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_set< int > >::iterator":
        return _CSTL.MapStrSetInt_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_set< int > >::iterator":
        return _CSTL.MapStrSetInt_end(self)

    def clear(self) -> "void":
        return _CSTL.MapStrSetInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_set< int > >::allocator_type":
        return _CSTL.MapStrSetInt_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_set< int > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_set< int > >::size_type":
        return _CSTL.MapStrSetInt_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapStrSetInt_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_set< int > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_set< int > >::iterator":
        return _CSTL.MapStrSetInt_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapStrSetInt

# Register MapStrSetInt in _CSTL:
_CSTL.MapStrSetInt_swigregister(MapStrSetInt)

class MapStrSetStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrSetStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapStrSetStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapStrSetStr___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_set< std::string > >::size_type":
        return _CSTL.MapStrSetStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_set< std::string > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_set< std::string > >::mapped_type const &":
        return _CSTL.MapStrSetStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_set< std::string > >::key_type const &") -> "void":
        return _CSTL.MapStrSetStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_set< std::string > >::key_type const &") -> "bool":
        return _CSTL.MapStrSetStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapStrSetStr_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapStrSetStr_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapStrSetStr_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_set< std::string > >::key_type const &") -> "bool":
        return _CSTL.MapStrSetStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrSetStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrSetStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapStrSetStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapStrSetStr_asdict(self)

    def __init__(self, *args):
        _CSTL.MapStrSetStr_swiginit(self, _CSTL.new_MapStrSetStr(*args))

    def empty(self) -> "bool":
        return _CSTL.MapStrSetStr_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_set< std::string > >::size_type":
        return _CSTL.MapStrSetStr_size(self)

    def swap(self, v: "MapStrSetStr") -> "void":
        return _CSTL.MapStrSetStr_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_set< std::string > >::iterator":
        return _CSTL.MapStrSetStr_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_set< std::string > >::iterator":
        return _CSTL.MapStrSetStr_end(self)

    def clear(self) -> "void":
        return _CSTL.MapStrSetStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_set< std::string > >::allocator_type":
        return _CSTL.MapStrSetStr_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_set< std::string > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_set< std::string > >::size_type":
        return _CSTL.MapStrSetStr_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapStrSetStr_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_set< std::string > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_set< std::string > >::iterator":
        return _CSTL.MapStrSetStr_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapStrSetStr

# Register MapStrSetStr in _CSTL:
_CSTL.MapStrSetStr_swigregister(MapStrSetStr)

class MapStrSetLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrSetLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapStrSetLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapStrSetLong___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_set< std::int64_t > >::size_type":
        return _CSTL.MapStrSetLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_set< std::int64_t > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_set< std::int64_t > >::mapped_type const &":
        return _CSTL.MapStrSetLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_set< std::int64_t > >::key_type const &") -> "void":
        return _CSTL.MapStrSetLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_set< std::int64_t > >::key_type const &") -> "bool":
        return _CSTL.MapStrSetLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapStrSetLong_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapStrSetLong_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapStrSetLong_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_set< std::int64_t > >::key_type const &") -> "bool":
        return _CSTL.MapStrSetLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrSetLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrSetLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapStrSetLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapStrSetLong_asdict(self)

    def __init__(self, *args):
        _CSTL.MapStrSetLong_swiginit(self, _CSTL.new_MapStrSetLong(*args))

    def empty(self) -> "bool":
        return _CSTL.MapStrSetLong_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_set< std::int64_t > >::size_type":
        return _CSTL.MapStrSetLong_size(self)

    def swap(self, v: "MapStrSetLong") -> "void":
        return _CSTL.MapStrSetLong_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_set< std::int64_t > >::iterator":
        return _CSTL.MapStrSetLong_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_set< std::int64_t > >::iterator":
        return _CSTL.MapStrSetLong_end(self)

    def clear(self) -> "void":
        return _CSTL.MapStrSetLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_set< std::int64_t > >::allocator_type":
        return _CSTL.MapStrSetLong_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_set< std::int64_t > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_set< std::int64_t > >::size_type":
        return _CSTL.MapStrSetLong_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapStrSetLong_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_set< std::int64_t > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_set< std::int64_t > >::iterator":
        return _CSTL.MapStrSetLong_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapStrSetLong

# Register MapStrSetLong in _CSTL:
_CSTL.MapStrSetLong_swigregister(MapStrSetLong)

class MapStrMapIntInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrMapIntInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapStrMapIntInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapStrMapIntInt___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< int,int > >::size_type":
        return _CSTL.MapStrMapIntInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,int > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,int > >::mapped_type const &":
        return _CSTL.MapStrMapIntInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,int > >::key_type const &") -> "void":
        return _CSTL.MapStrMapIntInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< int,int > >::key_type const &") -> "bool":
        return _CSTL.MapStrMapIntInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapStrMapIntInt_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapStrMapIntInt_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapStrMapIntInt_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< int,int > >::key_type const &") -> "bool":
        return _CSTL.MapStrMapIntInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrMapIntInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrMapIntInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapStrMapIntInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapStrMapIntInt_asdict(self)

    def __init__(self, *args):
        _CSTL.MapStrMapIntInt_swiginit(self, _CSTL.new_MapStrMapIntInt(*args))

    def empty(self) -> "bool":
        return _CSTL.MapStrMapIntInt_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< int,int > >::size_type":
        return _CSTL.MapStrMapIntInt_size(self)

    def swap(self, v: "MapStrMapIntInt") -> "void":
        return _CSTL.MapStrMapIntInt_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< int,int > >::iterator":
        return _CSTL.MapStrMapIntInt_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< int,int > >::iterator":
        return _CSTL.MapStrMapIntInt_end(self)

    def clear(self) -> "void":
        return _CSTL.MapStrMapIntInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< int,int > >::allocator_type":
        return _CSTL.MapStrMapIntInt_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< int,int > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,int > >::size_type":
        return _CSTL.MapStrMapIntInt_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapStrMapIntInt_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< int,int > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,int > >::iterator":
        return _CSTL.MapStrMapIntInt_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapStrMapIntInt

# Register MapStrMapIntInt in _CSTL:
_CSTL.MapStrMapIntInt_swigregister(MapStrMapIntInt)

class MapStrMapIntStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrMapIntStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapStrMapIntStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapStrMapIntStr___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::string > >::size_type":
        return _CSTL.MapStrMapIntStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::string > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::string > >::mapped_type const &":
        return _CSTL.MapStrMapIntStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::string > >::key_type const &") -> "void":
        return _CSTL.MapStrMapIntStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::string > >::key_type const &") -> "bool":
        return _CSTL.MapStrMapIntStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapStrMapIntStr_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapStrMapIntStr_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapStrMapIntStr_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::string > >::key_type const &") -> "bool":
        return _CSTL.MapStrMapIntStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrMapIntStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrMapIntStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapStrMapIntStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapStrMapIntStr_asdict(self)

    def __init__(self, *args):
        _CSTL.MapStrMapIntStr_swiginit(self, _CSTL.new_MapStrMapIntStr(*args))

    def empty(self) -> "bool":
        return _CSTL.MapStrMapIntStr_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::string > >::size_type":
        return _CSTL.MapStrMapIntStr_size(self)

    def swap(self, v: "MapStrMapIntStr") -> "void":
        return _CSTL.MapStrMapIntStr_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::string > >::iterator":
        return _CSTL.MapStrMapIntStr_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::string > >::iterator":
        return _CSTL.MapStrMapIntStr_end(self)

    def clear(self) -> "void":
        return _CSTL.MapStrMapIntStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::string > >::allocator_type":
        return _CSTL.MapStrMapIntStr_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< int,std::string > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::string > >::size_type":
        return _CSTL.MapStrMapIntStr_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapStrMapIntStr_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< int,std::string > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::string > >::iterator":
        return _CSTL.MapStrMapIntStr_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapStrMapIntStr

# Register MapStrMapIntStr in _CSTL:
_CSTL.MapStrMapIntStr_swigregister(MapStrMapIntStr)

class MapStrMapIntFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrMapIntFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapStrMapIntFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapStrMapIntFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< int,float > >::size_type":
        return _CSTL.MapStrMapIntFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,float > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,float > >::mapped_type const &":
        return _CSTL.MapStrMapIntFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,float > >::key_type const &") -> "void":
        return _CSTL.MapStrMapIntFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< int,float > >::key_type const &") -> "bool":
        return _CSTL.MapStrMapIntFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapStrMapIntFloat_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapStrMapIntFloat_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapStrMapIntFloat_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< int,float > >::key_type const &") -> "bool":
        return _CSTL.MapStrMapIntFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrMapIntFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrMapIntFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapStrMapIntFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapStrMapIntFloat_asdict(self)

    def __init__(self, *args):
        _CSTL.MapStrMapIntFloat_swiginit(self, _CSTL.new_MapStrMapIntFloat(*args))

    def empty(self) -> "bool":
        return _CSTL.MapStrMapIntFloat_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< int,float > >::size_type":
        return _CSTL.MapStrMapIntFloat_size(self)

    def swap(self, v: "MapStrMapIntFloat") -> "void":
        return _CSTL.MapStrMapIntFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< int,float > >::iterator":
        return _CSTL.MapStrMapIntFloat_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< int,float > >::iterator":
        return _CSTL.MapStrMapIntFloat_end(self)

    def clear(self) -> "void":
        return _CSTL.MapStrMapIntFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< int,float > >::allocator_type":
        return _CSTL.MapStrMapIntFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< int,float > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,float > >::size_type":
        return _CSTL.MapStrMapIntFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapStrMapIntFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< int,float > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,float > >::iterator":
        return _CSTL.MapStrMapIntFloat_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapStrMapIntFloat

# Register MapStrMapIntFloat in _CSTL:
_CSTL.MapStrMapIntFloat_swigregister(MapStrMapIntFloat)

class MapStrMapIntDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrMapIntDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapStrMapIntDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapStrMapIntDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< int,double > >::size_type":
        return _CSTL.MapStrMapIntDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,double > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,double > >::mapped_type const &":
        return _CSTL.MapStrMapIntDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,double > >::key_type const &") -> "void":
        return _CSTL.MapStrMapIntDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< int,double > >::key_type const &") -> "bool":
        return _CSTL.MapStrMapIntDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapStrMapIntDouble_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapStrMapIntDouble_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapStrMapIntDouble_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< int,double > >::key_type const &") -> "bool":
        return _CSTL.MapStrMapIntDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrMapIntDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrMapIntDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapStrMapIntDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapStrMapIntDouble_asdict(self)

    def __init__(self, *args):
        _CSTL.MapStrMapIntDouble_swiginit(self, _CSTL.new_MapStrMapIntDouble(*args))

    def empty(self) -> "bool":
        return _CSTL.MapStrMapIntDouble_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< int,double > >::size_type":
        return _CSTL.MapStrMapIntDouble_size(self)

    def swap(self, v: "MapStrMapIntDouble") -> "void":
        return _CSTL.MapStrMapIntDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< int,double > >::iterator":
        return _CSTL.MapStrMapIntDouble_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< int,double > >::iterator":
        return _CSTL.MapStrMapIntDouble_end(self)

    def clear(self) -> "void":
        return _CSTL.MapStrMapIntDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< int,double > >::allocator_type":
        return _CSTL.MapStrMapIntDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< int,double > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,double > >::size_type":
        return _CSTL.MapStrMapIntDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapStrMapIntDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< int,double > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,double > >::iterator":
        return _CSTL.MapStrMapIntDouble_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapStrMapIntDouble

# Register MapStrMapIntDouble in _CSTL:
_CSTL.MapStrMapIntDouble_swigregister(MapStrMapIntDouble)

class MapStrMapIntBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrMapIntBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapStrMapIntBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapStrMapIntBool___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< int,bool > >::size_type":
        return _CSTL.MapStrMapIntBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,bool > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,bool > >::mapped_type const &":
        return _CSTL.MapStrMapIntBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,bool > >::key_type const &") -> "void":
        return _CSTL.MapStrMapIntBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< int,bool > >::key_type const &") -> "bool":
        return _CSTL.MapStrMapIntBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapStrMapIntBool_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapStrMapIntBool_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapStrMapIntBool_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< int,bool > >::key_type const &") -> "bool":
        return _CSTL.MapStrMapIntBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrMapIntBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrMapIntBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapStrMapIntBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapStrMapIntBool_asdict(self)

    def __init__(self, *args):
        _CSTL.MapStrMapIntBool_swiginit(self, _CSTL.new_MapStrMapIntBool(*args))

    def empty(self) -> "bool":
        return _CSTL.MapStrMapIntBool_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< int,bool > >::size_type":
        return _CSTL.MapStrMapIntBool_size(self)

    def swap(self, v: "MapStrMapIntBool") -> "void":
        return _CSTL.MapStrMapIntBool_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< int,bool > >::iterator":
        return _CSTL.MapStrMapIntBool_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< int,bool > >::iterator":
        return _CSTL.MapStrMapIntBool_end(self)

    def clear(self) -> "void":
        return _CSTL.MapStrMapIntBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< int,bool > >::allocator_type":
        return _CSTL.MapStrMapIntBool_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< int,bool > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,bool > >::size_type":
        return _CSTL.MapStrMapIntBool_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapStrMapIntBool_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< int,bool > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,bool > >::iterator":
        return _CSTL.MapStrMapIntBool_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapStrMapIntBool

# Register MapStrMapIntBool in _CSTL:
_CSTL.MapStrMapIntBool_swigregister(MapStrMapIntBool)

class MapStrMapIntLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrMapIntLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapStrMapIntLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapStrMapIntLong___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::int64_t > >::size_type":
        return _CSTL.MapStrMapIntLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::int64_t > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::int64_t > >::mapped_type const &":
        return _CSTL.MapStrMapIntLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::int64_t > >::key_type const &") -> "void":
        return _CSTL.MapStrMapIntLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::int64_t > >::key_type const &") -> "bool":
        return _CSTL.MapStrMapIntLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapStrMapIntLong_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapStrMapIntLong_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapStrMapIntLong_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::int64_t > >::key_type const &") -> "bool":
        return _CSTL.MapStrMapIntLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrMapIntLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrMapIntLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapStrMapIntLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapStrMapIntLong_asdict(self)

    def __init__(self, *args):
        _CSTL.MapStrMapIntLong_swiginit(self, _CSTL.new_MapStrMapIntLong(*args))

    def empty(self) -> "bool":
        return _CSTL.MapStrMapIntLong_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::int64_t > >::size_type":
        return _CSTL.MapStrMapIntLong_size(self)

    def swap(self, v: "MapStrMapIntLong") -> "void":
        return _CSTL.MapStrMapIntLong_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::int64_t > >::iterator":
        return _CSTL.MapStrMapIntLong_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::int64_t > >::iterator":
        return _CSTL.MapStrMapIntLong_end(self)

    def clear(self) -> "void":
        return _CSTL.MapStrMapIntLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::int64_t > >::allocator_type":
        return _CSTL.MapStrMapIntLong_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< int,std::int64_t > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::int64_t > >::size_type":
        return _CSTL.MapStrMapIntLong_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapStrMapIntLong_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< int,std::int64_t > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::int64_t > >::iterator":
        return _CSTL.MapStrMapIntLong_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapStrMapIntLong

# Register MapStrMapIntLong in _CSTL:
_CSTL.MapStrMapIntLong_swigregister(MapStrMapIntLong)

class MapStrMapStrInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrMapStrInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapStrMapStrInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapStrMapStrInt___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,int > >::size_type":
        return _CSTL.MapStrMapStrInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,int > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,int > >::mapped_type const &":
        return _CSTL.MapStrMapStrInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,int > >::key_type const &") -> "void":
        return _CSTL.MapStrMapStrInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,int > >::key_type const &") -> "bool":
        return _CSTL.MapStrMapStrInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapStrMapStrInt_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapStrMapStrInt_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapStrMapStrInt_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,int > >::key_type const &") -> "bool":
        return _CSTL.MapStrMapStrInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrMapStrInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrMapStrInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapStrMapStrInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapStrMapStrInt_asdict(self)

    def __init__(self, *args):
        _CSTL.MapStrMapStrInt_swiginit(self, _CSTL.new_MapStrMapStrInt(*args))

    def empty(self) -> "bool":
        return _CSTL.MapStrMapStrInt_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,int > >::size_type":
        return _CSTL.MapStrMapStrInt_size(self)

    def swap(self, v: "MapStrMapStrInt") -> "void":
        return _CSTL.MapStrMapStrInt_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,int > >::iterator":
        return _CSTL.MapStrMapStrInt_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,int > >::iterator":
        return _CSTL.MapStrMapStrInt_end(self)

    def clear(self) -> "void":
        return _CSTL.MapStrMapStrInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,int > >::allocator_type":
        return _CSTL.MapStrMapStrInt_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,int > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,int > >::size_type":
        return _CSTL.MapStrMapStrInt_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapStrMapStrInt_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,int > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,int > >::iterator":
        return _CSTL.MapStrMapStrInt_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapStrMapStrInt

# Register MapStrMapStrInt in _CSTL:
_CSTL.MapStrMapStrInt_swigregister(MapStrMapStrInt)

class MapStrMapStrStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrMapStrStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapStrMapStrStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapStrMapStrStr___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::string > >::size_type":
        return _CSTL.MapStrMapStrStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::string > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::string > >::mapped_type const &":
        return _CSTL.MapStrMapStrStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::string > >::key_type const &") -> "void":
        return _CSTL.MapStrMapStrStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::string > >::key_type const &") -> "bool":
        return _CSTL.MapStrMapStrStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapStrMapStrStr_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapStrMapStrStr_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapStrMapStrStr_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::string > >::key_type const &") -> "bool":
        return _CSTL.MapStrMapStrStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrMapStrStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrMapStrStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapStrMapStrStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapStrMapStrStr_asdict(self)

    def __init__(self, *args):
        _CSTL.MapStrMapStrStr_swiginit(self, _CSTL.new_MapStrMapStrStr(*args))

    def empty(self) -> "bool":
        return _CSTL.MapStrMapStrStr_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::string > >::size_type":
        return _CSTL.MapStrMapStrStr_size(self)

    def swap(self, v: "MapStrMapStrStr") -> "void":
        return _CSTL.MapStrMapStrStr_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::string > >::iterator":
        return _CSTL.MapStrMapStrStr_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::string > >::iterator":
        return _CSTL.MapStrMapStrStr_end(self)

    def clear(self) -> "void":
        return _CSTL.MapStrMapStrStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::string > >::allocator_type":
        return _CSTL.MapStrMapStrStr_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,std::string > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::string > >::size_type":
        return _CSTL.MapStrMapStrStr_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapStrMapStrStr_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,std::string > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::string > >::iterator":
        return _CSTL.MapStrMapStrStr_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapStrMapStrStr

# Register MapStrMapStrStr in _CSTL:
_CSTL.MapStrMapStrStr_swigregister(MapStrMapStrStr)

class MapStrMapStrFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrMapStrFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapStrMapStrFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapStrMapStrFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,float > >::size_type":
        return _CSTL.MapStrMapStrFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,float > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,float > >::mapped_type const &":
        return _CSTL.MapStrMapStrFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,float > >::key_type const &") -> "void":
        return _CSTL.MapStrMapStrFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,float > >::key_type const &") -> "bool":
        return _CSTL.MapStrMapStrFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapStrMapStrFloat_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapStrMapStrFloat_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapStrMapStrFloat_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,float > >::key_type const &") -> "bool":
        return _CSTL.MapStrMapStrFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrMapStrFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrMapStrFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapStrMapStrFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapStrMapStrFloat_asdict(self)

    def __init__(self, *args):
        _CSTL.MapStrMapStrFloat_swiginit(self, _CSTL.new_MapStrMapStrFloat(*args))

    def empty(self) -> "bool":
        return _CSTL.MapStrMapStrFloat_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,float > >::size_type":
        return _CSTL.MapStrMapStrFloat_size(self)

    def swap(self, v: "MapStrMapStrFloat") -> "void":
        return _CSTL.MapStrMapStrFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,float > >::iterator":
        return _CSTL.MapStrMapStrFloat_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,float > >::iterator":
        return _CSTL.MapStrMapStrFloat_end(self)

    def clear(self) -> "void":
        return _CSTL.MapStrMapStrFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,float > >::allocator_type":
        return _CSTL.MapStrMapStrFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,float > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,float > >::size_type":
        return _CSTL.MapStrMapStrFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapStrMapStrFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,float > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,float > >::iterator":
        return _CSTL.MapStrMapStrFloat_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapStrMapStrFloat

# Register MapStrMapStrFloat in _CSTL:
_CSTL.MapStrMapStrFloat_swigregister(MapStrMapStrFloat)

class MapStrMapStrDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrMapStrDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapStrMapStrDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapStrMapStrDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,double > >::size_type":
        return _CSTL.MapStrMapStrDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,double > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,double > >::mapped_type const &":
        return _CSTL.MapStrMapStrDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,double > >::key_type const &") -> "void":
        return _CSTL.MapStrMapStrDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,double > >::key_type const &") -> "bool":
        return _CSTL.MapStrMapStrDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapStrMapStrDouble_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapStrMapStrDouble_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapStrMapStrDouble_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,double > >::key_type const &") -> "bool":
        return _CSTL.MapStrMapStrDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrMapStrDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrMapStrDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapStrMapStrDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapStrMapStrDouble_asdict(self)

    def __init__(self, *args):
        _CSTL.MapStrMapStrDouble_swiginit(self, _CSTL.new_MapStrMapStrDouble(*args))

    def empty(self) -> "bool":
        return _CSTL.MapStrMapStrDouble_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,double > >::size_type":
        return _CSTL.MapStrMapStrDouble_size(self)

    def swap(self, v: "MapStrMapStrDouble") -> "void":
        return _CSTL.MapStrMapStrDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,double > >::iterator":
        return _CSTL.MapStrMapStrDouble_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,double > >::iterator":
        return _CSTL.MapStrMapStrDouble_end(self)

    def clear(self) -> "void":
        return _CSTL.MapStrMapStrDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,double > >::allocator_type":
        return _CSTL.MapStrMapStrDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,double > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,double > >::size_type":
        return _CSTL.MapStrMapStrDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapStrMapStrDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,double > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,double > >::iterator":
        return _CSTL.MapStrMapStrDouble_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapStrMapStrDouble

# Register MapStrMapStrDouble in _CSTL:
_CSTL.MapStrMapStrDouble_swigregister(MapStrMapStrDouble)

class MapStrMapStrBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrMapStrBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapStrMapStrBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapStrMapStrBool___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,bool > >::size_type":
        return _CSTL.MapStrMapStrBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,bool > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,bool > >::mapped_type const &":
        return _CSTL.MapStrMapStrBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,bool > >::key_type const &") -> "void":
        return _CSTL.MapStrMapStrBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,bool > >::key_type const &") -> "bool":
        return _CSTL.MapStrMapStrBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapStrMapStrBool_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapStrMapStrBool_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapStrMapStrBool_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,bool > >::key_type const &") -> "bool":
        return _CSTL.MapStrMapStrBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrMapStrBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrMapStrBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapStrMapStrBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapStrMapStrBool_asdict(self)

    def __init__(self, *args):
        _CSTL.MapStrMapStrBool_swiginit(self, _CSTL.new_MapStrMapStrBool(*args))

    def empty(self) -> "bool":
        return _CSTL.MapStrMapStrBool_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,bool > >::size_type":
        return _CSTL.MapStrMapStrBool_size(self)

    def swap(self, v: "MapStrMapStrBool") -> "void":
        return _CSTL.MapStrMapStrBool_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,bool > >::iterator":
        return _CSTL.MapStrMapStrBool_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,bool > >::iterator":
        return _CSTL.MapStrMapStrBool_end(self)

    def clear(self) -> "void":
        return _CSTL.MapStrMapStrBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,bool > >::allocator_type":
        return _CSTL.MapStrMapStrBool_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,bool > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,bool > >::size_type":
        return _CSTL.MapStrMapStrBool_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapStrMapStrBool_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,bool > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,bool > >::iterator":
        return _CSTL.MapStrMapStrBool_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapStrMapStrBool

# Register MapStrMapStrBool in _CSTL:
_CSTL.MapStrMapStrBool_swigregister(MapStrMapStrBool)

class MapStrMapStrLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrMapStrLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapStrMapStrLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapStrMapStrLong___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > >::size_type":
        return _CSTL.MapStrMapStrLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > >::mapped_type const &":
        return _CSTL.MapStrMapStrLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > >::key_type const &") -> "void":
        return _CSTL.MapStrMapStrLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > >::key_type const &") -> "bool":
        return _CSTL.MapStrMapStrLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapStrMapStrLong_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapStrMapStrLong_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapStrMapStrLong_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > >::key_type const &") -> "bool":
        return _CSTL.MapStrMapStrLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrMapStrLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrMapStrLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapStrMapStrLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapStrMapStrLong_asdict(self)

    def __init__(self, *args):
        _CSTL.MapStrMapStrLong_swiginit(self, _CSTL.new_MapStrMapStrLong(*args))

    def empty(self) -> "bool":
        return _CSTL.MapStrMapStrLong_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > >::size_type":
        return _CSTL.MapStrMapStrLong_size(self)

    def swap(self, v: "MapStrMapStrLong") -> "void":
        return _CSTL.MapStrMapStrLong_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > >::iterator":
        return _CSTL.MapStrMapStrLong_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > >::iterator":
        return _CSTL.MapStrMapStrLong_end(self)

    def clear(self) -> "void":
        return _CSTL.MapStrMapStrLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > >::allocator_type":
        return _CSTL.MapStrMapStrLong_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > >::size_type":
        return _CSTL.MapStrMapStrLong_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapStrMapStrLong_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > >::iterator":
        return _CSTL.MapStrMapStrLong_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapStrMapStrLong

# Register MapStrMapStrLong in _CSTL:
_CSTL.MapStrMapStrLong_swigregister(MapStrMapStrLong)

class MapStrMapLongInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrMapLongInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapStrMapLongInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapStrMapLongInt___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,int > >::size_type":
        return _CSTL.MapStrMapLongInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,int > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,int > >::mapped_type const &":
        return _CSTL.MapStrMapLongInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,int > >::key_type const &") -> "void":
        return _CSTL.MapStrMapLongInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,int > >::key_type const &") -> "bool":
        return _CSTL.MapStrMapLongInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapStrMapLongInt_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapStrMapLongInt_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapStrMapLongInt_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,int > >::key_type const &") -> "bool":
        return _CSTL.MapStrMapLongInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrMapLongInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrMapLongInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapStrMapLongInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapStrMapLongInt_asdict(self)

    def __init__(self, *args):
        _CSTL.MapStrMapLongInt_swiginit(self, _CSTL.new_MapStrMapLongInt(*args))

    def empty(self) -> "bool":
        return _CSTL.MapStrMapLongInt_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,int > >::size_type":
        return _CSTL.MapStrMapLongInt_size(self)

    def swap(self, v: "MapStrMapLongInt") -> "void":
        return _CSTL.MapStrMapLongInt_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,int > >::iterator":
        return _CSTL.MapStrMapLongInt_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,int > >::iterator":
        return _CSTL.MapStrMapLongInt_end(self)

    def clear(self) -> "void":
        return _CSTL.MapStrMapLongInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,int > >::allocator_type":
        return _CSTL.MapStrMapLongInt_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,int > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,int > >::size_type":
        return _CSTL.MapStrMapLongInt_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapStrMapLongInt_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,int > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,int > >::iterator":
        return _CSTL.MapStrMapLongInt_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapStrMapLongInt

# Register MapStrMapLongInt in _CSTL:
_CSTL.MapStrMapLongInt_swigregister(MapStrMapLongInt)

class MapStrMapLongStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrMapLongStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapStrMapLongStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapStrMapLongStr___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > >::size_type":
        return _CSTL.MapStrMapLongStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > >::mapped_type const &":
        return _CSTL.MapStrMapLongStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > >::key_type const &") -> "void":
        return _CSTL.MapStrMapLongStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > >::key_type const &") -> "bool":
        return _CSTL.MapStrMapLongStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapStrMapLongStr_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapStrMapLongStr_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapStrMapLongStr_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > >::key_type const &") -> "bool":
        return _CSTL.MapStrMapLongStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrMapLongStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrMapLongStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapStrMapLongStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapStrMapLongStr_asdict(self)

    def __init__(self, *args):
        _CSTL.MapStrMapLongStr_swiginit(self, _CSTL.new_MapStrMapLongStr(*args))

    def empty(self) -> "bool":
        return _CSTL.MapStrMapLongStr_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > >::size_type":
        return _CSTL.MapStrMapLongStr_size(self)

    def swap(self, v: "MapStrMapLongStr") -> "void":
        return _CSTL.MapStrMapLongStr_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > >::iterator":
        return _CSTL.MapStrMapLongStr_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > >::iterator":
        return _CSTL.MapStrMapLongStr_end(self)

    def clear(self) -> "void":
        return _CSTL.MapStrMapLongStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > >::allocator_type":
        return _CSTL.MapStrMapLongStr_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > >::size_type":
        return _CSTL.MapStrMapLongStr_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapStrMapLongStr_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > >::iterator":
        return _CSTL.MapStrMapLongStr_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapStrMapLongStr

# Register MapStrMapLongStr in _CSTL:
_CSTL.MapStrMapLongStr_swigregister(MapStrMapLongStr)

class MapStrMapLongFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrMapLongFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapStrMapLongFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapStrMapLongFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,float > >::size_type":
        return _CSTL.MapStrMapLongFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,float > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,float > >::mapped_type const &":
        return _CSTL.MapStrMapLongFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,float > >::key_type const &") -> "void":
        return _CSTL.MapStrMapLongFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,float > >::key_type const &") -> "bool":
        return _CSTL.MapStrMapLongFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapStrMapLongFloat_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapStrMapLongFloat_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapStrMapLongFloat_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,float > >::key_type const &") -> "bool":
        return _CSTL.MapStrMapLongFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrMapLongFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrMapLongFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapStrMapLongFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapStrMapLongFloat_asdict(self)

    def __init__(self, *args):
        _CSTL.MapStrMapLongFloat_swiginit(self, _CSTL.new_MapStrMapLongFloat(*args))

    def empty(self) -> "bool":
        return _CSTL.MapStrMapLongFloat_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,float > >::size_type":
        return _CSTL.MapStrMapLongFloat_size(self)

    def swap(self, v: "MapStrMapLongFloat") -> "void":
        return _CSTL.MapStrMapLongFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,float > >::iterator":
        return _CSTL.MapStrMapLongFloat_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,float > >::iterator":
        return _CSTL.MapStrMapLongFloat_end(self)

    def clear(self) -> "void":
        return _CSTL.MapStrMapLongFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,float > >::allocator_type":
        return _CSTL.MapStrMapLongFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,float > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,float > >::size_type":
        return _CSTL.MapStrMapLongFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapStrMapLongFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,float > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,float > >::iterator":
        return _CSTL.MapStrMapLongFloat_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapStrMapLongFloat

# Register MapStrMapLongFloat in _CSTL:
_CSTL.MapStrMapLongFloat_swigregister(MapStrMapLongFloat)

class MapStrMapLongDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrMapLongDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapStrMapLongDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapStrMapLongDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,double > >::size_type":
        return _CSTL.MapStrMapLongDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,double > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,double > >::mapped_type const &":
        return _CSTL.MapStrMapLongDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,double > >::key_type const &") -> "void":
        return _CSTL.MapStrMapLongDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,double > >::key_type const &") -> "bool":
        return _CSTL.MapStrMapLongDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapStrMapLongDouble_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapStrMapLongDouble_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapStrMapLongDouble_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,double > >::key_type const &") -> "bool":
        return _CSTL.MapStrMapLongDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrMapLongDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrMapLongDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapStrMapLongDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapStrMapLongDouble_asdict(self)

    def __init__(self, *args):
        _CSTL.MapStrMapLongDouble_swiginit(self, _CSTL.new_MapStrMapLongDouble(*args))

    def empty(self) -> "bool":
        return _CSTL.MapStrMapLongDouble_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,double > >::size_type":
        return _CSTL.MapStrMapLongDouble_size(self)

    def swap(self, v: "MapStrMapLongDouble") -> "void":
        return _CSTL.MapStrMapLongDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,double > >::iterator":
        return _CSTL.MapStrMapLongDouble_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,double > >::iterator":
        return _CSTL.MapStrMapLongDouble_end(self)

    def clear(self) -> "void":
        return _CSTL.MapStrMapLongDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,double > >::allocator_type":
        return _CSTL.MapStrMapLongDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,double > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,double > >::size_type":
        return _CSTL.MapStrMapLongDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapStrMapLongDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,double > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,double > >::iterator":
        return _CSTL.MapStrMapLongDouble_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapStrMapLongDouble

# Register MapStrMapLongDouble in _CSTL:
_CSTL.MapStrMapLongDouble_swigregister(MapStrMapLongDouble)

class MapStrMapLongBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrMapLongBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapStrMapLongBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapStrMapLongBool___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > >::size_type":
        return _CSTL.MapStrMapLongBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > >::mapped_type const &":
        return _CSTL.MapStrMapLongBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > >::key_type const &") -> "void":
        return _CSTL.MapStrMapLongBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > >::key_type const &") -> "bool":
        return _CSTL.MapStrMapLongBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapStrMapLongBool_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapStrMapLongBool_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapStrMapLongBool_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > >::key_type const &") -> "bool":
        return _CSTL.MapStrMapLongBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrMapLongBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrMapLongBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapStrMapLongBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapStrMapLongBool_asdict(self)

    def __init__(self, *args):
        _CSTL.MapStrMapLongBool_swiginit(self, _CSTL.new_MapStrMapLongBool(*args))

    def empty(self) -> "bool":
        return _CSTL.MapStrMapLongBool_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > >::size_type":
        return _CSTL.MapStrMapLongBool_size(self)

    def swap(self, v: "MapStrMapLongBool") -> "void":
        return _CSTL.MapStrMapLongBool_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > >::iterator":
        return _CSTL.MapStrMapLongBool_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > >::iterator":
        return _CSTL.MapStrMapLongBool_end(self)

    def clear(self) -> "void":
        return _CSTL.MapStrMapLongBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > >::allocator_type":
        return _CSTL.MapStrMapLongBool_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > >::size_type":
        return _CSTL.MapStrMapLongBool_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapStrMapLongBool_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > >::iterator":
        return _CSTL.MapStrMapLongBool_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapStrMapLongBool

# Register MapStrMapLongBool in _CSTL:
_CSTL.MapStrMapLongBool_swigregister(MapStrMapLongBool)

class MapStrMapLongLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrMapLongLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapStrMapLongLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapStrMapLongLong___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > >::size_type":
        return _CSTL.MapStrMapLongLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > >::mapped_type const &":
        return _CSTL.MapStrMapLongLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > >::key_type const &") -> "void":
        return _CSTL.MapStrMapLongLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > >::key_type const &") -> "bool":
        return _CSTL.MapStrMapLongLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapStrMapLongLong_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapStrMapLongLong_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapStrMapLongLong_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > >::key_type const &") -> "bool":
        return _CSTL.MapStrMapLongLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrMapLongLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapStrMapLongLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapStrMapLongLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapStrMapLongLong_asdict(self)

    def __init__(self, *args):
        _CSTL.MapStrMapLongLong_swiginit(self, _CSTL.new_MapStrMapLongLong(*args))

    def empty(self) -> "bool":
        return _CSTL.MapStrMapLongLong_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > >::size_type":
        return _CSTL.MapStrMapLongLong_size(self)

    def swap(self, v: "MapStrMapLongLong") -> "void":
        return _CSTL.MapStrMapLongLong_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > >::iterator":
        return _CSTL.MapStrMapLongLong_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > >::iterator":
        return _CSTL.MapStrMapLongLong_end(self)

    def clear(self) -> "void":
        return _CSTL.MapStrMapLongLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > >::allocator_type":
        return _CSTL.MapStrMapLongLong_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > >::size_type":
        return _CSTL.MapStrMapLongLong_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapStrMapLongLong_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > >::iterator":
        return _CSTL.MapStrMapLongLong_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapStrMapLongLong

# Register MapStrMapLongLong in _CSTL:
_CSTL.MapStrMapLongLong_swigregister(MapStrMapLongLong)

class MapLongVecInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongVecInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapLongVecInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapLongVecInt___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::vector< int > >::size_type":
        return _CSTL.MapLongVecInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::vector< int > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< int > >::mapped_type const &":
        return _CSTL.MapLongVecInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::vector< int > >::key_type const &") -> "void":
        return _CSTL.MapLongVecInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::vector< int > >::key_type const &") -> "bool":
        return _CSTL.MapLongVecInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapLongVecInt_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapLongVecInt_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapLongVecInt_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::vector< int > >::key_type const &") -> "bool":
        return _CSTL.MapLongVecInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongVecInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongVecInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapLongVecInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapLongVecInt_asdict(self)

    def __init__(self, *args):
        _CSTL.MapLongVecInt_swiginit(self, _CSTL.new_MapLongVecInt(*args))

    def empty(self) -> "bool":
        return _CSTL.MapLongVecInt_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::vector< int > >::size_type":
        return _CSTL.MapLongVecInt_size(self)

    def swap(self, v: "MapLongVecInt") -> "void":
        return _CSTL.MapLongVecInt_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::vector< int > >::iterator":
        return _CSTL.MapLongVecInt_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::vector< int > >::iterator":
        return _CSTL.MapLongVecInt_end(self)

    def clear(self) -> "void":
        return _CSTL.MapLongVecInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::vector< int > >::allocator_type":
        return _CSTL.MapLongVecInt_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::vector< int > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< int > >::size_type":
        return _CSTL.MapLongVecInt_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapLongVecInt_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::vector< int > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< int > >::iterator":
        return _CSTL.MapLongVecInt_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapLongVecInt

# Register MapLongVecInt in _CSTL:
_CSTL.MapLongVecInt_swigregister(MapLongVecInt)

class MapLongVecStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongVecStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapLongVecStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapLongVecStr___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::vector< std::string > >::size_type":
        return _CSTL.MapLongVecStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::vector< std::string > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::string > >::mapped_type const &":
        return _CSTL.MapLongVecStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::vector< std::string > >::key_type const &") -> "void":
        return _CSTL.MapLongVecStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::vector< std::string > >::key_type const &") -> "bool":
        return _CSTL.MapLongVecStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapLongVecStr_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapLongVecStr_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapLongVecStr_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::vector< std::string > >::key_type const &") -> "bool":
        return _CSTL.MapLongVecStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongVecStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongVecStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapLongVecStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapLongVecStr_asdict(self)

    def __init__(self, *args):
        _CSTL.MapLongVecStr_swiginit(self, _CSTL.new_MapLongVecStr(*args))

    def empty(self) -> "bool":
        return _CSTL.MapLongVecStr_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::vector< std::string > >::size_type":
        return _CSTL.MapLongVecStr_size(self)

    def swap(self, v: "MapLongVecStr") -> "void":
        return _CSTL.MapLongVecStr_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::vector< std::string > >::iterator":
        return _CSTL.MapLongVecStr_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::vector< std::string > >::iterator":
        return _CSTL.MapLongVecStr_end(self)

    def clear(self) -> "void":
        return _CSTL.MapLongVecStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::vector< std::string > >::allocator_type":
        return _CSTL.MapLongVecStr_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::vector< std::string > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::string > >::size_type":
        return _CSTL.MapLongVecStr_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapLongVecStr_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::vector< std::string > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::string > >::iterator":
        return _CSTL.MapLongVecStr_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapLongVecStr

# Register MapLongVecStr in _CSTL:
_CSTL.MapLongVecStr_swigregister(MapLongVecStr)

class MapLongVecFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongVecFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapLongVecFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapLongVecFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::vector< float > >::size_type":
        return _CSTL.MapLongVecFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::vector< float > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< float > >::mapped_type const &":
        return _CSTL.MapLongVecFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::vector< float > >::key_type const &") -> "void":
        return _CSTL.MapLongVecFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::vector< float > >::key_type const &") -> "bool":
        return _CSTL.MapLongVecFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapLongVecFloat_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapLongVecFloat_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapLongVecFloat_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::vector< float > >::key_type const &") -> "bool":
        return _CSTL.MapLongVecFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongVecFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongVecFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapLongVecFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapLongVecFloat_asdict(self)

    def __init__(self, *args):
        _CSTL.MapLongVecFloat_swiginit(self, _CSTL.new_MapLongVecFloat(*args))

    def empty(self) -> "bool":
        return _CSTL.MapLongVecFloat_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::vector< float > >::size_type":
        return _CSTL.MapLongVecFloat_size(self)

    def swap(self, v: "MapLongVecFloat") -> "void":
        return _CSTL.MapLongVecFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::vector< float > >::iterator":
        return _CSTL.MapLongVecFloat_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::vector< float > >::iterator":
        return _CSTL.MapLongVecFloat_end(self)

    def clear(self) -> "void":
        return _CSTL.MapLongVecFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::vector< float > >::allocator_type":
        return _CSTL.MapLongVecFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::vector< float > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< float > >::size_type":
        return _CSTL.MapLongVecFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapLongVecFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::vector< float > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< float > >::iterator":
        return _CSTL.MapLongVecFloat_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapLongVecFloat

# Register MapLongVecFloat in _CSTL:
_CSTL.MapLongVecFloat_swigregister(MapLongVecFloat)

class MapLongVecDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongVecDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapLongVecDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapLongVecDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::vector< double > >::size_type":
        return _CSTL.MapLongVecDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::vector< double > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< double > >::mapped_type const &":
        return _CSTL.MapLongVecDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::vector< double > >::key_type const &") -> "void":
        return _CSTL.MapLongVecDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::vector< double > >::key_type const &") -> "bool":
        return _CSTL.MapLongVecDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapLongVecDouble_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapLongVecDouble_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapLongVecDouble_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::vector< double > >::key_type const &") -> "bool":
        return _CSTL.MapLongVecDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongVecDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongVecDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapLongVecDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapLongVecDouble_asdict(self)

    def __init__(self, *args):
        _CSTL.MapLongVecDouble_swiginit(self, _CSTL.new_MapLongVecDouble(*args))

    def empty(self) -> "bool":
        return _CSTL.MapLongVecDouble_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::vector< double > >::size_type":
        return _CSTL.MapLongVecDouble_size(self)

    def swap(self, v: "MapLongVecDouble") -> "void":
        return _CSTL.MapLongVecDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::vector< double > >::iterator":
        return _CSTL.MapLongVecDouble_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::vector< double > >::iterator":
        return _CSTL.MapLongVecDouble_end(self)

    def clear(self) -> "void":
        return _CSTL.MapLongVecDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::vector< double > >::allocator_type":
        return _CSTL.MapLongVecDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::vector< double > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< double > >::size_type":
        return _CSTL.MapLongVecDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapLongVecDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::vector< double > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< double > >::iterator":
        return _CSTL.MapLongVecDouble_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapLongVecDouble

# Register MapLongVecDouble in _CSTL:
_CSTL.MapLongVecDouble_swigregister(MapLongVecDouble)

class MapLongVecBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongVecBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapLongVecBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapLongVecBool___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::vector< bool > >::size_type":
        return _CSTL.MapLongVecBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::vector< bool > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< bool > >::mapped_type const &":
        return _CSTL.MapLongVecBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::vector< bool > >::key_type const &") -> "void":
        return _CSTL.MapLongVecBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::vector< bool > >::key_type const &") -> "bool":
        return _CSTL.MapLongVecBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapLongVecBool_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapLongVecBool_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapLongVecBool_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::vector< bool > >::key_type const &") -> "bool":
        return _CSTL.MapLongVecBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongVecBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongVecBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapLongVecBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapLongVecBool_asdict(self)

    def __init__(self, *args):
        _CSTL.MapLongVecBool_swiginit(self, _CSTL.new_MapLongVecBool(*args))

    def empty(self) -> "bool":
        return _CSTL.MapLongVecBool_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::vector< bool > >::size_type":
        return _CSTL.MapLongVecBool_size(self)

    def swap(self, v: "MapLongVecBool") -> "void":
        return _CSTL.MapLongVecBool_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::vector< bool > >::iterator":
        return _CSTL.MapLongVecBool_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::vector< bool > >::iterator":
        return _CSTL.MapLongVecBool_end(self)

    def clear(self) -> "void":
        return _CSTL.MapLongVecBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::vector< bool > >::allocator_type":
        return _CSTL.MapLongVecBool_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::vector< bool > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< bool > >::size_type":
        return _CSTL.MapLongVecBool_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapLongVecBool_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::vector< bool > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< bool > >::iterator":
        return _CSTL.MapLongVecBool_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapLongVecBool

# Register MapLongVecBool in _CSTL:
_CSTL.MapLongVecBool_swigregister(MapLongVecBool)

class MapLongVecLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongVecLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapLongVecLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapLongVecLong___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::vector< std::int64_t > >::size_type":
        return _CSTL.MapLongVecLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::vector< std::int64_t > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::int64_t > >::mapped_type const &":
        return _CSTL.MapLongVecLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::vector< std::int64_t > >::key_type const &") -> "void":
        return _CSTL.MapLongVecLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::vector< std::int64_t > >::key_type const &") -> "bool":
        return _CSTL.MapLongVecLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapLongVecLong_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapLongVecLong_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapLongVecLong_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::vector< std::int64_t > >::key_type const &") -> "bool":
        return _CSTL.MapLongVecLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongVecLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongVecLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapLongVecLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapLongVecLong_asdict(self)

    def __init__(self, *args):
        _CSTL.MapLongVecLong_swiginit(self, _CSTL.new_MapLongVecLong(*args))

    def empty(self) -> "bool":
        return _CSTL.MapLongVecLong_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::vector< std::int64_t > >::size_type":
        return _CSTL.MapLongVecLong_size(self)

    def swap(self, v: "MapLongVecLong") -> "void":
        return _CSTL.MapLongVecLong_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::vector< std::int64_t > >::iterator":
        return _CSTL.MapLongVecLong_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::vector< std::int64_t > >::iterator":
        return _CSTL.MapLongVecLong_end(self)

    def clear(self) -> "void":
        return _CSTL.MapLongVecLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::vector< std::int64_t > >::allocator_type":
        return _CSTL.MapLongVecLong_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::vector< std::int64_t > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::int64_t > >::size_type":
        return _CSTL.MapLongVecLong_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapLongVecLong_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::vector< std::int64_t > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::int64_t > >::iterator":
        return _CSTL.MapLongVecLong_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapLongVecLong

# Register MapLongVecLong in _CSTL:
_CSTL.MapLongVecLong_swigregister(MapLongVecLong)

class MapLongSetInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongSetInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapLongSetInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapLongSetInt___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_set< int > >::size_type":
        return _CSTL.MapLongSetInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_set< int > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_set< int > >::mapped_type const &":
        return _CSTL.MapLongSetInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_set< int > >::key_type const &") -> "void":
        return _CSTL.MapLongSetInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_set< int > >::key_type const &") -> "bool":
        return _CSTL.MapLongSetInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapLongSetInt_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapLongSetInt_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapLongSetInt_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_set< int > >::key_type const &") -> "bool":
        return _CSTL.MapLongSetInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongSetInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongSetInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapLongSetInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapLongSetInt_asdict(self)

    def __init__(self, *args):
        _CSTL.MapLongSetInt_swiginit(self, _CSTL.new_MapLongSetInt(*args))

    def empty(self) -> "bool":
        return _CSTL.MapLongSetInt_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_set< int > >::size_type":
        return _CSTL.MapLongSetInt_size(self)

    def swap(self, v: "MapLongSetInt") -> "void":
        return _CSTL.MapLongSetInt_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_set< int > >::iterator":
        return _CSTL.MapLongSetInt_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_set< int > >::iterator":
        return _CSTL.MapLongSetInt_end(self)

    def clear(self) -> "void":
        return _CSTL.MapLongSetInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_set< int > >::allocator_type":
        return _CSTL.MapLongSetInt_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_set< int > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_set< int > >::size_type":
        return _CSTL.MapLongSetInt_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapLongSetInt_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_set< int > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_set< int > >::iterator":
        return _CSTL.MapLongSetInt_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapLongSetInt

# Register MapLongSetInt in _CSTL:
_CSTL.MapLongSetInt_swigregister(MapLongSetInt)

class MapLongSetStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongSetStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapLongSetStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapLongSetStr___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_set< std::string > >::size_type":
        return _CSTL.MapLongSetStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_set< std::string > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_set< std::string > >::mapped_type const &":
        return _CSTL.MapLongSetStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_set< std::string > >::key_type const &") -> "void":
        return _CSTL.MapLongSetStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_set< std::string > >::key_type const &") -> "bool":
        return _CSTL.MapLongSetStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapLongSetStr_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapLongSetStr_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapLongSetStr_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_set< std::string > >::key_type const &") -> "bool":
        return _CSTL.MapLongSetStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongSetStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongSetStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapLongSetStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapLongSetStr_asdict(self)

    def __init__(self, *args):
        _CSTL.MapLongSetStr_swiginit(self, _CSTL.new_MapLongSetStr(*args))

    def empty(self) -> "bool":
        return _CSTL.MapLongSetStr_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_set< std::string > >::size_type":
        return _CSTL.MapLongSetStr_size(self)

    def swap(self, v: "MapLongSetStr") -> "void":
        return _CSTL.MapLongSetStr_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_set< std::string > >::iterator":
        return _CSTL.MapLongSetStr_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_set< std::string > >::iterator":
        return _CSTL.MapLongSetStr_end(self)

    def clear(self) -> "void":
        return _CSTL.MapLongSetStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_set< std::string > >::allocator_type":
        return _CSTL.MapLongSetStr_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_set< std::string > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_set< std::string > >::size_type":
        return _CSTL.MapLongSetStr_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapLongSetStr_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_set< std::string > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_set< std::string > >::iterator":
        return _CSTL.MapLongSetStr_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapLongSetStr

# Register MapLongSetStr in _CSTL:
_CSTL.MapLongSetStr_swigregister(MapLongSetStr)

class MapLongSetLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongSetLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapLongSetLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapLongSetLong___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > >::size_type":
        return _CSTL.MapLongSetLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > >::mapped_type const &":
        return _CSTL.MapLongSetLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > >::key_type const &") -> "void":
        return _CSTL.MapLongSetLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > >::key_type const &") -> "bool":
        return _CSTL.MapLongSetLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapLongSetLong_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapLongSetLong_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapLongSetLong_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > >::key_type const &") -> "bool":
        return _CSTL.MapLongSetLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongSetLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongSetLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapLongSetLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapLongSetLong_asdict(self)

    def __init__(self, *args):
        _CSTL.MapLongSetLong_swiginit(self, _CSTL.new_MapLongSetLong(*args))

    def empty(self) -> "bool":
        return _CSTL.MapLongSetLong_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > >::size_type":
        return _CSTL.MapLongSetLong_size(self)

    def swap(self, v: "MapLongSetLong") -> "void":
        return _CSTL.MapLongSetLong_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > >::iterator":
        return _CSTL.MapLongSetLong_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > >::iterator":
        return _CSTL.MapLongSetLong_end(self)

    def clear(self) -> "void":
        return _CSTL.MapLongSetLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > >::allocator_type":
        return _CSTL.MapLongSetLong_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > >::size_type":
        return _CSTL.MapLongSetLong_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapLongSetLong_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > >::iterator":
        return _CSTL.MapLongSetLong_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapLongSetLong

# Register MapLongSetLong in _CSTL:
_CSTL.MapLongSetLong_swigregister(MapLongSetLong)

class MapLongMapIntInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongMapIntInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapLongMapIntInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapLongMapIntInt___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,int > >::size_type":
        return _CSTL.MapLongMapIntInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,int > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,int > >::mapped_type const &":
        return _CSTL.MapLongMapIntInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,int > >::key_type const &") -> "void":
        return _CSTL.MapLongMapIntInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,int > >::key_type const &") -> "bool":
        return _CSTL.MapLongMapIntInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapLongMapIntInt_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapLongMapIntInt_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapLongMapIntInt_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,int > >::key_type const &") -> "bool":
        return _CSTL.MapLongMapIntInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongMapIntInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongMapIntInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapLongMapIntInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapLongMapIntInt_asdict(self)

    def __init__(self, *args):
        _CSTL.MapLongMapIntInt_swiginit(self, _CSTL.new_MapLongMapIntInt(*args))

    def empty(self) -> "bool":
        return _CSTL.MapLongMapIntInt_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,int > >::size_type":
        return _CSTL.MapLongMapIntInt_size(self)

    def swap(self, v: "MapLongMapIntInt") -> "void":
        return _CSTL.MapLongMapIntInt_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,int > >::iterator":
        return _CSTL.MapLongMapIntInt_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,int > >::iterator":
        return _CSTL.MapLongMapIntInt_end(self)

    def clear(self) -> "void":
        return _CSTL.MapLongMapIntInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,int > >::allocator_type":
        return _CSTL.MapLongMapIntInt_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,int > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,int > >::size_type":
        return _CSTL.MapLongMapIntInt_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapLongMapIntInt_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,int > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,int > >::iterator":
        return _CSTL.MapLongMapIntInt_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapLongMapIntInt

# Register MapLongMapIntInt in _CSTL:
_CSTL.MapLongMapIntInt_swigregister(MapLongMapIntInt)

class MapLongMapIntStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongMapIntStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapLongMapIntStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapLongMapIntStr___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::string > >::size_type":
        return _CSTL.MapLongMapIntStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::string > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::string > >::mapped_type const &":
        return _CSTL.MapLongMapIntStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::string > >::key_type const &") -> "void":
        return _CSTL.MapLongMapIntStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::string > >::key_type const &") -> "bool":
        return _CSTL.MapLongMapIntStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapLongMapIntStr_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapLongMapIntStr_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapLongMapIntStr_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::string > >::key_type const &") -> "bool":
        return _CSTL.MapLongMapIntStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongMapIntStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongMapIntStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapLongMapIntStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapLongMapIntStr_asdict(self)

    def __init__(self, *args):
        _CSTL.MapLongMapIntStr_swiginit(self, _CSTL.new_MapLongMapIntStr(*args))

    def empty(self) -> "bool":
        return _CSTL.MapLongMapIntStr_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::string > >::size_type":
        return _CSTL.MapLongMapIntStr_size(self)

    def swap(self, v: "MapLongMapIntStr") -> "void":
        return _CSTL.MapLongMapIntStr_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::string > >::iterator":
        return _CSTL.MapLongMapIntStr_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::string > >::iterator":
        return _CSTL.MapLongMapIntStr_end(self)

    def clear(self) -> "void":
        return _CSTL.MapLongMapIntStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::string > >::allocator_type":
        return _CSTL.MapLongMapIntStr_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,std::string > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::string > >::size_type":
        return _CSTL.MapLongMapIntStr_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapLongMapIntStr_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,std::string > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::string > >::iterator":
        return _CSTL.MapLongMapIntStr_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapLongMapIntStr

# Register MapLongMapIntStr in _CSTL:
_CSTL.MapLongMapIntStr_swigregister(MapLongMapIntStr)

class MapLongMapIntFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongMapIntFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapLongMapIntFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapLongMapIntFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,float > >::size_type":
        return _CSTL.MapLongMapIntFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,float > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,float > >::mapped_type const &":
        return _CSTL.MapLongMapIntFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,float > >::key_type const &") -> "void":
        return _CSTL.MapLongMapIntFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,float > >::key_type const &") -> "bool":
        return _CSTL.MapLongMapIntFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapLongMapIntFloat_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapLongMapIntFloat_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapLongMapIntFloat_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,float > >::key_type const &") -> "bool":
        return _CSTL.MapLongMapIntFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongMapIntFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongMapIntFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapLongMapIntFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapLongMapIntFloat_asdict(self)

    def __init__(self, *args):
        _CSTL.MapLongMapIntFloat_swiginit(self, _CSTL.new_MapLongMapIntFloat(*args))

    def empty(self) -> "bool":
        return _CSTL.MapLongMapIntFloat_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,float > >::size_type":
        return _CSTL.MapLongMapIntFloat_size(self)

    def swap(self, v: "MapLongMapIntFloat") -> "void":
        return _CSTL.MapLongMapIntFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,float > >::iterator":
        return _CSTL.MapLongMapIntFloat_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,float > >::iterator":
        return _CSTL.MapLongMapIntFloat_end(self)

    def clear(self) -> "void":
        return _CSTL.MapLongMapIntFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,float > >::allocator_type":
        return _CSTL.MapLongMapIntFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,float > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,float > >::size_type":
        return _CSTL.MapLongMapIntFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapLongMapIntFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,float > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,float > >::iterator":
        return _CSTL.MapLongMapIntFloat_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapLongMapIntFloat

# Register MapLongMapIntFloat in _CSTL:
_CSTL.MapLongMapIntFloat_swigregister(MapLongMapIntFloat)

class MapLongMapIntDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongMapIntDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapLongMapIntDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapLongMapIntDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,double > >::size_type":
        return _CSTL.MapLongMapIntDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,double > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,double > >::mapped_type const &":
        return _CSTL.MapLongMapIntDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,double > >::key_type const &") -> "void":
        return _CSTL.MapLongMapIntDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,double > >::key_type const &") -> "bool":
        return _CSTL.MapLongMapIntDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapLongMapIntDouble_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapLongMapIntDouble_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapLongMapIntDouble_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,double > >::key_type const &") -> "bool":
        return _CSTL.MapLongMapIntDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongMapIntDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongMapIntDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapLongMapIntDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapLongMapIntDouble_asdict(self)

    def __init__(self, *args):
        _CSTL.MapLongMapIntDouble_swiginit(self, _CSTL.new_MapLongMapIntDouble(*args))

    def empty(self) -> "bool":
        return _CSTL.MapLongMapIntDouble_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,double > >::size_type":
        return _CSTL.MapLongMapIntDouble_size(self)

    def swap(self, v: "MapLongMapIntDouble") -> "void":
        return _CSTL.MapLongMapIntDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,double > >::iterator":
        return _CSTL.MapLongMapIntDouble_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,double > >::iterator":
        return _CSTL.MapLongMapIntDouble_end(self)

    def clear(self) -> "void":
        return _CSTL.MapLongMapIntDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,double > >::allocator_type":
        return _CSTL.MapLongMapIntDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,double > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,double > >::size_type":
        return _CSTL.MapLongMapIntDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapLongMapIntDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,double > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,double > >::iterator":
        return _CSTL.MapLongMapIntDouble_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapLongMapIntDouble

# Register MapLongMapIntDouble in _CSTL:
_CSTL.MapLongMapIntDouble_swigregister(MapLongMapIntDouble)

class MapLongMapIntBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongMapIntBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapLongMapIntBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapLongMapIntBool___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,bool > >::size_type":
        return _CSTL.MapLongMapIntBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,bool > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,bool > >::mapped_type const &":
        return _CSTL.MapLongMapIntBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,bool > >::key_type const &") -> "void":
        return _CSTL.MapLongMapIntBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,bool > >::key_type const &") -> "bool":
        return _CSTL.MapLongMapIntBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapLongMapIntBool_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapLongMapIntBool_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapLongMapIntBool_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,bool > >::key_type const &") -> "bool":
        return _CSTL.MapLongMapIntBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongMapIntBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongMapIntBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapLongMapIntBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapLongMapIntBool_asdict(self)

    def __init__(self, *args):
        _CSTL.MapLongMapIntBool_swiginit(self, _CSTL.new_MapLongMapIntBool(*args))

    def empty(self) -> "bool":
        return _CSTL.MapLongMapIntBool_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,bool > >::size_type":
        return _CSTL.MapLongMapIntBool_size(self)

    def swap(self, v: "MapLongMapIntBool") -> "void":
        return _CSTL.MapLongMapIntBool_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,bool > >::iterator":
        return _CSTL.MapLongMapIntBool_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,bool > >::iterator":
        return _CSTL.MapLongMapIntBool_end(self)

    def clear(self) -> "void":
        return _CSTL.MapLongMapIntBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,bool > >::allocator_type":
        return _CSTL.MapLongMapIntBool_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,bool > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,bool > >::size_type":
        return _CSTL.MapLongMapIntBool_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapLongMapIntBool_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,bool > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,bool > >::iterator":
        return _CSTL.MapLongMapIntBool_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapLongMapIntBool

# Register MapLongMapIntBool in _CSTL:
_CSTL.MapLongMapIntBool_swigregister(MapLongMapIntBool)

class MapLongMapIntLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongMapIntLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapLongMapIntLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapLongMapIntLong___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > >::size_type":
        return _CSTL.MapLongMapIntLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > >::mapped_type const &":
        return _CSTL.MapLongMapIntLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > >::key_type const &") -> "void":
        return _CSTL.MapLongMapIntLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > >::key_type const &") -> "bool":
        return _CSTL.MapLongMapIntLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapLongMapIntLong_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapLongMapIntLong_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapLongMapIntLong_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > >::key_type const &") -> "bool":
        return _CSTL.MapLongMapIntLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongMapIntLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongMapIntLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapLongMapIntLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapLongMapIntLong_asdict(self)

    def __init__(self, *args):
        _CSTL.MapLongMapIntLong_swiginit(self, _CSTL.new_MapLongMapIntLong(*args))

    def empty(self) -> "bool":
        return _CSTL.MapLongMapIntLong_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > >::size_type":
        return _CSTL.MapLongMapIntLong_size(self)

    def swap(self, v: "MapLongMapIntLong") -> "void":
        return _CSTL.MapLongMapIntLong_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > >::iterator":
        return _CSTL.MapLongMapIntLong_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > >::iterator":
        return _CSTL.MapLongMapIntLong_end(self)

    def clear(self) -> "void":
        return _CSTL.MapLongMapIntLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > >::allocator_type":
        return _CSTL.MapLongMapIntLong_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > >::size_type":
        return _CSTL.MapLongMapIntLong_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapLongMapIntLong_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > >::iterator":
        return _CSTL.MapLongMapIntLong_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapLongMapIntLong

# Register MapLongMapIntLong in _CSTL:
_CSTL.MapLongMapIntLong_swigregister(MapLongMapIntLong)

class MapLongMapStrInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongMapStrInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapLongMapStrInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapLongMapStrInt___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,int > >::size_type":
        return _CSTL.MapLongMapStrInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,int > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,int > >::mapped_type const &":
        return _CSTL.MapLongMapStrInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,int > >::key_type const &") -> "void":
        return _CSTL.MapLongMapStrInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,int > >::key_type const &") -> "bool":
        return _CSTL.MapLongMapStrInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapLongMapStrInt_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapLongMapStrInt_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapLongMapStrInt_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,int > >::key_type const &") -> "bool":
        return _CSTL.MapLongMapStrInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongMapStrInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongMapStrInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapLongMapStrInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapLongMapStrInt_asdict(self)

    def __init__(self, *args):
        _CSTL.MapLongMapStrInt_swiginit(self, _CSTL.new_MapLongMapStrInt(*args))

    def empty(self) -> "bool":
        return _CSTL.MapLongMapStrInt_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,int > >::size_type":
        return _CSTL.MapLongMapStrInt_size(self)

    def swap(self, v: "MapLongMapStrInt") -> "void":
        return _CSTL.MapLongMapStrInt_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,int > >::iterator":
        return _CSTL.MapLongMapStrInt_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,int > >::iterator":
        return _CSTL.MapLongMapStrInt_end(self)

    def clear(self) -> "void":
        return _CSTL.MapLongMapStrInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,int > >::allocator_type":
        return _CSTL.MapLongMapStrInt_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,int > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,int > >::size_type":
        return _CSTL.MapLongMapStrInt_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapLongMapStrInt_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,int > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,int > >::iterator":
        return _CSTL.MapLongMapStrInt_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapLongMapStrInt

# Register MapLongMapStrInt in _CSTL:
_CSTL.MapLongMapStrInt_swigregister(MapLongMapStrInt)

class MapLongMapStrStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongMapStrStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapLongMapStrStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapLongMapStrStr___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > >::size_type":
        return _CSTL.MapLongMapStrStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > >::mapped_type const &":
        return _CSTL.MapLongMapStrStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > >::key_type const &") -> "void":
        return _CSTL.MapLongMapStrStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > >::key_type const &") -> "bool":
        return _CSTL.MapLongMapStrStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapLongMapStrStr_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapLongMapStrStr_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapLongMapStrStr_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > >::key_type const &") -> "bool":
        return _CSTL.MapLongMapStrStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongMapStrStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongMapStrStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapLongMapStrStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapLongMapStrStr_asdict(self)

    def __init__(self, *args):
        _CSTL.MapLongMapStrStr_swiginit(self, _CSTL.new_MapLongMapStrStr(*args))

    def empty(self) -> "bool":
        return _CSTL.MapLongMapStrStr_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > >::size_type":
        return _CSTL.MapLongMapStrStr_size(self)

    def swap(self, v: "MapLongMapStrStr") -> "void":
        return _CSTL.MapLongMapStrStr_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > >::iterator":
        return _CSTL.MapLongMapStrStr_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > >::iterator":
        return _CSTL.MapLongMapStrStr_end(self)

    def clear(self) -> "void":
        return _CSTL.MapLongMapStrStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > >::allocator_type":
        return _CSTL.MapLongMapStrStr_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > >::size_type":
        return _CSTL.MapLongMapStrStr_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapLongMapStrStr_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > >::iterator":
        return _CSTL.MapLongMapStrStr_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapLongMapStrStr

# Register MapLongMapStrStr in _CSTL:
_CSTL.MapLongMapStrStr_swigregister(MapLongMapStrStr)

class MapLongMapStrFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongMapStrFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapLongMapStrFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapLongMapStrFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,float > >::size_type":
        return _CSTL.MapLongMapStrFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,float > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,float > >::mapped_type const &":
        return _CSTL.MapLongMapStrFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,float > >::key_type const &") -> "void":
        return _CSTL.MapLongMapStrFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,float > >::key_type const &") -> "bool":
        return _CSTL.MapLongMapStrFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapLongMapStrFloat_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapLongMapStrFloat_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapLongMapStrFloat_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,float > >::key_type const &") -> "bool":
        return _CSTL.MapLongMapStrFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongMapStrFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongMapStrFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapLongMapStrFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapLongMapStrFloat_asdict(self)

    def __init__(self, *args):
        _CSTL.MapLongMapStrFloat_swiginit(self, _CSTL.new_MapLongMapStrFloat(*args))

    def empty(self) -> "bool":
        return _CSTL.MapLongMapStrFloat_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,float > >::size_type":
        return _CSTL.MapLongMapStrFloat_size(self)

    def swap(self, v: "MapLongMapStrFloat") -> "void":
        return _CSTL.MapLongMapStrFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,float > >::iterator":
        return _CSTL.MapLongMapStrFloat_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,float > >::iterator":
        return _CSTL.MapLongMapStrFloat_end(self)

    def clear(self) -> "void":
        return _CSTL.MapLongMapStrFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,float > >::allocator_type":
        return _CSTL.MapLongMapStrFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,float > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,float > >::size_type":
        return _CSTL.MapLongMapStrFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapLongMapStrFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,float > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,float > >::iterator":
        return _CSTL.MapLongMapStrFloat_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapLongMapStrFloat

# Register MapLongMapStrFloat in _CSTL:
_CSTL.MapLongMapStrFloat_swigregister(MapLongMapStrFloat)

class MapLongMapStrDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongMapStrDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapLongMapStrDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapLongMapStrDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,double > >::size_type":
        return _CSTL.MapLongMapStrDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,double > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,double > >::mapped_type const &":
        return _CSTL.MapLongMapStrDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,double > >::key_type const &") -> "void":
        return _CSTL.MapLongMapStrDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,double > >::key_type const &") -> "bool":
        return _CSTL.MapLongMapStrDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapLongMapStrDouble_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapLongMapStrDouble_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapLongMapStrDouble_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,double > >::key_type const &") -> "bool":
        return _CSTL.MapLongMapStrDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongMapStrDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongMapStrDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapLongMapStrDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapLongMapStrDouble_asdict(self)

    def __init__(self, *args):
        _CSTL.MapLongMapStrDouble_swiginit(self, _CSTL.new_MapLongMapStrDouble(*args))

    def empty(self) -> "bool":
        return _CSTL.MapLongMapStrDouble_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,double > >::size_type":
        return _CSTL.MapLongMapStrDouble_size(self)

    def swap(self, v: "MapLongMapStrDouble") -> "void":
        return _CSTL.MapLongMapStrDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,double > >::iterator":
        return _CSTL.MapLongMapStrDouble_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,double > >::iterator":
        return _CSTL.MapLongMapStrDouble_end(self)

    def clear(self) -> "void":
        return _CSTL.MapLongMapStrDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,double > >::allocator_type":
        return _CSTL.MapLongMapStrDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,double > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,double > >::size_type":
        return _CSTL.MapLongMapStrDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapLongMapStrDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,double > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,double > >::iterator":
        return _CSTL.MapLongMapStrDouble_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapLongMapStrDouble

# Register MapLongMapStrDouble in _CSTL:
_CSTL.MapLongMapStrDouble_swigregister(MapLongMapStrDouble)

class MapLongMapStrBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongMapStrBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapLongMapStrBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapLongMapStrBool___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > >::size_type":
        return _CSTL.MapLongMapStrBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > >::mapped_type const &":
        return _CSTL.MapLongMapStrBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > >::key_type const &") -> "void":
        return _CSTL.MapLongMapStrBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > >::key_type const &") -> "bool":
        return _CSTL.MapLongMapStrBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapLongMapStrBool_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapLongMapStrBool_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapLongMapStrBool_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > >::key_type const &") -> "bool":
        return _CSTL.MapLongMapStrBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongMapStrBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongMapStrBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapLongMapStrBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapLongMapStrBool_asdict(self)

    def __init__(self, *args):
        _CSTL.MapLongMapStrBool_swiginit(self, _CSTL.new_MapLongMapStrBool(*args))

    def empty(self) -> "bool":
        return _CSTL.MapLongMapStrBool_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > >::size_type":
        return _CSTL.MapLongMapStrBool_size(self)

    def swap(self, v: "MapLongMapStrBool") -> "void":
        return _CSTL.MapLongMapStrBool_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > >::iterator":
        return _CSTL.MapLongMapStrBool_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > >::iterator":
        return _CSTL.MapLongMapStrBool_end(self)

    def clear(self) -> "void":
        return _CSTL.MapLongMapStrBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > >::allocator_type":
        return _CSTL.MapLongMapStrBool_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > >::size_type":
        return _CSTL.MapLongMapStrBool_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapLongMapStrBool_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > >::iterator":
        return _CSTL.MapLongMapStrBool_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapLongMapStrBool

# Register MapLongMapStrBool in _CSTL:
_CSTL.MapLongMapStrBool_swigregister(MapLongMapStrBool)

class MapLongMapStrLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongMapStrLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapLongMapStrLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapLongMapStrLong___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > >::size_type":
        return _CSTL.MapLongMapStrLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > >::mapped_type const &":
        return _CSTL.MapLongMapStrLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > >::key_type const &") -> "void":
        return _CSTL.MapLongMapStrLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > >::key_type const &") -> "bool":
        return _CSTL.MapLongMapStrLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapLongMapStrLong_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapLongMapStrLong_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapLongMapStrLong_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > >::key_type const &") -> "bool":
        return _CSTL.MapLongMapStrLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongMapStrLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongMapStrLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapLongMapStrLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapLongMapStrLong_asdict(self)

    def __init__(self, *args):
        _CSTL.MapLongMapStrLong_swiginit(self, _CSTL.new_MapLongMapStrLong(*args))

    def empty(self) -> "bool":
        return _CSTL.MapLongMapStrLong_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > >::size_type":
        return _CSTL.MapLongMapStrLong_size(self)

    def swap(self, v: "MapLongMapStrLong") -> "void":
        return _CSTL.MapLongMapStrLong_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > >::iterator":
        return _CSTL.MapLongMapStrLong_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > >::iterator":
        return _CSTL.MapLongMapStrLong_end(self)

    def clear(self) -> "void":
        return _CSTL.MapLongMapStrLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > >::allocator_type":
        return _CSTL.MapLongMapStrLong_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > >::size_type":
        return _CSTL.MapLongMapStrLong_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapLongMapStrLong_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > >::iterator":
        return _CSTL.MapLongMapStrLong_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapLongMapStrLong

# Register MapLongMapStrLong in _CSTL:
_CSTL.MapLongMapStrLong_swigregister(MapLongMapStrLong)

class MapLongMapLongInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongMapLongInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapLongMapLongInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapLongMapLongInt___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > >::size_type":
        return _CSTL.MapLongMapLongInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > >::mapped_type const &":
        return _CSTL.MapLongMapLongInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > >::key_type const &") -> "void":
        return _CSTL.MapLongMapLongInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > >::key_type const &") -> "bool":
        return _CSTL.MapLongMapLongInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapLongMapLongInt_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapLongMapLongInt_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapLongMapLongInt_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > >::key_type const &") -> "bool":
        return _CSTL.MapLongMapLongInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongMapLongInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongMapLongInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapLongMapLongInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapLongMapLongInt_asdict(self)

    def __init__(self, *args):
        _CSTL.MapLongMapLongInt_swiginit(self, _CSTL.new_MapLongMapLongInt(*args))

    def empty(self) -> "bool":
        return _CSTL.MapLongMapLongInt_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > >::size_type":
        return _CSTL.MapLongMapLongInt_size(self)

    def swap(self, v: "MapLongMapLongInt") -> "void":
        return _CSTL.MapLongMapLongInt_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > >::iterator":
        return _CSTL.MapLongMapLongInt_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > >::iterator":
        return _CSTL.MapLongMapLongInt_end(self)

    def clear(self) -> "void":
        return _CSTL.MapLongMapLongInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > >::allocator_type":
        return _CSTL.MapLongMapLongInt_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > >::size_type":
        return _CSTL.MapLongMapLongInt_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapLongMapLongInt_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > >::iterator":
        return _CSTL.MapLongMapLongInt_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapLongMapLongInt

# Register MapLongMapLongInt in _CSTL:
_CSTL.MapLongMapLongInt_swigregister(MapLongMapLongInt)

class MapLongMapLongStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongMapLongStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapLongMapLongStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapLongMapLongStr___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > >::size_type":
        return _CSTL.MapLongMapLongStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > >::mapped_type const &":
        return _CSTL.MapLongMapLongStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > >::key_type const &") -> "void":
        return _CSTL.MapLongMapLongStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > >::key_type const &") -> "bool":
        return _CSTL.MapLongMapLongStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapLongMapLongStr_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapLongMapLongStr_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapLongMapLongStr_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > >::key_type const &") -> "bool":
        return _CSTL.MapLongMapLongStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongMapLongStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongMapLongStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapLongMapLongStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapLongMapLongStr_asdict(self)

    def __init__(self, *args):
        _CSTL.MapLongMapLongStr_swiginit(self, _CSTL.new_MapLongMapLongStr(*args))

    def empty(self) -> "bool":
        return _CSTL.MapLongMapLongStr_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > >::size_type":
        return _CSTL.MapLongMapLongStr_size(self)

    def swap(self, v: "MapLongMapLongStr") -> "void":
        return _CSTL.MapLongMapLongStr_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > >::iterator":
        return _CSTL.MapLongMapLongStr_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > >::iterator":
        return _CSTL.MapLongMapLongStr_end(self)

    def clear(self) -> "void":
        return _CSTL.MapLongMapLongStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > >::allocator_type":
        return _CSTL.MapLongMapLongStr_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > >::size_type":
        return _CSTL.MapLongMapLongStr_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapLongMapLongStr_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > >::iterator":
        return _CSTL.MapLongMapLongStr_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapLongMapLongStr

# Register MapLongMapLongStr in _CSTL:
_CSTL.MapLongMapLongStr_swigregister(MapLongMapLongStr)

class MapLongMapLongFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongMapLongFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapLongMapLongFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapLongMapLongFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > >::size_type":
        return _CSTL.MapLongMapLongFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > >::mapped_type const &":
        return _CSTL.MapLongMapLongFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > >::key_type const &") -> "void":
        return _CSTL.MapLongMapLongFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > >::key_type const &") -> "bool":
        return _CSTL.MapLongMapLongFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapLongMapLongFloat_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapLongMapLongFloat_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapLongMapLongFloat_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > >::key_type const &") -> "bool":
        return _CSTL.MapLongMapLongFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongMapLongFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongMapLongFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapLongMapLongFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapLongMapLongFloat_asdict(self)

    def __init__(self, *args):
        _CSTL.MapLongMapLongFloat_swiginit(self, _CSTL.new_MapLongMapLongFloat(*args))

    def empty(self) -> "bool":
        return _CSTL.MapLongMapLongFloat_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > >::size_type":
        return _CSTL.MapLongMapLongFloat_size(self)

    def swap(self, v: "MapLongMapLongFloat") -> "void":
        return _CSTL.MapLongMapLongFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > >::iterator":
        return _CSTL.MapLongMapLongFloat_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > >::iterator":
        return _CSTL.MapLongMapLongFloat_end(self)

    def clear(self) -> "void":
        return _CSTL.MapLongMapLongFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > >::allocator_type":
        return _CSTL.MapLongMapLongFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > >::size_type":
        return _CSTL.MapLongMapLongFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapLongMapLongFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > >::iterator":
        return _CSTL.MapLongMapLongFloat_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapLongMapLongFloat

# Register MapLongMapLongFloat in _CSTL:
_CSTL.MapLongMapLongFloat_swigregister(MapLongMapLongFloat)

class MapLongMapLongDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongMapLongDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapLongMapLongDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapLongMapLongDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > >::size_type":
        return _CSTL.MapLongMapLongDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > >::mapped_type const &":
        return _CSTL.MapLongMapLongDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > >::key_type const &") -> "void":
        return _CSTL.MapLongMapLongDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > >::key_type const &") -> "bool":
        return _CSTL.MapLongMapLongDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapLongMapLongDouble_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapLongMapLongDouble_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapLongMapLongDouble_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > >::key_type const &") -> "bool":
        return _CSTL.MapLongMapLongDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongMapLongDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongMapLongDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapLongMapLongDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapLongMapLongDouble_asdict(self)

    def __init__(self, *args):
        _CSTL.MapLongMapLongDouble_swiginit(self, _CSTL.new_MapLongMapLongDouble(*args))

    def empty(self) -> "bool":
        return _CSTL.MapLongMapLongDouble_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > >::size_type":
        return _CSTL.MapLongMapLongDouble_size(self)

    def swap(self, v: "MapLongMapLongDouble") -> "void":
        return _CSTL.MapLongMapLongDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > >::iterator":
        return _CSTL.MapLongMapLongDouble_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > >::iterator":
        return _CSTL.MapLongMapLongDouble_end(self)

    def clear(self) -> "void":
        return _CSTL.MapLongMapLongDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > >::allocator_type":
        return _CSTL.MapLongMapLongDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > >::size_type":
        return _CSTL.MapLongMapLongDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapLongMapLongDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > >::iterator":
        return _CSTL.MapLongMapLongDouble_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapLongMapLongDouble

# Register MapLongMapLongDouble in _CSTL:
_CSTL.MapLongMapLongDouble_swigregister(MapLongMapLongDouble)

class MapLongMapLongBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongMapLongBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapLongMapLongBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapLongMapLongBool___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > >::size_type":
        return _CSTL.MapLongMapLongBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > >::mapped_type const &":
        return _CSTL.MapLongMapLongBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > >::key_type const &") -> "void":
        return _CSTL.MapLongMapLongBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > >::key_type const &") -> "bool":
        return _CSTL.MapLongMapLongBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapLongMapLongBool_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapLongMapLongBool_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapLongMapLongBool_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > >::key_type const &") -> "bool":
        return _CSTL.MapLongMapLongBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongMapLongBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongMapLongBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapLongMapLongBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapLongMapLongBool_asdict(self)

    def __init__(self, *args):
        _CSTL.MapLongMapLongBool_swiginit(self, _CSTL.new_MapLongMapLongBool(*args))

    def empty(self) -> "bool":
        return _CSTL.MapLongMapLongBool_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > >::size_type":
        return _CSTL.MapLongMapLongBool_size(self)

    def swap(self, v: "MapLongMapLongBool") -> "void":
        return _CSTL.MapLongMapLongBool_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > >::iterator":
        return _CSTL.MapLongMapLongBool_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > >::iterator":
        return _CSTL.MapLongMapLongBool_end(self)

    def clear(self) -> "void":
        return _CSTL.MapLongMapLongBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > >::allocator_type":
        return _CSTL.MapLongMapLongBool_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > >::size_type":
        return _CSTL.MapLongMapLongBool_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapLongMapLongBool_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > >::iterator":
        return _CSTL.MapLongMapLongBool_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapLongMapLongBool

# Register MapLongMapLongBool in _CSTL:
_CSTL.MapLongMapLongBool_swigregister(MapLongMapLongBool)

class MapLongMapLongLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongMapLongLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CSTL.MapLongMapLongLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CSTL.MapLongMapLongLong___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > >::size_type":
        return _CSTL.MapLongMapLongLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > >::mapped_type const &":
        return _CSTL.MapLongMapLongLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > >::key_type const &") -> "void":
        return _CSTL.MapLongMapLongLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > >::key_type const &") -> "bool":
        return _CSTL.MapLongMapLongLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _CSTL.MapLongMapLongLong_keys(self)

    def values(self) -> "PyObject *":
        return _CSTL.MapLongMapLongLong_values(self)

    def items(self) -> "PyObject *":
        return _CSTL.MapLongMapLongLong_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > >::key_type const &") -> "bool":
        return _CSTL.MapLongMapLongLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongMapLongLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _CSTL.MapLongMapLongLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _CSTL.MapLongMapLongLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _CSTL.MapLongMapLongLong_asdict(self)

    def __init__(self, *args):
        _CSTL.MapLongMapLongLong_swiginit(self, _CSTL.new_MapLongMapLongLong(*args))

    def empty(self) -> "bool":
        return _CSTL.MapLongMapLongLong_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > >::size_type":
        return _CSTL.MapLongMapLongLong_size(self)

    def swap(self, v: "MapLongMapLongLong") -> "void":
        return _CSTL.MapLongMapLongLong_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > >::iterator":
        return _CSTL.MapLongMapLongLong_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > >::iterator":
        return _CSTL.MapLongMapLongLong_end(self)

    def clear(self) -> "void":
        return _CSTL.MapLongMapLongLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > >::allocator_type":
        return _CSTL.MapLongMapLongLong_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > >::size_type":
        return _CSTL.MapLongMapLongLong_count(self, x)

    def erase(self, *args) -> "void":
        return _CSTL.MapLongMapLongLong_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > >::iterator":
        return _CSTL.MapLongMapLongLong_find(self, x)
    __swig_destroy__ = _CSTL.delete_MapLongMapLongLong

# Register MapLongMapLongLong in _CSTL:
_CSTL.MapLongMapLongLong_swigregister(MapLongMapLongLong)



