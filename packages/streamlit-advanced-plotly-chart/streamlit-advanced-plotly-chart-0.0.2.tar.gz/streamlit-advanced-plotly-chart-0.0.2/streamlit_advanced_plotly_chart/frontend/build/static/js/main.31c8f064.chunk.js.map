{"version":3,"sources":["PlotlyPreserveZoomComponent.tsx","index.tsx"],"names":["withStreamlitConnection","props","_JSON$parse","JSON","parse","args","spec","data","layout","frames","config","override_height","override_width","click_event","select_event","hover_event","event","plotlyEventHandler","eventData","clickedPoints","points","forEach","arrayItem","push","x","y","curveNumber","pointNumber","pointIndex","range","state","xaxis","clickedPointsDict","selected_range","Streamlit","setComponentValue","_useState","useState","_useState2","_slicedToArray","setState","setFrameHeight","_jsx","Plot","onClick","onSelected","onHover","onInitialized","figure","onUpdate","console","log","style","width","height","onAfterPlot","ReactDOM","render","React","StrictMode","children","PlotlyPreserveZoomComponent","document","getElementById"],"mappings":"8NAoHeA,eA5GqB,SAACC,GAEnC,IAAAC,EAAyCC,KAAKC,MAAMH,EAAMI,KAAKC,MAAvDC,EAAIL,EAAJK,KAAMC,EAAMN,EAANM,OAAQC,EAAMP,EAANO,OAAQC,EAAMR,EAANQ,OACxBC,EAAkBV,EAAMI,KAAKM,gBAC7BC,EAAiBX,EAAMI,KAAKO,eAG9BC,GAAc,EACdC,GAAe,EACfC,GAAc,EAIlB,OADcd,EAAMI,KAAKW,OAEvB,IAAK,QACHH,GAAc,EACd,MACF,IAAK,SACHC,GAAe,EACf,MACF,IAAK,QACHC,GAAc,EAKlB,IAAME,EAAqB,SAACC,GAE1B,GAAkB,OAAdA,EAAJ,CAUA,IAAIC,EAA4B,GAChCD,EAAUE,OAAOC,SAAQ,SAAUC,GACjCH,EAAcI,KAAK,CACjBC,EAAGF,EAAUE,EACbC,EAAGH,EAAUG,EACbC,YAAaJ,EAAUI,YACvBC,YAAaL,EAAUK,YACvBC,WAAYN,EAAUM,YAE1B,IACA,IAAMC,EAAQC,EAAMtB,OAAOuB,MAAMF,MAE3BG,EAAoB,CACxBZ,OAAQD,EACRc,eAAgBJ,GAGlBK,IAAUC,kBAAkBH,EAnB5B,KARA,CACE,IACMA,EAAoB,CACxBZ,OAAQ,GACRa,eAHYH,EAAMtB,OAAOuB,MAAMF,OAKjCK,IAAUC,kBAAkBH,EAE9B,CAoBF,EAEAI,EAA0BC,mBAAS,CAAC9B,OAAMC,SAAQC,SAAQC,WAAQ4B,EAAAC,YAAAH,EAAA,GAA3DN,EAAKQ,EAAA,GAAEE,EAAQF,EAAA,GAItB,OAFAJ,IAAUO,eAAe9B,GAGvB+B,cAACC,IAAI,CACHpC,KAAMuB,EAAMvB,KACZC,OAAQsB,EAAMtB,OACdE,OAAQoB,EAAMpB,OACdD,OAAQqB,EAAMrB,OACdmC,QAAS/B,EAAcI,EAAqB,WAAW,EACvD4B,WAAY/B,EAAeG,EAAqB,WAAW,EAC3D6B,QAAS/B,EAAcE,EAAqB,WAAW,EACvD8B,cAAe,SACbC,GAEER,EACA,CACEjC,KAAMA,EACNC,OAAQA,EACRC,OAAQA,EACRC,OAAQA,IAGZO,EAAmB,KACnB,EAEFgC,SAAU,SACRD,GAEAE,QAAQC,IAAI,YACZD,QAAQC,IAAIrB,EAAMvB,MAClBiC,EACE,CACEjC,KAAMyC,EAAOzC,KACbC,OAAQwC,EAAOxC,OACfC,OAAQuC,EAAOvC,OACfC,OAAQsC,EAAOtC,QAGnB,EAEF0C,MAAO,CAACC,MAAOzC,EAAgB0C,OAAQ3C,GACvC4C,YAAa,WACXtC,EAAmB,KACrB,GAGN,IC9GAuC,IAASC,OACPf,cAACgB,IAAMC,WAAU,CAAAC,SACflB,cAACmB,EAA2B,MAE9BC,SAASC,eAAe,Q","file":"static/js/main.31c8f064.chunk.js","sourcesContent":["import {\n  Streamlit,\n  withStreamlitConnection,\n  ComponentProps,\n} from \"streamlit-component-lib\"\nimport Plot from 'react-plotly.js'\nimport { useState } from \"react\"\n\nconst PlotlyPreserveZoomComponent = (props: ComponentProps): any => {\n  // Pull Plotly object from args and parse\n  const { data, layout, frames, config } = JSON.parse(props.args.spec);\n  const override_height = props.args.override_height;\n  const override_width = props.args.override_width;\n\n  // Initialize events\n  let click_event = false;\n  let select_event = false;\n  let hover_event = false;\n\n  // Get Event and set according events to false/true with switch\n  const event = props.args.event;\n  switch (event) {\n    case \"click\":\n      click_event = true;\n      break;\n    case \"select\":\n      select_event = true;\n      break;\n    case \"hover\":\n      hover_event = true;\n      break;\n  }\n\n  /** Click handler for plot. */\n  const plotlyEventHandler = (eventData: any) => {\n    // If no event data, send only the current range to Streamlit\n    if (eventData === null) {\n      const range = state.layout.xaxis.range;\n      const clickedPointsDict = {\n        points: [],\n        selected_range: range\n      }\n      Streamlit.setComponentValue(clickedPointsDict);\n      return;\n    }\n    // Build array of points to return\n    var clickedPoints: Array<any> = [];\n    eventData.points.forEach(function (arrayItem: any) {\n      clickedPoints.push({\n        x: arrayItem.x,\n        y: arrayItem.y,\n        curveNumber: arrayItem.curveNumber,\n        pointNumber: arrayItem.pointNumber,\n        pointIndex: arrayItem.pointIndex\n      })\n    });\n    const range = state.layout.xaxis.range;\n    // build dict to return\n    const clickedPointsDict = {\n      points: clickedPoints,\n      selected_range: range\n    }\n    // Send event to Streamlit\n    Streamlit.setComponentValue(clickedPointsDict);\n  }\n  // Preserve zoom etc. state\n  const [state, setState] = useState({data, layout, frames, config});\n  \n  Streamlit.setFrameHeight(override_height);\n    \n  return (\n    <Plot\n      data={state.data}\n      layout={state.layout}\n      config={state.config}\n      frames={state.frames}\n      onClick={click_event ? plotlyEventHandler : function(){}}\n      onSelected={select_event ? plotlyEventHandler : function(){}}\n      onHover={hover_event ? plotlyEventHandler : function(){}}\n      onInitialized={(\n        figure: any,\n      ) => {\n          setState(\n          {\n            data: data,\n            layout: layout,\n            frames: frames,\n            config: config\n          }\n        )\n        plotlyEventHandler(null);\n        }\n      }\n      onUpdate={(\n        figure: any,\n      ) => {\n        console.log(\"onUpdate\")\n        console.log(state.data)\n        setState(\n          {\n            data: figure.data,\n            layout: figure.layout,\n            frames: figure.frames,\n            config: figure.config\n          }\n        )\n        }\n      }\n      style={{width: override_width, height: override_height}}\n      onAfterPlot={() => {\n        plotlyEventHandler(null);\n      }}\n    />\n  )\n}\n\nexport default withStreamlitConnection(PlotlyPreserveZoomComponent)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport PlotlyPreserveZoomComponent from \"./PlotlyPreserveZoomComponent\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <PlotlyPreserveZoomComponent />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}