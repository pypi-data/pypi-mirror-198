# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['charmonium', 'charmonium.freeze']

package_data = \
{'': ['*'],
 'charmonium.freeze': ['.mypy_cache/*',
                       '.mypy_cache/3.9/*',
                       '.mypy_cache/3.9/_typeshed/*',
                       '.mypy_cache/3.9/charmonium/freeze/*',
                       '.mypy_cache/3.9/collections/*',
                       '.mypy_cache/3.9/ctypes/*',
                       '.mypy_cache/3.9/email/*',
                       '.mypy_cache/3.9/importlib/*',
                       '.mypy_cache/3.9/importlib/metadata/*',
                       '.mypy_cache/3.9/json/*',
                       '.mypy_cache/3.9/logging/*',
                       '.mypy_cache/3.9/numpy/*',
                       '.mypy_cache/3.9/numpy/_typing/*',
                       '.mypy_cache/3.9/numpy/compat/*',
                       '.mypy_cache/3.9/numpy/core/*',
                       '.mypy_cache/3.9/numpy/fft/*',
                       '.mypy_cache/3.9/numpy/lib/*',
                       '.mypy_cache/3.9/numpy/linalg/*',
                       '.mypy_cache/3.9/numpy/ma/*',
                       '.mypy_cache/3.9/numpy/matrixlib/*',
                       '.mypy_cache/3.9/numpy/polynomial/*',
                       '.mypy_cache/3.9/numpy/random/*',
                       '.mypy_cache/3.9/numpy/testing/*',
                       '.mypy_cache/3.9/numpy/testing/_private/*',
                       '.mypy_cache/3.9/numpy/typing/*',
                       '.mypy_cache/3.9/os/*',
                       '.mypy_cache/3.9/unittest/*']}

setup_kwargs = {
    'name': 'charmonium-freeze',
    'version': '0.8.3',
    'description': 'Injectively, deterministically maps arbitrary objects to hashable values',
    'long_description': '==========================\ncharmonium.freeze\n==========================\n\n.. image:: https://img.shields.io/pypi/v/charmonium.freeze\n   :alt: PyPI Package\n   :target: https://pypi.org/project/charmonium.freeze\n.. image:: https://img.shields.io/pypi/dm/charmonium.freeze\n   :alt: PyPI Downloads\n   :target: https://pypi.org/project/charmonium.freeze\n.. image:: https://img.shields.io/pypi/l/charmonium.freeze\n   :alt: License\n   :target: https://github.com/charmoniumQ/charmonium.freeze/blob/main/LICENSE\n.. image:: https://img.shields.io/pypi/pyversions/charmonium.freeze\n   :alt: Python Versions\n   :target: https://pypi.org/project/charmonium.freeze\n.. image:: https://img.shields.io/librariesio/sourcerank/pypi/charmonium.freeze\n   :alt: libraries.io sourcerank\n   :target: https://libraries.io/pypi/charmonium.freeze\n.. image:: https://img.shields.io/github/stars/charmoniumQ/charmonium.freeze?style=social\n   :alt: GitHub stars\n   :target: https://github.com/charmoniumQ/charmonium.freeze\n.. image:: https://github.com/charmoniumQ/charmonium.freeze/actions/workflows/main.yaml/badge.svg\n   :alt: CI status\n   :target: https://github.com/charmoniumQ/charmonium.freeze/actions/workflows/main.yaml\n.. image:: https://codecov.io/gh/charmoniumQ/charmonium.freeze/branch/main/graph/badge.svg?token=56A97FFTGZ\n   :alt: Code Coverage\n   :target: https://codecov.io/gh/charmoniumQ/charmonium.freeze\n.. image:: https://img.shields.io/github/last-commit/charmoniumQ/charmonium.cache\n   :alt: GitHub last commit\n   :target: https://github.com/charmoniumQ/charmonium.freeze/commits\n.. image:: http://www.mypy-lang.org/static/mypy_badge.svg\n   :target: https://mypy.readthedocs.io/en/stable/\n   :alt: Checked with Mypy\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n   :target: https://github.com/psf/black\n   :alt: Code style: black\n\nInjectively, deterministically maps arbitrary objects to hashable, immutable values\n\n\n----------\nQuickstart\n----------\n\nIf you don\'t have ``pip`` installed, see the `pip install guide`_.\n\n.. _`pip install guide`: https://pip.pypa.io/en/latest/installing/\n\n.. code-block:: console\n\n    $ pip install charmonium.freeze\n\nFor a related project, |charmonium.cache|_, I needed a function that\ndeterministically, injectively maps objects to hashable objects.\n\n- "Injectively" means ``freeze(a) == freeze(b)`` implies ``a == b``\n  (with the precondition that ``a`` and ``b`` are of the same type).\n\n- "Deterministically" means it should return the same value **across\n  subsequent process invocations** (with the same interpreter major\n  and minor version), unlike Python\'s |hash|_ function, which is not\n  deterministic between processes.\n\n- "Hashable" means one can call ``hash(...)`` on it. All hashable\n  values are immutable.\n\n.. |hash| replace:: ``hash``\n.. _`hash`: https://docs.python.org/3.8/reference/datamodel.html#object.__hash__\n.. |charmonium.cache| replace:: ``charmonium.cache``\n.. _`charmonium.cache`: https://github.com/charmoniumQ/charmonium.cache\n\nHave you ever felt like you wanted to "freeze" a list of arbitrary\ndata into a hashable value? Now you can.\n\n>>> obj = [1, 2, 3, {4, 5, 6}, object()]\n>>> hash(obj)\nTraceback (most recent call last):\n  File "<stdin>", line 1, in <module>\nTypeError: unhashable type: \'list\'\n\n>>> from charmonium.freeze import freeze\n>>> freeze(obj)\n9561766455304166758\n\n-------------\nConfiguration\n-------------\n\nBy changing the configuration, we can see the exact data that gets hashed.\n\nWe can change the configuration in a few ways:\n\n- Object-oriented (preferred)\n\n  >>> from charmonium.freeze import Config\n  >>> freeze(obj, Config(use_hash=False))\n  (1, 2, 3, frozenset({4, 5, 6}), (((\'builtins\', \'object\'),), b\'copyreg.__newobj__\'))\n\n- Global variable, but in this case, we must also clear the cache when we mutate\n  the config.\n\n  >>> from charmonium.freeze import global_config\n  >>> global_config.use_hash = False\n  >>> global_config.memo.clear()\n  >>> freeze(obj)\n  (1, 2, 3, frozenset({4, 5, 6}), (((\'builtins\', \'object\'),), b\'copyreg.__newobj__\'))\n\n``use_hash=True`` will be faster and produce less data, but I will demonstrate\nit with ``use_hash=False`` so you can see what data gets included in the state.\n\nSee the source code ``charmonium/freeze/config.py`` for other configuration\noptions.\n\n------------------\nFreezing Functions\n------------------\n\n``freeze`` on functions returns their bytecode, constants, and closure-vars. The\nremarkable thing is that this is true across subsequent invocations of the same\nprocess. If the user edits the script and changes the function, then it\'s\n``freeze`` will change too. This tells you if it is safe to use the cached value\nof the function.\n\n  ::\n\n    (freeze(f) == freeze(g)) implies (for all x, f(x) == g(x))\n\n>>> from pprint import pprint\n>>> i = 456\n>>> func = lambda x: x + i + 123\n>>> pprint(freeze(func))\n((\'<lambda>\', None, 123, b\'|\\x00t\\x00\\x17\\x00d\\x01\\x17\\x00S\\x00\'),\n ((\'i\', 456),))\n\nAs promised, the frozen value includes the bytecode (``b\'|x00t...``), the\nconstants (123), and the closure variables (456). When we change ``i``, we get a\ndifferent frozen value, indicating that the ``func`` might not be\ncomputationally equivalent to what it was before.\n\n>>> i = 789\n>>> pprint(freeze(func))\n((\'<lambda>\', None, 123, b\'|\\x00t\\x00\\x17\\x00d\\x01\\x17\\x00S\\x00\'),\n ((\'i\', 789),))\n\n``freeze`` works for objects that use function as data.\n\n>>> import functools\n>>> pprint(freeze(functools.partial(print, 123)))\n((\'print\',),\n (\'print\', (123,), (), None),\n (frozenset({\'partial\',\n             (...,\n              (\'args\', (b\'member_descriptor\', b\'args\')),\n              (\'func\', (b\'member_descriptor\', b\'func\')),\n              (\'keywords\', (b\'member_descriptor\', b\'keywords\')))}),\n  (\'builtins\', \'object\')))\n\n``freeze`` works for methods.\n\n>>> class Greeter:\n...     def __init__(self, greeting):\n...         self.greeting = greeting\n...     def greet(self, name):\n...         print(self.greeting + " " + name)\n... \n>>> pprint(freeze(Greeter.greet))\n((\'greet\',\n  None,\n  \' \',\n  b\'t\\x00|\\x00j\\x01d\\x01\\x17\\x00|\\x01\\x17\\x00\\x83\\x01\\x01\\x00d\\x00S\\x00\'),)\n\n----------------\nFreezing Objects\n----------------\n\n``freeze`` works on objects by freezing their state and freezing their\nmethods. The state is found by the `pickle protocol`_, which the Python language\nimplements by default for all classes. To get an idea of what this returns, call\n``obj.__reduce_ex__(4)``. Because we reuse an existing protocol, ``freeze`` work\ncorrectly on most user-defined types.\n\n.. _`pickle protocol`: https://docs.python.org/3/library/pickle.html#pickling-class-instances\n\n>>> s = Greeter("hello")\n>>> pprint(s.__reduce_ex__(4))\n(<function __newobj__ at 0x...>,\n (<class \'__main__.Greeter\'>,),\n {\'greeting\': \'hello\'},\n None,\n None)\n>>> pprint(freeze(s))\n(((frozenset({\'Greeter\',\n              ((\'__init__\',\n                ((\'__init__\', None, b\'|\\x01|\\x00_\\x00d\\x00S\\x00\'),)),\n               (\'greet\',\n                ((\'greet\',\n                  None,\n                  \' \',\n                  b\'t\\x00|\\x00j\\x01d\\x01\\x17\\x00|\\x01\\x17\\x00\\x83\\x01\'\n                  b\'\\x01\\x00d\\x00S\\x00\'),)))}),\n   (\'builtins\', \'object\')),),\n ((\'greeting\', \'hello\'),),\n b\'copyreg.__newobj__\')\n\nHowever, there can still be special cases: ``pickle`` may incorporate\nnon-deterministic values. In this case, there are three remedies:\n\n- If you can tweak the definition of the class, add a method called\n  ``__getfrozenstate__`` which returns a deterministic snapshot of the\n  state. This takes precedence over the Pickle protocol, if it is defined.\n\n  >>> class Greeter:\n  ...     def __init__(self, greeting):\n  ...         self.greeting = greeting\n  ...     def greet(self, name):\n  ...         print(self.greeting + " " + name)\n  ...     def __getfrozenstate__(self):\n  ...         return self.greeting\n  ... \n  >>> pprint(freeze(Greeter("hello")))\n  ((frozenset({\'Greeter\',\n               ((\'__getfrozenstate__\',\n                 ((\'__getfrozenstate__\', None, b\'|\\x00j\\x00S\\x00\'),)),\n                (\'__init__\', ((\'__init__\', None, b\'|\\x01|\\x00_\\x00d\\x00S\\x00\'),)),\n                (\'greet\',\n                 ((\'greet\',\n                   None,\n                   \' \',\n                   b\'t\\x00|\\x00j\\x01d\\x01\\x17\\x00|\\x01\\x17\\x00\\x83\\x01\'\n                   b\'\\x01\\x00d\\x00S\\x00\'),)))}),\n    (\'builtins\', \'object\')),\n   \'hello\')\n\n- Otherwise, you can ignore certain attributes by changing the\n  configuration. See the source code of ``charmonium/freeze/config.py`` for more\n  details.\n\n  >>> class Greeter:\n  ...     def __init__(self, greeting):\n  ...         self.greeting = greeting\n  ...     def greet(self, name):\n  ...         print(self.greeting + " " + name)\n  ... \n  >>> config = Config(use_hash=False)\n  >>> config.ignore_attributes.add(("__main__", "Greeter", "greeting"))\n  >>> pprint(freeze(Greeter("hello"), config))\n  (((frozenset({\'Greeter\',\n                ((\'__init__\',\n                  ((\'__init__\', None, b\'|\\x01|\\x00_\\x00d\\x00S\\x00\'),)),\n                 (\'greet\',\n                  ((\'greet\',\n                    None,\n                    \' \',\n                    b\'t\\x00|\\x00j\\x01d\\x01\\x17\\x00|\\x01\\x17\\x00\\x83\\x01\'\n                    b\'\\x01\\x00d\\x00S\\x00\'),)))}),\n     (\'builtins\', \'object\')),),\n   (),\n   b\'copyreg.__newobj__\')\n\n  Note that ``\'hello\'`` is not present in the frozen object any more.\n\n- If you cannot tweak the definition of the class or monkeypatch a\n  ``__getfrozenstate__`` method, you can still register `single dispatch\n  handler`_ for that type:\n\n  .. _`single dispatch handler`: https://docs.python.org/3/library/functools.html#functools.singledispatch\n\n  >>> from typing import Hashable, Optional, Dict, Tuple\n  >>> from charmonium.freeze import _freeze_dispatch, _freeze\n  >>> @_freeze_dispatch.register(Greeter)\n  ... def _(\n  ...         obj: Greeter,\n  ...         config: Config,\n  ...         tabu: Dict[int, Tuple[int, int]],\n  ...         level: int,\n  ...         index: int,\n  ...     ) -> Tuple[Hashable, bool, Optional[int]]:\n  ...     # Type annotations are optional.\n  ...     # I have included them here for clarity.\n  ... \n  ...     # `tabu` is for object cycle detection. It is handled for you.\n  ...     # `level` is for logging and recursion limits. It is incremented for you.\n  ...     # `index` is the "birth order" of the children.\n  ...     frozen_greeting = _freeze(obj.greeting, config, tabu, level, 0)\n  ... \n  ...     return (\n  ...         frozen_greeting[0],\n  ...         # Remember that _freeze returns a triple;\n  ...         # we are only interested in the first element here.\n  ... \n  ...         False,\n  ...         # Whether the obj is immutable\n  ...         # If the obj is immutable, it\'s frozen value need not be recomputed every time.\n  ...         # This is handled for you.\n  ... \n  ...         None,\n  ...         # The depth of references contained here or None\n  ...         # Currently, this doesn\'t do anything.\n  ...     )\n  ... \n  >>> freeze(Greeter("Hello"))\n  \'Hello\'\n\n----------------\nDictionary order\n----------------\n\nAs of Python 3.7, dictionaries "remember" their insertion order. As such,\n\n>>> freeze({"a": 1, "b": 2})\n((\'a\', 1), (\'b\', 2))\n>>> freeze({"b": 2, "a": 1})\n((\'b\', 2), (\'a\', 1))\n\nThis behavior is controllable by ``Config.ignore_dict_order``, which emits a ``frozenset`` of pairs.\n\n>>> config = Config(ignore_dict_order=True)\n>>> freeze({"b": 2, "a": 1}, config) == freeze({"a": 1, "b": 2}, config)\nTrue\n\n--------------\nSummarize diff\n--------------\n\nThis enables a pretty neat utility to compare two arbitrary Python objects.\n\n>>> from charmonium.freeze import summarize_diffs\n>>> obj0 = [0, 1, 2, {3, 4}, {"a": 5, "b": 6, "c": 7}, 8]\n>>> obj1 = [0, 8, 2, {3, 5}, {"a": 5, "b": 7, "d": 8}]\n>>> print(summarize_diffs(obj0, obj1))\nlet obj0_sub = obj0\nlet obj1_sub = obj1\nobj0_sub.__len__() == 6\nobj1_sub.__len__() == 5\nobj0_sub[1] == 1\nobj1_sub[1] == 8\nobj0_sub[3].has() == 4\nobj1_sub[3].has() == no such element\nobj0_sub[3].has() == no such element\nobj1_sub[3].has() == 5\nobj0_sub[4].keys().has() == c\nobj1_sub[4].keys().has() == no such element\nobj0_sub[4].keys().has() == no such element\nobj1_sub[4].keys().has() == d\nobj0_sub[4][\'b\'] == 6\nobj1_sub[4][\'b\'] == 7\n\nAnd if you don\'t like my printing style, you can get a programatic\naccess to this information.\n\n>>> from charmonium.freeze import iterate_diffs\n>>> for o1, o2 in iterate_diffs(obj0, obj1):\n...    print(o1, o2, sep="\\n")\nObjectLocation(labels=(\'obj0\', \'.__len__()\'), objects=(..., 6))\nObjectLocation(labels=(\'obj1\', \'.__len__()\'), objects=(..., 5))\nObjectLocation(labels=(\'obj0\', \'[1]\'), objects=(..., 1))\nObjectLocation(labels=(\'obj1\', \'[1]\'), objects=(..., 8))\nObjectLocation(labels=(\'obj0\', \'[3]\', \'.has()\'), objects=(...), 4))\nObjectLocation(labels=(\'obj1\', \'[3]\', \'.has()\'), objects=(..., \'no such element\'))\nObjectLocation(labels=(\'obj0\', \'[3]\', \'.has()\'), objects=(...), \'no such element\'))\nObjectLocation(labels=(\'obj1\', \'[3]\', \'.has()\'), objects=(..., 5))\nObjectLocation(labels=(\'obj0\', \'[4]\', \'.keys()\', \'.has()\'), objects=(..., \'c\'))\nObjectLocation(labels=(\'obj1\', \'[4]\', \'.keys()\', \'.has()\'), objects=(..., \'no such element\'))\nObjectLocation(labels=(\'obj0\', \'[4]\', \'.keys()\', \'.has()\'), objects=(..., \'no such element\'))\nObjectLocation(labels=(\'obj1\', \'[4]\', \'.keys()\', \'.has()\'), objects=(..., \'d\'))\nObjectLocation(labels=(\'obj0\', \'[4]\', "[\'b\']"), objects=(..., 6))\nObjectLocation(labels=(\'obj1\', \'[4]\', "[\'b\']"), objects=(..., 7))\n\n\n---------\nDebugging\n---------\n\nUse the following lines to see how ``freeze`` decomposes an object into\nprimitive values.\n\n.. code:: python\n\n    import logging, os\n    logger = logging.getLogger("charmonium.freeze")\n    logger.setLevel(logging.DEBUG)\n    fh = logging.FileHandler("freeze.log")\n    fh.setLevel(logging.DEBUG)\n    fh.setFormatter(logging.Formatter("%(message)s"))\n    logger.addHandler(fh)\n    logger.debug("Program %d", os.getpid())\n\n    i = 0\n    def square_plus_i(x):\n        # Value of global variable will be included in the function\'s frozen state.\n        return x**2 + i\n\n    from charmonium.freeze import freeze\n    freeze(square_plus_i)\n\n\nThis produces a log such as in ``freeze.log``:\n\n::\n\n    freeze begin <function square_plus_i at 0x7f9228bff550>\n     function <function square_plus_i at 0x7f9228bff550>\n      tuple ((\'code\', <code object square_plus_i at 0x7f9228c6cf50, file "/tmp/ipython_edit_303agyiz/ipython_edit_rez33yf_.py", line 2>), \'closure globals\', {\'i\': 0})\n       tuple (\'code\', <code object square_plus_i at 0x7f9228c6cf50, file "/tmp/ipython_edit_303agyiz/ipython_edit_rez33yf_.py", line 2>)\n        \'code\'\n        code <code object square_plus_i at 0x7f9228c6cf50, file "/tmp/ipython_edit_303agyiz/ipython_edit_rez33yf_.py", line 2>\n         tuple (None, 2)\n          None\n          2\n         b\'|\\x00d\\x01\\x13\\x00t\\x00\\x17\\x00S\\x00\'\n       \'closure globals\'\n       dict {\'i\': 0}\n        \'i\'\n        0\n    freeze end\n\nI do this to find the differences between subsequent runs:\n\n.. code:: shell\n\n    $ python code.py\n    $ mv freeze.log freeze.0.log\n\n    $ python code.py\n    $ mv freeze.log freeze.1.log\n\n    $ sed -i \'s/at 0x[0-9a-f]*//g\' freeze.*.log\n    # This removes pointer values that appear in the `repr(...)`.\n\n    $ meld freeze.0.log freeze.1.log\n    # Alternatively, use `icdiff` or `diff -u1`.\n\nIf ``freeze(obj)`` is taking a long time, try adding ``freeze(obj,\nConfig(recursion_limit=20))``. This causes an exception if ``freeze`` recurses\nmore than a certain number of times. If you hit this exception, consider adding\nignored class, functions, attributes, or objects in ``Config``.\n\n----------\nDeveloping\n----------\n\nSee `CONTRIBUTING.md`_ for instructions on setting up a development environment.\n\n.. _`CONTRIBUTING.md`: https://github.com/charmoniumQ/charmonium.freeze/tree/main/CONTRIBUTING.md\n\n\n----\nTODO\n----\n\n- ☐ Correctness\n\n  - ☑ Test hashing sets with different orders. Assert tests fail.\n  - ☑ Test hashing dicts with different orders. Assert tests fail.\n  - ☑ Don\'t include properties in hash.\n  - ☑ Test that freeze of an object includes freeze of its instance methods.\n  - ☑ Test functions with minor changes.\n  - ☑ Test set/dict with diff hash.\n  - ☑ Test obj with slots.\n  - ☑ Test hash for objects and classes more carefully.\n  - ☑ Improve test coverage.\n  - ☑ Investigate when modules are assumed constant.\n  - ☐ Detect if a module/package has a version. If present, use that. Else, use each attribute.\n  - ☐ Support closures which include ``import x`` and ``from x import y``\n\n- ☑ API\n\n  - ☑ Use user-customizable multidispatch.\n  - ☑ Bring hash into separate package.\n  - ☑ Make it easier to register a freeze method for a type.\n  - ☑ Encapsulate global config into object.\n  - ☑ Make freeze object-oriented with a module-level instance, like ``random.random`` and ``random.Random``.\n    - This makes it easier for different callers to have their own configuration options.\n  - ☑ Add an option which returns a single 128-bit int instead of a structured object after a certain depth. This is what ``charmonium.determ_hash`` does. Use this configuration in ``charmonium.cache``.\n  - ☐ Move "get call graph" into its own package.\n  - ☐ Document configuration options.\n  - ☑ Document ``summarize_diff`` and ``iterate_diffs``.\n  - ☐ Have an API for ignoring modules in ``requirements.txt`` or ``pyproject.toml``, and just tracking them by version.\n  - ☑ Config object should cascade with ``with config.set(a=b)``\n\n- ☑ Make ``freeze`` handle more types:\n\n  - ☑ Module: freeze by name.\n  - ☑ Objects: include the source-code of methods.\n  - ☑ C extensions. freeze by name, like module\n  - ☑ Methods\n  - ☑ fastpath for numpy arrays\n  - ☑ ``tqdm``\n  - ☑ ``numpy.int64(1234)``\n  - ☑ Pandas dataframe\n  - ☑ Catch Pickle TypeError\n  - ☑ Catch Pickle ImportError\n\n- ☐ Performance\n\n  - ☑ Memoize the hash of immutable data:\n    - If function contains no locals or globals except other immutables, it is immutable.\n    - If a collection is immutable and contains only immutables, it is immutable.\n  - ☑ Make performance benchmarks.\n',
    'author': 'Samuel Grayson',
    'author_email': 'sam+dev@samgrayson.me',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'https://github.com/charmoniumQ/charmonium.freeze',
    'packages': packages,
    'package_data': package_data,
    'python_requires': '>=3.8,<4.0',
}


setup(**setup_kwargs)
